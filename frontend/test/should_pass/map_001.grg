using map_model_001;

rule addToMap {
	a:A;
	
	modify {
		eval {
			a.niceMap = a.niceMap.put(5, "yeah");
		}
	}
}

rule containedInMap {
	a:A;
	
	if { 5 in a.niceMap; }

	modify {
		eval {
			a.val = (6 in a.niceMap) ? 2489 : -23488;
		}
	}
}

rule copyMap {
	a:A;
	
	modify {
		b:A;
		eval {
			b.niceMap = b.niceMap.put(0, a.niceMap[0]);
		}
	}
}

rule mapIndexedMap {
	a:A;
	if { a.shiceMap[a.spiceMap["blubb"]] != null; }
	
	modify {
		b:A;
		eval {
			a.spiceMap = a.spiceMap.put(b.niceMap[0], 3.141f);
		}
	}
}

rule removeFromMap {
	a:A;
	
	modify {
		eval {
			a.niceMap = a.niceMap.remove(0);
		}
	}
}

rule emitFromMap {
	a:A;
	if { 5 in a.niceMap; }
	
	modify {
		emit("entry for \"5\" = " + a.niceMap[5] + ", mapsize = " + a.niceMap.size());
	}
}

rule mapVarContains(var m:map<string, int>) {
	if { "yeah" in m; }
	
	modify {
		emit("entry for \"yeah\" = " + m["yeah"] + ", mapsize = " + m.size());
	}
}

// This clones the maps
rule assignMapToMap {
	a:A -e:E-> a; 
		
	modify {
		eval {
			a.niceMap = e.niceMap;
			e.spiceMap = a.spiceMap;
			e.niceMap = a.niceMap;
		}
	}
}

rule useEnumMap {
	a:A -e:E-> a;

	if { "another c" in e.enumMap2
		&& e.enumMap2["another c"] in a.enumMap
		&& a.enumMap[e.enumMap2["another c"]].replace(0, 3, "another") in e.enumMap2; }
	
	modify {
		eval {
			e.enumMap2 = e.enumMap2.put(a.enumMap[e.enumMap2["another c"]].replace(0, 3, "another"), et::a);
		}
	}
}

test anonymousMap {
	a:A -e:E-> a;
	
	if { a.val in map<int,string>{ 1->"foo", 3->"bar", 5->"blubb", 7->"f***", 11->"that", 13->"stupid", 17->"shit" }; }
	if { map<string,string>{ "a"->"b", "b"->"c", "c"->"a" }["a"]=="b"; }
}

/*rule emitFromAnonymousMap {
	a:A;
	if { 5 in map<int,string>{5->"foo"}; }
	
	modify {
		emit("entry for \"5\" = " + map<int,string>{5->"foo"}[5] + ", mapsize = " + map<int,string>{5->"foo"}.size());
	}
}*/
