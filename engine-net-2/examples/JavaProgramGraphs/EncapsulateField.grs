#solution to encapsulate field of RefactoringCase "the scruffy challenge" of Grabats

include InstanceGraph.grs
include InstanceGraphLayout.grs

redirect emit program.txt
visID = allocvisitflag
# HACK: The visID variable should be given to the emitSpanningTree rule, but subpatterns don't support value variables yet
#       so use constant 0 inside the rules, correct as the first allocated visited flag is always 0
xgrs emitSpanningTree
freevisitflag visID

xgrs InsertHelperEdgesForNestedLayout

debug enable

#encapsulate field - create getters/setters for variable in class, use it only with getters/setters
# option: replace getters/setters in class itself - yes/no

#ask for class and variable to refactor
#debug apply (c,v)=getClassAndVariable(?,?)
#or use this one / set them in shell
c = I176 # class Node
v = I350 # variable _name
getterName = "getName"
setterName = "setName"

xgrs (isStatic) = variableInClass(c, v) \
	&& (!((getter) = methodExists(c, getterName)) || sameStaticness(v, getter)) \
	&& (!((setter) = methodExists(c, setterName)) || sameStaticness(v, setter)) \
	&& ((getter) = methodExists(c, getterName) || (getter) = insertMethodGetter(c, v, getterName, isStatic)) \
	&& ((setter) = methodExists(c, setterName) || (setter) = insertMethodSetter(c, v, setterName, isStatic)) \
	&& changeVisibility(v) \
	&& adaptAccess(c, v, getter)* \
	&& adaptUpdate(c, v, setter)*

redirect emit programafter.txt
visID = allocvisitflag
# HACK: The visID variable should be given to the emitSpanningTree rule, but subpatterns don't support value variables yet
#       so use constant 0 inside the rules, correct as the first allocated visited flag is always 0
xgrs emitSpanningTree
freevisitflag visID

