// dumps java program graph into pseudo code 
// by matching spanning tree in program graph and emitting from it

rule emitSpanningTree
{	
	iterated {
		p:Package;

		negative {
			<-:belongsTo- p; 
		}

		mpc:MultipleContainedPackagesOrClasses(p);
	
		modify {
			emitpre("package ", p.name, "\n{\n");
			mpc();
			emitpost("}\n");	
		}
	}
	
	modify {
		emitpre("// java program ", nameof(), "\n");
	}
}

pattern MultipleContainedPackagesOrClasses(p:Package)
{
	iterated {
		p <-:belongsTo- sub:Package;
		mpc:MultipleContainedPackagesOrClasses(sub);	
		
		modify {
			emitpre("package ", sub.name, "\n{\n");
			mpc();
			emitpost("}\n");
		}
	}
	
	iterated {
		p <-:belongsTo- c:Class;
		mm:MultipleMethodBodies(c);
		mv:MultipleVariables(c);
		
		modify {
			emitpre("class ", c.name, " {\n");
			mm();
			mv();
			emitpost("}\n");
		}
	}
	
	modify {}
}

pattern MultipleVariables(c:Class)
{
	iterated {
		c <-:belongsTo- v:Variable;

		modify {
			emitpre("var ", v.name, ";\n");
		}			
	}
	
	modify {}
}

pattern MultipleMethodBodies(c:Class)
{
	iterated {
		c <-:belongsTo- mb:MethodBody;
		
		bi:MethodBodyAndImplementation(mb);

		modify {
			emitpre("method body");
			bi();
			emitpost(";\n");
		}
	}
	
	modify {}
}

pattern MethodBodyAndImplementation(mb:MethodBody)
{
	optional { 	// operation can get matched only once, and it might happen that it was already matched
		mb <-:binding- op:Operation;
		:MultipleParameters(op);
		
		modify { 
			// maybe emit parameters
		}
	}
	
	optional {
		mb <-:belongsTo- b:Block;
		me:MultipleExpressions(b);
		
		modify {
			emitpre(" {");
			me();
			emitpost("}");
		}
	}
	
	modify {
	}
}

pattern MultipleParameters(op:Operation)
{
	iterated {
		op -:parameter-> :Parameter;
		
		modify {}
	}
	
	modify {}
}

pattern MultipleExpressions(b:Block)
{
	iterated {
		b -:expression-> next:Expression\Call;
		ec:ExpressionChain(next);	
		
		modify {
			emitpre("exp");
			ec();
			emitpost(" ");
		}
	}

	iterated {
		b -:expression-> call:Call;
		ec:ExpressionChain(call);
		:MultipleActualParameters(call);
		
		modify {
			emitpre("call");
			ec();
			emitpost(" ");
		}
	}
	
	modify {}
}

pattern ExpressionChain(e:Expression)
{
	alternative {
		ExprAndAgain {
			e -:expression-> next:Expression\Call;
			ec:ExpressionChain(next);	
			
			modify {
				emitpre("--exp");
				ec();
			}
		}
		CallAndAgain {
			e -:expression-> call:Call;
			ec:ExpressionChain(call);
			:MultipleActualParameters(call);
			
			modify {
				emitpre("--call");
				ec();
			}
		}
		End {
			negative {
				e -:expression->;
			}
			
			modify {
				emit(";");
			}
		}
	}
	
	modify {}
}

pattern MultipleActualParameters(c:Call)
{
	iterated {
		c -:actualParameter-> next:Expression\Call;
		:ExpressionChain(next);	
			
		modify {}
	}
	
	iterated {
		c -:actualParameter-> call:Call;
		:ExpressionChain(call);
		:MultipleActualParameters(call);
			
		modify {}
	}
	
	modify {}
}

pattern MultipleExtendingClasses(c:Class)
{
	iterated {
		c <-:extends_- sub:Class;
		:MultipleExtendingClasses(sub);
			
		modify {}
	}
	
	modify {}
}
