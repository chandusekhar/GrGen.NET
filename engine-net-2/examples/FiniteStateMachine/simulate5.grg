using NFAModel;

#include "removeEpsilons3WithoutUsing.grg"

test getStartState : (StartState)
{
	start:StartState;
	return(start);
}

dpo rule accept(state:State, var input:string) : (State)
{
	state -t:Transition\EpsilonTransition-> successor:State;
	if { input.length()>0 && t.Trigger==input.substring(0, 1); }
	
	modify {
		emit( "from " + state.id + " to " + successor.id + " with " + t.Trigger + " of " + input + "\n" );
		exec( (reduced)=eatChar(input) | (lastSuccess)=accept(successor, reduced) | if{ def(lastSuccess); yield(lastSuccess); yield(successor) } ) -> last:State;
		return(last);
	}
}

test eatChar(var input:string) : (string)
{
	return(input.substring(1,input.length()-1));
}

test isFinalState(state:FinalState<State>)
{
}
