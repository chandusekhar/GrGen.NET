using visit;

#include "graphgen.gri"

test initCounter : (int) {
	return (0);
}

rule componentStart(var counter:int) : (int)
{
    n:N;
    if { !visited(n); }
	
	modify {
		eval { visited(n) = true; }
		return (counter+1);
	}
}

rule markComponent
{
	n:Node ?--? m:Node;
	if { visited(n) && !visited(m); }
	
	modify {
		eval {
			visited(m) = true;
		}
	}
}

// calling patterns with variables is not supported yet, otherwise handing in visited flag id would be nicer
pattern Component(n:Node)
{
	iterated {
		n ?--? m:Node;
		c:Component(m);
		
		modify {
			c();
			eval {
				visited(m) = true;
			}
		}
    }

    modify {}
}

rule findComponent()
{
    n:N;
    if { !visited(n); }
    c:Component(n);
    
    modify {
        c();
		eval {
			visited(n) = true;
		}
    }
}

rule removeVisited()
{
	n:Node;
	if { visited(n); }
	
	modify {
		eval {
			visited(n) = false;
		}
	}
}
