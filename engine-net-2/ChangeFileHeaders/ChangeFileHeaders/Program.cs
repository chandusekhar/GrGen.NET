/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET v2 beta
 * Copyright (C) 2008 Universität Karlsruhe, Institut für Programmstrukturen und Datenorganisation, LS Goos
 * licensed under GPL v3 (see LICENSE.txt included in the packaging of this file)
 */

using System;
using System.Text;
using System.IO;

namespace ChangeFileHeaders
{
    class Program
    {
        static void Main(string[] args)
        {
            String rootDirectory = args[0];
            DirectoryInfo dir = new DirectoryInfo(rootDirectory);
            ProcessFilesInDirectoryThenDescend(dir);
        }

        private static void ProcessFilesInDirectoryThenDescend(DirectoryInfo dir)
        {
            ++indentLevel;

            for (int i = 0; i < indentLevel; ++i)
                Console.Write("  ");
            Console.WriteLine("/{0}", dir.Name);

            // handle files in current directory
            FileInfo[] filesInDirectory = dir.GetFiles();
            foreach (FileInfo file in filesInDirectory)
            {
                // we're only interested in Java and C# source files
                if (!(file.Name.EndsWith(".java") || file.Name.EndsWith(".cs")))
                    continue;

                // assembly info uses unicode and umlaute, hands off
                if (file.Name == "AssemblyInfo.cs")
                    continue;

                // log files processed to the console
                for (int i = 0; i < indentLevel; ++i)
                    Console.Write("  ");
                Console.Write("+{0} ... ", file.Name);

                // filter out files not containing the header to change
                if (!containsHeader(file))
                {
                    Console.WriteLine("NO HEADER");
                    continue;
                }

                Console.Write("REWRITING ... ");

                // change the file header to the new one
                rewriteHeader(file);
            }

            // descend to nested directories
            DirectoryInfo[] nestedDirectories = dir.GetDirectories();
            foreach (DirectoryInfo nestedDirectory in nestedDirectories)
            {
                if (nestedDirectory.Name.EndsWith(".svn"))
                    continue;

                ProcessFilesInDirectoryThenDescend(nestedDirectory);
            }

            --indentLevel;
        }

        private static bool containsHeader(FileInfo file)
        {
            StreamReader reader = file.OpenText();
            string line = reader.ReadLine();
            if (line == null || !line.StartsWith("/*")) goto close_and_fail;
            line = reader.ReadLine();
            if (line == null || !line.Contains("GrGen: graph rewrite generator")) goto close_and_fail;
            line = reader.ReadLine();
            if (line == null || !line.Contains("Copyright (C)")) goto close_and_fail;
            line = reader.ReadLine();
            if (line == null || !line.Contains("licensed under GPL")) goto close_and_fail;
            line = reader.ReadLine();
            if (line == null || !line.EndsWith("*/")) goto close_and_fail;
            reader.Close();
            return true;
        close_and_fail:
            reader.Close();
            return false;
        }

        private static bool containsIsGeneratedHeader(FileInfo file)
        {
            StreamReader reader = file.OpenText();
            string line = reader.ReadLine();
            if (line == null) 
            {
                reader.Close();
                return false;
            }
            if (line == "// This file has been generated automatically by GrGen."
                || line.StartsWith("/* Generated By:CSharpCC:")
                || (line.StartsWith("// $ANTLR") && line.Contains("->")))
            {
                reader.Close();
                return true;
            }
            reader.Close();
            return false;
        }

        private static void rewriteHeader(FileInfo file)
        {
            string[] lines = File.ReadAllLines(file.FullName, Encoding.Default);

            lines[0] = "/*";
            lines[1] = " * GrGen: graph rewrite generator tool -- release GrGen.NET v2 beta";
            lines[2] = " * Copyright (C) 2008 Universität Karlsruhe, Institut für Programmstrukturen und Datenorganisation, LS Goos";
            lines[3] = " * licensed under GPL v3 (see LICENSE.txt included in the packaging of this file)";
            lines[4] = " */";

            File.WriteAllLines(file.FullName, lines, Encoding.Default);

            Console.WriteLine("DONE");
        }

        private static void extendingRewriteHeader(FileInfo file)
        {
            const long NUM_LINES_TO_ADD = 5+1;
            string[] lines = File.ReadAllLines(file.FullName, Encoding.Default);
            string[] extendedLines = new string[lines.Length + NUM_LINES_TO_ADD];

            lines.CopyTo(extendedLines, NUM_LINES_TO_ADD);
            
            extendedLines[0] = "/*";
            extendedLines[1] = " * GrGen: graph rewrite generator tool -- release GrGen.NET v2 beta";
            extendedLines[2] = " * Copyright (C) 2008 Universität Karlsruhe, Institut für Programmstrukturen und Datenorganisation, LS Goos";
            extendedLines[3] = " * licensed under GPL v3 (see LICENSE.txt included in the packaging of this file)";
            extendedLines[4] = " */";

            extendedLines[5] = "";

            File.WriteAllLines(file.FullName, extendedLines, Encoding.Default);

            Console.WriteLine("DONE");
        }

        static int indentLevel = -1; // directory depth indentation level for output of state to console
    }
}
