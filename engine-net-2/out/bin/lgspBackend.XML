<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lgspBackend</name>
    </assembly>
    <members>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.#ctor(System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],de.unika.ipd.grGen.lgsp.PatternElementType,System.Int32)">
            <summary>
            Instantiates a new PatternElement object
            </summary>
            <param name="typeID">The type ID of the pattern element</param>
            <param name="name">The name of the pattern element</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="patternElementType">Specifies what kind of pattern element this is.</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[])">
            <summary>
            Instantiates a new PatternNode object
            </summary>
            <param name="typeID">The type ID of the pattern node</param>
            <param name="name">The name of the pattern node</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],de.unika.ipd.grGen.lgsp.PatternElementType)">
            <summary>
            Instantiates a new PatternNode object
            </summary>
            <param name="typeID">The type ID of the pattern node</param>
            <param name="name">The name of the pattern node</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="patternElementType">Specifies what kind of pattern element this is.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],de.unika.ipd.grGen.lgsp.PatternElementType,System.Int32)">
            <summary>
            Instantiates a new PatternNode object
            </summary>
            <param name="typeID">The type ID of the pattern node</param>
            <param name="name">The name of the pattern node</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="patternElementType">Specifies what kind of pattern element this is.</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[])">
            <summary>
            Instantiates a new PatternEdge object
            </summary>
            <param name="source">The source pattern node for this edge.</param>
            <param name="target">The target pattern node for this edge.</param>
            <param name="typeID">The type ID of the pattern edge.</param>
            <param name="name">The name of the pattern edge.</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],de.unika.ipd.grGen.lgsp.PatternElementType)">
            <summary>
            Instantiates a new PatternEdge object
            </summary>
            <param name="source">The source pattern node for this edge.</param>
            <param name="target">The target pattern node for this edge.</param>
            <param name="typeID">The type ID of the pattern edge.</param>
            <param name="name">The name of the pattern edge.</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="patternElementType">Specifies what kind of pattern element this is.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],de.unika.ipd.grGen.lgsp.PatternElementType,System.Int32)">
            <summary>
            Instantiates a new PatternEdge object
            </summary>
            <param name="source">The source pattern node for this edge.</param>
            <param name="target">The target pattern node for this edge.</param>
            <param name="typeID">The type ID of the pattern edge.</param>
            <param name="name">The name of the pattern edge.</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="patternElementType">Specifies what kind of pattern element this is.</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.StartTransaction">
            <summary>
            Starts a transaction
            </summary>
            <returns>A transaction ID to be used with Commit or Rollback</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.Commit(System.Int32)">
            <summary>
            Removes the rollback data and stops this transaction
            </summary>
            <param name="transactionID">Transaction ID returned by a StartTransaction call</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.Rollback(System.Int32)">
            <summary>
            Undoes all changes during a transaction
            </summary>
            <param name="transactionID">The ID of the transaction to be rollbacked</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodeCounts">
            <summary>
            The number of compatible nodes in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgeCounts">
            <summary>
            The number of compatible edges in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.meanOutDegree">
            <summary>
            The mean out degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.meanInDegree">
            <summary>
            The mean in degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String)">
            <summary>
            Copy constructor.
            Open transaction data lost.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.DestroyGraph">
            <summary>
            For persistent backends permanently destroys the graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.LoadActions(System.String,de.unika.ipd.grGen.libGr.DumpInfo)">
            <summary>
            Loads a LGSPActions implementation
            </summary>
            <param name="actionFilename">Filename of a action file. This can be either a library (.dll) or source code (.cs)</param>
            <returns>A LGSPActions object as BaseActions</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNodeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPNode,System.Int32)">
            <summary>
            Adds an existing node to this graph.
            The graph may not already contain the node!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdgeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPEdge,System.Int32)">
            <summary>
            Adds an existing edge to this graph.
            The graph may not already contain the edge!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds an existing LGSPNode object to the graph.
            The node must not be part of another graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Creates a new LGSPNode according to the given type and adds
            it to the graph.
            </summary>
            <param name="nodeType">The type for the new node.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds an existing LGSPNode object to the graph and assigns it to the given variable.
            The node must not be part of another graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddINode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new node to the graph.
            TODO: Slow but provides a better interface...
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new LGSPNode to the graph and assigns it to the given variable.
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Adds an existing LGSPEdge object to the graph.
            The edge must not be part of another graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds a new edge to the graph.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Adds a new edge to the graph.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,System.String)">
            <summary>
            Adds an existing LGSPEdge object to the graph and assigns it to the given variable.
            The edge must not be part of another graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes the given node from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.IEdge)">
            <summary>
            Removes the given edge from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RemoveEdges(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes all edges from the given node.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseNode(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Reuses an LGSPNode object for a new node of the same type.
            This causes a RemovingEdges, a RemovingNode and a NodeAdded event and removes all edges
            and variables pointing to the old element.
            </summary>
            <param name="node">The LGSPNode object to be reused.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Reuses an LGSPEdge object for a new edge of the same type and optionally changes the source and/or target.
            This causes a RemovingEdge and an EdgeAdded event and removes all variables pointing to the old element.
            </summary>
            <param name="edge">The LGSPEdge object to be reused.</param>
            <param name="newSource">The new source of the edge, or null if it is not to be changed.</param>
            <param name="newTarget">The new target of the edge, or null if it is not to be changed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Retypes a node by creating a new node of the given type.
            All adjacent edges as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new node, yet! (TODO)
            </summary>
            <param name="node">The node to be retyped.</param>
            <param name="newNodeType">The new type for the node.</param>
            <returns>The new node object representing the retyped node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Retypes a node by creating a new node of the given type.
            All adjacent edges as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new edge, yet! (TODO)
            </summary>
            <param name="node">The node to be retyped.</param>
            <param name="newNodeType">The new type for the node.</param>
            <returns>The new node object representing the retyped node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Retypes an edge by replacing it by a new edge of the given type.
            Source and target node as well as all attributes from common super classes are kept.
            </summary>
            <param name="edge">The edge to be retyped.</param>
            <param name="newEdgeType">The new type for the edge.</param>
            <returns>The new edge object representing the retyped edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.libGr.IEdge,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Retypes an edge by replacing it by a new edge of the given type.
            Source and target node as well as all attributes from common super classes are kept.
            </summary>
            <param name="edge">The edge to be retyped.</param>
            <param name="newEdgeType">The new type for the edge.</param>
            <returns>The new edge object representing the retyped edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceNode(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Replaces a given node by another one.
            All adjacent edges and variables are transferred to the new node.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldNode">The node to be replaced.</param>
            <param name="newNode">The replacement for the node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Replaces a given edge by another one.
            Source and target node are transferred to the new edge,
            but the new edge must already have source and target set to these nodes.
            The new edge is added to the graph, the old edge is removed.
            A SettingEdgeType event is generated before.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldEdge">The edge to be replaced.</param>
            <param name="newEdge">The replacement for the edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetElementName(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns the first variable name for the given element it finds (if any).
            </summary>
            <param name="elem">Element which name is to be found</param>
            <returns>A name which can be used in GetVariableValue to get this element</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetElementVariables(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns a linked list of variables mapped to the given graph element
            or null, if no variable points to this element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetVariableValue(System.String)">
            <summary>
            Retrieves the IGraphElement for a variable name or null, if the variable isn't set yet or anymore
            </summary>
            <param name="varName">The variable name to lookup</param>
            <returns>The according IGraphElement or null</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNodeVarValue(System.String)">
            <summary>
            Retrieves the LGSPNode for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPNode object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPNode or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetEdgeVarValue(System.String)">
            <summary>
            Retrieves the LGSPEdge for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPEdge object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPEdge or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.DetachVariableFromElement(de.unika.ipd.grGen.libGr.Variable)">
            <summary>
            Detaches the specified variable from the according graph element.
            If it was the last variable pointing to the element, the variable list for the element is removed.
            </summary>
            <param name="var">Variable to detach.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetVariableValue(System.String,de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Sets the value of the given variable to the given IGraphElement.
            If the variable name is null, this function does nothing.
            If elem is null, the variable is unset.
            </summary>
            <param name="varName">The name of the variable.</param>
            <param name="elem">The new value of the variable or null to unset the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Mature">
            <summary>
            Mature a graph.
            This method should be invoked after adding all nodes and edges to the graph.
            The backend may implement analyses on the graph to speed up matching etc.
            The graph may not be modified by this function.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Custom(System.Object[])">
            <summary>
            Does graph-backend dependent stuff.
            </summary>
            <param name="args">Any kind of paramteres for the stuff to do</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Clone(System.String)">
            <summary>
            Duplicates a graph.
            The new graph will use the same model and backend as the other
            Open transaction data will not be cloned.
            </summary>
            <param name="newName">Name of the new graph.</param>
            <returns>A new graph with the same structure as this graph.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseOptimization">
            <summary>
            If true (the default case), elements deleted during a rewrite
            may be reused in the same rewrite.
            As a result new elements may not be discriminable anymore from
            already deleted elements using object equality, hash maps, etc.
            In cases where this is needed this optimization should be disabled.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramCompleter">
            <summary>
            Class completing search programs
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperationsInAllSearchPrograms(de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            Iterate all search programs to complete check operations within each one
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperations(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegative)">
            <summary>
            Completes check operations in search program from given currentOperation on
            (taking borderlines set by enclosing search program and check negative into account)
            Completion:
            - determine continuation point
            - insert remove isomorphy opertions needed for continuing there
            - insert continuing operation itself
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingListHeadAdjustment(de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached)">
            <summary>
            "listentrick": append search program operations to adjust list heads
            i.e. set list entry point to element after last found,
            so that next searching starts there - preformance optimization
            (leave graph in the state of our last visit (searching it))
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingRemoveIsomorphyAndJump(de.unika.ipd.grGen.lgsp.CheckOperation,System.String[],de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            move outwards from check operation until operation to continue at is found
            appending remove isomorphy for isomorphy written on the way
            and final jump to operation to continue
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramBuilder">
            <summary>
            class for building search program data structure from scheduled search plan
            holds environment variables for this build process
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean},de.unika.ipd.grGen.lgsp.LGSPRulePattern,de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Builds search program from scheduled search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildAddionalSearchSubprograms(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.SearchProgram,de.unika.ipd.grGen.lgsp.LGSPRulePattern)">
            <summary>
            Create an extra search subprogram per MaybePreset operation.
            Created search programs are added to search program next field, forming list.
            Destroys the scheduled search program.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.scheduledSearchPlan">
            <summary>
            the scheduled search plan to build
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.nameOfRulePatternType">
            <summary>
            name of the rule pattern type of the rule pattern that is built
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.enclosingPositiveOperation">
            <summary>
            the innermost enclosing positive candidate iteration operation 
            at the current insertion point of the nested negative pattern
            not null if negative pattern is currently built, null otherwise
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.rulePattern">
            <summary>
            the rule pattern that is built 
            (it's pattern graph is needed for match object building)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildScheduledSearchPlanOperationIntoSearchProgram(System.Int32,de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Builds search program operations from scheduled search plan operation.
            Decides which specialized build procedure is to be called.
            The specialized build procedure then calls this procedure again, 
            in order to process the next search plan operation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMaybePreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            MaybePreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            NegPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Lookup search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildImplicit(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,System.Boolean)">
            <summary>
            Search program operations implementing the
            Implicit source|target search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIncident(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,System.Boolean)">
            <summary>
            Search program operations implementing the
            Extend Incoming|Outgoing search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegative(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Search program operations implementing the
            Negative search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildCondition(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.Condition)">
            <summary>
            Search program operations implementing the
            Condition search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMatchComplete(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Search program operations completing the matching process
            after all pattern elements have been found 
            are created and inserted into the program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertGetType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which get type operation to use and inserts it
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within type iteration was built
            if type drawing was sufficient, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Decides which check type operation to build and inserts it into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNode(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode)">
            <summary>
            Decides which check connectedness operations are needed for the given node
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdge(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,System.Boolean)">
            <summary>
            Decides which check connectedness operations are needed for the given edge
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.CompleteCallsToMissingPresetHandlingMethodInAllSearchPrograms(de.unika.ipd.grGen.lgsp.SearchProgram,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Completes calls to missing preset handling methods in all search programs
              (available at the time the functions is called)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.CompleteCallsToMissingPresetHandlingMethod(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Completes calls to missing preset handling methods 
            by inserting the initially not given arguments
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.isMatched">
            <summary>
            Tells during the matching process whether the element 
            is already matched within the local pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.isMatchedNeg">
            <summary>
            Tells during the matching process whether the element 
            is already matched within the local nested negative pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.isMatchedByEnclosingPattern">
            <summary>
            Tells during the matching process whether the element 
            is already matched within an enclosing pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.InstanceOf(de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Returns true, if the graph element is compatible to the given type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Clone">
            <summary>
            Creates a copy of this node.
            All attributes will be transfered to the new node.
            The node will not be associated to a graph, yet.
            So it will not have any adjacent edges nor any assigned variables.
            </summary>
            <returns>A copy of this node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Recycle">
            <summary>
            Recycles this node. This may pool the node or just ignore it.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Outgoing">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Incoming">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Type">
            <summary>
            Returns the NodeType of the graph element.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            Returns the GrGenType of the graph element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.isMatched">
            <summary>
            Tells during the matching process whether the element 
            is already matched within the local pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.isMatchedNeg">
            <summary>
            Tells during the matching process whether the element 
            is already matched within the local nested negative pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.isMatchedByEnclosingPattern">
            <summary>
            Tells during the matching process whether the element 
            is already matched within an enclosing pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Clone(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Creates a copy of this edge.
            All attributes will be transfered to the new edge.
            The edge will not be associated to a graph, yet.
            So it will not have any assigned variables.
            </summary>
            <param name="newSource">The new source node for the new edge.</param>
            <param name="newTarget">The new target node for the new edge.</param>
            <returns>A copy of this edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Recycle">
            <summary>
            Recycles this edge. This may pool the edge or just ignore it.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Source">
            <summary>
            The source node of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Target">
            <summary>
            The target node of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Type">
            <summary>
            Returns the EdgeType of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            Returns the GrGenType of the edge.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchOperation">
            <summary>
            Search operation with information about homomorphic mapping.
            Element of the scheduled search plan.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperation.Element">
            <summary>
            If Type is NegativePattern, Element is a negative ScheduledSearchPlan object.
            If Type is Condition, Element is a Condition object.
            Otherwise Element is the target SearchPlanNode for this operation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ScheduledSearchPlan">
            <summary>
            The scheduled search plan is a list of search operations,
            plus the information which nodes/edges are homomorph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NamesOfEntities">
            <summary>
            class determining names of entities in generated source code from pattern element entities 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateVariable(System.String,System.Boolean)">
            <summary>
            Returns name of the candidate variable which will be created within the seach program
            holding over time the candidates for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeForCandidateVariable(System.String,System.Boolean)">
            <summary>
            Returns name of the type variable which will be created within the search program
            holding the type object which will be used for determining the candidates
            for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeOfVariableContainingType(System.Boolean)">
            <summary>
            Returns name of the type of the type variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeIdForCandidateVariable(System.String,System.Boolean)">
            <summary>
            Returns name of the type id variable which will be created within the search program
            holding the type id which will be used for determining the candidates
            for the given pattern element   (determined out of type object in iteration)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateIterationListHead(System.String,System.Boolean)">
            <summary>
            Returns name of the list head variable which will be created within the search program
            holding the list head of the list accessed by type id with the graph elements of that type
            for finding out when iteration of the candidates for the given pattern element has finished
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MissingPresetHandlingMethod(System.String)">
            <summary>
            Returns name of the method called when a maybe preset element is not set
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedBit(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns name of the variable which will be created within the seach program
            backing up the value of the isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatch">
            <summary>
            An object representing a match of the LGSPBackend.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatch.patternGraph">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatch.Nodes">
            <summary>
            An array of all nodes in the match.
            The order is given by the Nodes array of the according IPatternGraph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatch.Edges">
            <summary>
            An array of all edges in the match.
            The order is given by the Edges array of the according IPatternGraph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatch.EmbeddedGraphs">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatch.nextMatch">
            <summary>
            The next match in the linked list of matches.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatch.#ctor(de.unika.ipd.grGen.lgsp.LGSPNode[],de.unika.ipd.grGen.lgsp.LGSPEdge[])">
            <summary>
            Constructs a new match object.
            </summary>
            <param name="nodes">The nodes of the match.</param>
            <param name="edges">The edges of the match.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatch.Pattern">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatches">
            <summary>
            An object representing a (possibly empty) set of matches in a graph before the rewrite has been applied.
            It is returned by IAction.Match() and given to the OnMatched event.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatches.producer">
            <summary>
            The action object used to generate this LGSPMatches object.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatches.matches">
            <summary>
            The matches list containing all matches.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatches.#ctor(de.unika.ipd.grGen.lgsp.LGSPAction,System.Int32,System.Int32)">
            <summary>
            Constructs a new LGSPMatches instance.
            </summary>
            <param name="producer">The action object used to generate this LGSPMatches object</param>
            <param name="numNodes">The number of nodes matched by the given action.</param>
            <param name="numEdges">The number of edges matched by the given action.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatches.GetMatch(System.Int32)">
            <summary>
            Returns the match with the given index. Invalid indices cause an IndexOutOfRangeException.
            This may be slow. If you want to iterate over the elements the Matches IEnumerable should be used.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatches.GetEnumerator">
            <summary>
            Returns an enumerator over all found matches.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatches.Producer">
            <summary>
            The action object used to generate this LGSPMatches object
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatches.Count">
            <summary>
            The number of matches found by Producer
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPAction">
            <summary>
            An object representing an executable rule of the LGSPBackend.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.rulePattern">
            <summary>
            The LGSPRulePattern object from which this LGSPAction object has been created.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.DynamicMatch">
            <summary>
            A delegate pointing to the current matcher program for this rule.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Match(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Int32,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Searches for a graph pattern as specified by RulePattern.
            </summary>
            <param name="graph">The host graph.</param>
            <param name="maxMatches">The maximum number of matches to be searched for, or zero for an unlimited search.</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>An LGSPMatches object containing the found matches.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Modify(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.lgsp.LGSPMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match.
            </summary>
            <returns>An array of elements returned by the rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Apply(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Tries to apply this rule to the given graph once.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>True, if the rule was applied.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Apply(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Tries to apply this rule to the given graph once.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Match(de.unika.ipd.grGen.libGr.IGraph,System.Int32,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Searches for a graph pattern as specified by RulePattern.
            </summary>
            <param name="graph">The host graph.</param>
            <param name="maxMatches">The maximum number of matches to be searched for, or zero for an unlimited search.</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>An IMatches object containing the found matches.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Modify(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match.
            The graph and match object must have the correct type for the used backend.
            </summary>
            <returns>An array of elements returned by the rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Apply(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Tries to apply this rule to the given graph once.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>True, if the rule was applied.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Apply(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Tries to apply this rule to the given graph once.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyStar(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Applies this rule to the given graph as often as possible.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyStar(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Applies this rule to the given graph as often as possible.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyPlus(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Applies this rule to the given graph as often as possible.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>True, if the rule was applied at least once.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyPlus(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Applies this rule to the given graph as often as possible.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied at least once.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyMinMax(de.unika.ipd.grGen.libGr.IGraph,System.Int32,System.Int32)">
            <summary>
            Applies this rule to the given graph at most max times.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="min">The minimum number of applications to be "successful".</param>
            <param name="max">The maximum number of applications to be applied.</param>
            <returns>True, if the rule was applied at least min times.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyMinMax(de.unika.ipd.grGen.libGr.IGraph,System.Int32,System.Int32,de.unika.ipd.grGen.libGr.IGraphElement[])">
            <summary>
            Applies this rule to the given graph at most max times.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="min">The minimum number of applications to be "successful".</param>
            <param name="max">The maximum number of applications to be applied.</param>
            <param name="parameters">An array of graph elements (nodes and/or edges) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied at least min times.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.Name">
            <summary>
            The name of the rule
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.RulePattern">
            <summary>
            The RulePattern object from which this LGSPAction object has been created.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNode">
            <summary>
            Element of the search plan graph representing an element within the pattern graph or a root node.
            </summary>>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode">
            <summary>
            Element of the search plan graph representing a node within the pattern graph.
            </summary>>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode">
            <summary>
            Element of the search plan graph representing an edge within the pattern graph.
            </summary>>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdge">
            <summary>
            A search plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanGraph">
            <summary>
            The search plan graph data structure for scheduling.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SourceBuilder">
            <summary>
            Pretty printing helper class for source code generation
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SourceBuilder.CommentSourceCode">
            <summary>
            If true, the source code should be generated with comments.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator">
            <summary>
            Class generating matcher programs out of rules.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.CommentSourceCode">
            <summary>
            If true, the generated matcher functions are commented to improve understanding the source code.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpDynSourceCode">
            <summary>
            If true, the source code of dynamically generated matcher functions are dumped to a file in the current directory.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpSearchPlan">
            <summary>
            If true, generated search plans are dumped in VCG and TXT files in the current directory.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Instantiates a new instance of LGSPMatcherGenerator with the given graph model.
            </summary>
            <param name="model">The model for which the matcher functions shall be generated.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GeneratePlanGraph(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Builds a plan graph out of a given pattern graph.
            </summary>
            <param name="graph">The host graph to optimize the matcher program for, 
            providing statistical information about its structure </param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.MarkMinimumSpanningArborescence(de.unika.ipd.grGen.lgsp.PlanGraph,System.String)">
            <summary>
            Marks the minimum spanning arborescence of a plan graph by setting the IncomingMSAEdge
            fields for all nodes
            </summary>
            <param name="planGraph">The plan graph to be marked</param>
            <param name="dumpName">Names the dump targets if dump compiler flags are set</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchPlanGraph(de.unika.ipd.grGen.lgsp.PlanGraph)">
            <summary>
            Generate search plan graph out of the plan graph, i.e. construct a new graph with outgoing
            edges for nodes and only tree edges
            </summary>
            <param name="planGraph">The source plan graph</param>
            <returns>A new search plan graph</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ScheduleSearchPlan(de.unika.ipd.grGen.lgsp.SearchPlanGraph,de.unika.ipd.grGen.lgsp.SearchPlanGraph[])">
            <summary>
            Generates a scheduled search plan for a given search plan graph and optional negative search plan graphs
            </summary>
            <param name="negSpGraphs">a list - possibly empty - if a positive search plan graph is given,
            null if a negative search plan graph is scheduled </param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.AppendHomomorphyInformation(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Appends homomorphy information to each operation of the scheduled search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DetermineAndAppendHomomorphyChecks(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.Int32)">
            <summary>
            Determines which homomorphy check operations are necessary 
            at the operation of the given position within the scheduled search plan
            and appends them.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherSourceCode(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.String,de.unika.ipd.grGen.lgsp.LGSPRulePattern)">
            <summary>
            Generates the source code of the matcher function for the given scheduled search plan
            new version building first abstract search program then search program code
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcher(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.LGSPAction,System.String,System.String,System.String)">
            <summary>
            Generates an LGSPAction object for the given scheduled search plan.
            </summary>
            <param name="action">Needed for the rule pattern and the name</param>
            <param name="sourceOutputFilename">null if no output file needed</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateGraph(de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.String[])">
            <summary>
            Creates a new IGraph backend instance with the given graph model and name
            </summary>
            <param name="graphModel">An IGraphModel instance</param>
            <param name="graphName">Name of the graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The new IGraph backend instance</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateGraph(System.String,System.String,System.String[])">
            <summary>
            Creates a new IGraph backend instance with the graph model provided by the graph model file and a name.
            </summary>
            <param name="modelFilename">Filename of a graph model file</param>
            <param name="graphName">Name of the graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The new IGraph backend instance</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.IgnoreRest(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.Char)">
            <summary>
            Ignores the rest of a string.
            </summary>
            <param name="charStream">The SimpleCharStream object.</param>
            <param name="curChar">The last character read. Set to '\0' to ignore.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.MatchStringOrIgnoreOther(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.String)">
            <summary>
            Tries to match a string at the current position of a SimpleCharStream.
            If the string at the current position does not match, it is skipped.
            Here all characters other than A-Z, a-z, 0-9, and _ are skipped.
            </summary>
            <param name="charStream">The char stream.</param>
            <param name="str">The string to be matched.</param>
            <returns>True, iff the string was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system 
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetDir(System.String)">
            <summary>
            Retrieves the directory path from a given file path.
            Any slashes or backslashes are converted to the correct directory
            separator chars for the current platform.
            </summary>
            <param name="path">A path to a file.</param>
            <returns>A path to the directory containing the file.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetActionsName(System.String)">
            <summary>
            Constructs the actions name out of the rule specification file name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="graphName">Name of the new graph.</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.OpenGraph(System.String,System.String,System.String[])">
            <summary>
            Opens an existing graph identified by graphName using the specifiede IGraphModel.
            This may not be supported by the backend, if the data is not persistent.
            </summary>
            <param name="modelFilename">Filename of a graph model file</param>
            <param name="graphName">Name of an existing graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The IGraph backend instance or NULL on error</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.UseExistingKind,System.Boolean,System.Boolean)">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="useExisting">Specifies whether and how existing files in the intermediate directory will be used.</param>
            <param name="keepIntermediateDir">If true, more files may be generated in the intermediate directory.</param>
            <param name="compileWithDebug">If true, debug information will be generated for the generated assemblies.</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String)">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPBackend.ExistingGraphs">
            <summary>
            An enumerable of KeyValuePairs, where the keys are names of existing graphs and the
            values are the names of the appropriate models (not filenames).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOperation">
            <summary>
            Base class for all search program operations, containing concatenation fields,
            so that search program operations can form a linked search program list
            double linked list; next points to the following list element or null
            previous points to the preceding list element 
            or the enclosing search program operation within the list anchor element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            dumps search program operation (as string) into source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            emits c# code implementing search program operation into source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Append(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            appends the new element to the search program operations list
            whose closing element until now was this
            returns the new closing element - the new elment
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Insert(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            insert the new element into the search program operations list
            between this and the succeeding element
            returns the element after this - the new element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.IsNestingOperation">
            <summary>
            returns whether operation is a nesting operation 
            containing other elements within some list inside
            which might be nesting operations themselves -> yes
            or is an elementary search program operation 
            or an operation which can only contain elementary operations -> no
            (check preset returns false, too, despite further check is nested within,
            more general: check failed operations are not to be regarded as nested, 
            only search iteration operations)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetNestedOperationsList">
            <summary>
            returns the nested list anchor
            null if list not created or IsNestingOperation == false
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetEnclosingOperation">
            <summary>
            returns operation enclosing this operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramList">
            <summary>
            Search program list anchor element,
            containing first list element within inherited Next member
            Inherited to be able to access the first element via Next
            Previous points to enclosing search program operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramList.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for search program list
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgram">
            <summary>
            Class representing a search program,
            which is a list of search program operations
              some search program operations contain nested search program operations,
              yielding a search program tree in fact
            representing/assembling a backtracking search program
            for finding a homomorphic mapping of the pattern graph within the host graph.
            is itself the outermost enclosing operation
            list forming concatenation field used for adding search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgram.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgram.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in dept first walk over search program operations list
            then tail of matching function of the current search progran
            and finally continue in search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckOperation">
            <summary>
            Base class for search program check operations
            contains list anchor for operations to execute when check failed
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetType">
            <summary>
            Base class for search program type determining operations,
            setting current type for following get candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIterationType">
            <summary>
            Available types of GetTypeByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIteration">
            <summary>
            Class representing "iterate over the allowed types" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GetTypeByIteration.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for get type by iteration search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByDrawing">
            <summary>
            Class representing "get the allowed type" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GetTypeByDrawing.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for get type by drawing search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidate">
            <summary>
            Base class for search program candidate determining operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIterationType">
            <summary>
            Available types of GetCandidateByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIteration">
            <summary>
            Class representing "get candidate by iteration" operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GetCandidateByIteration.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for get candidate by iteration search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawingType">
            <summary>
            Available types of GetCandidateByDrawing operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawing">
            <summary>
            Class representing "get node by drawing" operation,
            setting current candidate for following check candidate operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GetCandidateByDrawing.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for get candidate by drawing search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidate">
            <summary>
            Base class for search program candidate filtering operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForTypeType">
            <summary>
            Available types of CheckCandidateForType operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForType">
            <summary>
            Class representing "check whether candidate is of allowed type" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckCandidateForType.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check candidate for type search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateFailed">
            <summary>
            Class representing some check candidate operation,
            which was determined at generation time to always fail 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckCandidateFailed.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check candidate failed search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectedness">
            <summary>
            Class representing "check whether candidate is connected to the elements
              it should be connected to, according to the pattern" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectedness.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check candidate for connectedness search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphy">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other pattern element, to ensure required isomorphy" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphy.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check candidate for isomorphy search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForPreset">
            <summary>
            Class representing "check whether candidate was preset (not null)" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckCandidateForPreset.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check candidate for preset search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatch">
            <summary>
            Base class for search program operations
            filtering partial match
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegative">
            <summary>
            Class representing "check whether the negative pattern applies" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegative.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check partial match by negative pattern search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByCondition">
            <summary>
            Class representing "check whether the condition applies" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckPartialMatchByCondition.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check partial match by condition search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptIntoPartialMatch">
            <summary>
            Base class for search program operations 
            to execute upon candidate checking succeded
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptIntoPartialMatchWriteIsomorphy">
            <summary>
            Class representing "write information to graph, to what pattern element 
              is graph element mapped to, for isomorphy checking later on" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.AcceptIntoPartialMatchWriteIsomorphy.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for accept into partial match write isomorphy search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.WithdrawFromPartialMatch">
            <summary>
            Base class for search program operations
            undoing effects of candidate acceptance 
            when performing the backtracking step
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.WithdrawFromPartialMatchRemoveIsomorphy">
            <summary>
            Class representing "remove information from graph, to what pattern element
              is graph element mapped to, as not needed any more" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.WithdrawFromPartialMatchRemoveIsomorphy.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for withdraw from partial match remove isomorphy search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PartialMatchComplete">
            <summary>
            Base class for search program operations
            to be executed when a partial match becomes a complete match
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PartialMatchCompletePositive">
            <summary>
            Class yielding operations to be executed 
            when a partial positive match becomes a complete match
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PartialMatchCompletePositive.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for partial match of positive pattern complete search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PartialMatchCompleteNegative">
            <summary>
            Class yielding operations to be executed 
            when a partial negative match becomes a complete match
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PartialMatchCompleteNegative.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for partial match of negative pattern complete search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PartialMatchCompleteBuildMatchObject">
            <summary>
            Class representing "partial match is complete, now build match object" operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PartialMatchCompleteBuildMatchObject.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for partial match complete build match object search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeadsTypes">
            <summary>
            Available types of AdjustListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.AdjustListHeads.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for adjust list heads search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatching">
            <summary>
            Base class for search program operations
            to check whether to continue the matching process 
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached">
            <summary>
            Class representing "check if matching process is to be aborted because
            the maximum number of matches has been reached" operation
            listHeadAdjustment==false prevents listentrick
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check whether to continue matching for are maximum matches reached search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingFailed">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always succeed.
            Check of abort negative matching process always succeeds
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.CheckContinueMatchingFailed.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for check whether to continue matching failed search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperationType">
            <summary>
            Available types of ContinueOperation operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperation">
            <summary>
            Class representing "continue matching there" control flow operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.ContinueOperation.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for continue search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GotoLabel">
            <summary>
            Class representing location within code named with label,
            potential target of goto operation
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GotoLabel.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for goto label search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeadsTypes">
            <summary>
            Available types of RandomizeListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.RandomizeListHeads.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits code for randomize list heads search program operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanPseudoNode">
            <summary>
            Common base class for the PlanNodes and PlanSuperNodes, 
            used for uniform access to the derived nodes within the minimum spanning arborescent computation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.PreferNewEdge(de.unika.ipd.grGen.lgsp.PlanEdge,System.Single,de.unika.ipd.grGen.lgsp.PlanEdge,System.Single)">
            <summary>
            Decides whether a new edge is better than a known best edge up to now.
            </summary>
            <returns>true if new edge should be chosen</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopSuperNode">
            <summary>
            outermost enclosing supernode, null if not contained within a supernode
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopNode">
            <summary>
            outermost enclosing supernode, the node itself if not contained within a supernode
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanNode">
            <summary>
            Element of the plan graph representing a node or edge within the pattern graph or a root node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeSource">
            <summary>
            Only valid if representing pattern edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeTarget">
            <summary>
            Only valid if representing pattern edge
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(System.String)">
            <summary>
            Instantiates a root plan node.
            </summary>
            <param name="rootName">The name for the root plan node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.Boolean)">
            <summary>
            Instantiates a node plan node.
            </summary>
            <param name="patNode">The pattern node for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternEdge,System.Int32,System.Boolean)">
            <summary>
            Instantiates an edge plan node.
            </summary>
            <param name="patEdge">The pattern edge for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanSuperNode">
            <summary>
            Element of the plan graph representing a strongly connected component within the pattern graph.
            Hierachically nested.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanSuperNode.Child">
            <summary>
            Representative element of the cycle as entry point. Target of cheapest incoming edge.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanSuperNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanSuperNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanEdge">
            <summary>
            A plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanEdge.mstCost">
            <summary>
            Cost used by the operation selection.
            This represents max(log(Cost),1).
            This field is altered during the contraction algorithm.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanGraph">
            <summary>
            The plan graph data structure for the MSA-algorithm.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system 
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.UseExistingKind,System.Boolean,System.Boolean)">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="useExisting">Specifies whether and how existing files in the intermediate directory will be used.</param>
            <param name="keepIntermediateDir">If true, ..._output.cs files will be generated.</param>
            <param name="compileWithDebug">If true, debug information will be generated for the generated assemblies.</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String)">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
        </member>
    </members>
</doc>
