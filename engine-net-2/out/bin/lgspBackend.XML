<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lgspBackend</name>
    </assembly>
    <members>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOperation">
            <summary>
            Base class for all search program operations, containing concatenation fields,
            so that search program operations can form a linked search program list
            - double linked list; next points to the following list element or null;
            previous points to the preceding list element 
            or the enclosing search program operation within the list anchor element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            dumps search program operation (as string) into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            emits c# code implementing search program operation into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Append(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Appends the given element to the search program operations list
            whose closing element until now was this element.
            Returns the new closing element - the given element.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Insert(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Insert the given element into the search program operations list
            between this and the succeeding element.
            Returns the element after this - the given element.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.IsSearchNestingOperation">
            <summary>
            returns whether operation is a search nesting operation 
            containing other elements within some list inside
            bearing the search nesting/iteration structure.
            default: false (cause only few operations are search nesting operations)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetNestedSearchOperationsList">
            <summary>
            returns the nested search operations list anchor
            null if list not created or IsSearchNestingOperation == false.
            default: null (cause only few search operations are nesting operations)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetEnclosingSearchOperation">
            <summary>
            returns operation enclosing this operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramList">
            <summary>
            Search program list anchor element,
            containing first list element within inherited Next member
            Inherited to be able to access the first element via Next
            Previous points to enclosing search program operation
            (starts list, but doesn't contain one)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgram">
            <summary>
            Abstract base class for search programs.
            A search program is a list of search program operations,
              some search program operations contain nested search program operations,
              yielding a search program operation tree in fact
            represents/assembling a backtracking search program,
            for finding a homomorphic mapping of the pattern graph within the host graph.
            A search program is itself the outermost enclosing operation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfAction">
            <summary>
            Class representing the search program of a matching action, i.e. some test or rule
            The list forming concatenation field is used for adding missing preset search subprograms.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAction.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by missing preset search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAction.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in depth first walk over search program operations list
            then tail of matching function of the current search program
            and finally continues in missing preset search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfMissingPreset">
            <summary>
            Class representing the search program of a missing preset matching action,
            originating from some test or rule with parameters which may be preset but may be null, too
            The list forming concatenation field is used for adding further missing preset search subprograms.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfMissingPreset.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by further missing preset search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfMissingPreset.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in depth first walk over search program operations list
            then tail of matching function of the current search program
            and finally continues in missing preset search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern">
            <summary>
            Class representing the search program of a subpattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for the search program
            head, search program operations list in depth first walk over search program operations list, tail
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative">
            <summary>
            Class representing the search program of an alternative
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for the search program
            head, search program operations list in depth first walk over search program operations list, tail
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetPartialMatchOfAlternative">
            <summary>
            Class representing "match the pattern of the alternative case" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ExtractVariable">
            <summary>
            Class representing "draw variable from input parameters array" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckOperation">
            <summary>
            Base class for search program check operations
            contains list anchor for operations to execute when check failed
            (check is not a search operation, thus the check failed operations are not search nested operations)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetType">
            <summary>
            Base class for search program type determining operations,
            setting current type for following get candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIterationType">
            <summary>
            Available types of GetTypeByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIteration">
            <summary>
            Class representing "iterate over the allowed types" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByDrawing">
            <summary>
            Class representing "get the allowed type" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidate">
            <summary>
            Base class for search program candidate determining operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIterationType">
            <summary>
            Available types of GetCandidateByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IncidentEdgeType">
            <summary>
            The different possibilites an edge might be incident to some node
            incoming; outgoing; incoming or outgoing if arbitrary directed, undirected, arbitrary
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIteration">
            <summary>
            Class representing "get candidate by iteration" operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawingType">
            <summary>
            Available types of GetCandidateByDrawing operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ImplicitNodeType">
            <summary>
            The different possibilites of drawing an implicit node from an edge
            if directed edge: source, target
            if arbitrary directed, undirected, arbitrary: source-or-target for first node, the-other for second node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawing">
            <summary>
            Class representing "get node by drawing" operation,
            setting current candidate for following check candidate operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BothDirectionsIteration">
            <summary>
            Class representing operation iterating both directions of an edge of unfixed direction 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidate">
            <summary>
            Base class for search program candidate filtering operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForTypeType">
            <summary>
            Available types of CheckCandidateForType operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForType">
            <summary>
            Class representing "check whether candidate is of allowed type" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateFailed">
            <summary>
            Class representing some check candidate operation,
            which was determined at generation time to always fail 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType">
            <summary>
            The different positions of some edge to check the candidate node against
            if directed edge: source, target
            if arbitrary directed, undirected, arbitrary edge: source-or-target for first node, the-other for second node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectedness">
            <summary>
            Class representing "check whether candidate is connected to the elements
              it should be connected to, according to the pattern" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphy">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other pattern element, to ensure required isomorphy" operation
            required graph element to pattern element mapping is written by AcceptCandidate
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphyGlobal">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other pattern element, to ensure required isomorphy" operation
            required graph element to pattern element mapping is written by AcceptCandidate
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForPreset">
            <summary>
            Class representing "check whether candidate was preset (not null)" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatch">
            <summary>
            Base class for search program operations
            filtering partial match
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegativeOrIndependent">
            <summary>
            Base class for search program operations
            filtering partial match by searching further patterns based on found one
            i.e. by negative or independent patterns (nac/pac)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegative">
            <summary>
            Class representing "check whether the negative pattern applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByIndependent">
            <summary>
            Class representing "check whether the independent pattern applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByCondition">
            <summary>
            Class representing "check whether the condition applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchForSubpatternsFound">
            <summary>
            Class representing "check whether the subpatterns of the pattern were found" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptCandidate">
            <summary>
            Class representing operations to execute upon candidate checking succeded;
            (currently only) writing isomorphy information to graph, for isomorphy checking later on
            (mapping graph element to pattern element)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptCandidateGlobal">
            <summary>
            Class representing operations to execute upon candidate gets accepted 
            into a complete match of its subpattern, locking candidate for other subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonCandidate">
            <summary>
            Class representing operations undoing effects of candidate acceptance 
            when performing the backtracking step;
            (currently only) restoring isomorphy information in graph, as not needed any more
            (mapping graph element to pattern element)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonCandidateGlobal">
            <summary>
            Class representing operations undoing effects of candidate acceptance 
            into complete match of it's subpattern when performing the backtracking step (unlocks candidate)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PositivePatternWithoutSubpatternsMatched">
            <summary>
            Class yielding operations to be executed 
            when a positive pattern without contained subpatterns was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LeafSubpatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a subpattern without contained subpatterns was matched (as the last element of the search)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternAndSubpatternsMatched">
            <summary>
            Class yielding operations to be executed 
            when a positive pattern was matched and all of it's subpatterns were matched at least once
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NegativePatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a negative pattern was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndependentPatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a independent pattern was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BuildMatchObjectType">
            <summary>
            Available types of BuildMatchObject operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BuildMatchObject">
            <summary>
            Class representing "pattern was matched, now build match object" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeadsTypes">
            <summary>
            Available types of AdjustListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatching">
            <summary>
            Base class for search program operations
            to check whether to continue the matching process 
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingTasksLeft">
            <summary>
            Class representing "check if matching process is to be aborted because
            there are no tasks to execute left" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached">
            <summary>
            Class representing "check if matching process is to be aborted because
            the maximum number of matches has been reached" operation
            listHeadAdjustment==false prevents listentrick
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfNegativeFailed">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always succeed.
            Check of abort negative matching process always succeeds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentFailed">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always succeed.
            Check of abort independent matching process always succeeds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentSucceeded">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always fail.
            Check of abort independent matching process always fails
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperationType">
            <summary>
            Available types of ContinueOperation operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperation">
            <summary>
            Class representing "continue matching there" control flow operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GotoLabel">
            <summary>
            Class representing location within code named with label,
            potential target of goto operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeadsTypes">
            <summary>
            Available types of RandomizeListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PushAndPopSubpatternTaskTypes">
            <summary>
            Available types of PushSubpatternTask and PopSubpatternTask operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PushSubpatternTask">
            <summary>
            Class representing "push a subpattern tasks to the open tasks stack" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PopSubpatternTask">
            <summary>
            Class representing "pop a subpattern tasks from the open tasks stack" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.MatchSubpatterns">
            <summary>
            Class representing "execute open subpattern matching tasks" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NewMatchesListForFollowingMatches">
            <summary>
            Class representing "create new matches list for following matches" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InitializeSubpatternMatching">
            <summary>
            Class representing "initialize subpattern matching" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FinalizeSubpatternMatching">
            <summary>
            Class representing "finalize subpattern matching" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InitializeNegativeIndependentMatching">
            <summary>
            Class representing "initialize negative/independent matching" operation
            it opens an isomorphy space at the next negLevel, finalizeXXX will close it
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FinalizeNegativeIndependentMatching">
            <summary>
            Class representing "finalize negative/independent matching" operation
            it closes an isomorphy space opened by initializeXXX, returning to the previous negLevel
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Expression">
            <summary>
            Base class of expressions used in conditions to constrain the pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.Expression.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            emits c# code implementing expression into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Operator">
            <summary>
            Base class of operator expressions
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BinInfixOperator">
            <summary>
            Class representing an binary infix operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BinFuncOperator">
            <summary>
            Class representing an binary prefix operator in function notation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.COND">
            <summary>
            Class representing a conditional operator (a ? b : c).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_OR">
            <summary>
            Class representing a logical or.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_AND">
            <summary>
            Class representing a logical and.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_OR">
            <summary>
            Class representing a bitwise or.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_BIT_OR">
            <summary>
            Class representing the set/map union operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_BIT_AND">
            <summary>
            Class representing the set/map intersection operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_EXCEPT">
            <summary>
            Class representing the set/map except operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_XOR">
            <summary>
            Class representing a bitwise xor.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_AND">
            <summary>
            Class representing a bitwise and.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EQ">
            <summary>
            Class representing an equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NE">
            <summary>
            Class representing an inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LT">
            <summary>
            Class representing a less than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LE">
            <summary>
            Class representing a less than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GT">
            <summary>
            Class representing a greater than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GE">
            <summary>
            Class representing a greater than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SHL">
            <summary>
            Class representing a shift left expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SHR">
            <summary>
            Class representing an arithmetic shift right expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_SHR">
            <summary>
            Class representing a logical shift right expression.
            TODO: Currently same as shift right expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ADD">
            <summary>
            Class representing an addition.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SUB">
            <summary>
            Class representing a subtraction.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MUL">
            <summary>
            Class representing a multiplication.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DIV">
            <summary>
            Class representing a division.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MOD">
            <summary>
            Class representing a modulo expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_NOT">
            <summary>
            Class representing a logical negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_NOT">
            <summary>
            Class representing a bitwise negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NEG">
            <summary>
            Class representing an arithmetic negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IN">
            <summary>
            Class representing a map/set inclusion query.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Cast">
            <summary>
            Class representing cast expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Constant">
            <summary>
            Class representing constant expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ConstantEnumExpression">
            <summary>
            Class representing enum constant expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GraphEntityExpression">
            <summary>
            Class representing graph entity expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Nameof">
            <summary>
            Class representing nameof expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Qualification">
            <summary>
            Class representing qualification expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Typeof">
            <summary>
            Class representing typeof expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.VariableExpression">
            <summary>
            Class representing variable expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Visited">
            <summary>
            Class representing visited expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringLength">
            <summary>
            Class representing a string length expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringSubstring">
            <summary>
            Class representing a substring expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringIndexOf">
            <summary>
            Class representing a string indexOf expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringLastIndexOf">
            <summary>
            Class representing a string lastIndexOf expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringReplace">
            <summary>
            Class representing a string replace expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapAccess">
            <summary>
            Class representing a map access expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapSize">
            <summary>
            Class representing a map size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapDomain">
            <summary>
            Class representing a map domain expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapRange">
            <summary>
            Class representing a map range expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetSize">
            <summary>
            Class representing a set size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticMap">
            <summary>
            Class representing a constant rule-local map, available as initalized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticSet">
            <summary>
            Class representing a constant rule-local set, available as initialized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapConstructor">
            <summary>
            Class representing a rule-local map to be filled with the given map items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapItem">
            <summary>
            Class representing a map item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetConstructor">
            <summary>
            Class representing a rule-local set to be filled with the given set items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetItem">
            <summary>
            Class representing a set item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator">
            <summary>
            Class generating matcher programs out of rules.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.CommentSourceCode">
            <summary>
            If true, the generated matcher functions are commented to improve understanding the source code.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpDynSourceCode">
            <summary>
            If true, the source code of dynamically generated matcher functions are dumped to a file in the current directory.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpSearchPlan">
            <summary>
            If true, generated search plans are dumped in VCG and TXT files in the current directory.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Instantiates a new instance of LGSPMatcherGenerator with the given graph model.
            </summary>
            <param name="model">The model for which the matcher functions shall be generated.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GeneratePlanGraph(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean)">
            <summary>
            Generate plan graph for given pattern graph with costs from the analyzed host graph.
            Plan graph contains nodes representing the pattern elements (nodes and edges)
            and edges representing the matching operations to get the elements by.
            Edges in plan graph are given in the nodes by incoming list, as needed for MSA computation.
            </summary>
            <param name="graph">The host graph to optimize the matcher program for, 
            providing statistical information about its structure </param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.MarkMinimumSpanningArborescence(de.unika.ipd.grGen.lgsp.PlanGraph,System.String)">
            <summary>
            Marks the minimum spanning arborescence of a plan graph by setting the IncomingMSAEdge
            fields for all nodes
            </summary>
            <param name="planGraph">The plan graph to be marked</param>
            <param name="dumpName">Names the dump targets if dump compiler flags are set</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchPlanGraph(de.unika.ipd.grGen.lgsp.PlanGraph)">
            <summary>
            Generate search plan graph out of the plan graph,
            search plan graph only contains edges chosen by the MSA algorithm.
            Edges in search plan graph are given in the nodes by outgoing list, as needed for scheduling,
            in contrast to incoming list in plan graph, as needed for MSA computation.
            </summary>
            <param name="planGraph">The source plan graph</param>
            <returns>A new search plan graph</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ScheduleSearchPlan(de.unika.ipd.grGen.lgsp.SearchPlanGraph,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates a scheduled search plan for a given search plan graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.AppendHomomorphyInformation(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Appends homomorphy information to each operation of the scheduled search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DetermineAndAppendHomomorphyChecks(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.Int32)">
            <summary>
            Determines which homomorphy check operations are necessary 
            at the operation of the given position within the scheduled search plan
            and appends them.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.FillInGlobalHomomorphyPatternElements(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.Int32)">
            <summary>
            fill in globally homomorphic elements as exception to global isomorphy check
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.MergeNegativeAndIndependentSchedulesIntoEnclosingSchedules(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Negative/Independent schedules are merged as an operation into their enclosing schedules,
            at a position determined by their costs but not before all of their needed elements were computed
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GetNeededElements(de.unika.ipd.grGen.lgsp.PatternCondition)">
            <summary>
            Returns the elements the given condition needs in order to be evaluated
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.CalculateNeededElements(de.unika.ipd.grGen.lgsp.PatternGraph,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Calculates the elements the given pattern graph and it's nested pattern graphs don't compute locally
            but expect to be preset from outwards
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertNegativesAndIndependentsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts schedules of negative and independent pattern graphs into the schedule of the enclosing pattern graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertConditionsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternCondition[],System.Collections.Generic.List{de.unika.ipd.grGen.lgsp.SearchOperation})">
            <summary>
            Inserts conditions into the schedule given by the operations list at their earliest possible position
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.AnnotateIndependentsAtNestingTopLevelOrAlternativeCasePattern(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Insert names of independents nested within the pattern graph 
            to the matcher generation skeleton data structure pattern graph 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherSourceCode(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean)">
            <summary>
            Generates the matcher source code for the given rule pattern into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherSourceCode(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative,System.Boolean)">
            <summary>
            Generates the matcher source code for the given alternative into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherSourceCode(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates the matcher source code for the nested alternatives
            within the given negative/independent pattern graph into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchProgram(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Generates the serach program for the pattern graph of the given rule
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchProgram(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative)">
            <summary>
            Generates the search program for the given alternative 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateFileHeaderForActionsFile(de.unika.ipd.grGen.lgsp.SourceBuilder,System.String,System.String)">
            <summary>
            Generates file header for actions file into given source builer
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadAction(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPRulePattern,System.Boolean)">
            <summary>
            Generates matcher class head source code for the pattern of the rulePattern into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadSubpattern(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean)">
            <summary>
            Generates matcher class head source code for the subpattern of the rulePattern into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadAlternative(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative,System.Boolean)">
            <summary>
            Generates matcher class head source code for the given alternative into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateIndependentsMatchObjects(de.unika.ipd.grGen.lgsp.SourceBuilder,System.String,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Generates match objects of independents (one pre-allocated is part of action class)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateTasksMemoryPool(de.unika.ipd.grGen.lgsp.SourceBuilder,System.String,System.Boolean)">
            <summary>
            Generates memory pooling code for matching tasks of class given by it's name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassTail(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Generates matcher class tail source code
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateScheduledSearchPlans(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean,System.Boolean)">
            <summary>
            Generates scheduled search plans needed for matcher code generation for action compilation
            out of graph with analyze information, 
            The scheduled search plans are added to the main and the nested pattern graphs.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GetDynCompilerSetup(System.String,System.String)">
            <summary>
            Setup of compiler parameters for recompilation of actions at runtime taking care of analyze information
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateAction(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.LGSPAction,System.String,System.String,System.String)">
            <summary>
            Generates an LGSPAction object for the given scheduled search plan.
            </summary>
            <param name="action">Needed for the rule pattern and the name</param>
            <param name="sourceOutputFilename">null if no output file needed</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.SubpatternsUsedByTheActions(de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Computes all, by the given actions directly or indirectly used subpatterns.
            returned in set with rulepatterns of the subpatterns, implemented by abused dictionary as .net lacks a set datatype - argggh
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActions(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Generate new actions for the given actions, doing the same work, 
            but hopefully faster by taking graph analysis information into account
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateAction(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Generate a new action for the given action, doing the same work, 
            but hopefully faster by taking graph analysis information into account
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPElemFlags">
            <summary>
            Flags for graph elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.HAS_VARIABLES">
            <summary>
            Some variable contains this element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN">
            <summary>
            This element has already been matched within some enclosing pattern
            during the current matching process.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_MATCHED">
            <summary>
            This element has already been matched within the local pattern
            during the current matching process.
            This mask must be shifted left by the current neg level.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.MAX_NEG_LEVEL">
            <summary>
            Maximum neg level which can be handled by the flags.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_VISITED">
            <summary>
            This element has already been visited by a visitor.
            This mask must be shifted left by the according visitor ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.NUM_SUPPORTED_VISITOR_IDS">
            <summary>
            Number of visitors which can be handled by the flags.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPNode">
            <summary>
            Class implementing nodes in the libGr search plan backend
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.type">
            <summary>
            The node type of the node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.flags">
            <summary>
            contains some booleans coded as bitvector
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.typePrev">
            <summary>
            Previous and next node in the list containing all the nodes of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.typeNext">
            <summary>
            Previous and next node in the list containing all the nodes of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.outhead">
            <summary>
            Entry node into the outgoing edges list - not of type edge head, real edge or null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.inhead">
            <summary>
            Entry node into the incoming edges list - not of type edge head, real edge or null
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.#ctor(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Instantiates an LGSPNode object.
            </summary>
            <param name="nodeType">The node type.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleAdjacent(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all adjacent edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactAdjacent(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all adjacent edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.MoveOutHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the head of the outgoing list after the given edge.
            Part of the "list trick".
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.MoveInHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the head of the incoming list after the given edge.
            Part of the "list trick".
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.InstanceOf(de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Returns true, if the graph element is compatible to the given type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Clone">
            <summary>
            Creates a copy of this node.
            All attributes will be transfered to the new node.
            The node will not be associated to a graph, yet.
            So it will not have any adjacent edges nor any assigned variables.
            </summary>
            <returns>A copy of this node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Recycle">
            <summary>
            Recycles this node. This may pool the node or just ignore it.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ToString">
            <summary>
            Returns the name of the type of this node.
            </summary>
            <returns>The name of the type of this node.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Valid">
            <summary>
            This is true, if this node is a valid graph element, i.e. it is part of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.ReplacedByElement">
            <summary>
            The element which replaced this element (Valid is false in this case)
            or null, if this element has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.ReplacedByNode">
            <summary>
            The node which replaced this node (Valid is false in this case)
            or null, if this node has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.de#unika#ipd#grGen#libGr#INode#ReplacedByNode">
            <summary>
            The node which replaced this node (Valid is false in this case)
            or null, if this node has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Outgoing">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Incoming">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Adjacent">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all adjacent edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Type">
            <summary>
            The NodeType of the node.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            The GrGenType of the node.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPNodeHead">
            <summary>
            Special head node of the lists containing all the nodes of one type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPEdge">
            <summary>
            Class implementing edges in the libGr search plan backend
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.type">
            <summary>
            The EdgeType of the edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.flags">
            <summary>
            contains some booleans coded as bitvector
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.typeNext">
            <summary>
            Previous and next edge in the list containing all the edges of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.typePrev">
            <summary>
            Previous and next edge in the list containing all the edges of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.source">
            <summary>
            source and target nodes of this edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.target">
            <summary>
            source and target nodes of this edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.inNext">
            <summary>
            previous and next edge in the incoming list of the target node containing all of it's incoming edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.inPrev">
            <summary>
            previous and next edge in the incoming list of the target node containing all of it's incoming edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.outNext">
            <summary>
            previous and next edge in the outgoing list of the source node containing all of it's outgoing edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.outPrev">
            <summary>
            previous and next edge in the outgoing list of the source node containing all of it's outgoing edges
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.#ctor(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Instantiates an LGSPEdge object.
            </summary>
            <param name="edgeType">The edge type.</param>
            <param name="sourceNode">The source node.</param>
            <param name="targetNode">The target node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.GetOther(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Retrieves the other adjacent node of this edge.
            </summary>
            <remarks>If the given node is not the source, the source will be returned.</remarks>
            <param name="sourceOrTarget">One node of this edge.</param>
            <returns>The other node of this edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.InstanceOf(de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Returns true, if the graph element is compatible to the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Clone(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Creates a copy of this edge.
            All attributes will be transfered to the new edge.
            The edge will not be associated to a graph, yet.
            So it will not have any assigned variables.
            </summary>
            <param name="newSource">The new source node for the new edge.</param>
            <param name="newTarget">The new target node for the new edge.</param>
            <returns>A copy of this edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Recycle">
            <summary>
            Recycles this edge. This may pool the edge or just ignore it.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ToString">
            <summary>
            Returns the name of the type of this edge.
            </summary>
            <returns>The name of the type of this edge.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Valid">
            <summary>
            This is true, if this edge is a valid graph element, i.e. it is part of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.ReplacedByElement">
            <summary>
            The element which replaced this element (Valid is false in this case)
            or null, if this element has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.ReplacedByEdge">
            <summary>
            The edge which replaced this edge (Valid is false in this case)
            or null, if this edge has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.de#unika#ipd#grGen#libGr#IEdge#ReplacedByEdge">
            <summary>
            The edge which replaced this edge (Valid is false in this case)
            or null, if this edge has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Source">
            <summary>
            The source node of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Target">
            <summary>
            The target node of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Type">
            <summary>
            The EdgeType of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            The GrGenType of the edge.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPEdgeHead">
            <summary>
            Special head edge of the lists containing all the edges of one type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchOperationType">
            <summary>
            Describes the type of a search operation.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Void">
            <summary>
            Void operation; retype to void to delete operation from ssp quickly.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.MaybePreset">
            <summary>
            Preset handed in to action pattern, maybe null
            (might occur in enclosed negative pattern, too, but replaced by neg preset in schedule).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.NegIdptPreset">
            <summary>
            Preset handed in to negative/independent pattern, matched in enclosing pattern
            (normal preset is converted into this when reaching schedule, but not before).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SubPreset">
            <summary>
            Preset handed in to subpattern, never null
            (might occur in enclosed negative pattern, too, but replaced by neg preset in schedule).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Lookup">
            <summary>
            Draw element from graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Outgoing">
            <summary>
            Follow outgoing edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Incoming">
            <summary>
            Follow incoming edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Incident">
            <summary>
            Follow outgoing and incoming edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ImplicitSource">
            <summary>
            Get source node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ImplicitTarget">
            <summary>
            Get target node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Implicit">
            <summary>
            Get source and target node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.NegativePattern">
            <summary>
            Try to match negative pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.IndependentPattern">
            <summary>
            Try to match independent pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Condition">
            <summary>
            Check matched pattern by condition.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanPseudoNode">
            <summary>
            Common base class for the PlanNodes and PlanSuperNodes, 
            used for uniform access to the derived nodes within the minimum spanning arborescent computation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.PreferNewEdge(de.unika.ipd.grGen.lgsp.PlanEdge,System.Single,de.unika.ipd.grGen.lgsp.PlanEdge,System.Single)">
            <summary>
            Decides whether a new edge is better than a known best edge up to now.
            </summary>
            <returns>true if new edge should be chosen</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopSuperNode">
            <summary>
            outermost enclosing supernode, null if not contained within a supernode
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopNode">
            <summary>
            outermost enclosing supernode, the node itself if not contained within a supernode
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanNode">
            <summary>
            Element of the plan graph representing a node or edge within the pattern graph or a root node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeSource">
            <summary>
            Only valid if this plan node is representing a pattern edge, 
            then PatternEdgeSource gives us the plan node made out of the source node of the edge
            then PatternEdgeTarget gives us the plan node made out of the target node of the edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeTarget">
            <summary>
            Only valid if this plan node is representing a pattern edge, 
            then PatternEdgeSource gives us the plan node made out of the source node of the edge
            then PatternEdgeTarget gives us the plan node made out of the target node of the edge
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(System.String)">
            <summary>
            Instantiates a root plan node.
            </summary>
            <param name="rootName">The name for the root plan node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.Boolean)">
            <summary>
            Instantiates a node plan node.
            </summary>
            <param name="patNode">The pattern node for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternEdge,System.Int32,System.Boolean,de.unika.ipd.grGen.lgsp.PlanNode,de.unika.ipd.grGen.lgsp.PlanNode)">
            <summary>
            Instantiates an edge plan node.
            </summary>
            <param name="patEdge">The pattern edge for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
            <param name="patternEdgeSource">The plan node corresponding to the source of the pattern edge.</param>
            <param name="patternEdgeTarget">The plan node corresponding to the target of the pattern edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanSuperNode">
            <summary>
            Element of the plan graph representing a strongly connected component within the pattern graph.
            Hierachically nested.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanSuperNode.Child">
            <summary>
            Representative element of the cycle as entry point. Target of cheapest incoming edge.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanSuperNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanSuperNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanEdge">
            <summary>
            A plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanEdge.mstCost">
            <summary>
            Cost used by the operation selection.
            This represents max(log(Cost),1).
            This field is altered during the contraction algorithm.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanGraph">
            <summary>
            The plan graph data structure for the MSA-algorithm.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPXGRSInfo">
            <summary>
            Represents an XGRS used in an exec statement.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPXGRSInfo.#ctor(System.String[],System.String)">
            <summary>
            Constructs an LGSPXGRSInfo object.
            </summary>
            <param name="parameters">The names of the needed graph elements of the containing action.</param>
            <param name="xgrs">The XGRS string.</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPXGRSInfo.Parameters">
            <summary>
            The names of the needed graph elements of the containing action.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPXGRSInfo.XGRS">
            <summary>
            The XGRS string.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGrGen">
            <summary>
            The C#-part of the GrGen.NET frontend.
            It is responsible for compiling the XGRSs of the exec statements
            and generating initial actions with static search plans.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.#ctor(de.unika.ipd.grGen.libGr.ProcessSpecFlags)">
            <summary>
            Constructs an LGSPGrGen object.
            </summary>
            <param name="flags">Flags specifying how the specification should be processed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system 
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.GenerateStaticPlanGraph(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean)">
            <summary>
            Generate plan graph for given pattern graph with costs from initial static schedule handed in with graph elements.
            Plan graph contains nodes representing the pattern elements (nodes and edges)
            and edges representing the matching operations to get the elements by.
            Edges in plan graph are given in the nodes by incoming list, as needed for MSA computation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.GenerateScheduledSearchPlans(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator,System.Boolean,System.Boolean)">
            <summary>
            Generates scheduled search plans needed for matcher code generation for action compilation
            out of static schedule information given by rulePattern elements, 
            utilizing code of the lgsp matcher generator.
            The scheduled search plans are added to the main and the nested pattern graphs.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags)">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="flags">Specifies how the specification is to be processed.</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String)">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.CheckIsMatchedBit">
            <summary>
            if true, the graph element's is-matched-bit must be checked
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.SetIsMatchedBit">
            <summary>
            if true, the graph element's is-matched-bit must be set
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.PatternElementsToCheckAgainst">
            <summary>
            pattern elements the current element is not allowed to be homomorph to
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.GloballyHomomorphPatternElements">
            <summary>
            pattern elements the current element is allowed to be globally homomorph to
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchOperation">
            <summary>
            Search operation with information about homomorphic mapping.
            Element of the scheduled search plan.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperation.Element">
            <summary>
            If Type is NegativePattern, Element is a negative ScheduledSearchPlan object.
            If Type is Condition, Element is a Condition object.
            Otherwise Element is the target SearchPlanNode for this operation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ScheduledSearchPlan">
            <summary>
            The scheduled search plan is a list of search operations,
            plus the information which nodes/edges are homomorph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.MatchInvoker">
            <summary>
            Represents a matcher method.
            </summary>
            <param name="graph">The host graph.</param>
            <param name="maxMatches">The maximum number of matches to be searched for, or zero for an unlimited search.</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain the correct number of elements.</param>
            <returns>An IMatches object containing the found matches.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Nodes_Enumerable">
            <summary>
            enumerable returning enumerator over nodes in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Nodes_Enumerator">
            <summary>
            enumerator over nodes in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Edges_Enumerable">
            <summary>
            enumerable returning enumerator over edges in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Edges_Enumerator">
            <summary>
            enumerator over edges in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Variables_Enumerable">
            <summary>
            enumerable returning enumerator over variables in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Variables_Enumerator">
            <summary>
            enumerator over variables in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.EmbeddedGraphs_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.EmbeddedGraphs_Enumerator">
            <summary>
            enumerator over submatches due to subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternatives_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to alternatives
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternatives_Enumerator">
            <summary>
            enumerator over submatches due to alternatives
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Independents_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to independents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Independents_Enumerator">
            <summary>
            enumerator over submatches due to independents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ListElement`1">
            <summary>
            Element of invasive linked list of T
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.ListElement`1.next">
            <summary>
            The next element in the linked list.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1">
            <summary>
            An object representing a (possibly empty) set of matches in a graph before the rewrite has been applied.
            It is returned by IAction.Match() and given to the OnMatched, OnFinishing and OnFinished event.
            Generic to be instantiated with the exact type of the match object
            Every generated Action contains a LGSPMatchesList.
            A matches list stores the matches found by the last application of the action,
            the matches objects within the list are recycled by the next application of the action,
            only their content gets updated.
            The purpose of this list is to act as a memory manager 
            to save new/garbage collection cycles and improve cache footprint.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.GetEnumerator">
            <summary>
            Returns an enumerator over all found matches.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a non-generic enumerator over all found matches.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.GetMatch(System.Int32)">
            <summary>
            Returns the match with the given index. Invalid indices cause an exception.
            This may be slow. If you want to iterate over the elements the Matches IEnumerable should be used.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.RemoveMatch(System.Int32)">
            <summary>
            Removes the match at the given index and returns it.
            </summary>
            <param name="index">The index of the match to be removed.</param>
            <returns>The removed match.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.#ctor(de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Constructs a new LGSPMatchesList instance.
            </summary>
            <param name="producer">The action object used to generate this LGSPMatchesList object</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.GetNextUnfilledPosition">
            <summary>
            returns an empty match object from the matches list 
            to be filled by the matching action with the found nodes, edges and subpatterns.
            unless PositionWasFilledFixIt is called you always get the same element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.PositionWasFilledFixIt">
            <summary>
            the match object returned by GetNextUnfilledPosition was filled,
            now fix it within the list, so that the next call to GetNextUnfilledPosition returns a new element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.Clear">
            <summary>
            remove all filled and committed elements from the list
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.producer">
            <summary>
            the action object used to generate this LGSPMatchesList object
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.root">
            <summary>
            head of list
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.last">
            <summary>
            logically last element of list, not necessarily physically the last element 
            as previously generated matches are kept and recycled 
            denotes the next point of logical insertion i.e. physical update
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.count">
            <summary>
            number of found matches in the list
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.Producer">
            <summary>
            The action object used to generate this LGSPMatchesList object
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.Count">
            <summary>
            The number of matches in this list.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.First">
            <summary>
            The first match of this list.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`1.Item(System.Int32)">
            <summary>
            Returns the match with the given index.
            This may be slow. If you want to iterate over the elements the Matches IEnumerable should be used.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPAction">
            <summary>
            An object representing an executable rule of the LGSPBackend.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.rulePattern">
            <summary>
            The LGSPRulePattern object from which this LGSPAction object has been created.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.patternGraph">
            <summary>
            The PatternGraph object of the main graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.DynamicMatch">
            <summary>
            A delegate pointing to the current matcher program for this rule.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Match(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Int32,System.Object[])">
            <summary>
            Searches for a graph pattern as specified by RulePattern.
            </summary>
            <param name="graph">The host graph.</param>
            <param name="maxMatches">The maximum number of matches to be searched for, or zero for an unlimited search.</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>An IMatches object containing the found matches.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Modify(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match.
            </summary>
            <returns>An array of objects returned by the rule.
            It is only valid until the next graph rewrite with this rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ModifyAll(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.libGr.IMatches)">
            <summary>
            Performs the rule specific modifications to the given graph with all of the given matches.
            No OnRewritingNextMatch events are triggered by this function.
            </summary>
            <returns>An array of objects returned by the last applicance of the rule.
            It is only valid until the next graph rewrite with this rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Apply(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Tries to apply this rule to the given graph once.
            The rule must not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>A possibly empty array of objects returned by the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.Apply(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Object[])">
            <summary>
            Tries to apply this rule to the given graph once.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>A possibly empty array of objects returned by the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyAll(System.Int32,de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Tries to apply this rule to all occurrences in the given graph "at once".
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="maxMatches">The maximum number of matches to be rewritten or 0 for no limit.</param>
            <param name="graph">Host graph for this rule</param>
            <returns>A possibly empty array of objects returned by the last applicance of the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyAll(System.Int32,de.unika.ipd.grGen.lgsp.LGSPGraph,System.Object[])">
            <summary>
            Tries to apply this rule to all occurrences in the given graph "at once".
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="maxMatches">The maximum number of matches to be rewritten.</param>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>A possibly empty array of objects returned by the last applicance of the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Match(de.unika.ipd.grGen.libGr.IGraph,System.Int32,System.Object[])">
            <summary>
            Searches for a graph pattern as specified by RulePattern.
            </summary>
            <param name="graph">The host graph.</param>
            <param name="maxMatches">The maximum number of matches to be searched for, or zero for an unlimited search.</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>An IMatches object containing the found matches.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Modify(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match.
            The graph and match object must have the correct type for the used backend.
            </summary>
            <returns>An array of objects returned by the rule.
            It is only valid until the next graph rewrite with this rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#ModifyAll(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IMatches)">
            <summary>
            Performs the rule specific modifications to the given graph with all of the given matches.
            No OnRewritingNextMatch events are triggered by this function.
            </summary>
            <returns>An array of objects returned by the last applicance of the rule.
            It is only valid until the next graph rewrite with this rule.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Apply(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Tries to apply this rule to the given graph once.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>A possibly empty array of objects returned by the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#Apply(de.unika.ipd.grGen.libGr.IGraph,System.Object[])">
            <summary>
            Tries to apply this rule to the given graph once.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>A possibly empty array of objects returned by the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#ApplyAll(System.Int32,de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Tries to apply this rule to all occurrences in the given graph "at once".
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="maxMatches">The maximum number of matches to be rewritten or 0 for no limit.</param>
            <param name="graph">Host graph for this rule</param>
            <returns>A possibly empty array of objects returned by the last applicance of the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.de#unika#ipd#grGen#libGr#IAction#ApplyAll(System.Int32,de.unika.ipd.grGen.libGr.IGraph,System.Object[])">
            <summary>
            Tries to apply this rule to all occurrences in the given graph "at once".
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="maxMatches">The maximum number of matches to be rewritten or 0 for no limit.</param>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>A possibly empty array of objects returned by the last applicance of the rule,
            which is only valid until the next graph rewrite with this rule,
            or null, if no match was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyStar(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Applies this rule to the given graph as often as possible.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyStar(de.unika.ipd.grGen.libGr.IGraph,System.Object[])">
            <summary>
            Applies this rule to the given graph as often as possible.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyPlus(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Applies this rule to the given graph as often as possible.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <returns>True, if the rule was applied at least once.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyPlus(de.unika.ipd.grGen.libGr.IGraph,System.Object[])">
            <summary>
            Applies this rule to the given graph as often as possible.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied at least once.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyMinMax(de.unika.ipd.grGen.libGr.IGraph,System.Int32,System.Int32)">
            <summary>
            Applies this rule to the given graph at most max times.
            The rule may not require any parameters.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="min">The minimum number of applications to be "successful".</param>
            <param name="max">The maximum number of applications to be applied.</param>
            <returns>True, if the rule was applied at least min times.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPAction.ApplyMinMax(de.unika.ipd.grGen.libGr.IGraph,System.Int32,System.Int32,System.Object[])">
            <summary>
            Applies this rule to the given graph at most max times.
            No Matched/Finished events are triggered by this function.
            </summary>
            <param name="graph">Host graph for this rule</param>
            <param name="min">The minimum number of applications to be "successful".</param>
            <param name="max">The maximum number of applications to be applied.</param>
            <param name="parameters">An array of parameters (nodes, edges, values) of the types specified by RulePattern.Inputs.
            The array must contain at least RulePattern.Inputs.Length elements.</param>
            <returns>True, if the rule was applied at least min times.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.Name">
            <summary>
            The name of the action (without prefixes)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.RulePattern">
            <summary>
            The RulePattern object from which this LGSPAction object has been created.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPActions">
            <summary>
            A container of rules also managing some parts of rule application with sequences.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPActions.actions">
            <summary>
            A map from action names to LGSPAction objects.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Constructs a new LGSPActions instance.
            </summary>
            <param name="lgspgraph">The associated graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String)">
            <summary>
            Constructs a new LGSPActions instance.
            This constructor is deprecated.
            </summary>
            <param name="lgspgraph">The associated graph.</param>
            <param name="modelAsmName">The name of the model assembly.</param>
            <param name="actionsAsmName">The name of the actions assembly.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateAction(de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Replaces the given action by a new action instance with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="action">The action to be replaced.</param>
            <returns>The new action instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateAction(System.String)">
            <summary>
            Replaces the given action by a new action instance with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="actionName">The name of the action to be replaced.</param>
            <returns>The new action instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateActions(de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Replaces the given actions by new action instances with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="oldActions">An array of actions to be replaced.</param>
            <returns>An array with the new action instances.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateActions(System.String[])">
            <summary>
            Replaces the given actions by new action instances with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="actionNames">An array of names of actions to be replaced.</param>
            <returns>An array with the new action instances.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.ReplaceAction(System.String,de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Replaces a given action by another one.
            </summary>
            <param name="actionName">The name of the action to be replaced.</param>
            <param name="newAction">The new action.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.Custom(System.Object[])">
            <summary>
            Does action-backend dependent stuff.
            </summary>
            <param name="args">Any kind of parameters for the stuff to do</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GetAction(System.String)">
            <summary>
            Gets the action with the given name.
            </summary>
            <param name="name">The name of the action.</param>
            <returns>The action with the given name, or null, if no such action exists.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GetIAction(System.String)">
            <summary>
            Gets the action with the given name.
            </summary>
            <param name="name">The name of the action.</param>
            <returns>The action with the given name, or null, if no such action exists.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPActions.Graph">
            <summary>
            The associated graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPActions.Actions">
            <summary>
            Enumerates all actions managed by this LGSPActions instance.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction">
            <summary>
            Abstract base class for generated subpattern matching actions
            each object of an inheriting class represents a subpattern matching tasks
            which might be stored on the open tasks stack and executed later on.
            In addition to user-specified subpatterns, alternatives are mapped to subpattern actions, too.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.patternGraph">
            <summary>
            The PatternGraph object from which this matching task object has been created
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.patternGraphs">
            <summary>
            The PatternGraph objects from which this matching task object has been created
            (non-null in case of an alternative, contains the pattern graphs of the alternative cases then)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.graph">
            <summary>
            The host graph in which to search for matches
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.openTasks">
            <summary>
            The subpattern actions which have to be executed until a full match is found
            The inheriting class contains the preset subpattern connection elements
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.myMatch(System.Collections.Generic.List{System.Collections.Generic.Stack{de.unika.ipd.grGen.libGr.IMatch}},System.Int32,System.Int32)">
            <summary>
            Searches for the subpattern as specified by RulePattern.
            Takes care of search state as given by found partial matches, negLevel to search at
            and maximum number of matches to search for (zero = find all matches) 
            (and open tasks via this).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPTransactionManager">
            <summary>
            A class for managing graph transactions.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.StartTransaction">
            <summary>
            Starts a transaction
            </summary>
            <returns>A transaction ID to be used with Commit or Rollback</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.Commit(System.Int32)">
            <summary>
            Removes the rollback data and stops this transaction
            </summary>
            <param name="transactionID">Transaction ID returned by a StartTransaction call</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPTransactionManager.Rollback(System.Int32)">
            <summary>
            Undoes all changes during a transaction
            </summary>
            <param name="transactionID">The ID of the transaction to be rollbacked</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGraph">
            <summary>
            An implementation of the IGraph interface.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.curActions">
            <summary>
            Currently associated LGSPActions object.
            This is needed to the current matchers while executing an exec statement on the RHS of a rule.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodeCounts">
            <summary>
            The number of compatible nodes in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgeCounts">
            <summary>
            The number of compatible edges in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.meanOutDegree">
            <summary>
            The mean out degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.meanInDegree">
            <summary>
            The mean in degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodesByTypeHeads">
            <summary>
            An array containing one head of a doubly-linked ring-list for each node type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodesByTypeCounts">
            <summary>
            The number of nodes for each node type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgesByTypeHeads">
            <summary>
            An array containing one head of a doubly-linked ring-list for each edge type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgesByTypeCounts">
            <summary>
            The number of edges for each edge type indexed by the type ID.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Constructs an LGSPGraph object with the given model and an automatically generated name.
            </summary>
            <param name="grmodel">The graph model.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,System.String)">
            <summary>
            Constructs an LGSPGraph object with the given model and name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPBackend,de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.String)">
            <summary>
            Constructs an LGSPGraph object.
            Deprecated.
            </summary>
            <param name="lgspBackend">The responsible backend object.</param>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
            <param name="modelassemblyname">The name of the model assembly.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(System.String)">
            <summary>
            Constructs an LGSPGraph object without initializing it.
            </summary>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String)">
            <summary>
            Copy constructor.
            Open transaction data lost.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.InitializeGraph(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Initializes the graph with the given model.
            </summary>
            <param name="grmodel">The model for this graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.DestroyGraph">
            <summary>
            For persistent backends permanently destroys the graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.LoadActions(System.String)">
            <summary>
            Loads a LGSPActions implementation
            </summary>
            <param name="actionFilename">Filename of a action file. This can be either a library (.dll) or source code (.cs)</param>
            <returns>A LGSPActions object as BaseActions</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumExactNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Returns the number of nodes with the exact given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumExactEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns the number of edges with the exact given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetExactNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Enumerates all nodes with the exact given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetExactEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Enumerates all edges with the exact given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumCompatibleNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Returns the number of nodes compatible to the given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumCompatibleEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns the number of edges compatible to the given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetCompatibleNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Enumerates all nodes compatible to the given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetCompatibleEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Enumerates all edges compatible to the given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.MoveHeadAfter(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Moves the type list head of the given node after the given node.
            Part of the "list trick".
            </summary>
            <param name="elem">The node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.MoveHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the type list head of the given edge after the given edge.
            Part of the "list trick".
            </summary>
            <param name="elem">The edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNodeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPNode,System.Int32)">
            <summary>
            Adds an existing node to this graph.
            The graph may not already contain the node!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdgeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPEdge,System.Int32)">
            <summary>
            Adds an existing edge to this graph.
            The graph may not already contain the edge!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Adds an existing INode object to the graph and assigns it to the given variable.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Adds an existing LGSPNode object to the graph.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds an existing LGSPNode object to the graph.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddINode(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Adds a new node to the graph.
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Creates a new LGSPNode according to the given type and adds
            it to the graph.
            </summary>
            <param name="nodeType">The type for the new node.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds an existing LGSPNode object to the graph and assigns it to the given variable.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddINode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new node to the graph.
            TODO: Slow but provides a better interface...
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new LGSPNode to the graph and assigns it to the given variable.
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.IEdge,System.String)">
            <summary>
            Adds an existing IEdge object to the graph and assigns it to the given variable.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.IEdge)">
            <summary>
            Adds an existing LGSPEdge object to the graph.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Adds an existing LGSPEdge object to the graph.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds a new edge to the graph.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Adds a new edge to the graph.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,System.String)">
            <summary>
            Adds an existing LGSPEdge object to the graph and assigns it to the given variable.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes the given node from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.IEdge)">
            <summary>
            Removes the given edge from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RemoveEdges(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes all edges from the given node.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseNode(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Reuses an LGSPNode object for a new node of the same type.
            This causes a RemovingEdges, a RemovingNode and a NodeAdded event and removes all edges
            and variables pointing to the old element.
            </summary>
            <param name="node">The LGSPNode object to be reused.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Reuses an LGSPEdge object for a new edge of the same type and optionally changes the source and/or target.
            This causes a RemovingEdge and an EdgeAdded event and removes all variables pointing to the old element.
            </summary>
            <param name="edge">The LGSPEdge object to be reused.</param>
            <param name="newSource">The new source of the edge, or null if it is not to be changed.</param>
            <param name="newTarget">The new target of the edge, or null if it is not to be changed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Clear">
            <summary>
            Removes all nodes and edges (including any variables pointing to them) from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Retypes a node by creating a new node of the given type.
            All adjacent edges as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new node, yet! (TODO)
            </summary>
            <param name="node">The node to be retyped.</param>
            <param name="newNodeType">The new type for the node.</param>
            <returns>The new node object representing the retyped node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Retypes a node by creating a new node of the given type.
            All adjacent edges as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new node, yet! (TODO)
            </summary>
            <param name="node">The node to be retyped.</param>
            <param name="newNodeType">The new type for the node.</param>
            <returns>The new node object representing the retyped node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Retypes an edge by replacing it by a new edge of the given type.
            Source and target node as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new edge, yet! (TODO)
            </summary>
            <param name="edge">The edge to be retyped.</param>
            <param name="newEdgeType">The new type for the edge.</param>
            <returns>The new edge object representing the retyped edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.libGr.IEdge,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Retypes an edge by replacing it by a new edge of the given type.
            Source and target node as well as all attributes from common super classes are kept.
            WARNING: GetElementName will probably not return the same element name for the new edge, yet! (TODO)
            </summary>
            <param name="edge">The edge to be retyped.</param>
            <param name="newEdgeType">The new type for the edge.</param>
            <returns>The new edge object representing the retyped edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceNode(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Replaces a given node by another one.
            All adjacent edges and variables are transferred to the new node.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldNode">The node to be replaced.</param>
            <param name="newNode">The replacement for the node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Replaces a given edge by another one.
            Source and target node are transferred to the new edge,
            but the new edge must already have source and target set to these nodes.
            The new edge is added to the graph, the old edge is removed.
            A SettingEdgeType event is generated before.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldEdge">The edge to be replaced.</param>
            <param name="newEdge">The replacement for the edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AllocateVisitedFlag">
            <summary>
            Allocates a clean visited flag on the graph elements.
            If needed the flag is cleared on all graph elements, so this is an O(n) operation.
            </summary>
            <returns>A visitor ID to be used in
            visited conditions in patterns ("if { !visited(elem, id); }"),
            visited expressions in evals ("visited(elem, id) = true; b.flag = visited(elem, id) || c.flag; "}
            and calls to other visitor functions.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.FreeVisitedFlag(System.Int32)">
            <summary>
            Frees a visited flag.
            This is an O(1) operation.
            It adds visitor flags supported by the element flags to the front of the list
            to prefer them when allocating a new one.
            </summary>
            <param name="visitorID">The ID of the visited flag to be freed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ResetVisitedFlag(System.Int32)">
            <summary>
            Resets the visited flag with the given ID on all graph elements, if necessary.
            </summary>
            <param name="visitorID">The ID of the visited flag.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Int32,System.Boolean)">
            <summary>
            Sets the visited flag of the given graph element.
            </summary>
            <param name="elem">The graph element whose flag is to be set.</param>
            <param name="visitorID">The ID of the visited flag.</param>
            <param name="visited">True for visited, false for not visited.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Int32)">
            <summary>
            Returns whether the given graph element has been visited.
            </summary>
            <param name="elem">The graph element to be examined.</param>
            <param name="visitorID">The ID of the visited flag.</param>
            <returns>True for visited, false for not visited.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetElementName(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns the first variable name for the given element it finds (if any).
            </summary>
            <param name="elem">Element which name is to be found</param>
            <returns>A name which can be used in GetVariableValue to get this element</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetElementVariables(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns a linked list of variables mapped to the given graph element
            or null, if no variable points to this element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetVariableValue(System.String)">
            <summary>
            Retrieves the object for a variable name or null, if the variable isn't set yet or anymore.
            </summary>
            <param name="varName">The variable name to lookup</param>
            <returns>The according object or null</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNodeVarValue(System.String)">
            <summary>
            Retrieves the LGSPNode for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPNode object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPNode or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetEdgeVarValue(System.String)">
            <summary>
            Retrieves the LGSPEdge for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPEdge object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPEdge or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.DetachVariableFromElement(de.unika.ipd.grGen.libGr.Variable)">
            <summary>
            Detaches the specified variable from the according graph element.
            If it was the last variable pointing to the element, the variable list for the element is removed.
            This function may only called on variables pointing to graph elements.
            </summary>
            <param name="var">Variable to detach.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets the value of the given variable to the given IGraphElement.
            If the variable name is null, this function does nothing.
            If elem is null, the variable is unset.
            </summary>
            <param name="varName">The name of the variable.</param>
            <param name="val">The new value of the variable or null to unset the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AnalyzeGraph">
            <summary>
            Analyzes the graph.
            The calculated data is used to generate good searchplans for the current graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Mature">
            <summary>
            Mature a graph.
            This method should be invoked after adding all nodes and edges to the graph.
            The backend may implement analyses on the graph to speed up matching etc.
            The graph may not be modified by this function.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Custom(System.Object[])">
            <summary>
            Does graph-backend dependent stuff.
            </summary>
            <param name="args">Any kind of paramteres for the stuff to do</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Clone(System.String)">
            <summary>
            Duplicates a graph.
            The new graph will use the same model and backend as the other
            Open transaction data will not be cloned.
            </summary>
            <param name="newName">Name of the new graph.</param>
            <returns>A new graph with the same structure as this graph.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Actions">
            <summary>
            A currently associated actions object.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseOptimization">
            <summary>
            If true (the default case), elements deleted during a rewrite
            may be reused in the same rewrite.
            As a result new elements may not be discriminable anymore from
            already deleted elements using object equality, hash maps, etc.
            In cases where this is needed this optimization should be disabled.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Name">
            <summary>
            A name associated with the graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Model">
            <summary>
            The model associated with the graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.TransactionManager">
            <summary>
            Returns the graph's transaction manager.
            For attribute changes using the transaction manager is the only way to include such changes in the transaction history!
            Don't forget to call Commit after a transaction is finished!
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.NodesMarked">
            <summary>
            Specifies whether this visitor has already marked any nodes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.EdgesMarked">
            <summary>
            Specifies whether this visitor has already marked any edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.VisitedElements">
            <summary>
            A hash map containing all visited elements (the values are not used).
            This is unused (and thus null), if the graph element flags are used for this visitor ID.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NamesOfEntities">
            <summary>
            class determining names of entities in generated source code from pattern element entities 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateVariable(System.String)">
            <summary>
            Returns name of the candidate variable which will be created within the seach program
            holding over time the candidates for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeForCandidateVariable(System.String)">
            <summary>
            Returns name of the type variable which will be created within the search program
            holding the type object which will be used for determining the candidates
            for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.Variable(System.String)">
            <summary>
            Returns name of non-graph-element variable 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeOfVariableContainingType(System.Boolean)">
            <summary>
            Returns name of the type of the type variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeIdForCandidateVariable(System.String)">
            <summary>
            Returns name of the type id variable which will be created within the search program
            holding the type id which will be used for determining the candidates
            for the given pattern element   (determined out of type object in iteration)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateIterationListHead(System.String)">
            <summary>
            Returns name of the list head variable which will be created within the search program
            holding the list head of the list accessed by type id with the graph elements of that type
            for finding out when iteration of the candidates for the given pattern element has finished
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MissingPresetHandlingMethod(System.String)">
            <summary>
            Returns name of the method called when a maybe preset element is not set
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedBit(System.String,System.String)">
            <summary>
            Returns name of the variable which will be created within the seach program
            backing up the value of the isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedBitGlobal(System.String,System.String)">
            <summary>
            Returns name of the variable which will be created within the seach program
            backing up the value of the isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TaskVariable(System.String,System.String)">
            <summary>
            Returns name of the task variable which will be created within the seach program
            holding the task object whose connections need to be filled before being pushed on the open tasks stack
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeOfTaskVariable(System.String,System.Boolean)">
            <summary>
            Returns name of the type of the task variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.RulePatternClassName(System.String,System.Boolean)">
            <summary>
            Returns name of the rule pattern class
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchClassName(System.String)">
            <summary>
            Returns name of the match class
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchInterfaceName(System.String)">
            <summary>
            Returns name of the match interface
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchedIndependentVariable(System.String)">
            <summary>
            Returns name of the action member variable storing the matched independent
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchName(System.String,de.unika.ipd.grGen.lgsp.BuildMatchObjectType)">
            <summary>
            Returns name of the given element in the match class with correct match part prefix
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.DirectionRunCounterVariable(System.String)">
            <summary>
            Returns name of the state variable storing which direction run is currently underway
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPBackend">
            <summary>
            A helper class for backend independent graph and rule handling.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateGraph(de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.String[])">
            <summary>
            Creates a new IGraph backend instance with the given graph model and name
            </summary>
            <param name="graphModel">An IGraphModel instance</param>
            <param name="graphName">Name of the graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The new IGraph backend instance</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateGraph(System.String,System.String,System.String[])">
            <summary>
            Creates a new IGraph backend instance with the graph model provided by the graph model file and a name.
            </summary>
            <param name="modelFilename">Filename of a graph model file</param>
            <param name="graphName">Name of the graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The new IGraph backend instance</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.IgnoreRest(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.Char)">
            <summary>
            Ignores the rest of a string.
            </summary>
            <param name="charStream">The SimpleCharStream object.</param>
            <param name="curChar">The last character read. Set to '\0' to ignore.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.MatchStringOrIgnoreOther(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.String)">
            <summary>
            Tries to match a string at the current position of a SimpleCharStream.
            If the string at the current position does not match, it is skipped.
            Here all characters other than A-Z, a-z, 0-9, _, and # are skipped.
            </summary>
            <param name="charStream">The char stream.</param>
            <param name="str">The string to be matched.</param>
            <returns>True, iff the string was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system 
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetDir(System.String)">
            <summary>
            Retrieves the directory path from a given file path.
            Any slashes or backslashes are converted to the correct directory
            separator chars for the current platform.
            </summary>
            <param name="path">A path to a file.</param>
            <returns>A path to the directory containing the file.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetActionsName(System.String)">
            <summary>
            Constructs the actions name out of the rule specification file name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="graphName">Name of the new graph.</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.OpenGraph(System.String,System.String,System.String[])">
            <summary>
            Opens an existing graph identified by graphName using the specifiede IGraphModel.
            This may not be supported by the backend, if the data is not persistent.
            </summary>
            <param name="modelFilename">Filename of a graph model file</param>
            <param name="graphName">Name of an existing graph</param>
            <param name="parameters">Backend specific parameters</param>
            <returns>The IGraph backend instance or NULL on error</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags)">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="flags">Specifies how the specification is to be processed.</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String)">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPBackend.Name">
            <summary>
            The name of the backend.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPBackend.ArgumentNames">
            <summary>
            Enumerates the names of the arguments which can be optionally passed to the create/open functions.
            Not currently used...
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPBackend.ExistingGraphs">
            <summary>
            An enumerable of KeyValuePairs, where the keys are names of existing graphs and the
            values are the names of the appropriate models (not filenames).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramType">
            <summary>
            says what kind of search program to build
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramBuilder">
            <summary>
            class for building search program data structure from scheduled search plan
            holds environment variables for this build process
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.MAXIMUM_NUMBER_OF_TYPES_TO_CHECK_BY_TYPE_ID">
            <summary>
            name says everything
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPRulePattern,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Builds search program from scheduled search plan in pattern graph of the action rule pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Builds search program from scheduled search plan in pattern graph of the subpattern rule pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative)">
            <summary>
            Builds search program for alternative from scheduled search plans of the alternative cases
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildAddionalSearchSubprograms(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.SearchProgram,de.unika.ipd.grGen.lgsp.LGSPRulePattern)">
            <summary>
            Create an extra search subprogram per MaybePreset operation.
            Created search programs are added to search program next field, forming list.
            Destroys the scheduled search program.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.programType">
            <summary>
            type of the program which gets currently built
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.patternGraph">
            <summary>
            the pattern graph to build (of the rule pattern or the subpattern)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.isNegative">
            <summary>
            is the pattern graph a negative pattern graph?
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.isNestedInNegative">
            <summary>
            is the current pattern graph nested within a negative pattern graph?
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.alternative">
            <summary>
            the alternative to build
            non-null if the builder constructs an alternative
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.rulePatternClassName">
            <summary>
            name of the rule pattern class of the pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.negativeIndependentNames">
            <summary>
            stack of negative/independent names representing the nesting of negative/independent patterns (nac/pac)
            the top of stack is the name of the negative/independent pattern whose buildup is currently underway
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.negLevelNeverAboveMaxNegLevel">
            <summary>
            true if statically determined that the neg level of the pattern getting constructed 
            is always below the maximum neg level
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildScheduledSearchPlanOperationIntoSearchProgram(System.Int32,de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Builds search program operations from scheduled search plan operation.
            Decides which specialized build procedure is to be called.
            The specialized build procedure then calls this procedure again, 
            in order to process the next search plan operation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMaybePreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            MaybePreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegIdptPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            NegIdptPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildSubPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            SubPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Lookup search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildImplicit(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,de.unika.ipd.grGen.lgsp.ImplicitNodeType)">
            <summary>
            Search program operations implementing the
            Implicit Source|Target|SourceOrTarget search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIncident(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Search program operations implementing the
            Extend Incoming|Outgoing|IncomingOrOutgoing search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegative(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Search program operations implementing the
            Negative search plan operation (searching of negative application condition)
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Search program operations implementing the
            Independent search plan operation (searching of positive application condition)
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildCondition(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternCondition)">
            <summary>
            Search program operations implementing the
            Condition search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMatchComplete(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Search program operations completing the matching process
            after all pattern elements have been found are created and inserted into the program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.ImplicitNodeType,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Inserts code to get an implicit node from an edge
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertIncidentEdgeFromNode(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IncidentEdgeType,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Inserts code to get an incident edge from some node
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertMatchObjectBuilding(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Boolean)">
            <summary>
            Inserts code to build the match object
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPushSubpatternTasks(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to push the subpattern tasks to the open tasks stack 
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPopSubpatternTasks(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to pop the subpattern tasks from the open tasks stack
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForTasksLeft(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether there are open tasks to handle left and code for case there are none
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertGlobalAccept(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to accept the matched elements globally
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertGlobalAbandon(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to abandon the matched elements globally
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForSubpatternsFound(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether the subpatterns were found and code for case there were some
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForSubpatternsFoundNegativeIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether the subpatterns were found and code for case there were some
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternFound(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to handle case pattern was found
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternFoundNegativeIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to handle case negative/independent pattern was found
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertGetType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which get type operation to use and inserts it
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within type iteration was built
            if type drawing was sufficient, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Decides which check type operation to build and inserts it into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeFromLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node just determined by lookup
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node just drawn from edge
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeFixedDirection(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge of fixed direction
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeBothDirections(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge in both directions
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeFromLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined by lookup
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfIncidentEdgeFromNode(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,System.Boolean,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined from incident node
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeFixedDirection(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given edge of fixed direction
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeBothDirections(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,System.Boolean,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge in both directions
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            todo: if no direction iteration was needed, insertion point == continuation point ?
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.CompleteCallsToMissingPresetHandlingMethodInAllSearchPrograms(de.unika.ipd.grGen.lgsp.SearchProgram,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Completes calls to missing preset handling methods in all search programs
              (available at the time the functions is called)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.CompleteCallsToMissingPresetHandlingMethod(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Completes calls to missing preset handling methods 
            by inserting the initially not given arguments
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.NegativeIndependentNamePrefix">
            <summary>
            returns name prefix for candidate variables computed from current negative/independent pattern nesting
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.computeMaxNegLevel(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            computes maximum neg level of the given positive pattern graph 
            if it can be easily determined statically
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.computeMaxNegLevelNegative(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            computes maximum neg level of the given negative pattern graph 
            if it can be easily determined statically
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentNodeIsFirstIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the first incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentNodeIsSecondIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the second incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsOnlyToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if only one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if at least one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsToSecondIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if both incident nodes of the edge which gets currently determined in the schedule
            were already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNode">
            <summary>
            Element of the search plan graph representing an element within the pattern graph or a root node.
            </summary>>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode">
            <summary>
            Element of the search plan graph representing a node within the pattern graph.
            </summary>>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode.IncomingPatternEdges">
            <summary>
            IncomingPatternEdges are the search plan nodes which originate from the incoming pattern edges of the pattern node this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode.OutgoingPatternEdges">
            <summary>
            OutgoingPatternEdges are the search plan nodes which originate from the outgoing pattern edges of the pattern node this node represents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode">
            <summary>
            Element of the search plan graph representing an edge within the pattern graph.
            </summary>>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.PatternEdgeSource">
            <summary>
            PatternEdgeSource gives us the search plan node which originated from the source of the pattern edge this node represents
            PatternEdgeTarget gives us the search plan node which originated from the target of the pattern edge this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.PatternEdgeTarget">
            <summary>
            PatternEdgeSource gives us the search plan node which originated from the source of the pattern edge this node represents
            PatternEdgeTarget gives us the search plan node which originated from the target of the pattern edge this node represents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdge">
            <summary>
            A search plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanGraph">
            <summary>
            The search plan graph data structure for scheduling.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramCompleter">
            <summary>
            Class completing search programs
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperationsInAllSearchPrograms(de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            Iterate all search programs to complete check operations within each one
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperations(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.GetPartialMatchOfAlternative,de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegativeOrIndependent)">
            <summary>
            Completes check operations in search program from given currentOperation on
            (taking borderlines set by enclosing search program and check negative into account)
            Completion:
            - determine continuation point
            - insert remove isomorphy opertions needed for continuing there
            - insert continuing operation itself
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingListHeadAdjustment(de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached)">
            <summary>
            "listentrick": append search program operations to adjust list heads
            i.e. set list entry point to element after last found,
            so that next searching starts there - preformance optimization
            (leave graph in the state of our last visit (searching it))
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingRemoveIsomorphyAndJump(de.unika.ipd.grGen.lgsp.CheckOperation,System.String[],de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            move outwards from check operation until operation to continue at is found
            appending restore isomorphy for isomorphy written on the way
            and final jump to operation to continue at
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveRightAfterCorrespondingIndependentFailedAppendingRemoveIsomorphyAndJump(de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentSucceeded,de.unika.ipd.grGen.lgsp.CheckPartialMatchByIndependent)">
            <summary>
            move outwards from check succeeded operation until check partial match by independent is found
            appending restore isomorphy for isomorphy written on the way
            and final jump to operation right after the independent failed operation of the check partial match by independent 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingRemoveIsomorphy(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgramOperation@,System.String[],de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            move outwards from starting point on until operation to continue at is found
            appending restore isomorphy at insertion point for isomorphy written on the way
            returns operation to continue at
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternElement">
            <summary>
            An element of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.PointOfDefinition">
            <summary>
            The pattern where this element gets matched (null if rule parameter).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.TypeID">
            <summary>
            The type ID of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.typeName">
            <summary>
            The name of the type interface of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.name">
            <summary>
            The name of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.unprefixedName">
            <summary>
            Pure name of the pattern element as specified in the .grg file without any prefixes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.AllowedTypes">
            <summary>
            An array of allowed types for this pattern element.
            If it is null, all subtypes of the type specified by typeID (including itself)
            are allowed for this pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.IsAllowedType">
            <summary>
            An array containing a bool for each node/edge type (order defined by the TypeIDs)
            which is true iff the corresponding type is allowed for this pattern element.
            It should be null if allowedTypes is null or empty or has only one element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.Cost">
            <summary>
            Default cost/priority from frontend, user priority if given.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.ParameterIndex">
            <summary>
            Specifies to which rule parameter this pattern element corresponds.
            Only valid if pattern element is handed in as rule parameter.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.#ctor(System.Int32,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32)">
            <summary>
            Instantiates a new PatternElement object.
            </summary>
            <param name="typeID">The type ID of the pattern element.</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern element.</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost">Default cost/priority from frontend, user priority if given.</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.Name">
            <summary>
            The name of the pattern element.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.UnprefixedName">
            <summary>
            The pure name of the pattern element as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternNode">
            <summary>
            A pattern node of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternNode.TempPlanMapping">
            <summary>
            plan graph node corresponding to this pattern node, used in plan graph generation, just hacked into this place
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(System.Int32,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32)">
            <summary>
            Instantiates a new PatternNode object
            </summary>
            <param name="typeID">The type ID of the pattern node</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern node</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost"> default cost/priority from frontend, user priority if given</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternEdge">
            <summary>
            A pattern edge of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternEdge.fixedDirection">
            <summary>
            Indicates, whether this pattern edge should be matched with a fixed direction or not.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(System.Boolean,System.Int32,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32)">
            <summary>
            Instantiates a new PatternEdge object
            </summary>
            <param name="fixedDirection">Whether this pattern edge should be matched with a fixed direction or not.</param>
            <param name="typeID">The type ID of the pattern edge.</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern edge.</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost"> default cost/priority from frontend, user priority if given</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternVariable">
            <summary>
            A pattern variable of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.Type">
            <summary>
            The GrGen type of the variable.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.unprefixedName">
            <summary>
            Pure name of the variable as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.ParameterIndex">
            <summary>
            Specifies to which rule parameter this variable corresponds.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternVariable.#ctor(de.unika.ipd.grGen.libGr.VarType,System.String,System.String,System.Int32)">
            <summary>
            Instantiates a new PatternVariable object.
            </summary>
            <param name="type">The GrGen type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="unprefixedName">Pure name of the variable as specified in the .grg without any prefixes.</param>
            <param name="parameterIndex">Specifies to which rule parameter this variable corresponds.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.UnprefixedName">
            <summary>
            The pure name of the pattern element as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternCondition">
            <summary>
            Representation of some condition which must be true for the pattern containing it to be matched
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.ConditionExpression">
            <summary>
            The condition expression to evaluate
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededNodes">
            <summary>
            An array of node names needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededEdges">
            <summary>
            An array of edge names needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededVariables">
            <summary>
            An array of variable names needed by this condition.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternCondition.#ctor(de.unika.ipd.grGen.expression.Expression,System.String[],System.String[],System.String[])">
            <summary>
            Constructs a PatternCondition object.
            </summary>
            <param name="conditionExpression">The condition expression to evaluate.</param>
            <param name="neededNodes">An array of node names needed by this condition.</param>
            <param name="neededEdges">An array of edge names needed by this condition.</param>
            <param name="neededVariables">An array of variable names needed by this condition.</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternGraph">
            <summary>
            Representation of the pattern to search for, 
            containing nested alternative, negative, and independent-patterns, 
            plus references to the rules of the used subpatterns.
            Accessible via IPatternGraph as meta information to the user about the matching action.
            Skeleton data structure for the matcher generation pipeline which stores intermediate results here, 
            which saves us from representing the nesting structure again and again in the pipeline's data structures
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetSource(de.unika.ipd.grGen.libGr.IPatternEdge)">
            <summary>
            Returns the source pattern node of the given edge, null if edge dangles to the left
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetTarget(de.unika.ipd.grGen.libGr.IPatternEdge)">
            <summary>
            Returns the target pattern node of the given edge, null if edge dangles to the right
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.name">
            <summary>
            The name of the pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.pathPrefix">
            <summary>
            Prefix for name from nesting path
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isPatternpathLocked">
            <summary>
            NIY
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.nodes">
            <summary>
            An array of all pattern nodes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edges">
            <summary>
            An array of all pattern edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.variables">
            <summary>
            An array of all pattern variables.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetSource(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the source pattern node of the given edge, null if edge dangles to the left
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetTarget(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the target pattern node of the given edge, null if edge dangles to the right
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToSourceNode">
            <summary>
            contains the source node of the pattern edges in this graph if specified 
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToTargetNode">
            <summary>
            contains the target node of the pattern edges in this graph if specified 
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicNodes">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicEdges">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicNodesGlobal">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node globally,
            i.e. the nodes are contained in different, but locally nested patterns (alternative cases).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicEdgesGlobal">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge globally,
            i.e. the edges are contained in different, but locally nested patterns (alternative cases).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.embeddedGraphs">
            <summary>
            An array with subpattern embeddings, i.e. subpatterns and the way they are connected to the pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.alternatives">
            <summary>
            An array of alternatives, each alternative contains in its cases the subpatterns to choose out of.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.negativePatternGraphs">
            <summary>
            An array of negative pattern graphs which make the search fail if they get matched
            (NACs - Negative Application Conditions).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.independentPatternGraphs">
            <summary>
            An array of independent pattern graphs which must get matched in addition to the main pattern
            (PACs - Positive Application Conditions).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.embeddingGraph">
            <summary>
            The pattern graph which contains this pattern graph, null if this is a top-level-graph 
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.Conditions">
            <summary>
            The conditions used in this pattern graph or it's nested graphs
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.#ctor(System.String,System.String,System.Boolean,de.unika.ipd.grGen.lgsp.PatternNode[],de.unika.ipd.grGen.lgsp.PatternEdge[],de.unika.ipd.grGen.lgsp.PatternVariable[],de.unika.ipd.grGen.lgsp.PatternGraphEmbedding[],de.unika.ipd.grGen.lgsp.Alternative[],de.unika.ipd.grGen.lgsp.PatternGraph[],de.unika.ipd.grGen.lgsp.PatternGraph[],de.unika.ipd.grGen.lgsp.PatternCondition[],System.Boolean[0:,0:],System.Boolean[0:,0:],System.Boolean[0:,0:],System.Boolean[0:,0:])">
            <summary>
            Constructs a PatternGraph object.
            </summary>
            <param name="name">The name of the pattern graph.</param>
            <param name="pathPrefix">Prefix for name from nesting path.</param>
            <param name="isPatternpathLocked">NIY</param>
            <param name="nodes">An array of all pattern nodes.</param>
            <param name="edges">An array of all pattern edges.</param>
            <param name="variables">An array of all pattern variables.</param>
            <param name="embeddedGraphs">An array with subpattern embeddings,
            i.e. subpatterns and the way they are connected to the pattern.</param>
            <param name="alternatives">An array of alternatives, each alternative contains
            in its cases the subpatterns to choose out of.</param>
            <param name="negativePatternGraphs">An array of negative pattern graphs which make the
            search fail if they get matched (NACs - Negative Application Conditions).</param>
            <param name="conditions">The conditions used in this pattern graph or it's nested graphs.</param>
            <param name="homomorphicNodes">A two-dimensional array describing which pattern node may
            be matched non-isomorphic to which pattern node.</param>
            <param name="homomorphicEdges">A two-dimensional array describing which pattern edge may
            be matched non-isomorphic to which pattern edge.</param>
            <param name="homomorphicNodesGlobal">A two-dimensional array describing which pattern node
            may be matched non-isomorphic to which pattern node globally, i.e. the nodes are contained
            in different, but locally nested patterns (alternative cases).</param>
            <param name="homomorphicEdgesGlobal">A two-dimensional array describing which pattern edge
            may be matched non-isomorphic to which pattern edge globally, i.e. the edges are contained
            in different, but locally nested patterns (alternative cases).</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.Schedule">
            <summary>
            A schedule for this pattern graph without any sub pattern graphs.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.ScheduleIncludingNegativesAndIndependents">
            <summary>
            A schedule for this pattern graph including negatives and independents (and subpatterns?).   TODO
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.PathPrefixesAndNamesOfNestedIndependents">
            <summary>
            The path prefixes and names of the independents nested within this pattern graph
            only in top-level-patterns and alternatives, only independents not nested within negatives 
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Name">
            <summary>
            The name of the pattern graph
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Nodes">
            <summary>
            An array of all pattern nodes.
            </summary>        
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Edges">
            <summary>
            An array of all pattern edges.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Variables">
            <summary>
            An array of all pattern variables.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicNodes">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicEdges">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicNodesGlobal">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node globally,
            i.e. the nodes are contained in different, but locally nested patterns (alternative cases).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicEdgesGlobal">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge globally,
            i.e. the edges are contained in different, but locally nested patterns (alternative cases).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.EmbeddedGraphs">
            <summary>
            An array with subpattern embeddings, i.e. subpatterns and the way they are connected to the pattern
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Alternatives">
            <summary>
            An array of alternatives, each alternative contains in its cases the subpatterns to choose out of.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.NegativePatternGraphs">
            <summary>
            An array of negative pattern graphs which make the search fail if they get matched
            (NACs - Negative Application Conditions).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.IndependentPatternGraphs">
            <summary>
            An array of independent pattern graphs which must get matched in addition to the main pattern
            (PACs - Positive Application Conditions).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.EmbeddingGraph">
            <summary>
            The pattern graph which contains this pattern graph, null if this is a top-level-graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding">
            <summary>
            Embedding of a subpattern into it's containing pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.PointOfDefinition">
            <summary>
            The pattern where this complex subpattern element gets matched.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.name">
            <summary>
            The name of the usage of the subpattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.matchingPatternOfEmbeddedGraph">
            <summary>
            The embedded subpattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.connections">
            <summary>
            An array with the connections telling how the subpattern is connected to the containing pattern,
            that are the pattern elements of the containing pattern used for that purpose.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.#ctor(System.String,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternElement[])">
            <summary>
            Constructs a PatternGraphEmbedding object.
            </summary>
            <param name="name">The name of the usage of the subpattern.</param>
            <param name="matchingPatternOfEmbeddedGraph">The embedded subpattern.</param>
            <param name="connections">An array with the connections telling how the subpattern is connected
            to the containing pattern, that are the pattern elements of the containing pattern used for
            that purpose.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.Name">
            <summary>
            The name of the usage of the subpattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.EmbeddedGraph">
            <summary>
            The embedded subpattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.Connections">
            <summary>
            An array with the connections telling how the subpattern is connected to the containing pattern,
            that are the pattern elements of the containing pattern used for that purpose
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternative">
            <summary>
            An alternative is a pattern graph element containing subpatterns
            of which one must get successfully matched so that the entire pattern gets matched successfully.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.name">
            <summary>
            Name of the alternative.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.pathPrefix">
            <summary>
            Prefix for name from nesting path.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.alternativeCases">
            <summary>
            Array with the alternative cases.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.Alternative.#ctor(System.String,System.String,de.unika.ipd.grGen.lgsp.PatternGraph[])">
            <summary>
            Constructs an Alternative object.
            </summary>
            <param name="name">Name of the alternative.</param>
            <param name="pathPrefix">Prefix for name from nesting path.</param>
            <param name="cases">Array with the alternative cases.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.Alternative.AlternativeCases">
            <summary>
            Array with the alternative cases.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern">
            <summary>
            A description of a GrGen matching pattern, that's a subpattern/subrule or the base for some rule.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.patternGraph">
            <summary>
            The main pattern graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.inputs">
            <summary>
            An array of GrGen types corresponding to rule parameters.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.inputNames">
            <summary>
            Names of the rule parameter elements
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.name">
            <summary>
            Our name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.initialize">
            <summary>
            Initializes this matching pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.PatternGraph">
            <summary>
            The main pattern graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.Inputs">
            <summary>
            An array of GrGen types corresponding to rule parameters.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPRulePattern">
            <summary>
            A description of a GrGen rule.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPRulePattern.Modify(de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match (rewrite part).
            The graph and match object must have the correct type for the used backend.
            </summary>
            <param name="graph">The host graph for this modification.</param>
            <param name="match">The match which is used for this rewrite.</param>
            <returns>An array of objects returned by the rule</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPRulePattern.Modify(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match (rewrite part).
            The graph and match object must have the correct type for the used backend.
            </summary>
            <param name="graph">The host graph for this modification.</param>
            <param name="match">The match which is used for this rewrite.</param>
            <returns>An array of objects returned by the rule</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPRulePattern.ModifyNoReuse(de.unika.ipd.grGen.lgsp.LGSPGraph,de.unika.ipd.grGen.libGr.IMatch)">
            <summary>
            Performs the rule specific modifications to the given graph with the given match (rewrite part).
            The graph and match object must have the correct type for the used backend.
            No reusing of graph elements is used like changing source and target of edges instead of allocating a new edge.
            </summary>
            <param name="graph">The host graph for this modification.</param>
            <param name="match">The match which is used for this rewrite.</param>
            <returns>An array of objects returned by the rule</returns>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPRulePattern.EmptyReturnElements">
            <summary>
            Performance optimization: saves us usage of new in Modify for returning empty array.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPRulePattern.outputs">
            <summary>
            An array of GrGen types corresponding to rule return values.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRulePattern.Outputs">
            <summary>
            An array of GrGen types corresponding to rule return values.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SourceBuilder">
            <summary>
            Pretty printing helper class for source code generation
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SourceBuilder.CommentSourceCode">
            <summary>
            If true, the source code should be generated with comments.
            </summary>
        </member>
    </members>
</doc>
