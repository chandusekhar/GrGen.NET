actions Turing using TuringModel;

rule readZeroRule {
	pattern {
		s:State -h:rwHead-> tp:TapePosition -:zero-> tp;
		s -:zero-> wv:WriteValue;
	}
	modify {
		delete(h);
		wv -:rwHead-> tp;
	}
}      

rule readOneRule {
	pattern {
		s:State -h:rwHead-> tp:TapePosition -:one-> tp;
		s -:one-> wv:WriteValue;
	}
	modify {
		delete(h);
		wv -:rwHead-> tp;
	}
}

rule readEmptyRule {
	pattern {
		s:State -h:rwHead-> tp:TapePosition -:empty-> tp;
		s -:empty-> wv:WriteValue;
	}
	modify {
		delete(h);
		wv -:rwHead-> tp;
	}
}

rule writeZeroRule {
	pattern {
		wv:WriteZero -rw:rwHead-> tp:TapePosition -:value-> tp;
	}
	replace {
		wv -rw-> tp -:zero-> tp;
	}	
}

rule writeOneRule {
	pattern {
		wv:WriteOne -rw:rwHead-> tp:TapePosition -:value-> tp;
	}
	replace {
		wv -rw-> tp -:one-> tp;
	}	
}

rule writeEmptyRule {
	pattern {
		wv:WriteEmpty -rw:rwHead-> tp:TapePosition -:value-> tp;
	}
	replace {
		wv -rw-> tp -:empty-> tp;
	}	
}

rule moveLeftRule {
	pattern {
		wv:WriteValue -:moveLeft-> s:State;
		wv -h:rwHead-> tp:TapePosition <-r:right- ltp:TapePosition;
	}
	modify {
		delete(h);
		s -:rwHead-> ltp;
	}
}

rule moveRightRule {
	pattern {
		wv:WriteValue -:moveRight-> s:State;
		wv -h:rwHead-> tp:TapePosition -r:right-> rtp:TapePosition;
	}
	modify {
		delete(h);
		s -:rwHead-> rtp;
	}
}

rule dontMoveRule {
	pattern {
		wv:WriteValue -:dontMove-> s:State;
		wv -h:rwHead-> tp:TapePosition;
	}
	modify {
		delete(h);
		s -:rwHead-> tp;
	}
}

rule ensureMoveLeftValidRule {
	pattern {
		wv:WriteValue -:moveLeft-> :State;
		wv -:rwHead-> tp:TapePosition;
		negative {
			tp <-:right-;
		}
	}
	modify {
		tp <-:right- ltp:TapePosition -:empty-> ltp;
	}
}

rule ensureMoveRightValidRule {
	pattern {
		wv:WriteValue -:moveRight-> :State;
		wv -:rwHead-> tp:TapePosition;
		negative {
			tp -:right->;
		}
	}
	modify {
		tp -:right-> rtp:TapePosition -:empty-> rtp;
	}
}

