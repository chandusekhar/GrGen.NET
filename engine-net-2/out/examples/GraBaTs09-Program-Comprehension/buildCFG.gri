rule CFG_handle_statements
{
	block:dom_Block;
	block -e1:dom_Block_statements-> st1:dom_Statement;
	block -e2:dom_Block_statements-> st2:dom_Statement;
	
	if { e1.index + 1 == e2.index; }

	modify {
		st1 -:org_amma_cfg_AbstractNode_toNode-> st2;
	}
}

rule CFG_handle_while
{
	while:dom_WhileStatement -cfgfalse:org_amma_cfg_AbstractNode_toNode->;
	while -:dom_WhileStatement_body-> body:dom_Statement;

	modify {
		-:org_amma_cfg_ConditionalNode_falseConditionNode<cfgfalse>->;
		while -:org_amma_cfg_ConditionalNode_trueConditionNode-> body;
		body -:org_amma_cfg_AbstractNode_toNode-> while;
	}
}

rule CFG_handle_block
{
	block:dom_Block;
	block <-cfgtrue:org_amma_cfg_ConditionalNode_trueConditionNode- while:dom_WhileStatement;
	block -endwhile:org_amma_cfg_AbstractNode_toNode-> while;

	hom(first, last);
	hom(st1, st2);
	block -st1:dom_Block_statements-> first:dom_Statement;
	block -st2:dom_Block_statements-> last:dom_Statement;

	if { st1.index == 0; }
	negative {
		block -st:dom_Block_statements->;
		if { st.index > st2.index; }
	}

	modify {
		delete(cfgtrue);
		delete(endwhile);

		while -:org_amma_cfg_ConditionalNode_trueConditionNode-> first;
		last -:org_amma_cfg_AbstractNode_toNode-> while;
	}
}

rule CFG_sweep_graph {
	modify {
		exec(CFG_sweep_graph_Step1* && CFG_sweep_graph_Step2*);
	}
}

rule CFG_sweep_graph_Step1
{
	n:Node\HelperNode;
	negative {
		n <-:org_amma_cfg_AbstractNode_toNode->;
	}
	negative {
		n <-:org_amma_cfg_ConditionalNode_trueConditionNode->;
	}
	negative {
		n <-:org_amma_cfg_ConditionalNode_falseConditionNode->;
	}
	
	negative {
		n -:HelperEdge->;
	}

	replace {}
}

rule CFG_sweep_graph_Step2
{
	exact(n);
	n:Node -:HelperEdge-> helper:HelperNode;

	replace {}
}

rule AST_nodes_2_CFG {
	modify {
		exec((ExpressionStatement_2_CFG || WhileStatement_2_CFG ||
		      SimpleName_2_CFG || NumberLiteral_2_CFG || Assignment_2_CFG ||
		      InfixExpression_2_CFG || PostfixExpression_2_CFG ||
		      MethodInvocation_2_CFG || ExpressionEdge_2_CFG)*);
	}
}

rule ExpressionStatement_2_CFG {
	stmt:dom_ExpressionStatement -:dom_ExpressionStatement_expression-> expr:dom_Expression;
	expr -:HelperEdge-> helper:HelperNode;
	
	modify {
		cfg_node:org_amma_cfg_Node<stmt>;
		
		eval {
			cfg_node._name = helper.name;
		}
	}
}

rule WhileStatement_2_CFG {
	stmt:dom_WhileStatement -:dom_WhileStatement_expression-> expr:dom_Expression;
	expr -:HelperEdge-> helper:HelperNode;
	
	modify {
		cfg_node:org_amma_cfg_IterativeNode<stmt>;
		
		eval {
			cfg_node._name = "While(" + helper.name + ")";
		}
	}
}

rule SimpleName_2_CFG {
	expr:dom_SimpleName -:HelperEdge-> helper:HelperNode;
	
	replace {
		cfg_expr:org_amma_cfg_Expression<expr>;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = true;
		}
	}
}

rule NumberLiteral_2_CFG {
	expr:dom_NumberLiteral -:HelperEdge-> helper:HelperNode;
	
	replace {
		cfg_expr:org_amma_cfg_Expression<expr>;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = false;
		}
	}
}

rule Assignment_2_CFG {
	expr:dom_Assignment -:HelperEdge-> helper:HelperNode;
	expr -lhs:dom_Assignment_leftHandSide->;
	expr -rhs:dom_Assignment_rightHandSide->;
	
	modify {
		delete(helper);
	
		cfg_expr:org_amma_cfg_Expression<expr>;
		-cfg_lhs:org_amma_cfg_Expression_innerExpression<lhs>->;
		-cfg_rhs:org_amma_cfg_Expression_innerExpression<rhs>->;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = false;
			cfg_lhs.index = 0;
			cfg_rhs.index = 1;
		}
	}
}

rule InfixExpression_2_CFG {
	expr:dom_InfixExpression -:HelperEdge-> helper:HelperNode;
	expr -lhs:dom_InfixExpression_leftOperand->;
	expr -rhs:dom_InfixExpression_rightOperand->;
	
	modify {
		delete(helper);

		cfg_expr:org_amma_cfg_Expression<expr>;
		-cfg_lhs:org_amma_cfg_Expression_innerExpression<lhs>->;
		-cfg_rhs:org_amma_cfg_Expression_innerExpression<rhs>->;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = false;
			cfg_lhs.index = 0;
			cfg_rhs.index = 1;
		}
	}
}

rule PostfixExpression_2_CFG {
	expr:dom_PostfixExpression -:HelperEdge-> helper:HelperNode;
	expr -op:dom_PostfixExpression_operand->;
	
	modify {
		delete(helper);

		cfg_expr:org_amma_cfg_Expression<expr>;
		-cfg_op:org_amma_cfg_Expression_innerExpression<op>->;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = false;
			cfg_op.index = 0;
		}
	}
}

rule MethodInvocation_2_CFG {
	expr:dom_MethodInvocation -:HelperEdge-> helper:HelperNode;
	expr -arg:dom_MethodInvocation_arguments->;
	
	// name is already transformed
	expr -:dom_MethodInvocation_name-> name:org_amma_cfg_Expression;
	
	modify {
		delete(name, helper);

		cfg_expr:org_amma_cfg_Expression<expr>;
		-cfg_arg:org_amma_cfg_Expression_innerExpression<arg>->;
		
		eval {
			cfg_expr._expressionName = helper.operator;
			cfg_expr._isIdentifier = false;
			cfg_arg.index = 1;
		}
	}
}

rule ExpressionEdge_2_CFG {
	:org_amma_cfg_AbstractNode -e:Edge\org_amma_cfg_AbstractNode_expression-> :org_amma_cfg_Expression;
	
	modify {
		-cfg_edge:org_amma_cfg_AbstractNode_expression<e>->;
	}
}

rule Add_Enter_Exit {
	replace {
		enter:CFG_Enter;
		exit:CFG_Exit;
		
		eval {
			enter._name = "Enter";
			exit._name = "Exit";
		}
	}
}

rule Connect_Enter {
	enter:CFG_Enter;
	n:org_amma_cfg_AbstractNode;
	
	negative {
		--> n;
	}
	
	modify {
		enter -:org_amma_cfg_AbstractNode_toNode-> n;
	}
}

rule Connect_Exit {
	exit:CFG_Exit;
	n:org_amma_cfg_AbstractNode;
	
	negative {
		n -:Edge\org_amma_cfg_AbstractNode_expression->;
	}
	
	modify {
		n -:org_amma_cfg_AbstractNode_toNode-> exit;
	}
}
