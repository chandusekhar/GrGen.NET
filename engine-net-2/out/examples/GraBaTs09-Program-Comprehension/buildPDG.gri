rule init_Post_Dom {
	replace {
		exec(init_Post_Dom_Step1* && init_Post_Dom_Step2* && init_Post_Dom_Step3*);
	}
}

rule init_Post_Dom_Step1 {
	a:org_amma_cfg_AbstractNode\(CFG_Enter + CFG_Exit);
	
	negative {
		a -:pdom-> a;
	}
	
	modify {
		a -:pdom-> a;
	}
}

rule init_Post_Dom_Step2 {
	a:org_amma_cfg_AbstractNode -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	
	negative {
		b -:pdom-> a;
	}
	
	modify {
		b -:pdom-> a;
	}
}

rule init_Post_Dom_Step3 {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(a,c);
	c -:pdom-> b -:pdom-> a;
	
	negative {
		c -:pdom-> a;
	}
	
	modify {
		c -:pdom-> a;
	}
}

rule determine_Post_Dom {
	replace {
		exec((remove_wrong_Post_Dom+ | propagate_wrong_Post_Dom_Removing+)* &&
		     Mark_Transitive_Post_Dom*);
	}
}

rule remove_wrong_Post_Dom {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> c:org_amma_cfg_AbstractNode;
	d:org_amma_cfg_AbstractNode;
	
	d -:pdom-> b;
	d -e:pdom-> a;
	
	negative {
		d -:pdom-> c;
	}
	
	modify {
		delete(e);
	}
}

rule propagate_wrong_Post_Dom_Removing {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	c -e:pdom-> a;
	
	negative {
		c -:pdom-> b;
	}
	
	modify {
		delete(e);
	}
}

rule Mark_Transitive_Post_Dom {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(a,c);
	c -:pdom-> b -:pdom-> a;
	c -e:pdom\transitive_pdom-> a;
	
	modify {
		-:transitive_pdom<e>->;
	}
}

rule Determine_Dominance_Frontiers {
	modify {
		exec(Determine_Dominance_Frontier*);
	}
}

rule Determine_Dominance_Frontier {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(b, c);
	c -:pdom-> b;
	a -:Edge\(pdom + pdom_frontier)-> b;
	
	negative {
		c -:pdom-> a;
	}
	
	negative {
		c -:pdom_frontier-> a;
	}
	
	modify {
		c -:pdom_frontier-> a;
	}
}

rule Create_Control_Dependencies {
	modify {
		exec([Create_Control_Dependency]);
	}
}

rule Create_Control_Dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	
	a -e:pdom_frontier-> b;
	
	modify {
		delete(e);
		b -:org_amma_pdg_ExpressionNode_controlDependenceNodes-> a;
	}
}

rule Delete_Post_Dom {
	-:pdom->;
	
	replace {}
}
