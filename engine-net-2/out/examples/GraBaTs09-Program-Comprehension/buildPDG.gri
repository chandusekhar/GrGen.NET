rule init_Post_Dom {
	replace {
		exec(init_Post_Dom_Step1* && init_Post_Dom_Step2* && init_Post_Dom_Step3*);
	}
}

rule init_Post_Dom_Step1 {
	a:org_amma_cfg_AbstractNode\(CFG_Enter + CFG_Exit);
	
	negative {
		a -:pdom-> a;
	}
	
	modify {
		a -:pdom-> a;
	}
}

rule init_Post_Dom_Step2 {
	a:org_amma_cfg_AbstractNode -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	
	negative {
		b -:pdom-> a;
	}
	
	modify {
		b -:pdom-> a;
	}
}

rule init_Post_Dom_Step3 {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(a,c);
	c -:pdom-> b -:pdom-> a;
	
	negative {
		c -:pdom-> a;
	}
	
	modify {
		c -:pdom-> a;
	}
}

rule determine_Post_Dom {
	replace {
		exec((remove_wrong_Post_Dom+ | propagate_wrong_Post_Dom_Removing+)* &&
		     Mark_Transitive_Post_Dom*);
	}
}

rule remove_wrong_Post_Dom {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> c:org_amma_cfg_AbstractNode;
	d:org_amma_cfg_AbstractNode;
	
	d -:pdom-> b;
	d -e:pdom-> a;
	
	negative {
		d -:pdom-> c;
	}
	
	modify {
		delete(e);
	}
}

rule propagate_wrong_Post_Dom_Removing {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	c -e:pdom-> a;
	
	negative {
		c -:pdom-> b;
	}
	
	modify {
		delete(e);
	}
}

rule Mark_Transitive_Post_Dom {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(a,c);
	c -:pdom-> b -:pdom-> a;
	c -e:pdom\transitive_pdom-> a;
	
	modify {
		-:transitive_pdom<e>->;
	}
}

rule Determine_Dominance_Frontiers {
	modify {
		exec(Determine_Dominance_Frontier*);
	}
}

rule Determine_Dominance_Frontier {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(b, c);
	c -:pdom-> b;
	a -:Edge\(pdom + pdom_frontier)-> b;
	
	negative {
		c -:pdom-> a;
	}
	
	negative {
		c -:pdom_frontier-> a;
	}
	
	modify {
		c -:pdom_frontier-> a;
	}
}

rule Create_Control_Dependencies {
	modify {
		exec([Create_Control_Dependency] & [Add_Reflexive_Control_Dependency]);
	}
}

rule Create_Control_Dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	
	a -e:pdom_frontier-> b;
	
	modify {
		delete(e);
		b -:org_amma_pdg_ExpressionNode_controlDependenceNodes-> a;
	}
}

rule Add_Reflexive_Control_Dependency {
	a:org_amma_cfg_IterativeNode;
	
	modify {
		a -:org_amma_pdg_ExpressionNode_controlDependenceNodes-> a;
	}
}

rule Delete_Post_Dom {
	-:pdom->;
	
	replace {}
}

// Data dependencies
rule add_data_dependencies {
	modify {
		exec([prepare_IterativeNode] & [prepare_ConditionalNode] &
		     add_transitive_toNode* & add_transitive_innerExpression* &
		     add_binary_data_dependency* & add_unary_data_dependency* &
		     [remove_transitive_innerExpression] &
		     [finish_IterativeNode] & [finish_ConditionalNode]);
	}
}

rule prepare_IterativeNode {
	a:org_amma_cfg_IterativeNode;
	a -e:org_amma_cfg_AbstractNode_expression-> expr:org_amma_cfg_Expression;
	
	modify {
		delete(e);
		
		dummy:org_amma_cfg_Expression;
		a -:org_amma_cfg_AbstractNode_expression-> dummy;
		dummy -f:org_amma_cfg_Expression_innerExpression-> expr;
		
		eval {
			dummy._expressionName = "dummy";
			f.index = 1;
		}
	}
}

rule prepare_ConditionalNode {
	a:org_amma_cfg_ConditionalNode;
	a -e:org_amma_cfg_AbstractNode_expression-> expr:org_amma_cfg_Expression;
	
	modify {
		delete(e);
		
		dummy:org_amma_cfg_Expression;
		a -:org_amma_cfg_AbstractNode_expression-> dummy;
		dummy -f:org_amma_cfg_Expression_innerExpression-> expr;
		
		eval {
			dummy._expressionName = "dummy";
			f.index = 1;
		}
	}
}

rule add_transitive_toNode {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;
	
	hom(a,c);
	a -:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> b;
	b -:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> c;
	
	negative {
		a -:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> c;
	}
	
	modify {
		a -:transitive_toNode-> c;
	}
}

rule add_transitive_innerExpression {
	a:org_amma_cfg_Expression;
	b:org_amma_cfg_Expression;
	c:org_amma_cfg_Expression;
	
	a -e:org_amma_cfg_Expression_innerExpression-> b;
	b -:org_amma_cfg_Expression_innerExpression-> c;
	
	negative {
		a -:transitive_innerExpression-> c;
	}
	
	modify {
		a -trans:transitive_innerExpression-> c;
		
		eval {
			trans.index = e.index;
		}
	}
}

rule add_binary_data_dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	
	hom(a,b);
	a -:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> b;
	
	hom(expr_a, expr_b);
	hom(ea, eb);
	a -ea:org_amma_cfg_AbstractNode_expression-> expr_a:org_amma_cfg_Expression;
	b -eb:org_amma_cfg_AbstractNode_expression-> expr_b:org_amma_cfg_Expression;

	expr_a -def_edge:org_amma_cfg_Expression_innerExpression-> def:org_amma_cfg_Expression;
	expr_b -use_edge:org_amma_cfg_Expression_innerExpression-> use:org_amma_cfg_Expression;
	
	if { def_edge.index == 0 && def._isIdentifier &&
	     use_edge.index == 1 && use._isIdentifier &&
	     def._expressionName == use._expressionName;
	   }
	
	negative {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
	
	modify {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
}

rule add_unary_data_dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	
	hom(a,b);
	a -:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> b;
	
	hom(expr_a, expr_b);
	hom(ea, eb);
	a -ea:org_amma_cfg_AbstractNode_expression-> expr_a:org_amma_cfg_Expression;
	b -eb:org_amma_cfg_AbstractNode_expression-> expr_b:org_amma_cfg_Expression;

	hom(def, use);
	hom(def_edge, use_edge);
	expr_a -def_edge:org_amma_cfg_Expression_innerExpression-> def:org_amma_cfg_Expression;
	expr_b -use_edge:org_amma_cfg_Expression_innerExpression-> use:org_amma_cfg_Expression;
	
	if { def_edge.index == 0 && def._isIdentifier &&
	     use_edge.index == 0 && use._isIdentifier &&
	     def._expressionName == use._expressionName;
	   }
	
	negative {
		-use_edge->;
		expr_b -:org_amma_cfg_Expression_innerExpression\transitive_innerExpression->;
	}
	
	negative {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
	
	modify {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
}

rule remove_transitive_innerExpression {
	-:transitive_innerExpression->;
	
	replace {}
}

rule finish_IterativeNode {
	a:org_amma_cfg_IterativeNode;
	dummy:org_amma_cfg_Expression;
	expr:org_amma_cfg_Expression;
	a -:org_amma_cfg_AbstractNode_expression-> dummy;
	dummy -:org_amma_cfg_Expression_innerExpression-> expr;
	
	modify {
		delete(dummy);
		a -e:org_amma_cfg_AbstractNode_expression-> expr;
	}
}

rule finish_ConditionalNode {
	a:org_amma_cfg_ConditionalNode;
	dummy:org_amma_cfg_Expression;
	expr:org_amma_cfg_Expression;
	a -:org_amma_cfg_AbstractNode_expression-> dummy;
	dummy -:org_amma_cfg_Expression_innerExpression-> expr;
	
	modify {
		delete(dummy);
		a -e:org_amma_cfg_AbstractNode_expression-> expr;
	}
}

rule CFG_2_PDG {
	modify {
		exec([remove_cfg_edges] & enter_2_PDG & exit_2_PDG &
		     [IterativeNode_2_PDG] & [ConditionalNode_2_PDG] &
		     [Node_2_PDG] & [innerExpression_2_PDG]);
	}
}

rule remove_cfg_edges {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	
	hom(a,b);
	a -e:Edge\(org_amma_pdg_ExpressionNode_controlDependenceNodes + org_amma_pdg_ExpressionNode_dataDependenceNodes)-> b;
	
	modify {
		delete(e);
	}
}

rule enter_2_PDG {
	old:CFG_Enter;
	
	modify {
		new:org_amma_pdg_EnterNode<old>;
		
		eval {
			new._name = "Enter";
		}
	}
}

rule exit_2_PDG {
	exit:CFG_Exit;
	
	replace {}
}

rule IterativeNode_2_PDG {
	old:org_amma_cfg_IterativeNode -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;
	
	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;
		
		eval {
			new._name = old_expr._expressionName;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule ConditionalNode_2_PDG {
	old:org_amma_cfg_ConditionalNode -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;
	
	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;
		
		eval {
			new._name = old_expr._expressionName;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule Node_2_PDG {
	old:org_amma_cfg_Node -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;
	
	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;
		
		eval {
			new._name = old_expr._expressionName;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule innerExpression_2_PDG {
	-e:org_amma_cfg_Expression_innerExpression-> old_expr:org_amma_cfg_Expression;
	
	modify {
		-f:org_amma_pdg_Expression_innerExpressions<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;
		
		eval {
			f.index = e.index;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}
