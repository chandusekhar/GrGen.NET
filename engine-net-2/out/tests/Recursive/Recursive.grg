pattern ChainFromTo(from:Node, to:Node) {
	alternative {
		base {
			from-->to;
		}
		rec {
			from-->intermediate:Node;
			:ChainFromTo(intermediate, to);
		}
	}
}

pattern ChainFrom(from:Node) {
	alternative {
		base {
		}
		rec {
			from-->to:Node;
			:ChainFrom(to);
		}
	}
}

pattern ChainFromComplete(from:Node) {
	alternative {
		base {
			negative {
				from-->.;
			}
		}
		rec {
			from-->to:Node;
			:ChainFromComplete(to);
		}
	}
}

rule createChain : (Node, Node) {
	modify {
		beg:Node-->.-->.-->end:Node;
		return(beg, end);
	}
}

test chainFromTo(beg:Node, end:Node) {
	:ChainFromTo(beg, end);
}

test chainFrom(beg:Node) {
	:ChainFrom(beg);
}

test chainFromComplete(beg:Node) {
	:ChainFromComplete(beg);
}

pattern Blowball(head:Node)
{
	alternative {
		end {
			negative {
				head-->.;
			}
		}
		further {
			head-->.;
			:Blowball(head);
		}
	}
}

rule createBlowball():(Node) {
	modify {
		head:Node-->.;
		head-->.;
		head-->.;
		head-->.;
		return(head);
	}
}

test blowball(head:Node) {
	:Blowball(head);	
}
