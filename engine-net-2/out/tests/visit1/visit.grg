using visit;

#include "graphgen.gri"

pattern Component(n:Node)
{
    alternative {
        more {
            n ?--? m:Node;
            c1:Component(n);
            c2:Component(m);
            
            modify {
                c1();
                c2();
            }
        }
        end {
            negative { n ?--? m:Node; }
            
            modify {
                eval {
                    visited(n, 0) = true;
                }
            }
        }
    }
    modify {}
}

rule findComponent()
{
    n:N;
    if { !visited(n, 0); }
    
    comp:Component(n);
    
    modify {
        comp();
    }
}

// calling patterns with variables is not supported yet
/*
pattern Component(n:Node, var visID:int)
{
    alternative {
        more {
            n ?--? m:Node;
            c1:Component(n, visID);
            c2:Component(m, visID);
            
            modify {
                c1();
                c2();
            }
        }
        end {
            negative { n ?--? m:Node; }
            
            modify {
                eval {
                    visited(n, visID) = true;
                }
            }
        }
    }
}

rule findComponent(var VisID:int)
{
    n:N;
    if { !visited(n, visID); }
    
    comp:Component(n, visID);
    
    modify {
        comp();
    }
}*/
