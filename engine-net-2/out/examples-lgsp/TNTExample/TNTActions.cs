// This file has been generated automatically by GrGen.
// Do not modify this file! Any changes will be lost!
// Generated from "..\..\tests\TNT\TNT.grg" on Wed May 28 22:10:25 CEST 2008

using System;
using System.Collections.Generic;
using System.Text;
using de.unika.ipd.grGen.libGr;
using de.unika.ipd.grGen.lgsp;
using de.unika.ipd.grGen.Model_TNT;

namespace de.unika.ipd.grGen.Action_TNT
{
	public class Pattern_BenzolRing : LGSPMatchingPattern
	{
		private static Pattern_BenzolRing instance = null;
		public static Pattern_BenzolRing Instance { get { if (instance==null) { instance = new Pattern_BenzolRing(); instance.initialize(); } return instance; } }

		public static NodeType[] BenzolRing_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c6_AllowedTypes = null;
		public static bool[] BenzolRing_node_c1_IsAllowedType = null;
		public static bool[] BenzolRing_node_c2_IsAllowedType = null;
		public static bool[] BenzolRing_node_c3_IsAllowedType = null;
		public static bool[] BenzolRing_node_c4_IsAllowedType = null;
		public static bool[] BenzolRing_node_c5_IsAllowedType = null;
		public static bool[] BenzolRing_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRing_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRing_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge8_IsAllowedType = null;
		public enum BenzolRing_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRing_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRing_VariableNums { };
		public enum BenzolRing_SubNums { };
		public enum BenzolRing_AltNums { };
		PatternGraph pat_BenzolRing;


#if INITIAL_WARMUP
		public Pattern_BenzolRing()
#else
		private Pattern_BenzolRing()
#endif
		{
			name = "BenzolRing";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
		}
		public override void initialize()
		{
			bool[,] BenzolRing_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] BenzolRing_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode BenzolRing_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c1", "c1", BenzolRing_node_c1_AllowedTypes, BenzolRing_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c2", "c2", BenzolRing_node_c2_AllowedTypes, BenzolRing_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c3", "c3", BenzolRing_node_c3_AllowedTypes, BenzolRing_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c4", "c4", BenzolRing_node_c4_AllowedTypes, BenzolRing_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c5", "c5", BenzolRing_node_c5_AllowedTypes, BenzolRing_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c6", "c6", BenzolRing_node_c6_AllowedTypes, BenzolRing_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge0", "_edge0", BenzolRing_edge__edge0_AllowedTypes, BenzolRing_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge1", "_edge1", BenzolRing_edge__edge1_AllowedTypes, BenzolRing_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge2", "_edge2", BenzolRing_edge__edge2_AllowedTypes, BenzolRing_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge3", "_edge3", BenzolRing_edge__edge3_AllowedTypes, BenzolRing_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge4", "_edge4", BenzolRing_edge__edge4_AllowedTypes, BenzolRing_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge5", "_edge5", BenzolRing_edge__edge5_AllowedTypes, BenzolRing_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge6", "_edge6", BenzolRing_edge__edge6_AllowedTypes, BenzolRing_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge7", "_edge7", BenzolRing_edge__edge7_AllowedTypes, BenzolRing_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge8", "_edge8", BenzolRing_edge__edge8_AllowedTypes, BenzolRing_edge__edge8_IsAllowedType, 5.5F, -1);
			pat_BenzolRing = new PatternGraph(
				"BenzolRing",
				"",
				false,
				new PatternNode[] { BenzolRing_node_c1, BenzolRing_node_c2, BenzolRing_node_c3, BenzolRing_node_c4, BenzolRing_node_c5, BenzolRing_node_c6 }, 
				new PatternEdge[] { BenzolRing_edge__edge0, BenzolRing_edge__edge1, BenzolRing_edge__edge2, BenzolRing_edge__edge3, BenzolRing_edge__edge4, BenzolRing_edge__edge5, BenzolRing_edge__edge6, BenzolRing_edge__edge7, BenzolRing_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				BenzolRing_isNodeHomomorphicGlobal,
				BenzolRing_isEdgeHomomorphicGlobal
			);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge0, BenzolRing_node_c1);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge0, BenzolRing_node_c2);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge1, BenzolRing_node_c2);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge1, BenzolRing_node_c3);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge2, BenzolRing_node_c3);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge2, BenzolRing_node_c4);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge3, BenzolRing_node_c4);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge3, BenzolRing_node_c5);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge4, BenzolRing_node_c5);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge4, BenzolRing_node_c6);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge5, BenzolRing_node_c6);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge5, BenzolRing_node_c1);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge6, BenzolRing_node_c1);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge6, BenzolRing_node_c2);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge7, BenzolRing_node_c3);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge7, BenzolRing_node_c4);
			pat_BenzolRing.edgeToSourceNode.Add(BenzolRing_edge__edge8, BenzolRing_node_c5);
			pat_BenzolRing.edgeToTargetNode.Add(BenzolRing_edge__edge8, BenzolRing_node_c6);

			BenzolRing_node_c1.PointOfDefinition = pat_BenzolRing;
			BenzolRing_node_c2.PointOfDefinition = pat_BenzolRing;
			BenzolRing_node_c3.PointOfDefinition = pat_BenzolRing;
			BenzolRing_node_c4.PointOfDefinition = pat_BenzolRing;
			BenzolRing_node_c5.PointOfDefinition = pat_BenzolRing;
			BenzolRing_node_c6.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge0.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge1.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge2.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge3.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge4.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge5.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge6.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge7.PointOfDefinition = pat_BenzolRing;
			BenzolRing_edge__edge8.PointOfDefinition = pat_BenzolRing;

			patternGraph = pat_BenzolRing;
		}



		public void BenzolRing_Create(LGSPGraph graph)
		{
			graph.SettingAddedNodeNames( create_BenzolRing_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_BenzolRing_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
		}
		private static String[] create_BenzolRing_addedNodeNames = new String[] { "c1", "c2", "c3", "c4", "c5", "c6" };
		private static String[] create_BenzolRing_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8" };

		public void BenzolRing_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_c1 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c1];
			LGSPNode node_c2 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c2];
			LGSPNode node_c3 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c3];
			LGSPNode node_c4 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c4];
			LGSPNode node_c5 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c5];
			LGSPNode node_c6 = curMatch.Nodes[(int)BenzolRing_NodeNums.@c6];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge2];
			LGSPEdge edge__edge3 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge3];
			LGSPEdge edge__edge4 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge4];
			LGSPEdge edge__edge5 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge5];
			LGSPEdge edge__edge6 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge6];
			LGSPEdge edge__edge7 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge7];
			LGSPEdge edge__edge8 = curMatch.Edges[(int)BenzolRing_EdgeNums.@_edge8];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.Remove(edge__edge7);
			graph.Remove(edge__edge8);
			graph.RemoveEdges(node_c1);
			graph.Remove(node_c1);
			graph.RemoveEdges(node_c2);
			graph.Remove(node_c2);
			graph.RemoveEdges(node_c3);
			graph.Remove(node_c3);
			graph.RemoveEdges(node_c4);
			graph.Remove(node_c4);
			graph.RemoveEdges(node_c5);
			graph.Remove(node_c5);
			graph.RemoveEdges(node_c6);
			graph.Remove(node_c6);
		}
	}

	public class Pattern_BenzolRingC123456Exposed : LGSPMatchingPattern
	{
		private static Pattern_BenzolRingC123456Exposed instance = null;
		public static Pattern_BenzolRingC123456Exposed Instance { get { if (instance==null) { instance = new Pattern_BenzolRingC123456Exposed(); instance.initialize(); } return instance; } }

		public static NodeType[] BenzolRingC123456Exposed_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c6_AllowedTypes = null;
		public static bool[] BenzolRingC123456Exposed_node_c1_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c2_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c3_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c4_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c5_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge8_IsAllowedType = null;
		public enum BenzolRingC123456Exposed_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRingC123456Exposed_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRingC123456Exposed_VariableNums { };
		public enum BenzolRingC123456Exposed_SubNums { };
		public enum BenzolRingC123456Exposed_AltNums { };
		PatternGraph pat_BenzolRingC123456Exposed;


#if INITIAL_WARMUP
		public Pattern_BenzolRingC123456Exposed()
#else
		private Pattern_BenzolRingC123456Exposed()
#endif
		{
			name = "BenzolRingC123456Exposed";

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "BenzolRingC123456Exposed_node_c1", "BenzolRingC123456Exposed_node_c2", "BenzolRingC123456Exposed_node_c3", "BenzolRingC123456Exposed_node_c4", "BenzolRingC123456Exposed_node_c5", "BenzolRingC123456Exposed_node_c6", };
		}
		public override void initialize()
		{
			bool[,] BenzolRingC123456Exposed_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] BenzolRingC123456Exposed_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode BenzolRingC123456Exposed_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c1", "c1", BenzolRingC123456Exposed_node_c1_AllowedTypes, BenzolRingC123456Exposed_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode BenzolRingC123456Exposed_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c2", "c2", BenzolRingC123456Exposed_node_c2_AllowedTypes, BenzolRingC123456Exposed_node_c2_IsAllowedType, 5.5F, 1);
			PatternNode BenzolRingC123456Exposed_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c3", "c3", BenzolRingC123456Exposed_node_c3_AllowedTypes, BenzolRingC123456Exposed_node_c3_IsAllowedType, 5.5F, 2);
			PatternNode BenzolRingC123456Exposed_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c4", "c4", BenzolRingC123456Exposed_node_c4_AllowedTypes, BenzolRingC123456Exposed_node_c4_IsAllowedType, 5.5F, 3);
			PatternNode BenzolRingC123456Exposed_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c5", "c5", BenzolRingC123456Exposed_node_c5_AllowedTypes, BenzolRingC123456Exposed_node_c5_IsAllowedType, 5.5F, 4);
			PatternNode BenzolRingC123456Exposed_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c6", "c6", BenzolRingC123456Exposed_node_c6_AllowedTypes, BenzolRingC123456Exposed_node_c6_IsAllowedType, 5.5F, 5);
			PatternEdge BenzolRingC123456Exposed_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge0", "_edge0", BenzolRingC123456Exposed_edge__edge0_AllowedTypes, BenzolRingC123456Exposed_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge1", "_edge1", BenzolRingC123456Exposed_edge__edge1_AllowedTypes, BenzolRingC123456Exposed_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge2", "_edge2", BenzolRingC123456Exposed_edge__edge2_AllowedTypes, BenzolRingC123456Exposed_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge3", "_edge3", BenzolRingC123456Exposed_edge__edge3_AllowedTypes, BenzolRingC123456Exposed_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge4", "_edge4", BenzolRingC123456Exposed_edge__edge4_AllowedTypes, BenzolRingC123456Exposed_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge5", "_edge5", BenzolRingC123456Exposed_edge__edge5_AllowedTypes, BenzolRingC123456Exposed_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge6", "_edge6", BenzolRingC123456Exposed_edge__edge6_AllowedTypes, BenzolRingC123456Exposed_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge7", "_edge7", BenzolRingC123456Exposed_edge__edge7_AllowedTypes, BenzolRingC123456Exposed_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge8", "_edge8", BenzolRingC123456Exposed_edge__edge8_AllowedTypes, BenzolRingC123456Exposed_edge__edge8_IsAllowedType, 5.5F, -1);
			pat_BenzolRingC123456Exposed = new PatternGraph(
				"BenzolRingC123456Exposed",
				"",
				false,
				new PatternNode[] { BenzolRingC123456Exposed_node_c1, BenzolRingC123456Exposed_node_c2, BenzolRingC123456Exposed_node_c3, BenzolRingC123456Exposed_node_c4, BenzolRingC123456Exposed_node_c5, BenzolRingC123456Exposed_node_c6 }, 
				new PatternEdge[] { BenzolRingC123456Exposed_edge__edge0, BenzolRingC123456Exposed_edge__edge1, BenzolRingC123456Exposed_edge__edge2, BenzolRingC123456Exposed_edge__edge3, BenzolRingC123456Exposed_edge__edge4, BenzolRingC123456Exposed_edge__edge5, BenzolRingC123456Exposed_edge__edge6, BenzolRingC123456Exposed_edge__edge7, BenzolRingC123456Exposed_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				BenzolRingC123456Exposed_isNodeHomomorphicGlobal,
				BenzolRingC123456Exposed_isEdgeHomomorphicGlobal
			);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge0, BenzolRingC123456Exposed_node_c1);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge0, BenzolRingC123456Exposed_node_c2);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge1, BenzolRingC123456Exposed_node_c2);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge1, BenzolRingC123456Exposed_node_c3);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge2, BenzolRingC123456Exposed_node_c3);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge2, BenzolRingC123456Exposed_node_c4);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge3, BenzolRingC123456Exposed_node_c4);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge3, BenzolRingC123456Exposed_node_c5);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge4, BenzolRingC123456Exposed_node_c5);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge4, BenzolRingC123456Exposed_node_c6);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge5, BenzolRingC123456Exposed_node_c6);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge5, BenzolRingC123456Exposed_node_c1);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge6, BenzolRingC123456Exposed_node_c1);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge6, BenzolRingC123456Exposed_node_c2);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge7, BenzolRingC123456Exposed_node_c3);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge7, BenzolRingC123456Exposed_node_c4);
			pat_BenzolRingC123456Exposed.edgeToSourceNode.Add(BenzolRingC123456Exposed_edge__edge8, BenzolRingC123456Exposed_node_c5);
			pat_BenzolRingC123456Exposed.edgeToTargetNode.Add(BenzolRingC123456Exposed_edge__edge8, BenzolRingC123456Exposed_node_c6);

			BenzolRingC123456Exposed_node_c1.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c2.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c3.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c4.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c5.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c6.PointOfDefinition = null;
			BenzolRingC123456Exposed_edge__edge0.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge1.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge2.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge3.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge4.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge5.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge6.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge7.PointOfDefinition = pat_BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge8.PointOfDefinition = pat_BenzolRingC123456Exposed;

			patternGraph = pat_BenzolRingC123456Exposed;
		}



		public void BenzolRingC123456Exposed_Create(LGSPGraph graph, LGSPNode node_c1, LGSPNode node_c2, LGSPNode node_c3, LGSPNode node_c4, LGSPNode node_c5, LGSPNode node_c6)
		{
			graph.SettingAddedNodeNames( create_BenzolRingC123456Exposed_addedNodeNames );
			graph.SettingAddedEdgeNames( create_BenzolRingC123456Exposed_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
		}
		private static String[] create_BenzolRingC123456Exposed_addedNodeNames = new String[] {  };
		private static String[] create_BenzolRingC123456Exposed_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8" };

		public void BenzolRingC123456Exposed_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPEdge edge__edge0 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge2];
			LGSPEdge edge__edge3 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge3];
			LGSPEdge edge__edge4 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge4];
			LGSPEdge edge__edge5 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge5];
			LGSPEdge edge__edge6 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge6];
			LGSPEdge edge__edge7 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge7];
			LGSPEdge edge__edge8 = curMatch.Edges[(int)BenzolRingC123456Exposed_EdgeNums.@_edge8];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.Remove(edge__edge7);
			graph.Remove(edge__edge8);
		}
	}

	public class Pattern_BenzolRingC1Exposed : LGSPMatchingPattern
	{
		private static Pattern_BenzolRingC1Exposed instance = null;
		public static Pattern_BenzolRingC1Exposed Instance { get { if (instance==null) { instance = new Pattern_BenzolRingC1Exposed(); instance.initialize(); } return instance; } }

		public static NodeType[] BenzolRingC1Exposed_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c6_AllowedTypes = null;
		public static bool[] BenzolRingC1Exposed_node_c1_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c2_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c3_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c4_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c5_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRingC1Exposed_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge8_IsAllowedType = null;
		public enum BenzolRingC1Exposed_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRingC1Exposed_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRingC1Exposed_VariableNums { };
		public enum BenzolRingC1Exposed_SubNums { };
		public enum BenzolRingC1Exposed_AltNums { };
		PatternGraph pat_BenzolRingC1Exposed;


#if INITIAL_WARMUP
		public Pattern_BenzolRingC1Exposed()
#else
		private Pattern_BenzolRingC1Exposed()
#endif
		{
			name = "BenzolRingC1Exposed";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "BenzolRingC1Exposed_node_c1", };
		}
		public override void initialize()
		{
			bool[,] BenzolRingC1Exposed_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] BenzolRingC1Exposed_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode BenzolRingC1Exposed_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c1", "c1", BenzolRingC1Exposed_node_c1_AllowedTypes, BenzolRingC1Exposed_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode BenzolRingC1Exposed_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c2", "c2", BenzolRingC1Exposed_node_c2_AllowedTypes, BenzolRingC1Exposed_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c3", "c3", BenzolRingC1Exposed_node_c3_AllowedTypes, BenzolRingC1Exposed_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c4", "c4", BenzolRingC1Exposed_node_c4_AllowedTypes, BenzolRingC1Exposed_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c5", "c5", BenzolRingC1Exposed_node_c5_AllowedTypes, BenzolRingC1Exposed_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c6", "c6", BenzolRingC1Exposed_node_c6_AllowedTypes, BenzolRingC1Exposed_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge0", "_edge0", BenzolRingC1Exposed_edge__edge0_AllowedTypes, BenzolRingC1Exposed_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge1", "_edge1", BenzolRingC1Exposed_edge__edge1_AllowedTypes, BenzolRingC1Exposed_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge2", "_edge2", BenzolRingC1Exposed_edge__edge2_AllowedTypes, BenzolRingC1Exposed_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge3", "_edge3", BenzolRingC1Exposed_edge__edge3_AllowedTypes, BenzolRingC1Exposed_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge4", "_edge4", BenzolRingC1Exposed_edge__edge4_AllowedTypes, BenzolRingC1Exposed_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge5", "_edge5", BenzolRingC1Exposed_edge__edge5_AllowedTypes, BenzolRingC1Exposed_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge6", "_edge6", BenzolRingC1Exposed_edge__edge6_AllowedTypes, BenzolRingC1Exposed_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge7", "_edge7", BenzolRingC1Exposed_edge__edge7_AllowedTypes, BenzolRingC1Exposed_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge8", "_edge8", BenzolRingC1Exposed_edge__edge8_AllowedTypes, BenzolRingC1Exposed_edge__edge8_IsAllowedType, 5.5F, -1);
			pat_BenzolRingC1Exposed = new PatternGraph(
				"BenzolRingC1Exposed",
				"",
				false,
				new PatternNode[] { BenzolRingC1Exposed_node_c1, BenzolRingC1Exposed_node_c2, BenzolRingC1Exposed_node_c3, BenzolRingC1Exposed_node_c4, BenzolRingC1Exposed_node_c5, BenzolRingC1Exposed_node_c6 }, 
				new PatternEdge[] { BenzolRingC1Exposed_edge__edge0, BenzolRingC1Exposed_edge__edge1, BenzolRingC1Exposed_edge__edge2, BenzolRingC1Exposed_edge__edge3, BenzolRingC1Exposed_edge__edge4, BenzolRingC1Exposed_edge__edge5, BenzolRingC1Exposed_edge__edge6, BenzolRingC1Exposed_edge__edge7, BenzolRingC1Exposed_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				BenzolRingC1Exposed_isNodeHomomorphicGlobal,
				BenzolRingC1Exposed_isEdgeHomomorphicGlobal
			);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge0, BenzolRingC1Exposed_node_c1);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge0, BenzolRingC1Exposed_node_c2);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge1, BenzolRingC1Exposed_node_c2);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge1, BenzolRingC1Exposed_node_c3);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge2, BenzolRingC1Exposed_node_c3);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge2, BenzolRingC1Exposed_node_c4);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge3, BenzolRingC1Exposed_node_c4);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge3, BenzolRingC1Exposed_node_c5);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge4, BenzolRingC1Exposed_node_c5);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge4, BenzolRingC1Exposed_node_c6);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge5, BenzolRingC1Exposed_node_c6);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge5, BenzolRingC1Exposed_node_c1);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge6, BenzolRingC1Exposed_node_c1);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge6, BenzolRingC1Exposed_node_c2);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge7, BenzolRingC1Exposed_node_c3);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge7, BenzolRingC1Exposed_node_c4);
			pat_BenzolRingC1Exposed.edgeToSourceNode.Add(BenzolRingC1Exposed_edge__edge8, BenzolRingC1Exposed_node_c5);
			pat_BenzolRingC1Exposed.edgeToTargetNode.Add(BenzolRingC1Exposed_edge__edge8, BenzolRingC1Exposed_node_c6);

			BenzolRingC1Exposed_node_c1.PointOfDefinition = null;
			BenzolRingC1Exposed_node_c2.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c3.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c4.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c5.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c6.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge0.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge1.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge2.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge3.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge4.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge5.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge6.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge7.PointOfDefinition = pat_BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge8.PointOfDefinition = pat_BenzolRingC1Exposed;

			patternGraph = pat_BenzolRingC1Exposed;
		}



		public void BenzolRingC1Exposed_Create(LGSPGraph graph, LGSPNode node_c1)
		{
			graph.SettingAddedNodeNames( create_BenzolRingC1Exposed_addedNodeNames );
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_BenzolRingC1Exposed_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
		}
		private static String[] create_BenzolRingC1Exposed_addedNodeNames = new String[] { "c2", "c3", "c4", "c5", "c6" };
		private static String[] create_BenzolRingC1Exposed_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8" };

		public void BenzolRingC1Exposed_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_c2 = curMatch.Nodes[(int)BenzolRingC1Exposed_NodeNums.@c2];
			LGSPNode node_c3 = curMatch.Nodes[(int)BenzolRingC1Exposed_NodeNums.@c3];
			LGSPNode node_c4 = curMatch.Nodes[(int)BenzolRingC1Exposed_NodeNums.@c4];
			LGSPNode node_c5 = curMatch.Nodes[(int)BenzolRingC1Exposed_NodeNums.@c5];
			LGSPNode node_c6 = curMatch.Nodes[(int)BenzolRingC1Exposed_NodeNums.@c6];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge2];
			LGSPEdge edge__edge3 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge3];
			LGSPEdge edge__edge4 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge4];
			LGSPEdge edge__edge5 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge5];
			LGSPEdge edge__edge6 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge6];
			LGSPEdge edge__edge7 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge7];
			LGSPEdge edge__edge8 = curMatch.Edges[(int)BenzolRingC1Exposed_EdgeNums.@_edge8];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.Remove(edge__edge7);
			graph.Remove(edge__edge8);
			graph.RemoveEdges(node_c2);
			graph.Remove(node_c2);
			graph.RemoveEdges(node_c3);
			graph.Remove(node_c3);
			graph.RemoveEdges(node_c4);
			graph.Remove(node_c4);
			graph.RemoveEdges(node_c5);
			graph.Remove(node_c5);
			graph.RemoveEdges(node_c6);
			graph.Remove(node_c6);
		}
	}

	public class Pattern_BenzolRingC1ExposedNotC6Nitro : LGSPMatchingPattern
	{
		private static Pattern_BenzolRingC1ExposedNotC6Nitro instance = null;
		public static Pattern_BenzolRingC1ExposedNotC6Nitro Instance { get { if (instance==null) { instance = new Pattern_BenzolRingC1ExposedNotC6Nitro(); instance.initialize(); } return instance; } }

		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_node_c6_AllowedTypes = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c1_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c2_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c3_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c4_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c5_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_edge__edge8_IsAllowedType = null;
		public enum BenzolRingC1ExposedNotC6Nitro_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRingC1ExposedNotC6Nitro_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRingC1ExposedNotC6Nitro_VariableNums { };
		public enum BenzolRingC1ExposedNotC6Nitro_SubNums { };
		public enum BenzolRingC1ExposedNotC6Nitro_AltNums { };
		PatternGraph pat_BenzolRingC1ExposedNotC6Nitro;

		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_node_n_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0_AllowedTypes = null;
		public static NodeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1_AllowedTypes = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_node_n_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1_IsAllowedType = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2_AllowedTypes = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2_IsAllowedType = null;
		public enum BenzolRingC1ExposedNotC6Nitro_neg_0_NodeNums { @c6, @n, @_node0, @_node1, };
		public enum BenzolRingC1ExposedNotC6Nitro_neg_0_EdgeNums { @_edge0, @_edge1, @_edge2, };
		public enum BenzolRingC1ExposedNotC6Nitro_neg_0_VariableNums { };
		public enum BenzolRingC1ExposedNotC6Nitro_neg_0_SubNums { };
		public enum BenzolRingC1ExposedNotC6Nitro_neg_0_AltNums { };
		PatternGraph BenzolRingC1ExposedNotC6Nitro_neg_0;


#if INITIAL_WARMUP
		public Pattern_BenzolRingC1ExposedNotC6Nitro()
#else
		private Pattern_BenzolRingC1ExposedNotC6Nitro()
#endif
		{
			name = "BenzolRingC1ExposedNotC6Nitro";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "BenzolRingC1ExposedNotC6Nitro_node_c1", };
		}
		public override void initialize()
		{
			bool[,] BenzolRingC1ExposedNotC6Nitro_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] BenzolRingC1ExposedNotC6Nitro_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c1", "c1", BenzolRingC1ExposedNotC6Nitro_node_c1_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c2", "c2", BenzolRingC1ExposedNotC6Nitro_node_c2_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c3", "c3", BenzolRingC1ExposedNotC6Nitro_node_c3_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c4", "c4", BenzolRingC1ExposedNotC6Nitro_node_c4_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c5", "c5", BenzolRingC1ExposedNotC6Nitro_node_c5_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1ExposedNotC6Nitro_node_c6", "c6", BenzolRingC1ExposedNotC6Nitro_node_c6_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge0", "_edge0", BenzolRingC1ExposedNotC6Nitro_edge__edge0_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge1", "_edge1", BenzolRingC1ExposedNotC6Nitro_edge__edge1_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge2", "_edge2", BenzolRingC1ExposedNotC6Nitro_edge__edge2_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge3", "_edge3", BenzolRingC1ExposedNotC6Nitro_edge__edge3_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge4", "_edge4", BenzolRingC1ExposedNotC6Nitro_edge__edge4_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge5", "_edge5", BenzolRingC1ExposedNotC6Nitro_edge__edge5_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge6", "_edge6", BenzolRingC1ExposedNotC6Nitro_edge__edge6_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge7", "_edge7", BenzolRingC1ExposedNotC6Nitro_edge__edge7_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_edge__edge8", "_edge8", BenzolRingC1ExposedNotC6Nitro_edge__edge8_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_edge__edge8_IsAllowedType, 5.5F, -1);
			bool[,] BenzolRingC1ExposedNotC6Nitro_neg_0_isNodeHomomorphicGlobal = new bool[4, 4] {
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
			};
			bool[,] BenzolRingC1ExposedNotC6Nitro_neg_0_isEdgeHomomorphicGlobal = new bool[3, 3] {
				{ false, false, false, },
				{ false, false, false, },
				{ false, false, false, },
			};
			PatternNode BenzolRingC1ExposedNotC6Nitro_neg_0_node_n = new PatternNode((int) NodeTypes.@N, "BenzolRingC1ExposedNotC6Nitro_neg_0_node_n", "n", BenzolRingC1ExposedNotC6Nitro_neg_0_node_n_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_node_n_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 = new PatternNode((int) NodeTypes.@O, "BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0", "_node0", BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1 = new PatternNode((int) NodeTypes.@O, "BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1", "_node1", BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0", "_edge0", BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1", "_edge1", BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2", "_edge2", BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2_AllowedTypes, BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2_IsAllowedType, 5.5F, -1);
			BenzolRingC1ExposedNotC6Nitro_neg_0 = new PatternGraph(
				"neg_0",
				"BenzolRingC1ExposedNotC6Nitro_",
				false,
				new PatternNode[] { BenzolRingC1ExposedNotC6Nitro_node_c6, BenzolRingC1ExposedNotC6Nitro_neg_0_node_n, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1 }, 
				new PatternEdge[] { BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0, BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1, BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[4, 4] {
					{ true, false, false, false, },
					{ false, true, false, false, },
					{ false, false, true, false, },
					{ false, false, false, true, },
				},
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				BenzolRingC1ExposedNotC6Nitro_neg_0_isNodeHomomorphicGlobal,
				BenzolRingC1ExposedNotC6Nitro_neg_0_isEdgeHomomorphicGlobal
			);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0, BenzolRingC1ExposedNotC6Nitro_node_c6);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0, BenzolRingC1ExposedNotC6Nitro_neg_0_node_n);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1, BenzolRingC1ExposedNotC6Nitro_neg_0_node_n);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2, BenzolRingC1ExposedNotC6Nitro_neg_0_node_n);
			BenzolRingC1ExposedNotC6Nitro_neg_0.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2, BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1);

			pat_BenzolRingC1ExposedNotC6Nitro = new PatternGraph(
				"BenzolRingC1ExposedNotC6Nitro",
				"",
				false,
				new PatternNode[] { BenzolRingC1ExposedNotC6Nitro_node_c1, BenzolRingC1ExposedNotC6Nitro_node_c2, BenzolRingC1ExposedNotC6Nitro_node_c3, BenzolRingC1ExposedNotC6Nitro_node_c4, BenzolRingC1ExposedNotC6Nitro_node_c5, BenzolRingC1ExposedNotC6Nitro_node_c6 }, 
				new PatternEdge[] { BenzolRingC1ExposedNotC6Nitro_edge__edge0, BenzolRingC1ExposedNotC6Nitro_edge__edge1, BenzolRingC1ExposedNotC6Nitro_edge__edge2, BenzolRingC1ExposedNotC6Nitro_edge__edge3, BenzolRingC1ExposedNotC6Nitro_edge__edge4, BenzolRingC1ExposedNotC6Nitro_edge__edge5, BenzolRingC1ExposedNotC6Nitro_edge__edge6, BenzolRingC1ExposedNotC6Nitro_edge__edge7, BenzolRingC1ExposedNotC6Nitro_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] { BenzolRingC1ExposedNotC6Nitro_neg_0,  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				BenzolRingC1ExposedNotC6Nitro_isNodeHomomorphicGlobal,
				BenzolRingC1ExposedNotC6Nitro_isEdgeHomomorphicGlobal
			);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge0, BenzolRingC1ExposedNotC6Nitro_node_c1);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge0, BenzolRingC1ExposedNotC6Nitro_node_c2);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge1, BenzolRingC1ExposedNotC6Nitro_node_c2);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge1, BenzolRingC1ExposedNotC6Nitro_node_c3);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge2, BenzolRingC1ExposedNotC6Nitro_node_c3);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge2, BenzolRingC1ExposedNotC6Nitro_node_c4);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge3, BenzolRingC1ExposedNotC6Nitro_node_c4);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge3, BenzolRingC1ExposedNotC6Nitro_node_c5);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge4, BenzolRingC1ExposedNotC6Nitro_node_c5);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge4, BenzolRingC1ExposedNotC6Nitro_node_c6);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge5, BenzolRingC1ExposedNotC6Nitro_node_c6);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge5, BenzolRingC1ExposedNotC6Nitro_node_c1);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge6, BenzolRingC1ExposedNotC6Nitro_node_c1);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge6, BenzolRingC1ExposedNotC6Nitro_node_c2);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge7, BenzolRingC1ExposedNotC6Nitro_node_c3);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge7, BenzolRingC1ExposedNotC6Nitro_node_c4);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToSourceNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge8, BenzolRingC1ExposedNotC6Nitro_node_c5);
			pat_BenzolRingC1ExposedNotC6Nitro.edgeToTargetNode.Add(BenzolRingC1ExposedNotC6Nitro_edge__edge8, BenzolRingC1ExposedNotC6Nitro_node_c6);
			BenzolRingC1ExposedNotC6Nitro_neg_0.embeddingGraph = pat_BenzolRingC1ExposedNotC6Nitro;

			BenzolRingC1ExposedNotC6Nitro_node_c1.PointOfDefinition = null;
			BenzolRingC1ExposedNotC6Nitro_node_c2.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_node_c3.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_node_c4.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_node_c5.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_node_c6.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge0.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge1.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge2.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge3.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge4.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge5.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge6.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge7.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_edge__edge8.PointOfDefinition = pat_BenzolRingC1ExposedNotC6Nitro;
			BenzolRingC1ExposedNotC6Nitro_neg_0_node_n.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;
			BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;
			BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;
			BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;
			BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;
			BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.PointOfDefinition = BenzolRingC1ExposedNotC6Nitro_neg_0;

			patternGraph = pat_BenzolRingC1ExposedNotC6Nitro;
		}



		public void BenzolRingC1ExposedNotC6Nitro_Create(LGSPGraph graph, LGSPNode node_c1)
		{
			graph.SettingAddedNodeNames( create_BenzolRingC1ExposedNotC6Nitro_addedNodeNames );
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_BenzolRingC1ExposedNotC6Nitro_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
		}
		private static String[] create_BenzolRingC1ExposedNotC6Nitro_addedNodeNames = new String[] { "c2", "c3", "c4", "c5", "c6" };
		private static String[] create_BenzolRingC1ExposedNotC6Nitro_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8" };

		public void BenzolRingC1ExposedNotC6Nitro_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_c2 = curMatch.Nodes[(int)BenzolRingC1ExposedNotC6Nitro_NodeNums.@c2];
			LGSPNode node_c3 = curMatch.Nodes[(int)BenzolRingC1ExposedNotC6Nitro_NodeNums.@c3];
			LGSPNode node_c4 = curMatch.Nodes[(int)BenzolRingC1ExposedNotC6Nitro_NodeNums.@c4];
			LGSPNode node_c5 = curMatch.Nodes[(int)BenzolRingC1ExposedNotC6Nitro_NodeNums.@c5];
			LGSPNode node_c6 = curMatch.Nodes[(int)BenzolRingC1ExposedNotC6Nitro_NodeNums.@c6];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge2];
			LGSPEdge edge__edge3 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge3];
			LGSPEdge edge__edge4 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge4];
			LGSPEdge edge__edge5 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge5];
			LGSPEdge edge__edge6 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge6];
			LGSPEdge edge__edge7 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge7];
			LGSPEdge edge__edge8 = curMatch.Edges[(int)BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge8];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.Remove(edge__edge7);
			graph.Remove(edge__edge8);
			graph.RemoveEdges(node_c2);
			graph.Remove(node_c2);
			graph.RemoveEdges(node_c3);
			graph.Remove(node_c3);
			graph.RemoveEdges(node_c4);
			graph.Remove(node_c4);
			graph.RemoveEdges(node_c5);
			graph.Remove(node_c5);
			graph.RemoveEdges(node_c6);
			graph.Remove(node_c6);
		}
	}

	public class Pattern_Oxygen : LGSPMatchingPattern
	{
		private static Pattern_Oxygen instance = null;
		public static Pattern_Oxygen Instance { get { if (instance==null) { instance = new Pattern_Oxygen(); instance.initialize(); } return instance; } }

		public static NodeType[] Oxygen_node_o1_AllowedTypes = null;
		public static NodeType[] Oxygen_node_o2_AllowedTypes = null;
		public static bool[] Oxygen_node_o1_IsAllowedType = null;
		public static bool[] Oxygen_node_o2_IsAllowedType = null;
		public static EdgeType[] Oxygen_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Oxygen_edge__edge1_AllowedTypes = null;
		public static bool[] Oxygen_edge__edge0_IsAllowedType = null;
		public static bool[] Oxygen_edge__edge1_IsAllowedType = null;
		public enum Oxygen_NodeNums { @o1, @o2, };
		public enum Oxygen_EdgeNums { @_edge0, @_edge1, };
		public enum Oxygen_VariableNums { };
		public enum Oxygen_SubNums { };
		public enum Oxygen_AltNums { };
		PatternGraph pat_Oxygen;


#if INITIAL_WARMUP
		public Pattern_Oxygen()
#else
		private Pattern_Oxygen()
#endif
		{
			name = "Oxygen";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
		}
		public override void initialize()
		{
			bool[,] Oxygen_isNodeHomomorphicGlobal = new bool[2, 2] {
				{ false, false, },
				{ false, false, },
			};
			bool[,] Oxygen_isEdgeHomomorphicGlobal = new bool[2, 2] {
				{ false, false, },
				{ false, false, },
			};
			PatternNode Oxygen_node_o1 = new PatternNode((int) NodeTypes.@O, "Oxygen_node_o1", "o1", Oxygen_node_o1_AllowedTypes, Oxygen_node_o1_IsAllowedType, 5.5F, -1);
			PatternNode Oxygen_node_o2 = new PatternNode((int) NodeTypes.@O, "Oxygen_node_o2", "o2", Oxygen_node_o2_AllowedTypes, Oxygen_node_o2_IsAllowedType, 5.5F, -1);
			PatternEdge Oxygen_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Oxygen_edge__edge0", "_edge0", Oxygen_edge__edge0_AllowedTypes, Oxygen_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Oxygen_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Oxygen_edge__edge1", "_edge1", Oxygen_edge__edge1_AllowedTypes, Oxygen_edge__edge1_IsAllowedType, 5.5F, -1);
			pat_Oxygen = new PatternGraph(
				"Oxygen",
				"",
				false,
				new PatternNode[] { Oxygen_node_o1, Oxygen_node_o2 }, 
				new PatternEdge[] { Oxygen_edge__edge0, Oxygen_edge__edge1 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				Oxygen_isNodeHomomorphicGlobal,
				Oxygen_isEdgeHomomorphicGlobal
			);
			pat_Oxygen.edgeToSourceNode.Add(Oxygen_edge__edge0, Oxygen_node_o1);
			pat_Oxygen.edgeToTargetNode.Add(Oxygen_edge__edge0, Oxygen_node_o2);
			pat_Oxygen.edgeToSourceNode.Add(Oxygen_edge__edge1, Oxygen_node_o2);
			pat_Oxygen.edgeToTargetNode.Add(Oxygen_edge__edge1, Oxygen_node_o1);

			Oxygen_node_o1.PointOfDefinition = pat_Oxygen;
			Oxygen_node_o2.PointOfDefinition = pat_Oxygen;
			Oxygen_edge__edge0.PointOfDefinition = pat_Oxygen;
			Oxygen_edge__edge1.PointOfDefinition = pat_Oxygen;

			patternGraph = pat_Oxygen;
		}



		public void Oxygen_Create(LGSPGraph graph)
		{
			graph.SettingAddedNodeNames( create_Oxygen_addedNodeNames );
			@O node_o1 = @O.CreateNode(graph);
			@O node_o2 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_Oxygen_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_o1, node_o2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_o2, node_o1);
		}
		private static String[] create_Oxygen_addedNodeNames = new String[] { "o1", "o2" };
		private static String[] create_Oxygen_addedEdgeNames = new String[] { "_edge0", "_edge1" };

		public void Oxygen_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_o1 = curMatch.Nodes[(int)Oxygen_NodeNums.@o1];
			LGSPNode node_o2 = curMatch.Nodes[(int)Oxygen_NodeNums.@o2];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)Oxygen_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)Oxygen_EdgeNums.@_edge1];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.RemoveEdges(node_o1);
			graph.Remove(node_o1);
			graph.RemoveEdges(node_o2);
			graph.Remove(node_o2);
		}
	}

	public class Pattern_Hydrogen : LGSPMatchingPattern
	{
		private static Pattern_Hydrogen instance = null;
		public static Pattern_Hydrogen Instance { get { if (instance==null) { instance = new Pattern_Hydrogen(); instance.initialize(); } return instance; } }

		public static NodeType[] Hydrogen_node_anchor_AllowedTypes = null;
		public static NodeType[] Hydrogen_node__node0_AllowedTypes = null;
		public static bool[] Hydrogen_node_anchor_IsAllowedType = null;
		public static bool[] Hydrogen_node__node0_IsAllowedType = null;
		public static EdgeType[] Hydrogen_edge__edge0_AllowedTypes = null;
		public static bool[] Hydrogen_edge__edge0_IsAllowedType = null;
		public enum Hydrogen_NodeNums { @anchor, @_node0, };
		public enum Hydrogen_EdgeNums { @_edge0, };
		public enum Hydrogen_VariableNums { };
		public enum Hydrogen_SubNums { };
		public enum Hydrogen_AltNums { };
		PatternGraph pat_Hydrogen;


#if INITIAL_WARMUP
		public Pattern_Hydrogen()
#else
		private Pattern_Hydrogen()
#endif
		{
			name = "Hydrogen";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Hydrogen_node_anchor", };
		}
		public override void initialize()
		{
			bool[,] Hydrogen_isNodeHomomorphicGlobal = new bool[2, 2] {
				{ false, false, },
				{ false, false, },
			};
			bool[,] Hydrogen_isEdgeHomomorphicGlobal = new bool[1, 1] {
				{ false, },
			};
			PatternNode Hydrogen_node_anchor = new PatternNode((int) NodeTypes.@C, "Hydrogen_node_anchor", "anchor", Hydrogen_node_anchor_AllowedTypes, Hydrogen_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Hydrogen_node__node0 = new PatternNode((int) NodeTypes.@H, "Hydrogen_node__node0", "_node0", Hydrogen_node__node0_AllowedTypes, Hydrogen_node__node0_IsAllowedType, 5.5F, -1);
			PatternEdge Hydrogen_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Hydrogen_edge__edge0", "_edge0", Hydrogen_edge__edge0_AllowedTypes, Hydrogen_edge__edge0_IsAllowedType, 5.5F, -1);
			pat_Hydrogen = new PatternGraph(
				"Hydrogen",
				"",
				false,
				new PatternNode[] { Hydrogen_node_anchor, Hydrogen_node__node0 }, 
				new PatternEdge[] { Hydrogen_edge__edge0 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[1, 1] {
					{ true, },
				},
				Hydrogen_isNodeHomomorphicGlobal,
				Hydrogen_isEdgeHomomorphicGlobal
			);
			pat_Hydrogen.edgeToSourceNode.Add(Hydrogen_edge__edge0, Hydrogen_node_anchor);
			pat_Hydrogen.edgeToTargetNode.Add(Hydrogen_edge__edge0, Hydrogen_node__node0);

			Hydrogen_node_anchor.PointOfDefinition = null;
			Hydrogen_node__node0.PointOfDefinition = pat_Hydrogen;
			Hydrogen_edge__edge0.PointOfDefinition = pat_Hydrogen;

			patternGraph = pat_Hydrogen;
		}



		public void Hydrogen_Create(LGSPGraph graph, LGSPNode node_anchor)
		{
			graph.SettingAddedNodeNames( create_Hydrogen_addedNodeNames );
			@H node__node0 = @H.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_Hydrogen_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_anchor, node__node0);
		}
		private static String[] create_Hydrogen_addedNodeNames = new String[] { "_node0" };
		private static String[] create_Hydrogen_addedEdgeNames = new String[] { "_edge0" };

		public void Hydrogen_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node__node0 = curMatch.Nodes[(int)Hydrogen_NodeNums.@_node0];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)Hydrogen_EdgeNums.@_edge0];
			graph.Remove(edge__edge0);
			graph.RemoveEdges(node__node0);
			graph.Remove(node__node0);
		}
	}

	public class Pattern_Hydroxyl : LGSPMatchingPattern
	{
		private static Pattern_Hydroxyl instance = null;
		public static Pattern_Hydroxyl Instance { get { if (instance==null) { instance = new Pattern_Hydroxyl(); instance.initialize(); } return instance; } }

		public static NodeType[] Hydroxyl_node_anchor_AllowedTypes = null;
		public static NodeType[] Hydroxyl_node__node0_AllowedTypes = null;
		public static NodeType[] Hydroxyl_node__node1_AllowedTypes = null;
		public static bool[] Hydroxyl_node_anchor_IsAllowedType = null;
		public static bool[] Hydroxyl_node__node0_IsAllowedType = null;
		public static bool[] Hydroxyl_node__node1_IsAllowedType = null;
		public static EdgeType[] Hydroxyl_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Hydroxyl_edge__edge1_AllowedTypes = null;
		public static bool[] Hydroxyl_edge__edge0_IsAllowedType = null;
		public static bool[] Hydroxyl_edge__edge1_IsAllowedType = null;
		public enum Hydroxyl_NodeNums { @anchor, @_node0, @_node1, };
		public enum Hydroxyl_EdgeNums { @_edge0, @_edge1, };
		public enum Hydroxyl_VariableNums { };
		public enum Hydroxyl_SubNums { };
		public enum Hydroxyl_AltNums { };
		PatternGraph pat_Hydroxyl;


#if INITIAL_WARMUP
		public Pattern_Hydroxyl()
#else
		private Pattern_Hydroxyl()
#endif
		{
			name = "Hydroxyl";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Hydroxyl_node_anchor", };
		}
		public override void initialize()
		{
			bool[,] Hydroxyl_isNodeHomomorphicGlobal = new bool[3, 3] {
				{ false, false, false, },
				{ false, false, false, },
				{ false, false, false, },
			};
			bool[,] Hydroxyl_isEdgeHomomorphicGlobal = new bool[2, 2] {
				{ false, false, },
				{ false, false, },
			};
			PatternNode Hydroxyl_node_anchor = new PatternNode((int) NodeTypes.@C, "Hydroxyl_node_anchor", "anchor", Hydroxyl_node_anchor_AllowedTypes, Hydroxyl_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Hydroxyl_node__node0 = new PatternNode((int) NodeTypes.@O, "Hydroxyl_node__node0", "_node0", Hydroxyl_node__node0_AllowedTypes, Hydroxyl_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Hydroxyl_node__node1 = new PatternNode((int) NodeTypes.@H, "Hydroxyl_node__node1", "_node1", Hydroxyl_node__node1_AllowedTypes, Hydroxyl_node__node1_IsAllowedType, 5.5F, -1);
			PatternEdge Hydroxyl_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Hydroxyl_edge__edge0", "_edge0", Hydroxyl_edge__edge0_AllowedTypes, Hydroxyl_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Hydroxyl_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Hydroxyl_edge__edge1", "_edge1", Hydroxyl_edge__edge1_AllowedTypes, Hydroxyl_edge__edge1_IsAllowedType, 5.5F, -1);
			pat_Hydroxyl = new PatternGraph(
				"Hydroxyl",
				"",
				false,
				new PatternNode[] { Hydroxyl_node_anchor, Hydroxyl_node__node0, Hydroxyl_node__node1 }, 
				new PatternEdge[] { Hydroxyl_edge__edge0, Hydroxyl_edge__edge1 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				Hydroxyl_isNodeHomomorphicGlobal,
				Hydroxyl_isEdgeHomomorphicGlobal
			);
			pat_Hydroxyl.edgeToSourceNode.Add(Hydroxyl_edge__edge0, Hydroxyl_node_anchor);
			pat_Hydroxyl.edgeToTargetNode.Add(Hydroxyl_edge__edge0, Hydroxyl_node__node0);
			pat_Hydroxyl.edgeToSourceNode.Add(Hydroxyl_edge__edge1, Hydroxyl_node__node0);
			pat_Hydroxyl.edgeToTargetNode.Add(Hydroxyl_edge__edge1, Hydroxyl_node__node1);

			Hydroxyl_node_anchor.PointOfDefinition = null;
			Hydroxyl_node__node0.PointOfDefinition = pat_Hydroxyl;
			Hydroxyl_node__node1.PointOfDefinition = pat_Hydroxyl;
			Hydroxyl_edge__edge0.PointOfDefinition = pat_Hydroxyl;
			Hydroxyl_edge__edge1.PointOfDefinition = pat_Hydroxyl;

			patternGraph = pat_Hydroxyl;
		}



		public void Hydroxyl_Create(LGSPGraph graph, LGSPNode node_anchor)
		{
			graph.SettingAddedNodeNames( create_Hydroxyl_addedNodeNames );
			@O node__node0 = @O.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_Hydroxyl_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_anchor, node__node0);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node__node0, node__node1);
		}
		private static String[] create_Hydroxyl_addedNodeNames = new String[] { "_node0", "_node1" };
		private static String[] create_Hydroxyl_addedEdgeNames = new String[] { "_edge0", "_edge1" };

		public void Hydroxyl_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node__node0 = curMatch.Nodes[(int)Hydroxyl_NodeNums.@_node0];
			LGSPNode node__node1 = curMatch.Nodes[(int)Hydroxyl_NodeNums.@_node1];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)Hydroxyl_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)Hydroxyl_EdgeNums.@_edge1];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.RemoveEdges(node__node0);
			graph.Remove(node__node0);
			graph.RemoveEdges(node__node1);
			graph.Remove(node__node1);
		}
	}

	public class Pattern_Methyl : LGSPMatchingPattern
	{
		private static Pattern_Methyl instance = null;
		public static Pattern_Methyl Instance { get { if (instance==null) { instance = new Pattern_Methyl(); instance.initialize(); } return instance; } }

		public static NodeType[] Methyl_node_anchor_AllowedTypes = null;
		public static NodeType[] Methyl_node_c_AllowedTypes = null;
		public static NodeType[] Methyl_node__node0_AllowedTypes = null;
		public static NodeType[] Methyl_node__node1_AllowedTypes = null;
		public static NodeType[] Methyl_node__node2_AllowedTypes = null;
		public static bool[] Methyl_node_anchor_IsAllowedType = null;
		public static bool[] Methyl_node_c_IsAllowedType = null;
		public static bool[] Methyl_node__node0_IsAllowedType = null;
		public static bool[] Methyl_node__node1_IsAllowedType = null;
		public static bool[] Methyl_node__node2_IsAllowedType = null;
		public static EdgeType[] Methyl_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge1_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge2_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge3_AllowedTypes = null;
		public static bool[] Methyl_edge__edge0_IsAllowedType = null;
		public static bool[] Methyl_edge__edge1_IsAllowedType = null;
		public static bool[] Methyl_edge__edge2_IsAllowedType = null;
		public static bool[] Methyl_edge__edge3_IsAllowedType = null;
		public enum Methyl_NodeNums { @anchor, @c, @_node0, @_node1, @_node2, };
		public enum Methyl_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, };
		public enum Methyl_VariableNums { };
		public enum Methyl_SubNums { };
		public enum Methyl_AltNums { };
		PatternGraph pat_Methyl;


#if INITIAL_WARMUP
		public Pattern_Methyl()
#else
		private Pattern_Methyl()
#endif
		{
			name = "Methyl";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Methyl_node_anchor", };
		}
		public override void initialize()
		{
			bool[,] Methyl_isNodeHomomorphicGlobal = new bool[5, 5] {
				{ false, false, false, false, false, },
				{ false, false, false, false, false, },
				{ false, false, false, false, false, },
				{ false, false, false, false, false, },
				{ false, false, false, false, false, },
			};
			bool[,] Methyl_isEdgeHomomorphicGlobal = new bool[4, 4] {
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
			};
			PatternNode Methyl_node_anchor = new PatternNode((int) NodeTypes.@C, "Methyl_node_anchor", "anchor", Methyl_node_anchor_AllowedTypes, Methyl_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Methyl_node_c = new PatternNode((int) NodeTypes.@C, "Methyl_node_c", "c", Methyl_node_c_AllowedTypes, Methyl_node_c_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node0 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node0", "_node0", Methyl_node__node0_AllowedTypes, Methyl_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node1 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node1", "_node1", Methyl_node__node1_AllowedTypes, Methyl_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node2 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node2", "_node2", Methyl_node__node2_AllowedTypes, Methyl_node__node2_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Methyl_edge__edge0", "_edge0", Methyl_edge__edge0_AllowedTypes, Methyl_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Methyl_edge__edge1", "_edge1", Methyl_edge__edge1_AllowedTypes, Methyl_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Methyl_edge__edge2", "_edge2", Methyl_edge__edge2_AllowedTypes, Methyl_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Methyl_edge__edge3", "_edge3", Methyl_edge__edge3_AllowedTypes, Methyl_edge__edge3_IsAllowedType, 5.5F, -1);
			pat_Methyl = new PatternGraph(
				"Methyl",
				"",
				false,
				new PatternNode[] { Methyl_node_anchor, Methyl_node_c, Methyl_node__node0, Methyl_node__node1, Methyl_node__node2 }, 
				new PatternEdge[] { Methyl_edge__edge0, Methyl_edge__edge1, Methyl_edge__edge2, Methyl_edge__edge3 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[5, 5] {
					{ true, false, false, false, false, },
					{ false, true, false, false, false, },
					{ false, false, true, false, false, },
					{ false, false, false, true, false, },
					{ false, false, false, false, true, },
				},
				new bool[4, 4] {
					{ true, false, false, false, },
					{ false, true, false, false, },
					{ false, false, true, false, },
					{ false, false, false, true, },
				},
				Methyl_isNodeHomomorphicGlobal,
				Methyl_isEdgeHomomorphicGlobal
			);
			pat_Methyl.edgeToSourceNode.Add(Methyl_edge__edge0, Methyl_node_anchor);
			pat_Methyl.edgeToTargetNode.Add(Methyl_edge__edge0, Methyl_node_c);
			pat_Methyl.edgeToSourceNode.Add(Methyl_edge__edge1, Methyl_node_c);
			pat_Methyl.edgeToTargetNode.Add(Methyl_edge__edge1, Methyl_node__node0);
			pat_Methyl.edgeToSourceNode.Add(Methyl_edge__edge2, Methyl_node_c);
			pat_Methyl.edgeToTargetNode.Add(Methyl_edge__edge2, Methyl_node__node1);
			pat_Methyl.edgeToSourceNode.Add(Methyl_edge__edge3, Methyl_node_c);
			pat_Methyl.edgeToTargetNode.Add(Methyl_edge__edge3, Methyl_node__node2);

			Methyl_node_anchor.PointOfDefinition = null;
			Methyl_node_c.PointOfDefinition = pat_Methyl;
			Methyl_node__node0.PointOfDefinition = pat_Methyl;
			Methyl_node__node1.PointOfDefinition = pat_Methyl;
			Methyl_node__node2.PointOfDefinition = pat_Methyl;
			Methyl_edge__edge0.PointOfDefinition = pat_Methyl;
			Methyl_edge__edge1.PointOfDefinition = pat_Methyl;
			Methyl_edge__edge2.PointOfDefinition = pat_Methyl;
			Methyl_edge__edge3.PointOfDefinition = pat_Methyl;

			patternGraph = pat_Methyl;
		}



		public void Methyl_Create(LGSPGraph graph, LGSPNode node_anchor)
		{
			graph.SettingAddedNodeNames( create_Methyl_addedNodeNames );
			@C node_c = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			@H node__node2 = @H.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_Methyl_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_anchor, node_c);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c, node__node0);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c, node__node1);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c, node__node2);
		}
		private static String[] create_Methyl_addedNodeNames = new String[] { "c", "_node0", "_node1", "_node2" };
		private static String[] create_Methyl_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3" };

		public void Methyl_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_c = curMatch.Nodes[(int)Methyl_NodeNums.@c];
			LGSPNode node__node0 = curMatch.Nodes[(int)Methyl_NodeNums.@_node0];
			LGSPNode node__node1 = curMatch.Nodes[(int)Methyl_NodeNums.@_node1];
			LGSPNode node__node2 = curMatch.Nodes[(int)Methyl_NodeNums.@_node2];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)Methyl_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)Methyl_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)Methyl_EdgeNums.@_edge2];
			LGSPEdge edge__edge3 = curMatch.Edges[(int)Methyl_EdgeNums.@_edge3];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.RemoveEdges(node_c);
			graph.Remove(node_c);
			graph.RemoveEdges(node__node0);
			graph.Remove(node__node0);
			graph.RemoveEdges(node__node1);
			graph.Remove(node__node1);
			graph.RemoveEdges(node__node2);
			graph.Remove(node__node2);
		}
	}

	public class Pattern_Nitro : LGSPMatchingPattern
	{
		private static Pattern_Nitro instance = null;
		public static Pattern_Nitro Instance { get { if (instance==null) { instance = new Pattern_Nitro(); instance.initialize(); } return instance; } }

		public static NodeType[] Nitro_node_anchor_AllowedTypes = null;
		public static NodeType[] Nitro_node_n_AllowedTypes = null;
		public static NodeType[] Nitro_node__node0_AllowedTypes = null;
		public static NodeType[] Nitro_node__node1_AllowedTypes = null;
		public static bool[] Nitro_node_anchor_IsAllowedType = null;
		public static bool[] Nitro_node_n_IsAllowedType = null;
		public static bool[] Nitro_node__node0_IsAllowedType = null;
		public static bool[] Nitro_node__node1_IsAllowedType = null;
		public static EdgeType[] Nitro_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Nitro_edge__edge1_AllowedTypes = null;
		public static EdgeType[] Nitro_edge__edge2_AllowedTypes = null;
		public static bool[] Nitro_edge__edge0_IsAllowedType = null;
		public static bool[] Nitro_edge__edge1_IsAllowedType = null;
		public static bool[] Nitro_edge__edge2_IsAllowedType = null;
		public enum Nitro_NodeNums { @anchor, @n, @_node0, @_node1, };
		public enum Nitro_EdgeNums { @_edge0, @_edge1, @_edge2, };
		public enum Nitro_VariableNums { };
		public enum Nitro_SubNums { };
		public enum Nitro_AltNums { };
		PatternGraph pat_Nitro;


#if INITIAL_WARMUP
		public Pattern_Nitro()
#else
		private Pattern_Nitro()
#endif
		{
			name = "Nitro";

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Nitro_node_anchor", };
		}
		public override void initialize()
		{
			bool[,] Nitro_isNodeHomomorphicGlobal = new bool[4, 4] {
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
				{ false, false, false, false, },
			};
			bool[,] Nitro_isEdgeHomomorphicGlobal = new bool[3, 3] {
				{ false, false, false, },
				{ false, false, false, },
				{ false, false, false, },
			};
			PatternNode Nitro_node_anchor = new PatternNode((int) NodeTypes.@C, "Nitro_node_anchor", "anchor", Nitro_node_anchor_AllowedTypes, Nitro_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Nitro_node_n = new PatternNode((int) NodeTypes.@N, "Nitro_node_n", "n", Nitro_node_n_AllowedTypes, Nitro_node_n_IsAllowedType, 5.5F, -1);
			PatternNode Nitro_node__node0 = new PatternNode((int) NodeTypes.@O, "Nitro_node__node0", "_node0", Nitro_node__node0_AllowedTypes, Nitro_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Nitro_node__node1 = new PatternNode((int) NodeTypes.@O, "Nitro_node__node1", "_node1", Nitro_node__node1_AllowedTypes, Nitro_node__node1_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Nitro_edge__edge0", "_edge0", Nitro_edge__edge0_AllowedTypes, Nitro_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Nitro_edge__edge1", "_edge1", Nitro_edge__edge1_AllowedTypes, Nitro_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "Nitro_edge__edge2", "_edge2", Nitro_edge__edge2_AllowedTypes, Nitro_edge__edge2_IsAllowedType, 5.5F, -1);
			pat_Nitro = new PatternGraph(
				"Nitro",
				"",
				false,
				new PatternNode[] { Nitro_node_anchor, Nitro_node_n, Nitro_node__node0, Nitro_node__node1 }, 
				new PatternEdge[] { Nitro_edge__edge0, Nitro_edge__edge1, Nitro_edge__edge2 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[4, 4] {
					{ true, false, false, false, },
					{ false, true, false, false, },
					{ false, false, true, false, },
					{ false, false, false, true, },
				},
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				Nitro_isNodeHomomorphicGlobal,
				Nitro_isEdgeHomomorphicGlobal
			);
			pat_Nitro.edgeToSourceNode.Add(Nitro_edge__edge0, Nitro_node_anchor);
			pat_Nitro.edgeToTargetNode.Add(Nitro_edge__edge0, Nitro_node_n);
			pat_Nitro.edgeToSourceNode.Add(Nitro_edge__edge1, Nitro_node_n);
			pat_Nitro.edgeToTargetNode.Add(Nitro_edge__edge1, Nitro_node__node0);
			pat_Nitro.edgeToSourceNode.Add(Nitro_edge__edge2, Nitro_node_n);
			pat_Nitro.edgeToTargetNode.Add(Nitro_edge__edge2, Nitro_node__node1);

			Nitro_node_anchor.PointOfDefinition = null;
			Nitro_node_n.PointOfDefinition = pat_Nitro;
			Nitro_node__node0.PointOfDefinition = pat_Nitro;
			Nitro_node__node1.PointOfDefinition = pat_Nitro;
			Nitro_edge__edge0.PointOfDefinition = pat_Nitro;
			Nitro_edge__edge1.PointOfDefinition = pat_Nitro;
			Nitro_edge__edge2.PointOfDefinition = pat_Nitro;

			patternGraph = pat_Nitro;
		}



		public void Nitro_Create(LGSPGraph graph, LGSPNode node_anchor)
		{
			graph.SettingAddedNodeNames( create_Nitro_addedNodeNames );
			@N node_n = @N.CreateNode(graph);
			@O node__node0 = @O.CreateNode(graph);
			@O node__node1 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( create_Nitro_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_anchor, node_n);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_n, node__node0);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_n, node__node1);
		}
		private static String[] create_Nitro_addedNodeNames = new String[] { "n", "_node0", "_node1" };
		private static String[] create_Nitro_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2" };

		public void Nitro_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPNode node_n = curMatch.Nodes[(int)Nitro_NodeNums.@n];
			LGSPNode node__node0 = curMatch.Nodes[(int)Nitro_NodeNums.@_node0];
			LGSPNode node__node1 = curMatch.Nodes[(int)Nitro_NodeNums.@_node1];
			LGSPEdge edge__edge0 = curMatch.Edges[(int)Nitro_EdgeNums.@_edge0];
			LGSPEdge edge__edge1 = curMatch.Edges[(int)Nitro_EdgeNums.@_edge1];
			LGSPEdge edge__edge2 = curMatch.Edges[(int)Nitro_EdgeNums.@_edge2];
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.RemoveEdges(node_n);
			graph.Remove(node_n);
			graph.RemoveEdges(node__node0);
			graph.Remove(node__node0);
			graph.RemoveEdges(node__node1);
			graph.Remove(node__node1);
		}
	}

	public class Pattern_TriNitro : LGSPMatchingPattern
	{
		private static Pattern_TriNitro instance = null;
		public static Pattern_TriNitro Instance { get { if (instance==null) { instance = new Pattern_TriNitro(); instance.initialize(); } return instance; } }

		public static NodeType[] TriNitro_node_c2_AllowedTypes = null;
		public static NodeType[] TriNitro_node_c4_AllowedTypes = null;
		public static NodeType[] TriNitro_node_c6_AllowedTypes = null;
		public static bool[] TriNitro_node_c2_IsAllowedType = null;
		public static bool[] TriNitro_node_c4_IsAllowedType = null;
		public static bool[] TriNitro_node_c6_IsAllowedType = null;
		public enum TriNitro_NodeNums { @c2, @c4, @c6, };
		public enum TriNitro_EdgeNums { };
		public enum TriNitro_VariableNums { };
		public enum TriNitro_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, };
		public enum TriNitro_AltNums { };
		PatternGraph pat_TriNitro;


#if INITIAL_WARMUP
		public Pattern_TriNitro()
#else
		private Pattern_TriNitro()
#endif
		{
			name = "TriNitro";

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "TriNitro_node_c2", "TriNitro_node_c4", "TriNitro_node_c6", };
		}
		public override void initialize()
		{
			bool[,] TriNitro_isNodeHomomorphicGlobal = new bool[3, 3] {
				{ false, false, false, },
				{ false, false, false, },
				{ false, false, false, },
			};
			bool[,] TriNitro_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode TriNitro_node_c2 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c2", "c2", TriNitro_node_c2_AllowedTypes, TriNitro_node_c2_IsAllowedType, 5.5F, 0);
			PatternNode TriNitro_node_c4 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c4", "c4", TriNitro_node_c4_AllowedTypes, TriNitro_node_c4_IsAllowedType, 5.5F, 1);
			PatternNode TriNitro_node_c6 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c6", "c6", TriNitro_node_c6_AllowedTypes, TriNitro_node_c6_IsAllowedType, 5.5F, 2);
			PatternGraphEmbedding TriNitro__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c2 });
			PatternGraphEmbedding TriNitro__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c4 });
			PatternGraphEmbedding TriNitro__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c6 });
			pat_TriNitro = new PatternGraph(
				"TriNitro",
				"",
				false,
				new PatternNode[] { TriNitro_node_c2, TriNitro_node_c4, TriNitro_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { TriNitro__subpattern0, TriNitro__subpattern1, TriNitro__subpattern2 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				new bool[0, 0] ,
				TriNitro_isNodeHomomorphicGlobal,
				TriNitro_isEdgeHomomorphicGlobal
			);

			TriNitro_node_c2.PointOfDefinition = null;
			TriNitro_node_c4.PointOfDefinition = null;
			TriNitro_node_c6.PointOfDefinition = null;
			TriNitro__subpattern0.PointOfDefinition = pat_TriNitro;
			TriNitro__subpattern1.PointOfDefinition = pat_TriNitro;
			TriNitro__subpattern2.PointOfDefinition = pat_TriNitro;

			patternGraph = pat_TriNitro;
		}



		public void TriNitro_Create(LGSPGraph graph, LGSPNode node_c2, LGSPNode node_c4, LGSPNode node_c6)
		{
			graph.SettingAddedNodeNames( create_TriNitro_addedNodeNames );
			graph.SettingAddedEdgeNames( create_TriNitro_addedEdgeNames );
			Pattern_Nitro.Instance.Nitro_Create(graph, node_c2);
			Pattern_Nitro.Instance.Nitro_Create(graph, node_c4);
			Pattern_Nitro.Instance.Nitro_Create(graph, node_c6);
		}
		private static String[] create_TriNitro_addedNodeNames = new String[] {  };
		private static String[] create_TriNitro_addedEdgeNames = new String[] {  };

		public void TriNitro_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TriNitro_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TriNitro_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TriNitro_SubNums.@_subpattern2];
			Pattern_Nitro.Instance.Nitro_Delete(graph, subpattern__subpattern0);
			Pattern_Nitro.Instance.Nitro_Delete(graph, subpattern__subpattern1);
			Pattern_Nitro.Instance.Nitro_Delete(graph, subpattern__subpattern2);
		}
	}

	public class Pattern_ToluolCoreThenTriNitro : LGSPMatchingPattern
	{
		private static Pattern_ToluolCoreThenTriNitro instance = null;
		public static Pattern_ToluolCoreThenTriNitro Instance { get { if (instance==null) { instance = new Pattern_ToluolCoreThenTriNitro(); instance.initialize(); } return instance; } }

		public static NodeType[] ToluolCoreThenTriNitro_node_c1_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c2_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c3_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c4_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c5_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c6_AllowedTypes = null;
		public static bool[] ToluolCoreThenTriNitro_node_c1_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c2_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c3_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c4_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c5_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c6_IsAllowedType = null;
		public enum ToluolCoreThenTriNitro_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum ToluolCoreThenTriNitro_EdgeNums { };
		public enum ToluolCoreThenTriNitro_VariableNums { };
		public enum ToluolCoreThenTriNitro_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, };
		public enum ToluolCoreThenTriNitro_AltNums { };
		PatternGraph pat_ToluolCoreThenTriNitro;


#if INITIAL_WARMUP
		public Pattern_ToluolCoreThenTriNitro()
#else
		private Pattern_ToluolCoreThenTriNitro()
#endif
		{
			name = "ToluolCoreThenTriNitro";

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "ToluolCoreThenTriNitro_node_c1", "ToluolCoreThenTriNitro_node_c2", "ToluolCoreThenTriNitro_node_c3", "ToluolCoreThenTriNitro_node_c4", "ToluolCoreThenTriNitro_node_c5", "ToluolCoreThenTriNitro_node_c6", };
		}
		public override void initialize()
		{
			bool[,] ToluolCoreThenTriNitro_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] ToluolCoreThenTriNitro_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode ToluolCoreThenTriNitro_node_c1 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c1", "c1", ToluolCoreThenTriNitro_node_c1_AllowedTypes, ToluolCoreThenTriNitro_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode ToluolCoreThenTriNitro_node_c2 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c2", "c2", ToluolCoreThenTriNitro_node_c2_AllowedTypes, ToluolCoreThenTriNitro_node_c2_IsAllowedType, 5.5F, 1);
			PatternNode ToluolCoreThenTriNitro_node_c3 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c3", "c3", ToluolCoreThenTriNitro_node_c3_AllowedTypes, ToluolCoreThenTriNitro_node_c3_IsAllowedType, 5.5F, 2);
			PatternNode ToluolCoreThenTriNitro_node_c4 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c4", "c4", ToluolCoreThenTriNitro_node_c4_AllowedTypes, ToluolCoreThenTriNitro_node_c4_IsAllowedType, 5.5F, 3);
			PatternNode ToluolCoreThenTriNitro_node_c5 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c5", "c5", ToluolCoreThenTriNitro_node_c5_AllowedTypes, ToluolCoreThenTriNitro_node_c5_IsAllowedType, 5.5F, 4);
			PatternNode ToluolCoreThenTriNitro_node_c6 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c6", "c6", ToluolCoreThenTriNitro_node_c6_AllowedTypes, ToluolCoreThenTriNitro_node_c6_IsAllowedType, 5.5F, 5);
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c1 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Hydrogen.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c3 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c5 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_TriNitro.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c2, ToluolCoreThenTriNitro_node_c4, ToluolCoreThenTriNitro_node_c6 });
			pat_ToluolCoreThenTriNitro = new PatternGraph(
				"ToluolCoreThenTriNitro",
				"",
				false,
				new PatternNode[] { ToluolCoreThenTriNitro_node_c1, ToluolCoreThenTriNitro_node_c2, ToluolCoreThenTriNitro_node_c3, ToluolCoreThenTriNitro_node_c4, ToluolCoreThenTriNitro_node_c5, ToluolCoreThenTriNitro_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { ToluolCoreThenTriNitro__subpattern0, ToluolCoreThenTriNitro__subpattern1, ToluolCoreThenTriNitro__subpattern2, ToluolCoreThenTriNitro__subpattern3 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				ToluolCoreThenTriNitro_isNodeHomomorphicGlobal,
				ToluolCoreThenTriNitro_isEdgeHomomorphicGlobal
			);

			ToluolCoreThenTriNitro_node_c1.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c2.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c3.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c4.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c5.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c6.PointOfDefinition = null;
			ToluolCoreThenTriNitro__subpattern0.PointOfDefinition = pat_ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern1.PointOfDefinition = pat_ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern2.PointOfDefinition = pat_ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern3.PointOfDefinition = pat_ToluolCoreThenTriNitro;

			patternGraph = pat_ToluolCoreThenTriNitro;
		}



		public void ToluolCoreThenTriNitro_Create(LGSPGraph graph, LGSPNode node_c1, LGSPNode node_c2, LGSPNode node_c3, LGSPNode node_c4, LGSPNode node_c5, LGSPNode node_c6)
		{
			graph.SettingAddedNodeNames( create_ToluolCoreThenTriNitro_addedNodeNames );
			graph.SettingAddedEdgeNames( create_ToluolCoreThenTriNitro_addedEdgeNames );
			Pattern_Methyl.Instance.Methyl_Create(graph, node_c1);
			Pattern_Hydrogen.Instance.Hydrogen_Create(graph, node_c3);
			Pattern_Hydrogen.Instance.Hydrogen_Create(graph, node_c5);
			Pattern_TriNitro.Instance.TriNitro_Create(graph, node_c2, node_c4, node_c6);
		}
		private static String[] create_ToluolCoreThenTriNitro_addedNodeNames = new String[] {  };
		private static String[] create_ToluolCoreThenTriNitro_addedEdgeNames = new String[] {  };

		public void ToluolCoreThenTriNitro_Delete(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)ToluolCoreThenTriNitro_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)ToluolCoreThenTriNitro_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)ToluolCoreThenTriNitro_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)ToluolCoreThenTriNitro_SubNums.@_subpattern3];
			Pattern_Methyl.Instance.Methyl_Delete(graph, subpattern__subpattern0);
			Pattern_Hydrogen.Instance.Hydrogen_Delete(graph, subpattern__subpattern1);
			Pattern_Hydrogen.Instance.Hydrogen_Delete(graph, subpattern__subpattern2);
			Pattern_TriNitro.Instance.TriNitro_Delete(graph, subpattern__subpattern3);
		}
	}

	public class Rule_BenzolRing : LGSPRulePattern
	{
		private static Rule_BenzolRing instance = null;
		public static Rule_BenzolRing Instance { get { if (instance==null) { instance = new Rule_BenzolRing(); instance.initialize(); } return instance; } }

		public enum BenzolRing_NodeNums { };
		public enum BenzolRing_EdgeNums { };
		public enum BenzolRing_VariableNums { };
		public enum BenzolRing_SubNums { @_subpattern0, };
		public enum BenzolRing_AltNums { };
		PatternGraph pat_BenzolRing;


#if INITIAL_WARMUP
		public Rule_BenzolRing()
#else
		private Rule_BenzolRing()
#endif
		{
			name = "BenzolRing";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] BenzolRing_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] BenzolRing_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternGraphEmbedding BenzolRing__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRing.Instance, new PatternElement[] {  });
			pat_BenzolRing = new PatternGraph(
				"BenzolRing",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { BenzolRing__subpattern0 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				BenzolRing_isNodeHomomorphicGlobal,
				BenzolRing_isEdgeHomomorphicGlobal
			);

			BenzolRing__subpattern0.PointOfDefinition = pat_BenzolRing;

			patternGraph = pat_BenzolRing;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)BenzolRing_SubNums.@_subpattern0];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)BenzolRing_SubNums.@_subpattern0];
			return EmptyReturnElements;
		}
	}

	public class Rule_TNTTotallyFolded : LGSPRulePattern
	{
		private static Rule_TNTTotallyFolded instance = null;
		public static Rule_TNTTotallyFolded Instance { get { if (instance==null) { instance = new Rule_TNTTotallyFolded(); instance.initialize(); } return instance; } }

		public static NodeType[] TNTTotallyFolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c6_AllowedTypes = null;
		public static bool[] TNTTotallyFolded_node_c1_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c2_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c3_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c4_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c5_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c6_IsAllowedType = null;
		public enum TNTTotallyFolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNTTotallyFolded_EdgeNums { };
		public enum TNTTotallyFolded_VariableNums { };
		public enum TNTTotallyFolded_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, @_subpattern6, };
		public enum TNTTotallyFolded_AltNums { };
		PatternGraph pat_TNTTotallyFolded;


#if INITIAL_WARMUP
		public Rule_TNTTotallyFolded()
#else
		private Rule_TNTTotallyFolded()
#endif
		{
			name = "TNTTotallyFolded";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNTTotallyFolded_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] TNTTotallyFolded_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode TNTTotallyFolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c1", "c1", TNTTotallyFolded_node_c1_AllowedTypes, TNTTotallyFolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c2", "c2", TNTTotallyFolded_node_c2_AllowedTypes, TNTTotallyFolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c3", "c3", TNTTotallyFolded_node_c3_AllowedTypes, TNTTotallyFolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c4", "c4", TNTTotallyFolded_node_c4_AllowedTypes, TNTTotallyFolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c5", "c5", TNTTotallyFolded_node_c5_AllowedTypes, TNTTotallyFolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c6", "c6", TNTTotallyFolded_node_c6_AllowedTypes, TNTTotallyFolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNTTotallyFolded__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { TNTTotallyFolded_node_c1, TNTTotallyFolded_node_c2, TNTTotallyFolded_node_c3, TNTTotallyFolded_node_c4, TNTTotallyFolded_node_c5, TNTTotallyFolded_node_c6 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { TNTTotallyFolded_node_c1 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c2 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Hydrogen.Instance, new PatternElement[] { TNTTotallyFolded_node_c3 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c4 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { TNTTotallyFolded_node_c5 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern6 = new PatternGraphEmbedding("_subpattern6", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c6 });
			pat_TNTTotallyFolded = new PatternGraph(
				"TNTTotallyFolded",
				"",
				false,
				new PatternNode[] { TNTTotallyFolded_node_c1, TNTTotallyFolded_node_c2, TNTTotallyFolded_node_c3, TNTTotallyFolded_node_c4, TNTTotallyFolded_node_c5, TNTTotallyFolded_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { TNTTotallyFolded__subpattern0, TNTTotallyFolded__subpattern1, TNTTotallyFolded__subpattern2, TNTTotallyFolded__subpattern3, TNTTotallyFolded__subpattern4, TNTTotallyFolded__subpattern5, TNTTotallyFolded__subpattern6 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				TNTTotallyFolded_isNodeHomomorphicGlobal,
				TNTTotallyFolded_isEdgeHomomorphicGlobal
			);

			TNTTotallyFolded_node_c1.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded_node_c2.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded_node_c3.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded_node_c4.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded_node_c5.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded_node_c6.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern0.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern1.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern2.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern3.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern4.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern5.PointOfDefinition = pat_TNTTotallyFolded;
			TNTTotallyFolded__subpattern6.PointOfDefinition = pat_TNTTotallyFolded;

			patternGraph = pat_TNTTotallyFolded;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern5];
			LGSPMatch subpattern__subpattern6 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern6];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern5];
			LGSPMatch subpattern__subpattern6 = curMatch.EmbeddedGraphs[(int)TNTTotallyFolded_SubNums.@_subpattern6];
			return EmptyReturnElements;
		}
	}

	public class Rule_TNTChain : LGSPRulePattern
	{
		private static Rule_TNTChain instance = null;
		public static Rule_TNTChain Instance { get { if (instance==null) { instance = new Rule_TNTChain(); instance.initialize(); } return instance; } }

		public static NodeType[] TNTChain_node_c1_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c2_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c3_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c4_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c5_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c6_AllowedTypes = null;
		public static bool[] TNTChain_node_c1_IsAllowedType = null;
		public static bool[] TNTChain_node_c2_IsAllowedType = null;
		public static bool[] TNTChain_node_c3_IsAllowedType = null;
		public static bool[] TNTChain_node_c4_IsAllowedType = null;
		public static bool[] TNTChain_node_c5_IsAllowedType = null;
		public static bool[] TNTChain_node_c6_IsAllowedType = null;
		public enum TNTChain_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNTChain_EdgeNums { };
		public enum TNTChain_VariableNums { };
		public enum TNTChain_SubNums { @_subpattern0, @_subpattern1, };
		public enum TNTChain_AltNums { };
		PatternGraph pat_TNTChain;


#if INITIAL_WARMUP
		public Rule_TNTChain()
#else
		private Rule_TNTChain()
#endif
		{
			name = "TNTChain";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNTChain_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] TNTChain_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode TNTChain_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c1", "c1", TNTChain_node_c1_AllowedTypes, TNTChain_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c2", "c2", TNTChain_node_c2_AllowedTypes, TNTChain_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c3", "c3", TNTChain_node_c3_AllowedTypes, TNTChain_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c4", "c4", TNTChain_node_c4_AllowedTypes, TNTChain_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c5", "c5", TNTChain_node_c5_AllowedTypes, TNTChain_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c6", "c6", TNTChain_node_c6_AllowedTypes, TNTChain_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNTChain__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 });
			PatternGraphEmbedding TNTChain__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_ToluolCoreThenTriNitro.Instance, new PatternElement[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 });
			pat_TNTChain = new PatternGraph(
				"TNTChain",
				"",
				false,
				new PatternNode[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { TNTChain__subpattern0, TNTChain__subpattern1 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				TNTChain_isNodeHomomorphicGlobal,
				TNTChain_isEdgeHomomorphicGlobal
			);

			TNTChain_node_c1.PointOfDefinition = pat_TNTChain;
			TNTChain_node_c2.PointOfDefinition = pat_TNTChain;
			TNTChain_node_c3.PointOfDefinition = pat_TNTChain;
			TNTChain_node_c4.PointOfDefinition = pat_TNTChain;
			TNTChain_node_c5.PointOfDefinition = pat_TNTChain;
			TNTChain_node_c6.PointOfDefinition = pat_TNTChain;
			TNTChain__subpattern0.PointOfDefinition = pat_TNTChain;
			TNTChain__subpattern1.PointOfDefinition = pat_TNTChain;

			patternGraph = pat_TNTChain;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNTChain_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNTChain_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNTChain_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNTChain_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}
	}

	public class Rule_ToluolCore : LGSPRulePattern
	{
		private static Rule_ToluolCore instance = null;
		public static Rule_ToluolCore Instance { get { if (instance==null) { instance = new Rule_ToluolCore(); instance.initialize(); } return instance; } }

		public static NodeType[] ToluolCore_node_c1_AllowedTypes = null;
		public static bool[] ToluolCore_node_c1_IsAllowedType = null;
		public enum ToluolCore_NodeNums { @c1, };
		public enum ToluolCore_EdgeNums { };
		public enum ToluolCore_VariableNums { };
		public enum ToluolCore_SubNums { @_subpattern0, @_subpattern1, };
		public enum ToluolCore_AltNums { };
		PatternGraph pat_ToluolCore;


#if INITIAL_WARMUP
		public Rule_ToluolCore()
#else
		private Rule_ToluolCore()
#endif
		{
			name = "ToluolCore";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] ToluolCore_isNodeHomomorphicGlobal = new bool[1, 1] {
				{ false, },
			};
			bool[,] ToluolCore_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode ToluolCore_node_c1 = new PatternNode((int) NodeTypes.@C, "ToluolCore_node_c1", "c1", ToluolCore_node_c1_AllowedTypes, ToluolCore_node_c1_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding ToluolCore__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC1Exposed.Instance, new PatternElement[] { ToluolCore_node_c1 });
			PatternGraphEmbedding ToluolCore__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { ToluolCore_node_c1 });
			pat_ToluolCore = new PatternGraph(
				"ToluolCore",
				"",
				false,
				new PatternNode[] { ToluolCore_node_c1 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { ToluolCore__subpattern0, ToluolCore__subpattern1 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[1, 1] {
					{ true, },
				},
				new bool[0, 0] ,
				ToluolCore_isNodeHomomorphicGlobal,
				ToluolCore_isEdgeHomomorphicGlobal
			);

			ToluolCore_node_c1.PointOfDefinition = pat_ToluolCore;
			ToluolCore__subpattern0.PointOfDefinition = pat_ToluolCore;
			ToluolCore__subpattern1.PointOfDefinition = pat_ToluolCore;

			patternGraph = pat_ToluolCore;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)ToluolCore_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)ToluolCore_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)ToluolCore_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)ToluolCore_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}
	}

	public class Rule_ToluolCoreNotC6Nitro : LGSPRulePattern
	{
		private static Rule_ToluolCoreNotC6Nitro instance = null;
		public static Rule_ToluolCoreNotC6Nitro Instance { get { if (instance==null) { instance = new Rule_ToluolCoreNotC6Nitro(); instance.initialize(); } return instance; } }

		public static NodeType[] ToluolCoreNotC6Nitro_node_c1_AllowedTypes = null;
		public static bool[] ToluolCoreNotC6Nitro_node_c1_IsAllowedType = null;
		public enum ToluolCoreNotC6Nitro_NodeNums { @c1, };
		public enum ToluolCoreNotC6Nitro_EdgeNums { };
		public enum ToluolCoreNotC6Nitro_VariableNums { };
		public enum ToluolCoreNotC6Nitro_SubNums { @_subpattern0, @_subpattern1, };
		public enum ToluolCoreNotC6Nitro_AltNums { };
		PatternGraph pat_ToluolCoreNotC6Nitro;


#if INITIAL_WARMUP
		public Rule_ToluolCoreNotC6Nitro()
#else
		private Rule_ToluolCoreNotC6Nitro()
#endif
		{
			name = "ToluolCoreNotC6Nitro";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] ToluolCoreNotC6Nitro_isNodeHomomorphicGlobal = new bool[1, 1] {
				{ false, },
			};
			bool[,] ToluolCoreNotC6Nitro_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode ToluolCoreNotC6Nitro_node_c1 = new PatternNode((int) NodeTypes.@C, "ToluolCoreNotC6Nitro_node_c1", "c1", ToluolCoreNotC6Nitro_node_c1_AllowedTypes, ToluolCoreNotC6Nitro_node_c1_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding ToluolCoreNotC6Nitro__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC1ExposedNotC6Nitro.Instance, new PatternElement[] { ToluolCoreNotC6Nitro_node_c1 });
			PatternGraphEmbedding ToluolCoreNotC6Nitro__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { ToluolCoreNotC6Nitro_node_c1 });
			pat_ToluolCoreNotC6Nitro = new PatternGraph(
				"ToluolCoreNotC6Nitro",
				"",
				false,
				new PatternNode[] { ToluolCoreNotC6Nitro_node_c1 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { ToluolCoreNotC6Nitro__subpattern0, ToluolCoreNotC6Nitro__subpattern1 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[1, 1] {
					{ true, },
				},
				new bool[0, 0] ,
				ToluolCoreNotC6Nitro_isNodeHomomorphicGlobal,
				ToluolCoreNotC6Nitro_isEdgeHomomorphicGlobal
			);

			ToluolCoreNotC6Nitro_node_c1.PointOfDefinition = pat_ToluolCoreNotC6Nitro;
			ToluolCoreNotC6Nitro__subpattern0.PointOfDefinition = pat_ToluolCoreNotC6Nitro;
			ToluolCoreNotC6Nitro__subpattern1.PointOfDefinition = pat_ToluolCoreNotC6Nitro;

			patternGraph = pat_ToluolCoreNotC6Nitro;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)ToluolCoreNotC6Nitro_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)ToluolCoreNotC6Nitro_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)ToluolCoreNotC6Nitro_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)ToluolCoreNotC6Nitro_SubNums.@_subpattern1];
			return EmptyReturnElements;
		}
	}

	public class Rule_Toluol : LGSPRulePattern
	{
		private static Rule_Toluol instance = null;
		public static Rule_Toluol Instance { get { if (instance==null) { instance = new Rule_Toluol(); instance.initialize(); } return instance; } }

		public static NodeType[] Toluol_node_c1_AllowedTypes = null;
		public static NodeType[] Toluol_node_c2_AllowedTypes = null;
		public static NodeType[] Toluol_node_c3_AllowedTypes = null;
		public static NodeType[] Toluol_node_c4_AllowedTypes = null;
		public static NodeType[] Toluol_node_c5_AllowedTypes = null;
		public static NodeType[] Toluol_node_c6_AllowedTypes = null;
		public static bool[] Toluol_node_c1_IsAllowedType = null;
		public static bool[] Toluol_node_c2_IsAllowedType = null;
		public static bool[] Toluol_node_c3_IsAllowedType = null;
		public static bool[] Toluol_node_c4_IsAllowedType = null;
		public static bool[] Toluol_node_c5_IsAllowedType = null;
		public static bool[] Toluol_node_c6_IsAllowedType = null;
		public enum Toluol_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum Toluol_EdgeNums { };
		public enum Toluol_VariableNums { };
		public enum Toluol_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, @_subpattern6, };
		public enum Toluol_AltNums { };
		PatternGraph pat_Toluol;


#if INITIAL_WARMUP
		public Rule_Toluol()
#else
		private Rule_Toluol()
#endif
		{
			name = "Toluol";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] Toluol_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] Toluol_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternNode Toluol_node_c1 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c1", "c1", Toluol_node_c1_AllowedTypes, Toluol_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c2 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c2", "c2", Toluol_node_c2_AllowedTypes, Toluol_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c3 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c3", "c3", Toluol_node_c3_AllowedTypes, Toluol_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c4 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c4", "c4", Toluol_node_c4_AllowedTypes, Toluol_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c5 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c5", "c5", Toluol_node_c5_AllowedTypes, Toluol_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c6 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c6", "c6", Toluol_node_c6_AllowedTypes, Toluol_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding Toluol__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { Toluol_node_c1, Toluol_node_c2, Toluol_node_c3, Toluol_node_c4, Toluol_node_c5, Toluol_node_c6 });
			PatternGraphEmbedding Toluol__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { Toluol_node_c1 });
			PatternGraphEmbedding Toluol__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c2 });
			PatternGraphEmbedding Toluol__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c3 });
			PatternGraphEmbedding Toluol__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c4 });
			PatternGraphEmbedding Toluol__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c5 });
			PatternGraphEmbedding Toluol__subpattern6 = new PatternGraphEmbedding("_subpattern6", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c6 });
			pat_Toluol = new PatternGraph(
				"Toluol",
				"",
				false,
				new PatternNode[] { Toluol_node_c1, Toluol_node_c2, Toluol_node_c3, Toluol_node_c4, Toluol_node_c5, Toluol_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { Toluol__subpattern0, Toluol__subpattern1, Toluol__subpattern2, Toluol__subpattern3, Toluol__subpattern4, Toluol__subpattern5, Toluol__subpattern6 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				Toluol_isNodeHomomorphicGlobal,
				Toluol_isEdgeHomomorphicGlobal
			);

			Toluol_node_c1.PointOfDefinition = pat_Toluol;
			Toluol_node_c2.PointOfDefinition = pat_Toluol;
			Toluol_node_c3.PointOfDefinition = pat_Toluol;
			Toluol_node_c4.PointOfDefinition = pat_Toluol;
			Toluol_node_c5.PointOfDefinition = pat_Toluol;
			Toluol_node_c6.PointOfDefinition = pat_Toluol;
			Toluol__subpattern0.PointOfDefinition = pat_Toluol;
			Toluol__subpattern1.PointOfDefinition = pat_Toluol;
			Toluol__subpattern2.PointOfDefinition = pat_Toluol;
			Toluol__subpattern3.PointOfDefinition = pat_Toluol;
			Toluol__subpattern4.PointOfDefinition = pat_Toluol;
			Toluol__subpattern5.PointOfDefinition = pat_Toluol;
			Toluol__subpattern6.PointOfDefinition = pat_Toluol;

			patternGraph = pat_Toluol;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern5];
			LGSPMatch subpattern__subpattern6 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern6];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern5];
			LGSPMatch subpattern__subpattern6 = curMatch.EmbeddedGraphs[(int)Toluol_SubNums.@_subpattern6];
			return EmptyReturnElements;
		}
	}

	public class Rule_TNT : LGSPRulePattern
	{
		private static Rule_TNT instance = null;
		public static Rule_TNT Instance { get { if (instance==null) { instance = new Rule_TNT(); instance.initialize(); } return instance; } }

		public static NodeType[] TNT_node_c1_AllowedTypes = null;
		public static NodeType[] TNT_node_c2_AllowedTypes = null;
		public static NodeType[] TNT_node_c3_AllowedTypes = null;
		public static NodeType[] TNT_node_c4_AllowedTypes = null;
		public static NodeType[] TNT_node_c5_AllowedTypes = null;
		public static NodeType[] TNT_node_c6_AllowedTypes = null;
		public static bool[] TNT_node_c1_IsAllowedType = null;
		public static bool[] TNT_node_c2_IsAllowedType = null;
		public static bool[] TNT_node_c3_IsAllowedType = null;
		public static bool[] TNT_node_c4_IsAllowedType = null;
		public static bool[] TNT_node_c5_IsAllowedType = null;
		public static bool[] TNT_node_c6_IsAllowedType = null;
		public static EdgeType[] TNT_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge8_AllowedTypes = null;
		public static bool[] TNT_edge__edge0_IsAllowedType = null;
		public static bool[] TNT_edge__edge1_IsAllowedType = null;
		public static bool[] TNT_edge__edge2_IsAllowedType = null;
		public static bool[] TNT_edge__edge3_IsAllowedType = null;
		public static bool[] TNT_edge__edge4_IsAllowedType = null;
		public static bool[] TNT_edge__edge5_IsAllowedType = null;
		public static bool[] TNT_edge__edge6_IsAllowedType = null;
		public static bool[] TNT_edge__edge7_IsAllowedType = null;
		public static bool[] TNT_edge__edge8_IsAllowedType = null;
		public enum TNT_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNT_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum TNT_VariableNums { };
		public enum TNT_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum TNT_AltNums { };
		PatternGraph pat_TNT;


#if INITIAL_WARMUP
		public Rule_TNT()
#else
		private Rule_TNT()
#endif
		{
			name = "TNT";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNT_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] TNT_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode TNT_node_c1 = new PatternNode((int) NodeTypes.@C, "TNT_node_c1", "c1", TNT_node_c1_AllowedTypes, TNT_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c2 = new PatternNode((int) NodeTypes.@C, "TNT_node_c2", "c2", TNT_node_c2_AllowedTypes, TNT_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c3 = new PatternNode((int) NodeTypes.@C, "TNT_node_c3", "c3", TNT_node_c3_AllowedTypes, TNT_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c4 = new PatternNode((int) NodeTypes.@C, "TNT_node_c4", "c4", TNT_node_c4_AllowedTypes, TNT_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c5 = new PatternNode((int) NodeTypes.@C, "TNT_node_c5", "c5", TNT_node_c5_AllowedTypes, TNT_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c6 = new PatternNode((int) NodeTypes.@C, "TNT_node_c6", "c6", TNT_node_c6_AllowedTypes, TNT_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge0", "_edge0", TNT_edge__edge0_AllowedTypes, TNT_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge1", "_edge1", TNT_edge__edge1_AllowedTypes, TNT_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge2", "_edge2", TNT_edge__edge2_AllowedTypes, TNT_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge3", "_edge3", TNT_edge__edge3_AllowedTypes, TNT_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge4", "_edge4", TNT_edge__edge4_AllowedTypes, TNT_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge5", "_edge5", TNT_edge__edge5_AllowedTypes, TNT_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge6", "_edge6", TNT_edge__edge6_AllowedTypes, TNT_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge7", "_edge7", TNT_edge__edge7_AllowedTypes, TNT_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNT_edge__edge8", "_edge8", TNT_edge__edge8_AllowedTypes, TNT_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNT__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { TNT_node_c1 });
			PatternGraphEmbedding TNT__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c2 });
			PatternGraphEmbedding TNT__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { TNT_node_c3 });
			PatternGraphEmbedding TNT__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c4 });
			PatternGraphEmbedding TNT__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { TNT_node_c5 });
			PatternGraphEmbedding TNT__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c6 });
			pat_TNT = new PatternGraph(
				"TNT",
				"",
				false,
				new PatternNode[] { TNT_node_c1, TNT_node_c2, TNT_node_c3, TNT_node_c4, TNT_node_c5, TNT_node_c6 }, 
				new PatternEdge[] { TNT_edge__edge0, TNT_edge__edge1, TNT_edge__edge2, TNT_edge__edge3, TNT_edge__edge4, TNT_edge__edge5, TNT_edge__edge6, TNT_edge__edge7, TNT_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { TNT__subpattern0, TNT__subpattern1, TNT__subpattern2, TNT__subpattern3, TNT__subpattern4, TNT__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				TNT_isNodeHomomorphicGlobal,
				TNT_isEdgeHomomorphicGlobal
			);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge0, TNT_node_c1);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge0, TNT_node_c2);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge1, TNT_node_c2);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge1, TNT_node_c3);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge2, TNT_node_c3);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge2, TNT_node_c4);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge3, TNT_node_c4);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge3, TNT_node_c5);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge4, TNT_node_c5);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge4, TNT_node_c6);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge5, TNT_node_c6);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge5, TNT_node_c1);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge6, TNT_node_c1);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge6, TNT_node_c2);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge7, TNT_node_c3);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge7, TNT_node_c4);
			pat_TNT.edgeToSourceNode.Add(TNT_edge__edge8, TNT_node_c5);
			pat_TNT.edgeToTargetNode.Add(TNT_edge__edge8, TNT_node_c6);

			TNT_node_c1.PointOfDefinition = pat_TNT;
			TNT_node_c2.PointOfDefinition = pat_TNT;
			TNT_node_c3.PointOfDefinition = pat_TNT;
			TNT_node_c4.PointOfDefinition = pat_TNT;
			TNT_node_c5.PointOfDefinition = pat_TNT;
			TNT_node_c6.PointOfDefinition = pat_TNT;
			TNT_edge__edge0.PointOfDefinition = pat_TNT;
			TNT_edge__edge1.PointOfDefinition = pat_TNT;
			TNT_edge__edge2.PointOfDefinition = pat_TNT;
			TNT_edge__edge3.PointOfDefinition = pat_TNT;
			TNT_edge__edge4.PointOfDefinition = pat_TNT;
			TNT_edge__edge5.PointOfDefinition = pat_TNT;
			TNT_edge__edge6.PointOfDefinition = pat_TNT;
			TNT_edge__edge7.PointOfDefinition = pat_TNT;
			TNT_edge__edge8.PointOfDefinition = pat_TNT;
			TNT__subpattern0.PointOfDefinition = pat_TNT;
			TNT__subpattern1.PointOfDefinition = pat_TNT;
			TNT__subpattern2.PointOfDefinition = pat_TNT;
			TNT__subpattern3.PointOfDefinition = pat_TNT;
			TNT__subpattern4.PointOfDefinition = pat_TNT;
			TNT__subpattern5.PointOfDefinition = pat_TNT;

			patternGraph = pat_TNT;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNT_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}
	}

	public class Rule_TNTUnfolded : LGSPRulePattern
	{
		private static Rule_TNTUnfolded instance = null;
		public static Rule_TNTUnfolded Instance { get { if (instance==null) { instance = new Rule_TNTUnfolded(); instance.initialize(); } return instance; } }

		public static NodeType[] TNTUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node8_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node9_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node10_AllowedTypes = null;
		public static bool[] TNTUnfolded_node_c1_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c3_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c5_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node0_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node1_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node3_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node5_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node7_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node8_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node9_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node10_IsAllowedType = null;
		public static EdgeType[] TNTUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge20_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge21_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge22_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge23_AllowedTypes = null;
		public static bool[] TNTUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge20_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge21_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge22_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge23_IsAllowedType = null;
		public enum TNTUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @c, @_node0, @_node1, @_node2, @n2, @_node3, @_node4, @_node5, @n4, @_node6, @_node7, @_node8, @n6, @_node9, @_node10, };
		public enum TNTUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, @_edge21, @_edge22, @_edge23, };
		public enum TNTUnfolded_VariableNums { };
		public enum TNTUnfolded_SubNums { };
		public enum TNTUnfolded_AltNums { };
		PatternGraph pat_TNTUnfolded;


#if INITIAL_WARMUP
		public Rule_TNTUnfolded()
#else
		private Rule_TNTUnfolded()
#endif
		{
			name = "TNTUnfolded";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNTUnfolded_isNodeHomomorphicGlobal = new bool[21, 21] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] TNTUnfolded_isEdgeHomomorphicGlobal = new bool[24, 24] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			PatternNode TNTUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c1", "c1", TNTUnfolded_node_c1_AllowedTypes, TNTUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c2", "c2", TNTUnfolded_node_c2_AllowedTypes, TNTUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c3", "c3", TNTUnfolded_node_c3_AllowedTypes, TNTUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c4", "c4", TNTUnfolded_node_c4_AllowedTypes, TNTUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c5", "c5", TNTUnfolded_node_c5_AllowedTypes, TNTUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c6", "c6", TNTUnfolded_node_c6_AllowedTypes, TNTUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c", "c", TNTUnfolded_node_c_AllowedTypes, TNTUnfolded_node_c_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node0", "_node0", TNTUnfolded_node__node0_AllowedTypes, TNTUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node1 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node1", "_node1", TNTUnfolded_node__node1_AllowedTypes, TNTUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node2 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node2", "_node2", TNTUnfolded_node__node2_AllowedTypes, TNTUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n2", "n2", TNTUnfolded_node_n2_AllowedTypes, TNTUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node3 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node3", "_node3", TNTUnfolded_node__node3_AllowedTypes, TNTUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node4", "_node4", TNTUnfolded_node__node4_AllowedTypes, TNTUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node5 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node5", "_node5", TNTUnfolded_node__node5_AllowedTypes, TNTUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n4", "n4", TNTUnfolded_node_n4_AllowedTypes, TNTUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node6 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node6", "_node6", TNTUnfolded_node__node6_AllowedTypes, TNTUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node7", "_node7", TNTUnfolded_node__node7_AllowedTypes, TNTUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node8 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node8", "_node8", TNTUnfolded_node__node8_AllowedTypes, TNTUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n6 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n6", "n6", TNTUnfolded_node_n6_AllowedTypes, TNTUnfolded_node_n6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node9 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node9", "_node9", TNTUnfolded_node__node9_AllowedTypes, TNTUnfolded_node__node9_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node10 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node10", "_node10", TNTUnfolded_node__node10_AllowedTypes, TNTUnfolded_node__node10_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge0", "_edge0", TNTUnfolded_edge__edge0_AllowedTypes, TNTUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge1", "_edge1", TNTUnfolded_edge__edge1_AllowedTypes, TNTUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge2", "_edge2", TNTUnfolded_edge__edge2_AllowedTypes, TNTUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge3", "_edge3", TNTUnfolded_edge__edge3_AllowedTypes, TNTUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge4", "_edge4", TNTUnfolded_edge__edge4_AllowedTypes, TNTUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge5", "_edge5", TNTUnfolded_edge__edge5_AllowedTypes, TNTUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge6", "_edge6", TNTUnfolded_edge__edge6_AllowedTypes, TNTUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge7", "_edge7", TNTUnfolded_edge__edge7_AllowedTypes, TNTUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge8", "_edge8", TNTUnfolded_edge__edge8_AllowedTypes, TNTUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge9 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge9", "_edge9", TNTUnfolded_edge__edge9_AllowedTypes, TNTUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge10 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge10", "_edge10", TNTUnfolded_edge__edge10_AllowedTypes, TNTUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge11 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge11", "_edge11", TNTUnfolded_edge__edge11_AllowedTypes, TNTUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge12 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge12", "_edge12", TNTUnfolded_edge__edge12_AllowedTypes, TNTUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge13 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge13", "_edge13", TNTUnfolded_edge__edge13_AllowedTypes, TNTUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge14 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge14", "_edge14", TNTUnfolded_edge__edge14_AllowedTypes, TNTUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge15 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge15", "_edge15", TNTUnfolded_edge__edge15_AllowedTypes, TNTUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge16 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge16", "_edge16", TNTUnfolded_edge__edge16_AllowedTypes, TNTUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge17 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge17", "_edge17", TNTUnfolded_edge__edge17_AllowedTypes, TNTUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge18 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge18", "_edge18", TNTUnfolded_edge__edge18_AllowedTypes, TNTUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge19 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge19", "_edge19", TNTUnfolded_edge__edge19_AllowedTypes, TNTUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge20 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge20", "_edge20", TNTUnfolded_edge__edge20_AllowedTypes, TNTUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge21 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge21", "_edge21", TNTUnfolded_edge__edge21_AllowedTypes, TNTUnfolded_edge__edge21_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge22 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge22", "_edge22", TNTUnfolded_edge__edge22_AllowedTypes, TNTUnfolded_edge__edge22_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge23 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge23", "_edge23", TNTUnfolded_edge__edge23_AllowedTypes, TNTUnfolded_edge__edge23_IsAllowedType, 5.5F, -1);
			pat_TNTUnfolded = new PatternGraph(
				"TNTUnfolded",
				"",
				false,
				new PatternNode[] { TNTUnfolded_node_c1, TNTUnfolded_node_c2, TNTUnfolded_node_c3, TNTUnfolded_node_c4, TNTUnfolded_node_c5, TNTUnfolded_node_c6, TNTUnfolded_node_c, TNTUnfolded_node__node0, TNTUnfolded_node__node1, TNTUnfolded_node__node2, TNTUnfolded_node_n2, TNTUnfolded_node__node3, TNTUnfolded_node__node4, TNTUnfolded_node__node5, TNTUnfolded_node_n4, TNTUnfolded_node__node6, TNTUnfolded_node__node7, TNTUnfolded_node__node8, TNTUnfolded_node_n6, TNTUnfolded_node__node9, TNTUnfolded_node__node10 }, 
				new PatternEdge[] { TNTUnfolded_edge__edge0, TNTUnfolded_edge__edge1, TNTUnfolded_edge__edge2, TNTUnfolded_edge__edge3, TNTUnfolded_edge__edge4, TNTUnfolded_edge__edge5, TNTUnfolded_edge__edge6, TNTUnfolded_edge__edge7, TNTUnfolded_edge__edge8, TNTUnfolded_edge__edge9, TNTUnfolded_edge__edge10, TNTUnfolded_edge__edge11, TNTUnfolded_edge__edge12, TNTUnfolded_edge__edge13, TNTUnfolded_edge__edge14, TNTUnfolded_edge__edge15, TNTUnfolded_edge__edge16, TNTUnfolded_edge__edge17, TNTUnfolded_edge__edge18, TNTUnfolded_edge__edge19, TNTUnfolded_edge__edge20, TNTUnfolded_edge__edge21, TNTUnfolded_edge__edge22, TNTUnfolded_edge__edge23 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[21, 21] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[24, 24] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				TNTUnfolded_isNodeHomomorphicGlobal,
				TNTUnfolded_isEdgeHomomorphicGlobal
			);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge0, TNTUnfolded_node_c1);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge0, TNTUnfolded_node_c2);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge1, TNTUnfolded_node_c2);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge1, TNTUnfolded_node_c3);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge2, TNTUnfolded_node_c3);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge2, TNTUnfolded_node_c4);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge3, TNTUnfolded_node_c4);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge3, TNTUnfolded_node_c5);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge4, TNTUnfolded_node_c5);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge4, TNTUnfolded_node_c6);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge5, TNTUnfolded_node_c6);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge5, TNTUnfolded_node_c1);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge6, TNTUnfolded_node_c1);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge6, TNTUnfolded_node_c2);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge7, TNTUnfolded_node_c3);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge7, TNTUnfolded_node_c4);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge8, TNTUnfolded_node_c5);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge8, TNTUnfolded_node_c6);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge9, TNTUnfolded_node_c1);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge9, TNTUnfolded_node_c);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge10, TNTUnfolded_node_c);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge10, TNTUnfolded_node__node0);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge11, TNTUnfolded_node_c);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge11, TNTUnfolded_node__node1);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge12, TNTUnfolded_node_c);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge12, TNTUnfolded_node__node2);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge13, TNTUnfolded_node_c2);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge13, TNTUnfolded_node_n2);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge14, TNTUnfolded_node_n2);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge14, TNTUnfolded_node__node3);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge15, TNTUnfolded_node_n2);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge15, TNTUnfolded_node__node4);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge16, TNTUnfolded_node_c3);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge16, TNTUnfolded_node__node5);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge17, TNTUnfolded_node_c4);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge17, TNTUnfolded_node_n4);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge18, TNTUnfolded_node_n4);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge18, TNTUnfolded_node__node6);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge19, TNTUnfolded_node_n4);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge19, TNTUnfolded_node__node7);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge20, TNTUnfolded_node_c5);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge20, TNTUnfolded_node__node8);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge21, TNTUnfolded_node_c6);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge21, TNTUnfolded_node_n6);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge22, TNTUnfolded_node_n6);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge22, TNTUnfolded_node__node9);
			pat_TNTUnfolded.edgeToSourceNode.Add(TNTUnfolded_edge__edge23, TNTUnfolded_node_n6);
			pat_TNTUnfolded.edgeToTargetNode.Add(TNTUnfolded_edge__edge23, TNTUnfolded_node__node10);

			TNTUnfolded_node_c1.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c2.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c3.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c4.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c5.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c6.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_c.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node0.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node1.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node2.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_n2.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node3.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node4.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node5.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_n4.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node6.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node7.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node8.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node_n6.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node9.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_node__node10.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge0.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge1.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge2.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge3.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge4.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge5.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge6.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge7.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge8.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge9.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge10.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge11.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge12.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge13.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge14.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge15.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge16.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge17.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge18.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge19.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge20.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge21.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge22.PointOfDefinition = pat_TNTUnfolded;
			TNTUnfolded_edge__edge23.PointOfDefinition = pat_TNTUnfolded;

			patternGraph = pat_TNTUnfolded;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}
	}

	public class Rule_createTNT : LGSPRulePattern
	{
		private static Rule_createTNT instance = null;
		public static Rule_createTNT Instance { get { if (instance==null) { instance = new Rule_createTNT(); instance.initialize(); } return instance; } }

		public enum createTNT_NodeNums { };
		public enum createTNT_EdgeNums { };
		public enum createTNT_VariableNums { };
		public enum createTNT_SubNums { };
		public enum createTNT_AltNums { };
		PatternGraph pat_createTNT;


#if INITIAL_WARMUP
		public Rule_createTNT()
#else
		private Rule_createTNT()
#endif
		{
			name = "createTNT";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] createTNT_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] createTNT_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			pat_createTNT = new PatternGraph(
				"createTNT",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				createTNT_isNodeHomomorphicGlobal,
				createTNT_isEdgeHomomorphicGlobal
			);


			patternGraph = pat_createTNT;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createTNT_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@C node_c = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			@H node__node2 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node3 = @O.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@H node__node5 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node6 = @O.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@H node__node8 = @H.CreateNode(graph);
			@N node_n6 = @N.CreateNode(graph);
			@O node__node9 = @O.CreateNode(graph);
			@O node__node10 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( createTNT_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node_c);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c, node__node0);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_c, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_c, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_n2, node__node3);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n2, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_c3, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_n4, node__node6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n4, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_c5, node__node8);
			@Edge edge__edge21 = @Edge.CreateEdge(graph, node_c6, node_n6);
			@Edge edge__edge22 = @Edge.CreateEdge(graph, node_n6, node__node9);
			@Edge edge__edge23 = @Edge.CreateEdge(graph, node_n6, node__node10);
			return EmptyReturnElements;
		}
		private static String[] createTNT_addedNodeNames = new String[] { "c1", "c2", "c3", "c4", "c5", "c6", "c", "_node0", "_node1", "_node2", "n2", "_node3", "_node4", "_node5", "n4", "_node6", "_node7", "_node8", "n6", "_node9", "_node10" };
		private static String[] createTNT_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8", "_edge9", "_edge10", "_edge11", "_edge12", "_edge13", "_edge14", "_edge15", "_edge16", "_edge17", "_edge18", "_edge19", "_edge20", "_edge21", "_edge22", "_edge23" };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createTNT_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@C node_c = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			@H node__node2 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node3 = @O.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@H node__node5 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node6 = @O.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@H node__node8 = @H.CreateNode(graph);
			@N node_n6 = @N.CreateNode(graph);
			@O node__node9 = @O.CreateNode(graph);
			@O node__node10 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( createTNT_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node_c);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c, node__node0);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_c, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_c, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_n2, node__node3);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n2, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_c3, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_n4, node__node6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n4, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_c5, node__node8);
			@Edge edge__edge21 = @Edge.CreateEdge(graph, node_c6, node_n6);
			@Edge edge__edge22 = @Edge.CreateEdge(graph, node_n6, node__node9);
			@Edge edge__edge23 = @Edge.CreateEdge(graph, node_n6, node__node10);
			return EmptyReturnElements;
		}
	}

	public class Rule_DNT : LGSPRulePattern
	{
		private static Rule_DNT instance = null;
		public static Rule_DNT Instance { get { if (instance==null) { instance = new Rule_DNT(); instance.initialize(); } return instance; } }

		public static NodeType[] DNT_node_c1_AllowedTypes = null;
		public static NodeType[] DNT_node_c2_AllowedTypes = null;
		public static NodeType[] DNT_node_c3_AllowedTypes = null;
		public static NodeType[] DNT_node_c4_AllowedTypes = null;
		public static NodeType[] DNT_node_c5_AllowedTypes = null;
		public static NodeType[] DNT_node_c6_AllowedTypes = null;
		public static bool[] DNT_node_c1_IsAllowedType = null;
		public static bool[] DNT_node_c2_IsAllowedType = null;
		public static bool[] DNT_node_c3_IsAllowedType = null;
		public static bool[] DNT_node_c4_IsAllowedType = null;
		public static bool[] DNT_node_c5_IsAllowedType = null;
		public static bool[] DNT_node_c6_IsAllowedType = null;
		public static EdgeType[] DNT_edge__edge0_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge1_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge2_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge3_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge4_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge5_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge6_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge7_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge8_AllowedTypes = null;
		public static bool[] DNT_edge__edge0_IsAllowedType = null;
		public static bool[] DNT_edge__edge1_IsAllowedType = null;
		public static bool[] DNT_edge__edge2_IsAllowedType = null;
		public static bool[] DNT_edge__edge3_IsAllowedType = null;
		public static bool[] DNT_edge__edge4_IsAllowedType = null;
		public static bool[] DNT_edge__edge5_IsAllowedType = null;
		public static bool[] DNT_edge__edge6_IsAllowedType = null;
		public static bool[] DNT_edge__edge7_IsAllowedType = null;
		public static bool[] DNT_edge__edge8_IsAllowedType = null;
		public enum DNT_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum DNT_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum DNT_VariableNums { };
		public enum DNT_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum DNT_AltNums { };
		PatternGraph pat_DNT;


#if INITIAL_WARMUP
		public Rule_DNT()
#else
		private Rule_DNT()
#endif
		{
			name = "DNT";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] DNT_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] DNT_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode DNT_node_c1 = new PatternNode((int) NodeTypes.@C, "DNT_node_c1", "c1", DNT_node_c1_AllowedTypes, DNT_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c2 = new PatternNode((int) NodeTypes.@C, "DNT_node_c2", "c2", DNT_node_c2_AllowedTypes, DNT_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c3 = new PatternNode((int) NodeTypes.@C, "DNT_node_c3", "c3", DNT_node_c3_AllowedTypes, DNT_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c4 = new PatternNode((int) NodeTypes.@C, "DNT_node_c4", "c4", DNT_node_c4_AllowedTypes, DNT_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c5 = new PatternNode((int) NodeTypes.@C, "DNT_node_c5", "c5", DNT_node_c5_AllowedTypes, DNT_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c6 = new PatternNode((int) NodeTypes.@C, "DNT_node_c6", "c6", DNT_node_c6_AllowedTypes, DNT_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge0", "_edge0", DNT_edge__edge0_AllowedTypes, DNT_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge1", "_edge1", DNT_edge__edge1_AllowedTypes, DNT_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge2", "_edge2", DNT_edge__edge2_AllowedTypes, DNT_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge3", "_edge3", DNT_edge__edge3_AllowedTypes, DNT_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge4", "_edge4", DNT_edge__edge4_AllowedTypes, DNT_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge5", "_edge5", DNT_edge__edge5_AllowedTypes, DNT_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge6", "_edge6", DNT_edge__edge6_AllowedTypes, DNT_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge7", "_edge7", DNT_edge__edge7_AllowedTypes, DNT_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNT_edge__edge8", "_edge8", DNT_edge__edge8_AllowedTypes, DNT_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding DNT__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { DNT_node_c1 });
			PatternGraphEmbedding DNT__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { DNT_node_c2 });
			PatternGraphEmbedding DNT__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c3 });
			PatternGraphEmbedding DNT__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { DNT_node_c4 });
			PatternGraphEmbedding DNT__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c5 });
			PatternGraphEmbedding DNT__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c6 });
			pat_DNT = new PatternGraph(
				"DNT",
				"",
				false,
				new PatternNode[] { DNT_node_c1, DNT_node_c2, DNT_node_c3, DNT_node_c4, DNT_node_c5, DNT_node_c6 }, 
				new PatternEdge[] { DNT_edge__edge0, DNT_edge__edge1, DNT_edge__edge2, DNT_edge__edge3, DNT_edge__edge4, DNT_edge__edge5, DNT_edge__edge6, DNT_edge__edge7, DNT_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { DNT__subpattern0, DNT__subpattern1, DNT__subpattern2, DNT__subpattern3, DNT__subpattern4, DNT__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				DNT_isNodeHomomorphicGlobal,
				DNT_isEdgeHomomorphicGlobal
			);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge0, DNT_node_c1);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge0, DNT_node_c2);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge1, DNT_node_c2);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge1, DNT_node_c3);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge2, DNT_node_c3);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge2, DNT_node_c4);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge3, DNT_node_c4);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge3, DNT_node_c5);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge4, DNT_node_c5);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge4, DNT_node_c6);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge5, DNT_node_c6);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge5, DNT_node_c1);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge6, DNT_node_c1);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge6, DNT_node_c2);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge7, DNT_node_c3);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge7, DNT_node_c4);
			pat_DNT.edgeToSourceNode.Add(DNT_edge__edge8, DNT_node_c5);
			pat_DNT.edgeToTargetNode.Add(DNT_edge__edge8, DNT_node_c6);

			DNT_node_c1.PointOfDefinition = pat_DNT;
			DNT_node_c2.PointOfDefinition = pat_DNT;
			DNT_node_c3.PointOfDefinition = pat_DNT;
			DNT_node_c4.PointOfDefinition = pat_DNT;
			DNT_node_c5.PointOfDefinition = pat_DNT;
			DNT_node_c6.PointOfDefinition = pat_DNT;
			DNT_edge__edge0.PointOfDefinition = pat_DNT;
			DNT_edge__edge1.PointOfDefinition = pat_DNT;
			DNT_edge__edge2.PointOfDefinition = pat_DNT;
			DNT_edge__edge3.PointOfDefinition = pat_DNT;
			DNT_edge__edge4.PointOfDefinition = pat_DNT;
			DNT_edge__edge5.PointOfDefinition = pat_DNT;
			DNT_edge__edge6.PointOfDefinition = pat_DNT;
			DNT_edge__edge7.PointOfDefinition = pat_DNT;
			DNT_edge__edge8.PointOfDefinition = pat_DNT;
			DNT__subpattern0.PointOfDefinition = pat_DNT;
			DNT__subpattern1.PointOfDefinition = pat_DNT;
			DNT__subpattern2.PointOfDefinition = pat_DNT;
			DNT__subpattern3.PointOfDefinition = pat_DNT;
			DNT__subpattern4.PointOfDefinition = pat_DNT;
			DNT__subpattern5.PointOfDefinition = pat_DNT;

			patternGraph = pat_DNT;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)DNT_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}
	}

	public class Rule_DNTUnfolded : LGSPRulePattern
	{
		private static Rule_DNTUnfolded instance = null;
		public static Rule_DNTUnfolded Instance { get { if (instance==null) { instance = new Rule_DNTUnfolded(); instance.initialize(); } return instance; } }

		public static NodeType[] DNTUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node8_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node9_AllowedTypes = null;
		public static bool[] DNTUnfolded_node_c1_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c3_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c5_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c6_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node0_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node1_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_n2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node3_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node5_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_n4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node6_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node7_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node8_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node9_IsAllowedType = null;
		public static EdgeType[] DNTUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge20_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge21_AllowedTypes = null;
		public static bool[] DNTUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge20_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge21_IsAllowedType = null;
		public enum DNTUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @c, @_node0, @_node1, @_node2, @n2, @_node3, @_node4, @_node5, @n4, @_node6, @_node7, @_node8, @_node9, };
		public enum DNTUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, @_edge21, };
		public enum DNTUnfolded_VariableNums { };
		public enum DNTUnfolded_SubNums { };
		public enum DNTUnfolded_AltNums { };
		PatternGraph pat_DNTUnfolded;


#if INITIAL_WARMUP
		public Rule_DNTUnfolded()
#else
		private Rule_DNTUnfolded()
#endif
		{
			name = "DNTUnfolded";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] DNTUnfolded_isNodeHomomorphicGlobal = new bool[19, 19] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] DNTUnfolded_isEdgeHomomorphicGlobal = new bool[22, 22] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			PatternNode DNTUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c1", "c1", DNTUnfolded_node_c1_AllowedTypes, DNTUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c2", "c2", DNTUnfolded_node_c2_AllowedTypes, DNTUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c3", "c3", DNTUnfolded_node_c3_AllowedTypes, DNTUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c4", "c4", DNTUnfolded_node_c4_AllowedTypes, DNTUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c5", "c5", DNTUnfolded_node_c5_AllowedTypes, DNTUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c6", "c6", DNTUnfolded_node_c6_AllowedTypes, DNTUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c", "c", DNTUnfolded_node_c_AllowedTypes, DNTUnfolded_node_c_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node0", "_node0", DNTUnfolded_node__node0_AllowedTypes, DNTUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node1 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node1", "_node1", DNTUnfolded_node__node1_AllowedTypes, DNTUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node2 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node2", "_node2", DNTUnfolded_node__node2_AllowedTypes, DNTUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "DNTUnfolded_node_n2", "n2", DNTUnfolded_node_n2_AllowedTypes, DNTUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node3 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node3", "_node3", DNTUnfolded_node__node3_AllowedTypes, DNTUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node4", "_node4", DNTUnfolded_node__node4_AllowedTypes, DNTUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node5 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node5", "_node5", DNTUnfolded_node__node5_AllowedTypes, DNTUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "DNTUnfolded_node_n4", "n4", DNTUnfolded_node_n4_AllowedTypes, DNTUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node6 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node6", "_node6", DNTUnfolded_node__node6_AllowedTypes, DNTUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node7", "_node7", DNTUnfolded_node__node7_AllowedTypes, DNTUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node8 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node8", "_node8", DNTUnfolded_node__node8_AllowedTypes, DNTUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node9 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node9", "_node9", DNTUnfolded_node__node9_AllowedTypes, DNTUnfolded_node__node9_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge0", "_edge0", DNTUnfolded_edge__edge0_AllowedTypes, DNTUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge1", "_edge1", DNTUnfolded_edge__edge1_AllowedTypes, DNTUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge2", "_edge2", DNTUnfolded_edge__edge2_AllowedTypes, DNTUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge3", "_edge3", DNTUnfolded_edge__edge3_AllowedTypes, DNTUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge4", "_edge4", DNTUnfolded_edge__edge4_AllowedTypes, DNTUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge5", "_edge5", DNTUnfolded_edge__edge5_AllowedTypes, DNTUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge6", "_edge6", DNTUnfolded_edge__edge6_AllowedTypes, DNTUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge7", "_edge7", DNTUnfolded_edge__edge7_AllowedTypes, DNTUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge8", "_edge8", DNTUnfolded_edge__edge8_AllowedTypes, DNTUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge9 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge9", "_edge9", DNTUnfolded_edge__edge9_AllowedTypes, DNTUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge10 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge10", "_edge10", DNTUnfolded_edge__edge10_AllowedTypes, DNTUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge11 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge11", "_edge11", DNTUnfolded_edge__edge11_AllowedTypes, DNTUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge12 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge12", "_edge12", DNTUnfolded_edge__edge12_AllowedTypes, DNTUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge13 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge13", "_edge13", DNTUnfolded_edge__edge13_AllowedTypes, DNTUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge14 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge14", "_edge14", DNTUnfolded_edge__edge14_AllowedTypes, DNTUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge15 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge15", "_edge15", DNTUnfolded_edge__edge15_AllowedTypes, DNTUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge16 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge16", "_edge16", DNTUnfolded_edge__edge16_AllowedTypes, DNTUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge17 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge17", "_edge17", DNTUnfolded_edge__edge17_AllowedTypes, DNTUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge18 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge18", "_edge18", DNTUnfolded_edge__edge18_AllowedTypes, DNTUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge19 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge19", "_edge19", DNTUnfolded_edge__edge19_AllowedTypes, DNTUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge20 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge20", "_edge20", DNTUnfolded_edge__edge20_AllowedTypes, DNTUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge21 = new PatternEdge(true, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge21", "_edge21", DNTUnfolded_edge__edge21_AllowedTypes, DNTUnfolded_edge__edge21_IsAllowedType, 5.5F, -1);
			pat_DNTUnfolded = new PatternGraph(
				"DNTUnfolded",
				"",
				false,
				new PatternNode[] { DNTUnfolded_node_c1, DNTUnfolded_node_c2, DNTUnfolded_node_c3, DNTUnfolded_node_c4, DNTUnfolded_node_c5, DNTUnfolded_node_c6, DNTUnfolded_node_c, DNTUnfolded_node__node0, DNTUnfolded_node__node1, DNTUnfolded_node__node2, DNTUnfolded_node_n2, DNTUnfolded_node__node3, DNTUnfolded_node__node4, DNTUnfolded_node__node5, DNTUnfolded_node_n4, DNTUnfolded_node__node6, DNTUnfolded_node__node7, DNTUnfolded_node__node8, DNTUnfolded_node__node9 }, 
				new PatternEdge[] { DNTUnfolded_edge__edge0, DNTUnfolded_edge__edge1, DNTUnfolded_edge__edge2, DNTUnfolded_edge__edge3, DNTUnfolded_edge__edge4, DNTUnfolded_edge__edge5, DNTUnfolded_edge__edge6, DNTUnfolded_edge__edge7, DNTUnfolded_edge__edge8, DNTUnfolded_edge__edge9, DNTUnfolded_edge__edge10, DNTUnfolded_edge__edge11, DNTUnfolded_edge__edge12, DNTUnfolded_edge__edge13, DNTUnfolded_edge__edge14, DNTUnfolded_edge__edge15, DNTUnfolded_edge__edge16, DNTUnfolded_edge__edge17, DNTUnfolded_edge__edge18, DNTUnfolded_edge__edge19, DNTUnfolded_edge__edge20, DNTUnfolded_edge__edge21 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[19, 19] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[22, 22] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				DNTUnfolded_isNodeHomomorphicGlobal,
				DNTUnfolded_isEdgeHomomorphicGlobal
			);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge0, DNTUnfolded_node_c1);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge0, DNTUnfolded_node_c2);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge1, DNTUnfolded_node_c2);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge1, DNTUnfolded_node_c3);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge2, DNTUnfolded_node_c3);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge2, DNTUnfolded_node_c4);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge3, DNTUnfolded_node_c4);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge3, DNTUnfolded_node_c5);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge4, DNTUnfolded_node_c5);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge4, DNTUnfolded_node_c6);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge5, DNTUnfolded_node_c6);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge5, DNTUnfolded_node_c1);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge6, DNTUnfolded_node_c1);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge6, DNTUnfolded_node_c2);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge7, DNTUnfolded_node_c3);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge7, DNTUnfolded_node_c4);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge8, DNTUnfolded_node_c5);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge8, DNTUnfolded_node_c6);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge9, DNTUnfolded_node_c1);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge9, DNTUnfolded_node_c);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge10, DNTUnfolded_node_c);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge10, DNTUnfolded_node__node0);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge11, DNTUnfolded_node_c);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge11, DNTUnfolded_node__node1);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge12, DNTUnfolded_node_c);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge12, DNTUnfolded_node__node2);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge13, DNTUnfolded_node_c2);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge13, DNTUnfolded_node_n2);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge14, DNTUnfolded_node_n2);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge14, DNTUnfolded_node__node3);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge15, DNTUnfolded_node_n2);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge15, DNTUnfolded_node__node4);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge16, DNTUnfolded_node_c3);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge16, DNTUnfolded_node__node5);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge17, DNTUnfolded_node_c4);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge17, DNTUnfolded_node_n4);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge18, DNTUnfolded_node_n4);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge18, DNTUnfolded_node__node6);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge19, DNTUnfolded_node_n4);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge19, DNTUnfolded_node__node7);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge20, DNTUnfolded_node_c5);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge20, DNTUnfolded_node__node8);
			pat_DNTUnfolded.edgeToSourceNode.Add(DNTUnfolded_edge__edge21, DNTUnfolded_node_c6);
			pat_DNTUnfolded.edgeToTargetNode.Add(DNTUnfolded_edge__edge21, DNTUnfolded_node__node9);

			DNTUnfolded_node_c1.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c2.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c3.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c4.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c5.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c6.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_c.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node0.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node1.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node2.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_n2.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node3.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node4.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node5.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node_n4.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node6.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node7.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node8.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_node__node9.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge0.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge1.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge2.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge3.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge4.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge5.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge6.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge7.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge8.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge9.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge10.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge11.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge12.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge13.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge14.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge15.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge16.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge17.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge18.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge19.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge20.PointOfDefinition = pat_DNTUnfolded;
			DNTUnfolded_edge__edge21.PointOfDefinition = pat_DNTUnfolded;

			patternGraph = pat_DNTUnfolded;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}
	}

	public class Rule_createDNT : LGSPRulePattern
	{
		private static Rule_createDNT instance = null;
		public static Rule_createDNT Instance { get { if (instance==null) { instance = new Rule_createDNT(); instance.initialize(); } return instance; } }

		public enum createDNT_NodeNums { };
		public enum createDNT_EdgeNums { };
		public enum createDNT_VariableNums { };
		public enum createDNT_SubNums { };
		public enum createDNT_AltNums { };
		PatternGraph pat_createDNT;


#if INITIAL_WARMUP
		public Rule_createDNT()
#else
		private Rule_createDNT()
#endif
		{
			name = "createDNT";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] createDNT_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] createDNT_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			pat_createDNT = new PatternGraph(
				"createDNT",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				createDNT_isNodeHomomorphicGlobal,
				createDNT_isEdgeHomomorphicGlobal
			);


			patternGraph = pat_createDNT;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createDNT_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@C node_c = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			@H node__node2 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node3 = @O.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@H node__node5 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node6 = @O.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@H node__node8 = @H.CreateNode(graph);
			@H node__node9 = @H.CreateNode(graph);
			graph.SettingAddedEdgeNames( createDNT_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node_c);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c, node__node0);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_c, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_c, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_n2, node__node3);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n2, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_c3, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_n4, node__node6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n4, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_c5, node__node8);
			@Edge edge__edge21 = @Edge.CreateEdge(graph, node_c6, node__node9);
			return EmptyReturnElements;
		}
		private static String[] createDNT_addedNodeNames = new String[] { "c1", "c2", "c3", "c4", "c5", "c6", "c", "_node0", "_node1", "_node2", "n2", "_node3", "_node4", "_node5", "n4", "_node6", "_node7", "_node8", "_node9" };
		private static String[] createDNT_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8", "_edge9", "_edge10", "_edge11", "_edge12", "_edge13", "_edge14", "_edge15", "_edge16", "_edge17", "_edge18", "_edge19", "_edge20", "_edge21" };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createDNT_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@C node_c = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@H node__node1 = @H.CreateNode(graph);
			@H node__node2 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node3 = @O.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@H node__node5 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node6 = @O.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@H node__node8 = @H.CreateNode(graph);
			@H node__node9 = @H.CreateNode(graph);
			graph.SettingAddedEdgeNames( createDNT_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node_c);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c, node__node0);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_c, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_c, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_n2, node__node3);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n2, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_c3, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_n4, node__node6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n4, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_c5, node__node8);
			@Edge edge__edge21 = @Edge.CreateEdge(graph, node_c6, node__node9);
			return EmptyReturnElements;
		}
	}

	public class Rule_TNB : LGSPRulePattern
	{
		private static Rule_TNB instance = null;
		public static Rule_TNB Instance { get { if (instance==null) { instance = new Rule_TNB(); instance.initialize(); } return instance; } }

		public static NodeType[] TNB_node_c1_AllowedTypes = null;
		public static NodeType[] TNB_node_c2_AllowedTypes = null;
		public static NodeType[] TNB_node_c3_AllowedTypes = null;
		public static NodeType[] TNB_node_c4_AllowedTypes = null;
		public static NodeType[] TNB_node_c5_AllowedTypes = null;
		public static NodeType[] TNB_node_c6_AllowedTypes = null;
		public static bool[] TNB_node_c1_IsAllowedType = null;
		public static bool[] TNB_node_c2_IsAllowedType = null;
		public static bool[] TNB_node_c3_IsAllowedType = null;
		public static bool[] TNB_node_c4_IsAllowedType = null;
		public static bool[] TNB_node_c5_IsAllowedType = null;
		public static bool[] TNB_node_c6_IsAllowedType = null;
		public static EdgeType[] TNB_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge8_AllowedTypes = null;
		public static bool[] TNB_edge__edge0_IsAllowedType = null;
		public static bool[] TNB_edge__edge1_IsAllowedType = null;
		public static bool[] TNB_edge__edge2_IsAllowedType = null;
		public static bool[] TNB_edge__edge3_IsAllowedType = null;
		public static bool[] TNB_edge__edge4_IsAllowedType = null;
		public static bool[] TNB_edge__edge5_IsAllowedType = null;
		public static bool[] TNB_edge__edge6_IsAllowedType = null;
		public static bool[] TNB_edge__edge7_IsAllowedType = null;
		public static bool[] TNB_edge__edge8_IsAllowedType = null;
		public enum TNB_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNB_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum TNB_VariableNums { };
		public enum TNB_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum TNB_AltNums { };
		PatternGraph pat_TNB;


#if INITIAL_WARMUP
		public Rule_TNB()
#else
		private Rule_TNB()
#endif
		{
			name = "TNB";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNB_isNodeHomomorphicGlobal = new bool[6, 6] {
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
				{ false, false, false, false, false, false, },
			};
			bool[,] TNB_isEdgeHomomorphicGlobal = new bool[9, 9] {
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, },
			};
			PatternNode TNB_node_c1 = new PatternNode((int) NodeTypes.@C, "TNB_node_c1", "c1", TNB_node_c1_AllowedTypes, TNB_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c2 = new PatternNode((int) NodeTypes.@C, "TNB_node_c2", "c2", TNB_node_c2_AllowedTypes, TNB_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c3 = new PatternNode((int) NodeTypes.@C, "TNB_node_c3", "c3", TNB_node_c3_AllowedTypes, TNB_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c4 = new PatternNode((int) NodeTypes.@C, "TNB_node_c4", "c4", TNB_node_c4_AllowedTypes, TNB_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c5 = new PatternNode((int) NodeTypes.@C, "TNB_node_c5", "c5", TNB_node_c5_AllowedTypes, TNB_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c6 = new PatternNode((int) NodeTypes.@C, "TNB_node_c6", "c6", TNB_node_c6_AllowedTypes, TNB_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge0", "_edge0", TNB_edge__edge0_AllowedTypes, TNB_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge1", "_edge1", TNB_edge__edge1_AllowedTypes, TNB_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge2", "_edge2", TNB_edge__edge2_AllowedTypes, TNB_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge3", "_edge3", TNB_edge__edge3_AllowedTypes, TNB_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge4", "_edge4", TNB_edge__edge4_AllowedTypes, TNB_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge5", "_edge5", TNB_edge__edge5_AllowedTypes, TNB_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge6", "_edge6", TNB_edge__edge6_AllowedTypes, TNB_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge7", "_edge7", TNB_edge__edge7_AllowedTypes, TNB_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNB_edge__edge8", "_edge8", TNB_edge__edge8_AllowedTypes, TNB_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNB__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c1 });
			PatternGraphEmbedding TNB__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c2 });
			PatternGraphEmbedding TNB__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c3 });
			PatternGraphEmbedding TNB__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c4 });
			PatternGraphEmbedding TNB__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c5 });
			PatternGraphEmbedding TNB__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c6 });
			pat_TNB = new PatternGraph(
				"TNB",
				"",
				false,
				new PatternNode[] { TNB_node_c1, TNB_node_c2, TNB_node_c3, TNB_node_c4, TNB_node_c5, TNB_node_c6 }, 
				new PatternEdge[] { TNB_edge__edge0, TNB_edge__edge1, TNB_edge__edge2, TNB_edge__edge3, TNB_edge__edge4, TNB_edge__edge5, TNB_edge__edge6, TNB_edge__edge7, TNB_edge__edge8 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { TNB__subpattern0, TNB__subpattern1, TNB__subpattern2, TNB__subpattern3, TNB__subpattern4, TNB__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				TNB_isNodeHomomorphicGlobal,
				TNB_isEdgeHomomorphicGlobal
			);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge0, TNB_node_c1);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge0, TNB_node_c2);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge1, TNB_node_c2);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge1, TNB_node_c3);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge2, TNB_node_c3);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge2, TNB_node_c4);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge3, TNB_node_c4);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge3, TNB_node_c5);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge4, TNB_node_c5);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge4, TNB_node_c6);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge5, TNB_node_c6);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge5, TNB_node_c1);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge6, TNB_node_c1);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge6, TNB_node_c2);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge7, TNB_node_c3);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge7, TNB_node_c4);
			pat_TNB.edgeToSourceNode.Add(TNB_edge__edge8, TNB_node_c5);
			pat_TNB.edgeToTargetNode.Add(TNB_edge__edge8, TNB_node_c6);

			TNB_node_c1.PointOfDefinition = pat_TNB;
			TNB_node_c2.PointOfDefinition = pat_TNB;
			TNB_node_c3.PointOfDefinition = pat_TNB;
			TNB_node_c4.PointOfDefinition = pat_TNB;
			TNB_node_c5.PointOfDefinition = pat_TNB;
			TNB_node_c6.PointOfDefinition = pat_TNB;
			TNB_edge__edge0.PointOfDefinition = pat_TNB;
			TNB_edge__edge1.PointOfDefinition = pat_TNB;
			TNB_edge__edge2.PointOfDefinition = pat_TNB;
			TNB_edge__edge3.PointOfDefinition = pat_TNB;
			TNB_edge__edge4.PointOfDefinition = pat_TNB;
			TNB_edge__edge5.PointOfDefinition = pat_TNB;
			TNB_edge__edge6.PointOfDefinition = pat_TNB;
			TNB_edge__edge7.PointOfDefinition = pat_TNB;
			TNB_edge__edge8.PointOfDefinition = pat_TNB;
			TNB__subpattern0.PointOfDefinition = pat_TNB;
			TNB__subpattern1.PointOfDefinition = pat_TNB;
			TNB__subpattern2.PointOfDefinition = pat_TNB;
			TNB__subpattern3.PointOfDefinition = pat_TNB;
			TNB__subpattern4.PointOfDefinition = pat_TNB;
			TNB__subpattern5.PointOfDefinition = pat_TNB;

			patternGraph = pat_TNB;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern0];
			LGSPMatch subpattern__subpattern1 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern1];
			LGSPMatch subpattern__subpattern2 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern2];
			LGSPMatch subpattern__subpattern3 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern3];
			LGSPMatch subpattern__subpattern4 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern4];
			LGSPMatch subpattern__subpattern5 = curMatch.EmbeddedGraphs[(int)TNB_SubNums.@_subpattern5];
			return EmptyReturnElements;
		}
	}

	public class Rule_TNBUnfolded : LGSPRulePattern
	{
		private static Rule_TNBUnfolded instance = null;
		public static Rule_TNBUnfolded Instance { get { if (instance==null) { instance = new Rule_TNBUnfolded(); instance.initialize(); } return instance; } }

		public static NodeType[] TNBUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node8_AllowedTypes = null;
		public static bool[] TNBUnfolded_node_c1_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c3_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c5_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node0_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node1_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node3_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node5_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node7_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node8_IsAllowedType = null;
		public static EdgeType[] TNBUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge20_AllowedTypes = null;
		public static bool[] TNBUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge20_IsAllowedType = null;
		public enum TNBUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @_node0, @n2, @_node1, @_node2, @_node3, @n4, @_node4, @_node5, @_node6, @n6, @_node7, @_node8, };
		public enum TNBUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, };
		public enum TNBUnfolded_VariableNums { };
		public enum TNBUnfolded_SubNums { };
		public enum TNBUnfolded_AltNums { };
		PatternGraph pat_TNBUnfolded;


#if INITIAL_WARMUP
		public Rule_TNBUnfolded()
#else
		private Rule_TNBUnfolded()
#endif
		{
			name = "TNBUnfolded";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] TNBUnfolded_isNodeHomomorphicGlobal = new bool[18, 18] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] TNBUnfolded_isEdgeHomomorphicGlobal = new bool[21, 21] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			PatternNode TNBUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c1", "c1", TNBUnfolded_node_c1_AllowedTypes, TNBUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c2", "c2", TNBUnfolded_node_c2_AllowedTypes, TNBUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c3", "c3", TNBUnfolded_node_c3_AllowedTypes, TNBUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c4", "c4", TNBUnfolded_node_c4_AllowedTypes, TNBUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c5", "c5", TNBUnfolded_node_c5_AllowedTypes, TNBUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c6", "c6", TNBUnfolded_node_c6_AllowedTypes, TNBUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node0", "_node0", TNBUnfolded_node__node0_AllowedTypes, TNBUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n2", "n2", TNBUnfolded_node_n2_AllowedTypes, TNBUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node1 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node1", "_node1", TNBUnfolded_node__node1_AllowedTypes, TNBUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node2 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node2", "_node2", TNBUnfolded_node__node2_AllowedTypes, TNBUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node3 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node3", "_node3", TNBUnfolded_node__node3_AllowedTypes, TNBUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n4", "n4", TNBUnfolded_node_n4_AllowedTypes, TNBUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node4", "_node4", TNBUnfolded_node__node4_AllowedTypes, TNBUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node5 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node5", "_node5", TNBUnfolded_node__node5_AllowedTypes, TNBUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node6 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node6", "_node6", TNBUnfolded_node__node6_AllowedTypes, TNBUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n6 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n6", "n6", TNBUnfolded_node_n6_AllowedTypes, TNBUnfolded_node_n6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node7", "_node7", TNBUnfolded_node__node7_AllowedTypes, TNBUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node8 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node8", "_node8", TNBUnfolded_node__node8_AllowedTypes, TNBUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge0 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge0", "_edge0", TNBUnfolded_edge__edge0_AllowedTypes, TNBUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge1 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge1", "_edge1", TNBUnfolded_edge__edge1_AllowedTypes, TNBUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge2 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge2", "_edge2", TNBUnfolded_edge__edge2_AllowedTypes, TNBUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge3 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge3", "_edge3", TNBUnfolded_edge__edge3_AllowedTypes, TNBUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge4 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge4", "_edge4", TNBUnfolded_edge__edge4_AllowedTypes, TNBUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge5 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge5", "_edge5", TNBUnfolded_edge__edge5_AllowedTypes, TNBUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge6 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge6", "_edge6", TNBUnfolded_edge__edge6_AllowedTypes, TNBUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge7 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge7", "_edge7", TNBUnfolded_edge__edge7_AllowedTypes, TNBUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge8 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge8", "_edge8", TNBUnfolded_edge__edge8_AllowedTypes, TNBUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge9 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge9", "_edge9", TNBUnfolded_edge__edge9_AllowedTypes, TNBUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge10 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge10", "_edge10", TNBUnfolded_edge__edge10_AllowedTypes, TNBUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge11 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge11", "_edge11", TNBUnfolded_edge__edge11_AllowedTypes, TNBUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge12 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge12", "_edge12", TNBUnfolded_edge__edge12_AllowedTypes, TNBUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge13 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge13", "_edge13", TNBUnfolded_edge__edge13_AllowedTypes, TNBUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge14 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge14", "_edge14", TNBUnfolded_edge__edge14_AllowedTypes, TNBUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge15 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge15", "_edge15", TNBUnfolded_edge__edge15_AllowedTypes, TNBUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge16 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge16", "_edge16", TNBUnfolded_edge__edge16_AllowedTypes, TNBUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge17 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge17", "_edge17", TNBUnfolded_edge__edge17_AllowedTypes, TNBUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge18 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge18", "_edge18", TNBUnfolded_edge__edge18_AllowedTypes, TNBUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge19 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge19", "_edge19", TNBUnfolded_edge__edge19_AllowedTypes, TNBUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge20 = new PatternEdge(true, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge20", "_edge20", TNBUnfolded_edge__edge20_AllowedTypes, TNBUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			pat_TNBUnfolded = new PatternGraph(
				"TNBUnfolded",
				"",
				false,
				new PatternNode[] { TNBUnfolded_node_c1, TNBUnfolded_node_c2, TNBUnfolded_node_c3, TNBUnfolded_node_c4, TNBUnfolded_node_c5, TNBUnfolded_node_c6, TNBUnfolded_node__node0, TNBUnfolded_node_n2, TNBUnfolded_node__node1, TNBUnfolded_node__node2, TNBUnfolded_node__node3, TNBUnfolded_node_n4, TNBUnfolded_node__node4, TNBUnfolded_node__node5, TNBUnfolded_node__node6, TNBUnfolded_node_n6, TNBUnfolded_node__node7, TNBUnfolded_node__node8 }, 
				new PatternEdge[] { TNBUnfolded_edge__edge0, TNBUnfolded_edge__edge1, TNBUnfolded_edge__edge2, TNBUnfolded_edge__edge3, TNBUnfolded_edge__edge4, TNBUnfolded_edge__edge5, TNBUnfolded_edge__edge6, TNBUnfolded_edge__edge7, TNBUnfolded_edge__edge8, TNBUnfolded_edge__edge9, TNBUnfolded_edge__edge10, TNBUnfolded_edge__edge11, TNBUnfolded_edge__edge12, TNBUnfolded_edge__edge13, TNBUnfolded_edge__edge14, TNBUnfolded_edge__edge15, TNBUnfolded_edge__edge16, TNBUnfolded_edge__edge17, TNBUnfolded_edge__edge18, TNBUnfolded_edge__edge19, TNBUnfolded_edge__edge20 }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[18, 18] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[21, 21] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				TNBUnfolded_isNodeHomomorphicGlobal,
				TNBUnfolded_isEdgeHomomorphicGlobal
			);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge0, TNBUnfolded_node_c1);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge0, TNBUnfolded_node_c2);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge1, TNBUnfolded_node_c2);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge1, TNBUnfolded_node_c3);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge2, TNBUnfolded_node_c3);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge2, TNBUnfolded_node_c4);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge3, TNBUnfolded_node_c4);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge3, TNBUnfolded_node_c5);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge4, TNBUnfolded_node_c5);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge4, TNBUnfolded_node_c6);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge5, TNBUnfolded_node_c6);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge5, TNBUnfolded_node_c1);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge6, TNBUnfolded_node_c1);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge6, TNBUnfolded_node_c2);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge7, TNBUnfolded_node_c3);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge7, TNBUnfolded_node_c4);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge8, TNBUnfolded_node_c5);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge8, TNBUnfolded_node_c6);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge9, TNBUnfolded_node_c1);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge9, TNBUnfolded_node__node0);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge10, TNBUnfolded_node_c2);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge10, TNBUnfolded_node_n2);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge11, TNBUnfolded_node_n2);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge11, TNBUnfolded_node__node1);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge12, TNBUnfolded_node_n2);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge12, TNBUnfolded_node__node2);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge13, TNBUnfolded_node_c3);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge13, TNBUnfolded_node__node3);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge14, TNBUnfolded_node_c4);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge14, TNBUnfolded_node_n4);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge15, TNBUnfolded_node_n4);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge15, TNBUnfolded_node__node4);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge16, TNBUnfolded_node_n4);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge16, TNBUnfolded_node__node5);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge17, TNBUnfolded_node_c5);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge17, TNBUnfolded_node__node6);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge18, TNBUnfolded_node_c6);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge18, TNBUnfolded_node_n6);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge19, TNBUnfolded_node_n6);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge19, TNBUnfolded_node__node7);
			pat_TNBUnfolded.edgeToSourceNode.Add(TNBUnfolded_edge__edge20, TNBUnfolded_node_n6);
			pat_TNBUnfolded.edgeToTargetNode.Add(TNBUnfolded_edge__edge20, TNBUnfolded_node__node8);

			TNBUnfolded_node_c1.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_c2.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_c3.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_c4.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_c5.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_c6.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node0.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_n2.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node1.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node2.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node3.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_n4.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node4.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node5.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node6.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node_n6.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node7.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_node__node8.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge0.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge1.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge2.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge3.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge4.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge5.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge6.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge7.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge8.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge9.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge10.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge11.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge12.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge13.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge14.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge15.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge16.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge17.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge18.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge19.PointOfDefinition = pat_TNBUnfolded;
			TNBUnfolded_edge__edge20.PointOfDefinition = pat_TNBUnfolded;

			patternGraph = pat_TNBUnfolded;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			return EmptyReturnElements;
		}
	}

	public class Rule_createTNB : LGSPRulePattern
	{
		private static Rule_createTNB instance = null;
		public static Rule_createTNB Instance { get { if (instance==null) { instance = new Rule_createTNB(); instance.initialize(); } return instance; } }

		public enum createTNB_NodeNums { };
		public enum createTNB_EdgeNums { };
		public enum createTNB_VariableNums { };
		public enum createTNB_SubNums { };
		public enum createTNB_AltNums { };
		PatternGraph pat_createTNB;


#if INITIAL_WARMUP
		public Rule_createTNB()
#else
		private Rule_createTNB()
#endif
		{
			name = "createTNB";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] createTNB_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] createTNB_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			pat_createTNB = new PatternGraph(
				"createTNB",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				createTNB_isNodeHomomorphicGlobal,
				createTNB_isEdgeHomomorphicGlobal
			);


			patternGraph = pat_createTNB;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createTNB_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node1 = @O.CreateNode(graph);
			@O node__node2 = @O.CreateNode(graph);
			@H node__node3 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@O node__node5 = @O.CreateNode(graph);
			@H node__node6 = @H.CreateNode(graph);
			@N node_n6 = @N.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@O node__node8 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( createTNB_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node__node0);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_n2, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_n2, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c3, node__node3);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n4, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_n4, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c5, node__node6);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_c6, node_n6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n6, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_n6, node__node8);
			return EmptyReturnElements;
		}
		private static String[] createTNB_addedNodeNames = new String[] { "c1", "c2", "c3", "c4", "c5", "c6", "_node0", "n2", "_node1", "_node2", "_node3", "n4", "_node4", "_node5", "_node6", "n6", "_node7", "_node8" };
		private static String[] createTNB_addedEdgeNames = new String[] { "_edge0", "_edge1", "_edge2", "_edge3", "_edge4", "_edge5", "_edge6", "_edge7", "_edge8", "_edge9", "_edge10", "_edge11", "_edge12", "_edge13", "_edge14", "_edge15", "_edge16", "_edge17", "_edge18", "_edge19", "_edge20" };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createTNB_addedNodeNames );
			@C node_c1 = @C.CreateNode(graph);
			@C node_c2 = @C.CreateNode(graph);
			@C node_c3 = @C.CreateNode(graph);
			@C node_c4 = @C.CreateNode(graph);
			@C node_c5 = @C.CreateNode(graph);
			@C node_c6 = @C.CreateNode(graph);
			@H node__node0 = @H.CreateNode(graph);
			@N node_n2 = @N.CreateNode(graph);
			@O node__node1 = @O.CreateNode(graph);
			@O node__node2 = @O.CreateNode(graph);
			@H node__node3 = @H.CreateNode(graph);
			@N node_n4 = @N.CreateNode(graph);
			@O node__node4 = @O.CreateNode(graph);
			@O node__node5 = @O.CreateNode(graph);
			@H node__node6 = @H.CreateNode(graph);
			@N node_n6 = @N.CreateNode(graph);
			@O node__node7 = @O.CreateNode(graph);
			@O node__node8 = @O.CreateNode(graph);
			graph.SettingAddedEdgeNames( createTNB_addedEdgeNames );
			@Edge edge__edge0 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge1 = @Edge.CreateEdge(graph, node_c2, node_c3);
			@Edge edge__edge2 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge3 = @Edge.CreateEdge(graph, node_c4, node_c5);
			@Edge edge__edge4 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge5 = @Edge.CreateEdge(graph, node_c6, node_c1);
			@Edge edge__edge6 = @Edge.CreateEdge(graph, node_c1, node_c2);
			@Edge edge__edge7 = @Edge.CreateEdge(graph, node_c3, node_c4);
			@Edge edge__edge8 = @Edge.CreateEdge(graph, node_c5, node_c6);
			@Edge edge__edge9 = @Edge.CreateEdge(graph, node_c1, node__node0);
			@Edge edge__edge10 = @Edge.CreateEdge(graph, node_c2, node_n2);
			@Edge edge__edge11 = @Edge.CreateEdge(graph, node_n2, node__node1);
			@Edge edge__edge12 = @Edge.CreateEdge(graph, node_n2, node__node2);
			@Edge edge__edge13 = @Edge.CreateEdge(graph, node_c3, node__node3);
			@Edge edge__edge14 = @Edge.CreateEdge(graph, node_c4, node_n4);
			@Edge edge__edge15 = @Edge.CreateEdge(graph, node_n4, node__node4);
			@Edge edge__edge16 = @Edge.CreateEdge(graph, node_n4, node__node5);
			@Edge edge__edge17 = @Edge.CreateEdge(graph, node_c5, node__node6);
			@Edge edge__edge18 = @Edge.CreateEdge(graph, node_c6, node_n6);
			@Edge edge__edge19 = @Edge.CreateEdge(graph, node_n6, node__node7);
			@Edge edge__edge20 = @Edge.CreateEdge(graph, node_n6, node__node8);
			return EmptyReturnElements;
		}
	}

	public class Rule_keepBenzolRingPattern : LGSPRulePattern
	{
		private static Rule_keepBenzolRingPattern instance = null;
		public static Rule_keepBenzolRingPattern Instance { get { if (instance==null) { instance = new Rule_keepBenzolRingPattern(); instance.initialize(); } return instance; } }

		public enum keepBenzolRingPattern_NodeNums { };
		public enum keepBenzolRingPattern_EdgeNums { };
		public enum keepBenzolRingPattern_VariableNums { };
		public enum keepBenzolRingPattern_SubNums { @br, };
		public enum keepBenzolRingPattern_AltNums { };
		PatternGraph pat_keepBenzolRingPattern;


#if INITIAL_WARMUP
		public Rule_keepBenzolRingPattern()
#else
		private Rule_keepBenzolRingPattern()
#endif
		{
			name = "keepBenzolRingPattern";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] keepBenzolRingPattern_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] keepBenzolRingPattern_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternGraphEmbedding keepBenzolRingPattern_br = new PatternGraphEmbedding("br", Pattern_BenzolRing.Instance, new PatternElement[] {  });
			pat_keepBenzolRingPattern = new PatternGraph(
				"keepBenzolRingPattern",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { keepBenzolRingPattern_br }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				keepBenzolRingPattern_isNodeHomomorphicGlobal,
				keepBenzolRingPattern_isEdgeHomomorphicGlobal
			);

			keepBenzolRingPattern_br.PointOfDefinition = pat_keepBenzolRingPattern;

			patternGraph = pat_keepBenzolRingPattern;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern_br = curMatch.EmbeddedGraphs[(int)keepBenzolRingPattern_SubNums.@br];
			graph.SettingAddedNodeNames( keepBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( keepBenzolRingPattern_addedEdgeNames );
			return EmptyReturnElements;
		}
		private static String[] keepBenzolRingPattern_addedNodeNames = new String[] {  };
		private static String[] keepBenzolRingPattern_addedEdgeNames = new String[] {  };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern_br = curMatch.EmbeddedGraphs[(int)keepBenzolRingPattern_SubNums.@br];
			graph.SettingAddedNodeNames( keepBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( keepBenzolRingPattern_addedEdgeNames );
			return EmptyReturnElements;
		}
	}

	public class Rule_createBenzolRingPattern : LGSPRulePattern
	{
		private static Rule_createBenzolRingPattern instance = null;
		public static Rule_createBenzolRingPattern Instance { get { if (instance==null) { instance = new Rule_createBenzolRingPattern(); instance.initialize(); } return instance; } }

		public enum createBenzolRingPattern_NodeNums { };
		public enum createBenzolRingPattern_EdgeNums { };
		public enum createBenzolRingPattern_VariableNums { };
		public enum createBenzolRingPattern_SubNums { };
		public enum createBenzolRingPattern_AltNums { };
		PatternGraph pat_createBenzolRingPattern;


#if INITIAL_WARMUP
		public Rule_createBenzolRingPattern()
#else
		private Rule_createBenzolRingPattern()
#endif
		{
			name = "createBenzolRingPattern";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] createBenzolRingPattern_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] createBenzolRingPattern_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			pat_createBenzolRingPattern = new PatternGraph(
				"createBenzolRingPattern",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				createBenzolRingPattern_isNodeHomomorphicGlobal,
				createBenzolRingPattern_isEdgeHomomorphicGlobal
			);


			patternGraph = pat_createBenzolRingPattern;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( createBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Create(graph);
			return EmptyReturnElements;
		}
		private static String[] createBenzolRingPattern_addedNodeNames = new String[] {  };
		private static String[] createBenzolRingPattern_addedEdgeNames = new String[] {  };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			graph.SettingAddedNodeNames( createBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( createBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Create(graph);
			return EmptyReturnElements;
		}
	}

	public class Rule_deleteBenzolRingPattern : LGSPRulePattern
	{
		private static Rule_deleteBenzolRingPattern instance = null;
		public static Rule_deleteBenzolRingPattern Instance { get { if (instance==null) { instance = new Rule_deleteBenzolRingPattern(); instance.initialize(); } return instance; } }

		public enum deleteBenzolRingPattern_NodeNums { };
		public enum deleteBenzolRingPattern_EdgeNums { };
		public enum deleteBenzolRingPattern_VariableNums { };
		public enum deleteBenzolRingPattern_SubNums { @_subpattern0, };
		public enum deleteBenzolRingPattern_AltNums { };
		PatternGraph pat_deleteBenzolRingPattern;


#if INITIAL_WARMUP
		public Rule_deleteBenzolRingPattern()
#else
		private Rule_deleteBenzolRingPattern()
#endif
		{
			name = "deleteBenzolRingPattern";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] deleteBenzolRingPattern_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] deleteBenzolRingPattern_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternGraphEmbedding deleteBenzolRingPattern__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRing.Instance, new PatternElement[] {  });
			pat_deleteBenzolRingPattern = new PatternGraph(
				"deleteBenzolRingPattern",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { deleteBenzolRingPattern__subpattern0 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				deleteBenzolRingPattern_isNodeHomomorphicGlobal,
				deleteBenzolRingPattern_isEdgeHomomorphicGlobal
			);

			deleteBenzolRingPattern__subpattern0.PointOfDefinition = pat_deleteBenzolRingPattern;

			patternGraph = pat_deleteBenzolRingPattern;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)deleteBenzolRingPattern_SubNums.@_subpattern0];
			graph.SettingAddedNodeNames( deleteBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( deleteBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Delete(graph, subpattern__subpattern0);
			return EmptyReturnElements;
		}
		private static String[] deleteBenzolRingPattern_addedNodeNames = new String[] {  };
		private static String[] deleteBenzolRingPattern_addedEdgeNames = new String[] {  };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern__subpattern0 = curMatch.EmbeddedGraphs[(int)deleteBenzolRingPattern_SubNums.@_subpattern0];
			graph.SettingAddedNodeNames( deleteBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( deleteBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Delete(graph, subpattern__subpattern0);
			return EmptyReturnElements;
		}
	}

	public class Rule_deleteInModifyBenzolRingPattern : LGSPRulePattern
	{
		private static Rule_deleteInModifyBenzolRingPattern instance = null;
		public static Rule_deleteInModifyBenzolRingPattern Instance { get { if (instance==null) { instance = new Rule_deleteInModifyBenzolRingPattern(); instance.initialize(); } return instance; } }

		public enum deleteInModifyBenzolRingPattern_NodeNums { };
		public enum deleteInModifyBenzolRingPattern_EdgeNums { };
		public enum deleteInModifyBenzolRingPattern_VariableNums { };
		public enum deleteInModifyBenzolRingPattern_SubNums { @br, };
		public enum deleteInModifyBenzolRingPattern_AltNums { };
		PatternGraph pat_deleteInModifyBenzolRingPattern;


#if INITIAL_WARMUP
		public Rule_deleteInModifyBenzolRingPattern()
#else
		private Rule_deleteInModifyBenzolRingPattern()
#endif
		{
			name = "deleteInModifyBenzolRingPattern";

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
		}
		public override void initialize()
		{
			bool[,] deleteInModifyBenzolRingPattern_isNodeHomomorphicGlobal = new bool[0, 0] ;
			bool[,] deleteInModifyBenzolRingPattern_isEdgeHomomorphicGlobal = new bool[0, 0] ;
			PatternGraphEmbedding deleteInModifyBenzolRingPattern_br = new PatternGraphEmbedding("br", Pattern_BenzolRing.Instance, new PatternElement[] {  });
			pat_deleteInModifyBenzolRingPattern = new PatternGraph(
				"deleteInModifyBenzolRingPattern",
				"",
				false,
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternVariable[] {  }, 
				new PatternGraphEmbedding[] { deleteInModifyBenzolRingPattern_br }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new PatternCondition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				deleteInModifyBenzolRingPattern_isNodeHomomorphicGlobal,
				deleteInModifyBenzolRingPattern_isEdgeHomomorphicGlobal
			);

			deleteInModifyBenzolRingPattern_br.PointOfDefinition = pat_deleteInModifyBenzolRingPattern;

			patternGraph = pat_deleteInModifyBenzolRingPattern;
		}



		public override object[] Modify(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern_br = curMatch.EmbeddedGraphs[(int)deleteInModifyBenzolRingPattern_SubNums.@br];
			graph.SettingAddedNodeNames( deleteInModifyBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( deleteInModifyBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Delete(graph, subpattern_br);
			return EmptyReturnElements;
		}
		private static String[] deleteInModifyBenzolRingPattern_addedNodeNames = new String[] {  };
		private static String[] deleteInModifyBenzolRingPattern_addedEdgeNames = new String[] {  };

		public override object[] ModifyNoReuse(LGSPGraph graph, LGSPMatch curMatch)
		{
			LGSPMatch subpattern_br = curMatch.EmbeddedGraphs[(int)deleteInModifyBenzolRingPattern_SubNums.@br];
			graph.SettingAddedNodeNames( deleteInModifyBenzolRingPattern_addedNodeNames );
			graph.SettingAddedEdgeNames( deleteInModifyBenzolRingPattern_addedEdgeNames );
			Pattern_BenzolRing.Instance.BenzolRing_Delete(graph, subpattern_br);
			return EmptyReturnElements;
		}
	}


    public class PatternAction_BenzolRing : LGSPSubpatternAction
    {
        private PatternAction_BenzolRing(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRing.Instance.patternGraph;
        }

        public static PatternAction_BenzolRing getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_BenzolRing newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_BenzolRing(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_BenzolRing oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_BenzolRing freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_BenzolRing next = null;

        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // Lookup BenzolRing_edge__edge0 
            int type_id_candidate_BenzolRing_edge__edge0 = 1;
            for(LGSPEdge head_candidate_BenzolRing_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_BenzolRing_edge__edge0], candidate_BenzolRing_edge__edge0 = head_candidate_BenzolRing_edge__edge0.typeNext; candidate_BenzolRing_edge__edge0 != head_candidate_BenzolRing_edge__edge0; candidate_BenzolRing_edge__edge0 = candidate_BenzolRing_edge__edge0.typeNext)
            {
                if((candidate_BenzolRing_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    continue;
                }
                uint prev__candidate_BenzolRing_edge__edge0;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_BenzolRing_edge__edge0 = candidate_BenzolRing_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_BenzolRing_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_BenzolRing_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge0) ? 1U : 0U;
                    if(prev__candidate_BenzolRing_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge0,candidate_BenzolRing_edge__edge0);
                }
                // Implicit Source BenzolRing_node_c1 from BenzolRing_edge__edge0 
                LGSPNode candidate_BenzolRing_node_c1 = candidate_BenzolRing_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_BenzolRing_node_c1.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRing_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                        }
                    }
                    continue;
                }
                if((candidate_BenzolRing_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRing_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_BenzolRing_node_c1;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_BenzolRing_node_c1 = candidate_BenzolRing_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_BenzolRing_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_BenzolRing_node_c1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRing_node_c1) ? 1U : 0U;
                    if(prev__candidate_BenzolRing_node_c1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRing_node_c1,candidate_BenzolRing_node_c1);
                }
                // Implicit Target BenzolRing_node_c2 from BenzolRing_edge__edge0 
                LGSPNode candidate_BenzolRing_node_c2 = candidate_BenzolRing_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_BenzolRing_node_c2.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                    } else { 
                        if(prev__candidate_BenzolRing_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRing_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                        }
                    }
                    continue;
                }
                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRing_node_c2))
                    && candidate_BenzolRing_node_c2==candidate_BenzolRing_node_c1
                    )
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                    } else { 
                        if(prev__candidate_BenzolRing_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRing_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                        }
                    }
                    continue;
                }
                if((candidate_BenzolRing_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                    } else { 
                        if(prev__candidate_BenzolRing_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRing_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_BenzolRing_node_c2;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_BenzolRing_node_c2 = candidate_BenzolRing_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_BenzolRing_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_BenzolRing_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRing_node_c2) ? 1U : 0U;
                    if(prev__candidate_BenzolRing_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRing_node_c2,candidate_BenzolRing_node_c2);
                }
                // Extend Outgoing BenzolRing_edge__edge6 from BenzolRing_node_c1 
                LGSPEdge head_candidate_BenzolRing_edge__edge6 = candidate_BenzolRing_node_c1.outhead;
                if(head_candidate_BenzolRing_edge__edge6 != null)
                {
                    LGSPEdge candidate_BenzolRing_edge__edge6 = head_candidate_BenzolRing_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_BenzolRing_edge__edge6.target != candidate_BenzolRing_node_c2) {
                            continue;
                        }
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge6))
                            && candidate_BenzolRing_edge__edge6==candidate_BenzolRing_edge__edge0
                            )
                        {
                            continue;
                        }
                        if((candidate_BenzolRing_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                        {
                            continue;
                        }
                        uint prev__candidate_BenzolRing_edge__edge6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_BenzolRing_edge__edge6 = candidate_BenzolRing_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_BenzolRing_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_BenzolRing_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge6) ? 1U : 0U;
                            if(prev__candidate_BenzolRing_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge6,candidate_BenzolRing_edge__edge6);
                        }
                        // Extend Outgoing BenzolRing_edge__edge1 from BenzolRing_node_c2 
                        LGSPEdge head_candidate_BenzolRing_edge__edge1 = candidate_BenzolRing_node_c2.outhead;
                        if(head_candidate_BenzolRing_edge__edge1 != null)
                        {
                            LGSPEdge candidate_BenzolRing_edge__edge1 = head_candidate_BenzolRing_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge1))
                                    && (candidate_BenzolRing_edge__edge1==candidate_BenzolRing_edge__edge0
                                        || candidate_BenzolRing_edge__edge1==candidate_BenzolRing_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                if((candidate_BenzolRing_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                {
                                    continue;
                                }
                                uint prev__candidate_BenzolRing_edge__edge1;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_BenzolRing_edge__edge1 = candidate_BenzolRing_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_BenzolRing_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_BenzolRing_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge1) ? 1U : 0U;
                                    if(prev__candidate_BenzolRing_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge1,candidate_BenzolRing_edge__edge1);
                                }
                                // Implicit Target BenzolRing_node_c3 from BenzolRing_edge__edge1 
                                LGSPNode candidate_BenzolRing_node_c3 = candidate_BenzolRing_edge__edge1.target;
                                if(!NodeType_C.isMyType[candidate_BenzolRing_node_c3.type.TypeID]) {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRing_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRing_node_c3))
                                    && (candidate_BenzolRing_node_c3==candidate_BenzolRing_node_c1
                                        || candidate_BenzolRing_node_c3==candidate_BenzolRing_node_c2
                                        )
                                    )
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRing_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                if((candidate_BenzolRing_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRing_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                uint prev__candidate_BenzolRing_node_c3;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_BenzolRing_node_c3 = candidate_BenzolRing_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_BenzolRing_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_BenzolRing_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRing_node_c3) ? 1U : 0U;
                                    if(prev__candidate_BenzolRing_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRing_node_c3,candidate_BenzolRing_node_c3);
                                }
                                // Extend Outgoing BenzolRing_edge__edge2 from BenzolRing_node_c3 
                                LGSPEdge head_candidate_BenzolRing_edge__edge2 = candidate_BenzolRing_node_c3.outhead;
                                if(head_candidate_BenzolRing_edge__edge2 != null)
                                {
                                    LGSPEdge candidate_BenzolRing_edge__edge2 = head_candidate_BenzolRing_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge2))
                                            && (candidate_BenzolRing_edge__edge2==candidate_BenzolRing_edge__edge0
                                                || candidate_BenzolRing_edge__edge2==candidate_BenzolRing_edge__edge6
                                                || candidate_BenzolRing_edge__edge2==candidate_BenzolRing_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        if((candidate_BenzolRing_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_BenzolRing_edge__edge2;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_BenzolRing_edge__edge2 = candidate_BenzolRing_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_BenzolRing_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_BenzolRing_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge2) ? 1U : 0U;
                                            if(prev__candidate_BenzolRing_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge2,candidate_BenzolRing_edge__edge2);
                                        }
                                        // Implicit Target BenzolRing_node_c4 from BenzolRing_edge__edge2 
                                        LGSPNode candidate_BenzolRing_node_c4 = candidate_BenzolRing_edge__edge2.target;
                                        if(!NodeType_C.isMyType[candidate_BenzolRing_node_c4.type.TypeID]) {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRing_node_c4))
                                            && (candidate_BenzolRing_node_c4==candidate_BenzolRing_node_c1
                                                || candidate_BenzolRing_node_c4==candidate_BenzolRing_node_c2
                                                || candidate_BenzolRing_node_c4==candidate_BenzolRing_node_c3
                                                )
                                            )
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        if((candidate_BenzolRing_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        uint prev__candidate_BenzolRing_node_c4;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_BenzolRing_node_c4 = candidate_BenzolRing_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_BenzolRing_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_BenzolRing_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRing_node_c4) ? 1U : 0U;
                                            if(prev__candidate_BenzolRing_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRing_node_c4,candidate_BenzolRing_node_c4);
                                        }
                                        // Extend Outgoing BenzolRing_edge__edge7 from BenzolRing_node_c3 
                                        LGSPEdge head_candidate_BenzolRing_edge__edge7 = candidate_BenzolRing_node_c3.outhead;
                                        if(head_candidate_BenzolRing_edge__edge7 != null)
                                        {
                                            LGSPEdge candidate_BenzolRing_edge__edge7 = head_candidate_BenzolRing_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(candidate_BenzolRing_edge__edge7.target != candidate_BenzolRing_node_c4) {
                                                    continue;
                                                }
                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge7))
                                                    && (candidate_BenzolRing_edge__edge7==candidate_BenzolRing_edge__edge0
                                                        || candidate_BenzolRing_edge__edge7==candidate_BenzolRing_edge__edge6
                                                        || candidate_BenzolRing_edge__edge7==candidate_BenzolRing_edge__edge1
                                                        || candidate_BenzolRing_edge__edge7==candidate_BenzolRing_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                if((candidate_BenzolRing_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_BenzolRing_edge__edge7;
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    prev__candidate_BenzolRing_edge__edge7 = candidate_BenzolRing_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    candidate_BenzolRing_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                } else {
                                                    prev__candidate_BenzolRing_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge7) ? 1U : 0U;
                                                    if(prev__candidate_BenzolRing_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge7,candidate_BenzolRing_edge__edge7);
                                                }
                                                // Extend Outgoing BenzolRing_edge__edge3 from BenzolRing_node_c4 
                                                LGSPEdge head_candidate_BenzolRing_edge__edge3 = candidate_BenzolRing_node_c4.outhead;
                                                if(head_candidate_BenzolRing_edge__edge3 != null)
                                                {
                                                    LGSPEdge candidate_BenzolRing_edge__edge3 = head_candidate_BenzolRing_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge3))
                                                            && (candidate_BenzolRing_edge__edge3==candidate_BenzolRing_edge__edge0
                                                                || candidate_BenzolRing_edge__edge3==candidate_BenzolRing_edge__edge6
                                                                || candidate_BenzolRing_edge__edge3==candidate_BenzolRing_edge__edge1
                                                                || candidate_BenzolRing_edge__edge3==candidate_BenzolRing_edge__edge2
                                                                || candidate_BenzolRing_edge__edge3==candidate_BenzolRing_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        if((candidate_BenzolRing_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_BenzolRing_edge__edge3;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_BenzolRing_edge__edge3 = candidate_BenzolRing_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_BenzolRing_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_BenzolRing_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge3) ? 1U : 0U;
                                                            if(prev__candidate_BenzolRing_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge3,candidate_BenzolRing_edge__edge3);
                                                        }
                                                        // Implicit Target BenzolRing_node_c5 from BenzolRing_edge__edge3 
                                                        LGSPNode candidate_BenzolRing_node_c5 = candidate_BenzolRing_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[candidate_BenzolRing_node_c5.type.TypeID]) {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRing_node_c5))
                                                            && (candidate_BenzolRing_node_c5==candidate_BenzolRing_node_c1
                                                                || candidate_BenzolRing_node_c5==candidate_BenzolRing_node_c2
                                                                || candidate_BenzolRing_node_c5==candidate_BenzolRing_node_c3
                                                                || candidate_BenzolRing_node_c5==candidate_BenzolRing_node_c4
                                                                )
                                                            )
                                                        {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        if((candidate_BenzolRing_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                        {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        uint prev__candidate_BenzolRing_node_c5;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_BenzolRing_node_c5 = candidate_BenzolRing_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_BenzolRing_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_BenzolRing_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRing_node_c5) ? 1U : 0U;
                                                            if(prev__candidate_BenzolRing_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRing_node_c5,candidate_BenzolRing_node_c5);
                                                        }
                                                        // Extend Outgoing BenzolRing_edge__edge4 from BenzolRing_node_c5 
                                                        LGSPEdge head_candidate_BenzolRing_edge__edge4 = candidate_BenzolRing_node_c5.outhead;
                                                        if(head_candidate_BenzolRing_edge__edge4 != null)
                                                        {
                                                            LGSPEdge candidate_BenzolRing_edge__edge4 = head_candidate_BenzolRing_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge4))
                                                                    && (candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge0
                                                                        || candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge6
                                                                        || candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge1
                                                                        || candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge2
                                                                        || candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge7
                                                                        || candidate_BenzolRing_edge__edge4==candidate_BenzolRing_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                if((candidate_BenzolRing_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_BenzolRing_edge__edge4;
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    prev__candidate_BenzolRing_edge__edge4 = candidate_BenzolRing_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    candidate_BenzolRing_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                } else {
                                                                    prev__candidate_BenzolRing_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge4) ? 1U : 0U;
                                                                    if(prev__candidate_BenzolRing_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge4,candidate_BenzolRing_edge__edge4);
                                                                }
                                                                // Implicit Target BenzolRing_node_c6 from BenzolRing_edge__edge4 
                                                                LGSPNode candidate_BenzolRing_node_c6 = candidate_BenzolRing_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[candidate_BenzolRing_node_c6.type.TypeID]) {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRing_node_c6))
                                                                    && (candidate_BenzolRing_node_c6==candidate_BenzolRing_node_c1
                                                                        || candidate_BenzolRing_node_c6==candidate_BenzolRing_node_c2
                                                                        || candidate_BenzolRing_node_c6==candidate_BenzolRing_node_c3
                                                                        || candidate_BenzolRing_node_c6==candidate_BenzolRing_node_c4
                                                                        || candidate_BenzolRing_node_c6==candidate_BenzolRing_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                if((candidate_BenzolRing_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                // Extend Outgoing BenzolRing_edge__edge8 from BenzolRing_node_c5 
                                                                LGSPEdge head_candidate_BenzolRing_edge__edge8 = candidate_BenzolRing_node_c5.outhead;
                                                                if(head_candidate_BenzolRing_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge candidate_BenzolRing_edge__edge8 = head_candidate_BenzolRing_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(candidate_BenzolRing_edge__edge8.target != candidate_BenzolRing_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge8))
                                                                            && (candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge0
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge6
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge1
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge2
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge7
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge3
                                                                                || candidate_BenzolRing_edge__edge8==candidate_BenzolRing_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if((candidate_BenzolRing_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_BenzolRing_edge__edge8;
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            prev__candidate_BenzolRing_edge__edge8 = candidate_BenzolRing_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            candidate_BenzolRing_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        } else {
                                                                            prev__candidate_BenzolRing_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRing_edge__edge8) ? 1U : 0U;
                                                                            if(prev__candidate_BenzolRing_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRing_edge__edge8,candidate_BenzolRing_edge__edge8);
                                                                        }
                                                                        // Extend Outgoing BenzolRing_edge__edge5 from BenzolRing_node_c6 
                                                                        LGSPEdge head_candidate_BenzolRing_edge__edge5 = candidate_BenzolRing_node_c6.outhead;
                                                                        if(head_candidate_BenzolRing_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge candidate_BenzolRing_edge__edge5 = head_candidate_BenzolRing_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_BenzolRing_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(candidate_BenzolRing_edge__edge5.target != candidate_BenzolRing_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRing_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRing_edge__edge5))
                                                                                    && (candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge0
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge6
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge1
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge2
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge7
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge3
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge4
                                                                                        || candidate_BenzolRing_edge__edge5==candidate_BenzolRing_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_BenzolRing_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                // Check whether there are subpattern matching tasks left to execute
                                                                                if(openTasks.Count==0)
                                                                                {
                                                                                    Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                    foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                    LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0]);
                                                                                    match.patternGraph = patternGraph;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c1] = candidate_BenzolRing_node_c1;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c2] = candidate_BenzolRing_node_c2;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c3] = candidate_BenzolRing_node_c3;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c4] = candidate_BenzolRing_node_c4;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c5] = candidate_BenzolRing_node_c5;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c6] = candidate_BenzolRing_node_c6;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge0] = candidate_BenzolRing_edge__edge0;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge1] = candidate_BenzolRing_edge__edge1;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge2] = candidate_BenzolRing_edge__edge2;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge3] = candidate_BenzolRing_edge__edge3;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge4] = candidate_BenzolRing_edge__edge4;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge5] = candidate_BenzolRing_edge__edge5;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge6] = candidate_BenzolRing_edge__edge6;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge7] = candidate_BenzolRing_edge__edge7;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge8] = candidate_BenzolRing_edge__edge8;
                                                                                    currentFoundPartialMatch.Push(match);
                                                                                    // if enough matches were found, we leave
                                                                                    if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                    {
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge8;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge8==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge8);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c5;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c5==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c5);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge7;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge7==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge7);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c4;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c3;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge6;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge6==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge6);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c2;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge0==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                                                                                            }
                                                                                        }
                                                                                        openTasks.Push(this);
                                                                                        return;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                                uint prevGlobal__candidate_BenzolRing_node_c1;
                                                                                prevGlobal__candidate_BenzolRing_node_c1 = candidate_BenzolRing_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_node_c2;
                                                                                prevGlobal__candidate_BenzolRing_node_c2 = candidate_BenzolRing_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_node_c3;
                                                                                prevGlobal__candidate_BenzolRing_node_c3 = candidate_BenzolRing_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_node_c4;
                                                                                prevGlobal__candidate_BenzolRing_node_c4 = candidate_BenzolRing_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_node_c5;
                                                                                prevGlobal__candidate_BenzolRing_node_c5 = candidate_BenzolRing_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_node_c6;
                                                                                prevGlobal__candidate_BenzolRing_node_c6 = candidate_BenzolRing_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge0;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge0 = candidate_BenzolRing_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge1;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge1 = candidate_BenzolRing_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge2;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge2 = candidate_BenzolRing_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge3;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge3 = candidate_BenzolRing_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge4;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge4 = candidate_BenzolRing_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge5;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge5 = candidate_BenzolRing_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge6;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge6 = candidate_BenzolRing_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge7;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge7 = candidate_BenzolRing_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_BenzolRing_edge__edge8;
                                                                                prevGlobal__candidate_BenzolRing_edge__edge8 = candidate_BenzolRing_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_BenzolRing_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                // Match subpatterns 
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                // Check whether subpatterns were found 
                                                                                if(matchesList.Count>0) {
                                                                                    // subpatterns/alternatives were found, extend the partial matches by our local match object
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0+0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c1] = candidate_BenzolRing_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c2] = candidate_BenzolRing_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c3] = candidate_BenzolRing_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c4] = candidate_BenzolRing_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c5] = candidate_BenzolRing_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c6] = candidate_BenzolRing_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge0] = candidate_BenzolRing_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge1] = candidate_BenzolRing_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge2] = candidate_BenzolRing_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge3] = candidate_BenzolRing_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge4] = candidate_BenzolRing_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge5] = candidate_BenzolRing_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge6] = candidate_BenzolRing_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge7] = candidate_BenzolRing_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge8] = candidate_BenzolRing_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                    }
                                                                                    if(matchesList==foundPartialMatches) {
                                                                                        matchesList = new List<Stack<LGSPMatch>>();
                                                                                    } else {
                                                                                        foreach(Stack<LGSPMatch> match in matchesList) {
                                                                                            foundPartialMatches.Add(match);
                                                                                        }
                                                                                        matchesList.Clear();
                                                                                    }
                                                                                    // if enough matches were found, we leave
                                                                                    if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                    {
                                                                                        candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge8;
                                                                                        candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge7;
                                                                                        candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge6;
                                                                                        candidate_BenzolRing_edge__edge5.flags = candidate_BenzolRing_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge5;
                                                                                        candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge4;
                                                                                        candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge3;
                                                                                        candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge2;
                                                                                        candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge1;
                                                                                        candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge0;
                                                                                        candidate_BenzolRing_node_c6.flags = candidate_BenzolRing_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c6;
                                                                                        candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c5;
                                                                                        candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c4;
                                                                                        candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c3;
                                                                                        candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c2;
                                                                                        candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c1;
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge8;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge8==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge8);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c5;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c5==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c5);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge7;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge7==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge7);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c4;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c3;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge6;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge6==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge6);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c2;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_node_c1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                                                                                        } else { 
                                                                                            if(prev__candidate_BenzolRing_edge__edge0==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                                                                                            }
                                                                                        }
                                                                                        openTasks.Push(this);
                                                                                        return;
                                                                                    }
                                                                                    candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge8;
                                                                                    candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge7;
                                                                                    candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge6;
                                                                                    candidate_BenzolRing_edge__edge5.flags = candidate_BenzolRing_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge5;
                                                                                    candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge4;
                                                                                    candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge3;
                                                                                    candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge2;
                                                                                    candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge1;
                                                                                    candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge0;
                                                                                    candidate_BenzolRing_node_c6.flags = candidate_BenzolRing_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c6;
                                                                                    candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c5;
                                                                                    candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c4;
                                                                                    candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c3;
                                                                                    candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c2;
                                                                                    candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c1;
                                                                                    continue;
                                                                                }
                                                                                candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c1;
                                                                                candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c2;
                                                                                candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c3;
                                                                                candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c4;
                                                                                candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c5;
                                                                                candidate_BenzolRing_node_c6.flags = candidate_BenzolRing_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_node_c6;
                                                                                candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge0;
                                                                                candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge1;
                                                                                candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge2;
                                                                                candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge3;
                                                                                candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge4;
                                                                                candidate_BenzolRing_edge__edge5.flags = candidate_BenzolRing_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge5;
                                                                                candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge6;
                                                                                candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge7;
                                                                                candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRing_edge__edge8;
                                                                            }
                                                                            while( (candidate_BenzolRing_edge__edge5 = candidate_BenzolRing_edge__edge5.outNext) != head_candidate_BenzolRing_edge__edge5 );
                                                                        }
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRing_edge__edge8.flags = candidate_BenzolRing_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge8;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRing_edge__edge8==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge8);
                                                                            }
                                                                        }
                                                                    }
                                                                    while( (candidate_BenzolRing_edge__edge8 = candidate_BenzolRing_edge__edge8.outNext) != head_candidate_BenzolRing_edge__edge8 );
                                                                }
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRing_edge__edge4.flags = candidate_BenzolRing_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge4;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRing_edge__edge4==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge4);
                                                                    }
                                                                }
                                                            }
                                                            while( (candidate_BenzolRing_edge__edge4 = candidate_BenzolRing_edge__edge4.outNext) != head_candidate_BenzolRing_edge__edge4 );
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_BenzolRing_node_c5.flags = candidate_BenzolRing_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c5;
                                                        } else { 
                                                            if(prev__candidate_BenzolRing_node_c5==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c5);
                                                            }
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_BenzolRing_edge__edge3.flags = candidate_BenzolRing_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge3;
                                                        } else { 
                                                            if(prev__candidate_BenzolRing_edge__edge3==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge3);
                                                            }
                                                        }
                                                    }
                                                    while( (candidate_BenzolRing_edge__edge3 = candidate_BenzolRing_edge__edge3.outNext) != head_candidate_BenzolRing_edge__edge3 );
                                                }
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRing_edge__edge7.flags = candidate_BenzolRing_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge7;
                                                } else { 
                                                    if(prev__candidate_BenzolRing_edge__edge7==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge7);
                                                    }
                                                }
                                            }
                                            while( (candidate_BenzolRing_edge__edge7 = candidate_BenzolRing_edge__edge7.outNext) != head_candidate_BenzolRing_edge__edge7 );
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRing_node_c4.flags = candidate_BenzolRing_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c4;
                                        } else { 
                                            if(prev__candidate_BenzolRing_node_c4==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c4);
                                            }
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRing_edge__edge2.flags = candidate_BenzolRing_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge2;
                                        } else { 
                                            if(prev__candidate_BenzolRing_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge2);
                                            }
                                        }
                                    }
                                    while( (candidate_BenzolRing_edge__edge2 = candidate_BenzolRing_edge__edge2.outNext) != head_candidate_BenzolRing_edge__edge2 );
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_BenzolRing_node_c3.flags = candidate_BenzolRing_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c3;
                                } else { 
                                    if(prev__candidate_BenzolRing_node_c3==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c3);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_BenzolRing_edge__edge1.flags = candidate_BenzolRing_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge1;
                                } else { 
                                    if(prev__candidate_BenzolRing_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge1);
                                    }
                                }
                            }
                            while( (candidate_BenzolRing_edge__edge1 = candidate_BenzolRing_edge__edge1.outNext) != head_candidate_BenzolRing_edge__edge1 );
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRing_edge__edge6.flags = candidate_BenzolRing_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge6;
                        } else { 
                            if(prev__candidate_BenzolRing_edge__edge6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge6);
                            }
                        }
                    }
                    while( (candidate_BenzolRing_edge__edge6 = candidate_BenzolRing_edge__edge6.outNext) != head_candidate_BenzolRing_edge__edge6 );
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_BenzolRing_node_c2.flags = candidate_BenzolRing_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c2;
                } else { 
                    if(prev__candidate_BenzolRing_node_c2==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c2);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_BenzolRing_node_c1.flags = candidate_BenzolRing_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_node_c1;
                } else { 
                    if(prev__candidate_BenzolRing_node_c1==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRing_node_c1);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_BenzolRing_edge__edge0.flags = candidate_BenzolRing_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRing_edge__edge0;
                } else { 
                    if(prev__candidate_BenzolRing_edge__edge0==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRing_edge__edge0);
                    }
                }
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_BenzolRingC123456Exposed : LGSPSubpatternAction
    {
        private PatternAction_BenzolRingC123456Exposed(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRingC123456Exposed.Instance.patternGraph;
        }

        public static PatternAction_BenzolRingC123456Exposed getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_BenzolRingC123456Exposed newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_BenzolRingC123456Exposed(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_BenzolRingC123456Exposed oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_BenzolRingC123456Exposed freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_BenzolRingC123456Exposed next = null;

        public LGSPNode BenzolRingC123456Exposed_node_c1;
        public LGSPNode BenzolRingC123456Exposed_node_c2;
        public LGSPNode BenzolRingC123456Exposed_node_c3;
        public LGSPNode BenzolRingC123456Exposed_node_c4;
        public LGSPNode BenzolRingC123456Exposed_node_c5;
        public LGSPNode BenzolRingC123456Exposed_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset BenzolRingC123456Exposed_node_c1 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c1 = BenzolRingC123456Exposed_node_c1;
            // SubPreset BenzolRingC123456Exposed_node_c2 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c2 = BenzolRingC123456Exposed_node_c2;
            // SubPreset BenzolRingC123456Exposed_node_c3 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c3 = BenzolRingC123456Exposed_node_c3;
            // SubPreset BenzolRingC123456Exposed_node_c4 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c4 = BenzolRingC123456Exposed_node_c4;
            // SubPreset BenzolRingC123456Exposed_node_c5 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c5 = BenzolRingC123456Exposed_node_c5;
            // SubPreset BenzolRingC123456Exposed_node_c6 
            LGSPNode candidate_BenzolRingC123456Exposed_node_c6 = BenzolRingC123456Exposed_node_c6;
            // Extend Outgoing BenzolRingC123456Exposed_edge__edge0 from BenzolRingC123456Exposed_node_c1 
            LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge0 = candidate_BenzolRingC123456Exposed_node_c1.outhead;
            if(head_candidate_BenzolRingC123456Exposed_edge__edge0 != null)
            {
                LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge0 = head_candidate_BenzolRingC123456Exposed_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(candidate_BenzolRingC123456Exposed_edge__edge0.target != candidate_BenzolRingC123456Exposed_node_c2) {
                        continue;
                    }
                    if((candidate_BenzolRingC123456Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_BenzolRingC123456Exposed_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_BenzolRingC123456Exposed_edge__edge0 = candidate_BenzolRingC123456Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_BenzolRingC123456Exposed_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_BenzolRingC123456Exposed_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge0,candidate_BenzolRingC123456Exposed_edge__edge0);
                    }
                    // Extend Outgoing BenzolRingC123456Exposed_edge__edge6 from BenzolRingC123456Exposed_node_c1 
                    LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge6 = candidate_BenzolRingC123456Exposed_node_c1.outhead;
                    if(head_candidate_BenzolRingC123456Exposed_edge__edge6 != null)
                    {
                        LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge6 = head_candidate_BenzolRingC123456Exposed_edge__edge6;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge6.type.TypeID]) {
                                continue;
                            }
                            if(candidate_BenzolRingC123456Exposed_edge__edge6.target != candidate_BenzolRingC123456Exposed_node_c2) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge6))
                                && candidate_BenzolRingC123456Exposed_edge__edge6==candidate_BenzolRingC123456Exposed_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_BenzolRingC123456Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            uint prev__candidate_BenzolRingC123456Exposed_edge__edge6;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_BenzolRingC123456Exposed_edge__edge6 = candidate_BenzolRingC123456Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_BenzolRingC123456Exposed_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_BenzolRingC123456Exposed_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge6) ? 1U : 0U;
                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge6,candidate_BenzolRingC123456Exposed_edge__edge6);
                            }
                            // Extend Outgoing BenzolRingC123456Exposed_edge__edge1 from BenzolRingC123456Exposed_node_c2 
                            LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge1 = candidate_BenzolRingC123456Exposed_node_c2.outhead;
                            if(head_candidate_BenzolRingC123456Exposed_edge__edge1 != null)
                            {
                                LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge1 = head_candidate_BenzolRingC123456Exposed_edge__edge1;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge1.type.TypeID]) {
                                        continue;
                                    }
                                    if(candidate_BenzolRingC123456Exposed_edge__edge1.target != candidate_BenzolRingC123456Exposed_node_c3) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge1))
                                        && (candidate_BenzolRingC123456Exposed_edge__edge1==candidate_BenzolRingC123456Exposed_edge__edge0
                                            || candidate_BenzolRingC123456Exposed_edge__edge1==candidate_BenzolRingC123456Exposed_edge__edge6
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_BenzolRingC123456Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    uint prev__candidate_BenzolRingC123456Exposed_edge__edge1;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_BenzolRingC123456Exposed_edge__edge1 = candidate_BenzolRingC123456Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_BenzolRingC123456Exposed_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_BenzolRingC123456Exposed_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge1) ? 1U : 0U;
                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge1,candidate_BenzolRingC123456Exposed_edge__edge1);
                                    }
                                    // Extend Outgoing BenzolRingC123456Exposed_edge__edge2 from BenzolRingC123456Exposed_node_c3 
                                    LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge2 = candidate_BenzolRingC123456Exposed_node_c3.outhead;
                                    if(head_candidate_BenzolRingC123456Exposed_edge__edge2 != null)
                                    {
                                        LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge2 = head_candidate_BenzolRingC123456Exposed_edge__edge2;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge2.type.TypeID]) {
                                                continue;
                                            }
                                            if(candidate_BenzolRingC123456Exposed_edge__edge2.target != candidate_BenzolRingC123456Exposed_node_c4) {
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge2))
                                                && (candidate_BenzolRingC123456Exposed_edge__edge2==candidate_BenzolRingC123456Exposed_edge__edge0
                                                    || candidate_BenzolRingC123456Exposed_edge__edge2==candidate_BenzolRingC123456Exposed_edge__edge6
                                                    || candidate_BenzolRingC123456Exposed_edge__edge2==candidate_BenzolRingC123456Exposed_edge__edge1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if((candidate_BenzolRingC123456Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                continue;
                                            }
                                            uint prev__candidate_BenzolRingC123456Exposed_edge__edge2;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                prev__candidate_BenzolRingC123456Exposed_edge__edge2 = candidate_BenzolRingC123456Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_BenzolRingC123456Exposed_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            } else {
                                                prev__candidate_BenzolRingC123456Exposed_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge2) ? 1U : 0U;
                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge2,candidate_BenzolRingC123456Exposed_edge__edge2);
                                            }
                                            // Extend Outgoing BenzolRingC123456Exposed_edge__edge7 from BenzolRingC123456Exposed_node_c3 
                                            LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge7 = candidate_BenzolRingC123456Exposed_node_c3.outhead;
                                            if(head_candidate_BenzolRingC123456Exposed_edge__edge7 != null)
                                            {
                                                LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge7 = head_candidate_BenzolRingC123456Exposed_edge__edge7;
                                                do
                                                {
                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge7.type.TypeID]) {
                                                        continue;
                                                    }
                                                    if(candidate_BenzolRingC123456Exposed_edge__edge7.target != candidate_BenzolRingC123456Exposed_node_c4) {
                                                        continue;
                                                    }
                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge7))
                                                        && (candidate_BenzolRingC123456Exposed_edge__edge7==candidate_BenzolRingC123456Exposed_edge__edge0
                                                            || candidate_BenzolRingC123456Exposed_edge__edge7==candidate_BenzolRingC123456Exposed_edge__edge6
                                                            || candidate_BenzolRingC123456Exposed_edge__edge7==candidate_BenzolRingC123456Exposed_edge__edge1
                                                            || candidate_BenzolRingC123456Exposed_edge__edge7==candidate_BenzolRingC123456Exposed_edge__edge2
                                                            )
                                                        )
                                                    {
                                                        continue;
                                                    }
                                                    if((candidate_BenzolRingC123456Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                    {
                                                        continue;
                                                    }
                                                    uint prev__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        prev__candidate_BenzolRingC123456Exposed_edge__edge7 = candidate_BenzolRingC123456Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_BenzolRingC123456Exposed_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    } else {
                                                        prev__candidate_BenzolRingC123456Exposed_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge7) ? 1U : 0U;
                                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge7,candidate_BenzolRingC123456Exposed_edge__edge7);
                                                    }
                                                    // Extend Outgoing BenzolRingC123456Exposed_edge__edge3 from BenzolRingC123456Exposed_node_c4 
                                                    LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge3 = candidate_BenzolRingC123456Exposed_node_c4.outhead;
                                                    if(head_candidate_BenzolRingC123456Exposed_edge__edge3 != null)
                                                    {
                                                        LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge3 = head_candidate_BenzolRingC123456Exposed_edge__edge3;
                                                        do
                                                        {
                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge3.type.TypeID]) {
                                                                continue;
                                                            }
                                                            if(candidate_BenzolRingC123456Exposed_edge__edge3.target != candidate_BenzolRingC123456Exposed_node_c5) {
                                                                continue;
                                                            }
                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge3))
                                                                && (candidate_BenzolRingC123456Exposed_edge__edge3==candidate_BenzolRingC123456Exposed_edge__edge0
                                                                    || candidate_BenzolRingC123456Exposed_edge__edge3==candidate_BenzolRingC123456Exposed_edge__edge6
                                                                    || candidate_BenzolRingC123456Exposed_edge__edge3==candidate_BenzolRingC123456Exposed_edge__edge1
                                                                    || candidate_BenzolRingC123456Exposed_edge__edge3==candidate_BenzolRingC123456Exposed_edge__edge2
                                                                    || candidate_BenzolRingC123456Exposed_edge__edge3==candidate_BenzolRingC123456Exposed_edge__edge7
                                                                    )
                                                                )
                                                            {
                                                                continue;
                                                            }
                                                            if((candidate_BenzolRingC123456Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                            {
                                                                continue;
                                                            }
                                                            uint prev__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                prev__candidate_BenzolRingC123456Exposed_edge__edge3 = candidate_BenzolRingC123456Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_BenzolRingC123456Exposed_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            } else {
                                                                prev__candidate_BenzolRingC123456Exposed_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge3) ? 1U : 0U;
                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge3,candidate_BenzolRingC123456Exposed_edge__edge3);
                                                            }
                                                            // Extend Outgoing BenzolRingC123456Exposed_edge__edge4 from BenzolRingC123456Exposed_node_c5 
                                                            LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge4 = candidate_BenzolRingC123456Exposed_node_c5.outhead;
                                                            if(head_candidate_BenzolRingC123456Exposed_edge__edge4 != null)
                                                            {
                                                                LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge4 = head_candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                do
                                                                {
                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge4.type.TypeID]) {
                                                                        continue;
                                                                    }
                                                                    if(candidate_BenzolRingC123456Exposed_edge__edge4.target != candidate_BenzolRingC123456Exposed_node_c6) {
                                                                        continue;
                                                                    }
                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge4))
                                                                        && (candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge0
                                                                            || candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge6
                                                                            || candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge1
                                                                            || candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge2
                                                                            || candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge7
                                                                            || candidate_BenzolRingC123456Exposed_edge__edge4==candidate_BenzolRingC123456Exposed_edge__edge3
                                                                            )
                                                                        )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if((candidate_BenzolRingC123456Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    uint prev__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        prev__candidate_BenzolRingC123456Exposed_edge__edge4 = candidate_BenzolRingC123456Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_BenzolRingC123456Exposed_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    } else {
                                                                        prev__candidate_BenzolRingC123456Exposed_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge4) ? 1U : 0U;
                                                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge4,candidate_BenzolRingC123456Exposed_edge__edge4);
                                                                    }
                                                                    // Extend Outgoing BenzolRingC123456Exposed_edge__edge8 from BenzolRingC123456Exposed_node_c5 
                                                                    LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge8 = candidate_BenzolRingC123456Exposed_node_c5.outhead;
                                                                    if(head_candidate_BenzolRingC123456Exposed_edge__edge8 != null)
                                                                    {
                                                                        LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge8 = head_candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                        do
                                                                        {
                                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge8.type.TypeID]) {
                                                                                continue;
                                                                            }
                                                                            if(candidate_BenzolRingC123456Exposed_edge__edge8.target != candidate_BenzolRingC123456Exposed_node_c6) {
                                                                                continue;
                                                                            }
                                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge8))
                                                                                && (candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge0
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge6
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge1
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge2
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge7
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge3
                                                                                    || candidate_BenzolRingC123456Exposed_edge__edge8==candidate_BenzolRingC123456Exposed_edge__edge4
                                                                                    )
                                                                                )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if((candidate_BenzolRingC123456Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            uint prev__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                prev__candidate_BenzolRingC123456Exposed_edge__edge8 = candidate_BenzolRingC123456Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_BenzolRingC123456Exposed_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            } else {
                                                                                prev__candidate_BenzolRingC123456Exposed_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge8) ? 1U : 0U;
                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC123456Exposed_edge__edge8,candidate_BenzolRingC123456Exposed_edge__edge8);
                                                                            }
                                                                            // Extend Outgoing BenzolRingC123456Exposed_edge__edge5 from BenzolRingC123456Exposed_node_c6 
                                                                            LGSPEdge head_candidate_BenzolRingC123456Exposed_edge__edge5 = candidate_BenzolRingC123456Exposed_node_c6.outhead;
                                                                            if(head_candidate_BenzolRingC123456Exposed_edge__edge5 != null)
                                                                            {
                                                                                LGSPEdge candidate_BenzolRingC123456Exposed_edge__edge5 = head_candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                do
                                                                                {
                                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC123456Exposed_edge__edge5.type.TypeID]) {
                                                                                        continue;
                                                                                    }
                                                                                    if(candidate_BenzolRingC123456Exposed_edge__edge5.target != candidate_BenzolRingC123456Exposed_node_c1) {
                                                                                        continue;
                                                                                    }
                                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC123456Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC123456Exposed_edge__edge5))
                                                                                        && (candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge0
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge6
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge1
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge2
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge7
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge3
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge4
                                                                                            || candidate_BenzolRingC123456Exposed_edge__edge5==candidate_BenzolRingC123456Exposed_edge__edge8
                                                                                            )
                                                                                        )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if((candidate_BenzolRingC123456Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    // Check whether there are subpattern matching tasks left to execute
                                                                                    if(openTasks.Count==0)
                                                                                    {
                                                                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c1] = candidate_BenzolRingC123456Exposed_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c2] = candidate_BenzolRingC123456Exposed_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c3] = candidate_BenzolRingC123456Exposed_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c4] = candidate_BenzolRingC123456Exposed_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c5] = candidate_BenzolRingC123456Exposed_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c6] = candidate_BenzolRingC123456Exposed_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge0] = candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge1] = candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge2] = candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge3] = candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge4] = candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge5] = candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge6] = candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge7] = candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge8] = candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge0 = candidate_BenzolRingC123456Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge1 = candidate_BenzolRingC123456Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge2 = candidate_BenzolRingC123456Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge3 = candidate_BenzolRingC123456Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge4 = candidate_BenzolRingC123456Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge5 = candidate_BenzolRingC123456Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge6 = candidate_BenzolRingC123456Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge7 = candidate_BenzolRingC123456Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                    prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge8 = candidate_BenzolRingC123456Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    // Match subpatterns 
                                                                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                    // Check whether subpatterns were found 
                                                                                    if(matchesList.Count>0) {
                                                                                        // subpatterns/alternatives were found, extend the partial matches by our local match object
                                                                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                        {
                                                                                            LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0+0]);
                                                                                            match.patternGraph = patternGraph;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c1] = candidate_BenzolRingC123456Exposed_node_c1;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c2] = candidate_BenzolRingC123456Exposed_node_c2;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c3] = candidate_BenzolRingC123456Exposed_node_c3;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c4] = candidate_BenzolRingC123456Exposed_node_c4;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c5] = candidate_BenzolRingC123456Exposed_node_c5;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c6] = candidate_BenzolRingC123456Exposed_node_c6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge0] = candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge1] = candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge2] = candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge3] = candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge4] = candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge5] = candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge6] = candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge7] = candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge8] = candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                            currentFoundPartialMatch.Push(match);
                                                                                        }
                                                                                        if(matchesList==foundPartialMatches) {
                                                                                            matchesList = new List<Stack<LGSPMatch>>();
                                                                                        } else {
                                                                                            foreach(Stack<LGSPMatch> match in matchesList) {
                                                                                                foundPartialMatches.Add(match);
                                                                                            }
                                                                                            matchesList.Clear();
                                                                                        }
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge5.flags = candidate_BenzolRingC123456Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                            candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge5.flags = candidate_BenzolRingC123456Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                        candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                        continue;
                                                                                    }
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge0;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge1;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge2;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge5.flags = candidate_BenzolRingC123456Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge5;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge6;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                                                    candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                                }
                                                                                while( (candidate_BenzolRingC123456Exposed_edge__edge5 = candidate_BenzolRingC123456Exposed_edge__edge5.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge5 );
                                                                            }
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                candidate_BenzolRingC123456Exposed_edge__edge8.flags = candidate_BenzolRingC123456Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge8;
                                                                            } else { 
                                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge8==0) {
                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge8);
                                                                                }
                                                                            }
                                                                        }
                                                                        while( (candidate_BenzolRingC123456Exposed_edge__edge8 = candidate_BenzolRingC123456Exposed_edge__edge8.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge8 );
                                                                    }
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRingC123456Exposed_edge__edge4.flags = candidate_BenzolRingC123456Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge4);
                                                                        }
                                                                    }
                                                                }
                                                                while( (candidate_BenzolRingC123456Exposed_edge__edge4 = candidate_BenzolRingC123456Exposed_edge__edge4.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge4 );
                                                            }
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRingC123456Exposed_edge__edge3.flags = candidate_BenzolRingC123456Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge3);
                                                                }
                                                            }
                                                        }
                                                        while( (candidate_BenzolRingC123456Exposed_edge__edge3 = candidate_BenzolRingC123456Exposed_edge__edge3.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge3 );
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_BenzolRingC123456Exposed_edge__edge7.flags = candidate_BenzolRingC123456Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge7;
                                                    } else { 
                                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge7==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge7);
                                                        }
                                                    }
                                                }
                                                while( (candidate_BenzolRingC123456Exposed_edge__edge7 = candidate_BenzolRingC123456Exposed_edge__edge7.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge7 );
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRingC123456Exposed_edge__edge2.flags = candidate_BenzolRingC123456Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge2);
                                                }
                                            }
                                        }
                                        while( (candidate_BenzolRingC123456Exposed_edge__edge2 = candidate_BenzolRingC123456Exposed_edge__edge2.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge2 );
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRingC123456Exposed_edge__edge1.flags = candidate_BenzolRingC123456Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge1);
                                        }
                                    }
                                }
                                while( (candidate_BenzolRingC123456Exposed_edge__edge1 = candidate_BenzolRingC123456Exposed_edge__edge1.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge1 );
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_BenzolRingC123456Exposed_edge__edge6.flags = candidate_BenzolRingC123456Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge6;
                            } else { 
                                if(prev__candidate_BenzolRingC123456Exposed_edge__edge6==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge6);
                                }
                            }
                        }
                        while( (candidate_BenzolRingC123456Exposed_edge__edge6 = candidate_BenzolRingC123456Exposed_edge__edge6.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge6 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRingC123456Exposed_edge__edge0.flags = candidate_BenzolRingC123456Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC123456Exposed_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRingC123456Exposed_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC123456Exposed_edge__edge0);
                        }
                    }
                }
                while( (candidate_BenzolRingC123456Exposed_edge__edge0 = candidate_BenzolRingC123456Exposed_edge__edge0.outNext) != head_candidate_BenzolRingC123456Exposed_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_BenzolRingC1Exposed : LGSPSubpatternAction
    {
        private PatternAction_BenzolRingC1Exposed(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRingC1Exposed.Instance.patternGraph;
        }

        public static PatternAction_BenzolRingC1Exposed getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_BenzolRingC1Exposed newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_BenzolRingC1Exposed(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_BenzolRingC1Exposed oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_BenzolRingC1Exposed freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_BenzolRingC1Exposed next = null;

        public LGSPNode BenzolRingC1Exposed_node_c1;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset BenzolRingC1Exposed_node_c1 
            LGSPNode candidate_BenzolRingC1Exposed_node_c1 = BenzolRingC1Exposed_node_c1;
            // Extend Outgoing BenzolRingC1Exposed_edge__edge0 from BenzolRingC1Exposed_node_c1 
            LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge0 = candidate_BenzolRingC1Exposed_node_c1.outhead;
            if(head_candidate_BenzolRingC1Exposed_edge__edge0 != null)
            {
                LGSPEdge candidate_BenzolRingC1Exposed_edge__edge0 = head_candidate_BenzolRingC1Exposed_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_BenzolRingC1Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_BenzolRingC1Exposed_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_BenzolRingC1Exposed_edge__edge0 = candidate_BenzolRingC1Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_BenzolRingC1Exposed_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_BenzolRingC1Exposed_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_BenzolRingC1Exposed_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge0,candidate_BenzolRingC1Exposed_edge__edge0);
                    }
                    // Implicit Target BenzolRingC1Exposed_node_c2 from BenzolRingC1Exposed_edge__edge0 
                    LGSPNode candidate_BenzolRingC1Exposed_node_c2 = candidate_BenzolRingC1Exposed_edge__edge0.target;
                    if(!NodeType_C.isMyType[candidate_BenzolRingC1Exposed_node_c2.type.TypeID]) {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c2))
                        && candidate_BenzolRingC1Exposed_node_c2==candidate_BenzolRingC1Exposed_node_c1
                        )
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((candidate_BenzolRingC1Exposed_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                            }
                        }
                        continue;
                    }
                    uint prev__candidate_BenzolRingC1Exposed_node_c2;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_BenzolRingC1Exposed_node_c2 = candidate_BenzolRingC1Exposed_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_BenzolRingC1Exposed_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_BenzolRingC1Exposed_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c2) ? 1U : 0U;
                        if(prev__candidate_BenzolRingC1Exposed_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1Exposed_node_c2,candidate_BenzolRingC1Exposed_node_c2);
                    }
                    // Extend Outgoing BenzolRingC1Exposed_edge__edge6 from BenzolRingC1Exposed_node_c1 
                    LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge6 = candidate_BenzolRingC1Exposed_node_c1.outhead;
                    if(head_candidate_BenzolRingC1Exposed_edge__edge6 != null)
                    {
                        LGSPEdge candidate_BenzolRingC1Exposed_edge__edge6 = head_candidate_BenzolRingC1Exposed_edge__edge6;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge6.type.TypeID]) {
                                continue;
                            }
                            if(candidate_BenzolRingC1Exposed_edge__edge6.target != candidate_BenzolRingC1Exposed_node_c2) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge6))
                                && candidate_BenzolRingC1Exposed_edge__edge6==candidate_BenzolRingC1Exposed_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_BenzolRingC1Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            uint prev__candidate_BenzolRingC1Exposed_edge__edge6;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_BenzolRingC1Exposed_edge__edge6 = candidate_BenzolRingC1Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_BenzolRingC1Exposed_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_BenzolRingC1Exposed_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge6) ? 1U : 0U;
                                if(prev__candidate_BenzolRingC1Exposed_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge6,candidate_BenzolRingC1Exposed_edge__edge6);
                            }
                            // Extend Outgoing BenzolRingC1Exposed_edge__edge1 from BenzolRingC1Exposed_node_c2 
                            LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge1 = candidate_BenzolRingC1Exposed_node_c2.outhead;
                            if(head_candidate_BenzolRingC1Exposed_edge__edge1 != null)
                            {
                                LGSPEdge candidate_BenzolRingC1Exposed_edge__edge1 = head_candidate_BenzolRingC1Exposed_edge__edge1;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge1.type.TypeID]) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge1))
                                        && (candidate_BenzolRingC1Exposed_edge__edge1==candidate_BenzolRingC1Exposed_edge__edge0
                                            || candidate_BenzolRingC1Exposed_edge__edge1==candidate_BenzolRingC1Exposed_edge__edge6
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_BenzolRingC1Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    uint prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_BenzolRingC1Exposed_edge__edge1 = candidate_BenzolRingC1Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_BenzolRingC1Exposed_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_BenzolRingC1Exposed_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge1) ? 1U : 0U;
                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge1,candidate_BenzolRingC1Exposed_edge__edge1);
                                    }
                                    // Implicit Target BenzolRingC1Exposed_node_c3 from BenzolRingC1Exposed_edge__edge1 
                                    LGSPNode candidate_BenzolRingC1Exposed_node_c3 = candidate_BenzolRingC1Exposed_edge__edge1.target;
                                    if(!NodeType_C.isMyType[candidate_BenzolRingC1Exposed_node_c3.type.TypeID]) {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c3))
                                        && (candidate_BenzolRingC1Exposed_node_c3==candidate_BenzolRingC1Exposed_node_c1
                                            || candidate_BenzolRingC1Exposed_node_c3==candidate_BenzolRingC1Exposed_node_c2
                                            )
                                        )
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    if((candidate_BenzolRingC1Exposed_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    uint prev__candidate_BenzolRingC1Exposed_node_c3;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_BenzolRingC1Exposed_node_c3 = candidate_BenzolRingC1Exposed_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_BenzolRingC1Exposed_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_BenzolRingC1Exposed_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c3) ? 1U : 0U;
                                        if(prev__candidate_BenzolRingC1Exposed_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1Exposed_node_c3,candidate_BenzolRingC1Exposed_node_c3);
                                    }
                                    // Extend Outgoing BenzolRingC1Exposed_edge__edge2 from BenzolRingC1Exposed_node_c3 
                                    LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge2 = candidate_BenzolRingC1Exposed_node_c3.outhead;
                                    if(head_candidate_BenzolRingC1Exposed_edge__edge2 != null)
                                    {
                                        LGSPEdge candidate_BenzolRingC1Exposed_edge__edge2 = head_candidate_BenzolRingC1Exposed_edge__edge2;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge2.type.TypeID]) {
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge2))
                                                && (candidate_BenzolRingC1Exposed_edge__edge2==candidate_BenzolRingC1Exposed_edge__edge0
                                                    || candidate_BenzolRingC1Exposed_edge__edge2==candidate_BenzolRingC1Exposed_edge__edge6
                                                    || candidate_BenzolRingC1Exposed_edge__edge2==candidate_BenzolRingC1Exposed_edge__edge1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if((candidate_BenzolRingC1Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                continue;
                                            }
                                            uint prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                prev__candidate_BenzolRingC1Exposed_edge__edge2 = candidate_BenzolRingC1Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_BenzolRingC1Exposed_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            } else {
                                                prev__candidate_BenzolRingC1Exposed_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge2) ? 1U : 0U;
                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge2,candidate_BenzolRingC1Exposed_edge__edge2);
                                            }
                                            // Implicit Target BenzolRingC1Exposed_node_c4 from BenzolRingC1Exposed_edge__edge2 
                                            LGSPNode candidate_BenzolRingC1Exposed_node_c4 = candidate_BenzolRingC1Exposed_edge__edge2.target;
                                            if(!NodeType_C.isMyType[candidate_BenzolRingC1Exposed_node_c4.type.TypeID]) {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c4))
                                                && (candidate_BenzolRingC1Exposed_node_c4==candidate_BenzolRingC1Exposed_node_c1
                                                    || candidate_BenzolRingC1Exposed_node_c4==candidate_BenzolRingC1Exposed_node_c2
                                                    || candidate_BenzolRingC1Exposed_node_c4==candidate_BenzolRingC1Exposed_node_c3
                                                    )
                                                )
                                            {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            if((candidate_BenzolRingC1Exposed_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            uint prev__candidate_BenzolRingC1Exposed_node_c4;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                prev__candidate_BenzolRingC1Exposed_node_c4 = candidate_BenzolRingC1Exposed_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_BenzolRingC1Exposed_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            } else {
                                                prev__candidate_BenzolRingC1Exposed_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c4) ? 1U : 0U;
                                                if(prev__candidate_BenzolRingC1Exposed_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1Exposed_node_c4,candidate_BenzolRingC1Exposed_node_c4);
                                            }
                                            // Extend Outgoing BenzolRingC1Exposed_edge__edge7 from BenzolRingC1Exposed_node_c3 
                                            LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge7 = candidate_BenzolRingC1Exposed_node_c3.outhead;
                                            if(head_candidate_BenzolRingC1Exposed_edge__edge7 != null)
                                            {
                                                LGSPEdge candidate_BenzolRingC1Exposed_edge__edge7 = head_candidate_BenzolRingC1Exposed_edge__edge7;
                                                do
                                                {
                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge7.type.TypeID]) {
                                                        continue;
                                                    }
                                                    if(candidate_BenzolRingC1Exposed_edge__edge7.target != candidate_BenzolRingC1Exposed_node_c4) {
                                                        continue;
                                                    }
                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge7))
                                                        && (candidate_BenzolRingC1Exposed_edge__edge7==candidate_BenzolRingC1Exposed_edge__edge0
                                                            || candidate_BenzolRingC1Exposed_edge__edge7==candidate_BenzolRingC1Exposed_edge__edge6
                                                            || candidate_BenzolRingC1Exposed_edge__edge7==candidate_BenzolRingC1Exposed_edge__edge1
                                                            || candidate_BenzolRingC1Exposed_edge__edge7==candidate_BenzolRingC1Exposed_edge__edge2
                                                            )
                                                        )
                                                    {
                                                        continue;
                                                    }
                                                    if((candidate_BenzolRingC1Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                    {
                                                        continue;
                                                    }
                                                    uint prev__candidate_BenzolRingC1Exposed_edge__edge7;
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        prev__candidate_BenzolRingC1Exposed_edge__edge7 = candidate_BenzolRingC1Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_BenzolRingC1Exposed_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    } else {
                                                        prev__candidate_BenzolRingC1Exposed_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge7) ? 1U : 0U;
                                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge7,candidate_BenzolRingC1Exposed_edge__edge7);
                                                    }
                                                    // Extend Outgoing BenzolRingC1Exposed_edge__edge3 from BenzolRingC1Exposed_node_c4 
                                                    LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge3 = candidate_BenzolRingC1Exposed_node_c4.outhead;
                                                    if(head_candidate_BenzolRingC1Exposed_edge__edge3 != null)
                                                    {
                                                        LGSPEdge candidate_BenzolRingC1Exposed_edge__edge3 = head_candidate_BenzolRingC1Exposed_edge__edge3;
                                                        do
                                                        {
                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge3.type.TypeID]) {
                                                                continue;
                                                            }
                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge3))
                                                                && (candidate_BenzolRingC1Exposed_edge__edge3==candidate_BenzolRingC1Exposed_edge__edge0
                                                                    || candidate_BenzolRingC1Exposed_edge__edge3==candidate_BenzolRingC1Exposed_edge__edge6
                                                                    || candidate_BenzolRingC1Exposed_edge__edge3==candidate_BenzolRingC1Exposed_edge__edge1
                                                                    || candidate_BenzolRingC1Exposed_edge__edge3==candidate_BenzolRingC1Exposed_edge__edge2
                                                                    || candidate_BenzolRingC1Exposed_edge__edge3==candidate_BenzolRingC1Exposed_edge__edge7
                                                                    )
                                                                )
                                                            {
                                                                continue;
                                                            }
                                                            if((candidate_BenzolRingC1Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                            {
                                                                continue;
                                                            }
                                                            uint prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                prev__candidate_BenzolRingC1Exposed_edge__edge3 = candidate_BenzolRingC1Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_BenzolRingC1Exposed_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            } else {
                                                                prev__candidate_BenzolRingC1Exposed_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge3) ? 1U : 0U;
                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge3,candidate_BenzolRingC1Exposed_edge__edge3);
                                                            }
                                                            // Implicit Target BenzolRingC1Exposed_node_c5 from BenzolRingC1Exposed_edge__edge3 
                                                            LGSPNode candidate_BenzolRingC1Exposed_node_c5 = candidate_BenzolRingC1Exposed_edge__edge3.target;
                                                            if(!NodeType_C.isMyType[candidate_BenzolRingC1Exposed_node_c5.type.TypeID]) {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c5))
                                                                && (candidate_BenzolRingC1Exposed_node_c5==candidate_BenzolRingC1Exposed_node_c1
                                                                    || candidate_BenzolRingC1Exposed_node_c5==candidate_BenzolRingC1Exposed_node_c2
                                                                    || candidate_BenzolRingC1Exposed_node_c5==candidate_BenzolRingC1Exposed_node_c3
                                                                    || candidate_BenzolRingC1Exposed_node_c5==candidate_BenzolRingC1Exposed_node_c4
                                                                    )
                                                                )
                                                            {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            if((candidate_BenzolRingC1Exposed_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                            {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            uint prev__candidate_BenzolRingC1Exposed_node_c5;
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                prev__candidate_BenzolRingC1Exposed_node_c5 = candidate_BenzolRingC1Exposed_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_BenzolRingC1Exposed_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            } else {
                                                                prev__candidate_BenzolRingC1Exposed_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c5) ? 1U : 0U;
                                                                if(prev__candidate_BenzolRingC1Exposed_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1Exposed_node_c5,candidate_BenzolRingC1Exposed_node_c5);
                                                            }
                                                            // Extend Outgoing BenzolRingC1Exposed_edge__edge4 from BenzolRingC1Exposed_node_c5 
                                                            LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge4 = candidate_BenzolRingC1Exposed_node_c5.outhead;
                                                            if(head_candidate_BenzolRingC1Exposed_edge__edge4 != null)
                                                            {
                                                                LGSPEdge candidate_BenzolRingC1Exposed_edge__edge4 = head_candidate_BenzolRingC1Exposed_edge__edge4;
                                                                do
                                                                {
                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge4.type.TypeID]) {
                                                                        continue;
                                                                    }
                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge4))
                                                                        && (candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge0
                                                                            || candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge6
                                                                            || candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge1
                                                                            || candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge2
                                                                            || candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge7
                                                                            || candidate_BenzolRingC1Exposed_edge__edge4==candidate_BenzolRingC1Exposed_edge__edge3
                                                                            )
                                                                        )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if((candidate_BenzolRingC1Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    uint prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        prev__candidate_BenzolRingC1Exposed_edge__edge4 = candidate_BenzolRingC1Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_BenzolRingC1Exposed_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    } else {
                                                                        prev__candidate_BenzolRingC1Exposed_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge4) ? 1U : 0U;
                                                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge4,candidate_BenzolRingC1Exposed_edge__edge4);
                                                                    }
                                                                    // Implicit Target BenzolRingC1Exposed_node_c6 from BenzolRingC1Exposed_edge__edge4 
                                                                    LGSPNode candidate_BenzolRingC1Exposed_node_c6 = candidate_BenzolRingC1Exposed_edge__edge4.target;
                                                                    if(!NodeType_C.isMyType[candidate_BenzolRingC1Exposed_node_c6.type.TypeID]) {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1Exposed_node_c6))
                                                                        && (candidate_BenzolRingC1Exposed_node_c6==candidate_BenzolRingC1Exposed_node_c1
                                                                            || candidate_BenzolRingC1Exposed_node_c6==candidate_BenzolRingC1Exposed_node_c2
                                                                            || candidate_BenzolRingC1Exposed_node_c6==candidate_BenzolRingC1Exposed_node_c3
                                                                            || candidate_BenzolRingC1Exposed_node_c6==candidate_BenzolRingC1Exposed_node_c4
                                                                            || candidate_BenzolRingC1Exposed_node_c6==candidate_BenzolRingC1Exposed_node_c5
                                                                            )
                                                                        )
                                                                    {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    if((candidate_BenzolRingC1Exposed_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                    {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    // Extend Outgoing BenzolRingC1Exposed_edge__edge8 from BenzolRingC1Exposed_node_c5 
                                                                    LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge8 = candidate_BenzolRingC1Exposed_node_c5.outhead;
                                                                    if(head_candidate_BenzolRingC1Exposed_edge__edge8 != null)
                                                                    {
                                                                        LGSPEdge candidate_BenzolRingC1Exposed_edge__edge8 = head_candidate_BenzolRingC1Exposed_edge__edge8;
                                                                        do
                                                                        {
                                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge8.type.TypeID]) {
                                                                                continue;
                                                                            }
                                                                            if(candidate_BenzolRingC1Exposed_edge__edge8.target != candidate_BenzolRingC1Exposed_node_c6) {
                                                                                continue;
                                                                            }
                                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge8))
                                                                                && (candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge0
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge6
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge1
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge2
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge7
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge3
                                                                                    || candidate_BenzolRingC1Exposed_edge__edge8==candidate_BenzolRingC1Exposed_edge__edge4
                                                                                    )
                                                                                )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if((candidate_BenzolRingC1Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            uint prev__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                prev__candidate_BenzolRingC1Exposed_edge__edge8 = candidate_BenzolRingC1Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_BenzolRingC1Exposed_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            } else {
                                                                                prev__candidate_BenzolRingC1Exposed_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge8) ? 1U : 0U;
                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1Exposed_edge__edge8,candidate_BenzolRingC1Exposed_edge__edge8);
                                                                            }
                                                                            // Extend Outgoing BenzolRingC1Exposed_edge__edge5 from BenzolRingC1Exposed_node_c6 
                                                                            LGSPEdge head_candidate_BenzolRingC1Exposed_edge__edge5 = candidate_BenzolRingC1Exposed_node_c6.outhead;
                                                                            if(head_candidate_BenzolRingC1Exposed_edge__edge5 != null)
                                                                            {
                                                                                LGSPEdge candidate_BenzolRingC1Exposed_edge__edge5 = head_candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                do
                                                                                {
                                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1Exposed_edge__edge5.type.TypeID]) {
                                                                                        continue;
                                                                                    }
                                                                                    if(candidate_BenzolRingC1Exposed_edge__edge5.target != candidate_BenzolRingC1Exposed_node_c1) {
                                                                                        continue;
                                                                                    }
                                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1Exposed_edge__edge5))
                                                                                        && (candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge0
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge6
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge1
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge2
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge7
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge3
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge4
                                                                                            || candidate_BenzolRingC1Exposed_edge__edge5==candidate_BenzolRingC1Exposed_edge__edge8
                                                                                            )
                                                                                        )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if((candidate_BenzolRingC1Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    // Check whether there are subpattern matching tasks left to execute
                                                                                    if(openTasks.Count==0)
                                                                                    {
                                                                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c1] = candidate_BenzolRingC1Exposed_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c2] = candidate_BenzolRingC1Exposed_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c3] = candidate_BenzolRingC1Exposed_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c4] = candidate_BenzolRingC1Exposed_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c5] = candidate_BenzolRingC1Exposed_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c6] = candidate_BenzolRingC1Exposed_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge0] = candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge1] = candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge2] = candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge3] = candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge4] = candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge5] = candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge6] = candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge7] = candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge8] = candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c5;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c5==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c5);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_node_c2;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_node_c2 = candidate_BenzolRingC1Exposed_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_node_c3;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_node_c3 = candidate_BenzolRingC1Exposed_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_node_c4;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_node_c4 = candidate_BenzolRingC1Exposed_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_node_c5;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_node_c5 = candidate_BenzolRingC1Exposed_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_node_c6;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_node_c6 = candidate_BenzolRingC1Exposed_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge0 = candidate_BenzolRingC1Exposed_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge1 = candidate_BenzolRingC1Exposed_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge2 = candidate_BenzolRingC1Exposed_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge3 = candidate_BenzolRingC1Exposed_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge4 = candidate_BenzolRingC1Exposed_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge5 = candidate_BenzolRingC1Exposed_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge6 = candidate_BenzolRingC1Exposed_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge7 = candidate_BenzolRingC1Exposed_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                    prevGlobal__candidate_BenzolRingC1Exposed_edge__edge8 = candidate_BenzolRingC1Exposed_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    // Match subpatterns 
                                                                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                    // Check whether subpatterns were found 
                                                                                    if(matchesList.Count>0) {
                                                                                        // subpatterns/alternatives were found, extend the partial matches by our local match object
                                                                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                        {
                                                                                            LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0+0]);
                                                                                            match.patternGraph = patternGraph;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c1] = candidate_BenzolRingC1Exposed_node_c1;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c2] = candidate_BenzolRingC1Exposed_node_c2;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c3] = candidate_BenzolRingC1Exposed_node_c3;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c4] = candidate_BenzolRingC1Exposed_node_c4;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c5] = candidate_BenzolRingC1Exposed_node_c5;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c6] = candidate_BenzolRingC1Exposed_node_c6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge0] = candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge1] = candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge2] = candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge3] = candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge4] = candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge5] = candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge6] = candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge7] = candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge8] = candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                            currentFoundPartialMatch.Push(match);
                                                                                        }
                                                                                        if(matchesList==foundPartialMatches) {
                                                                                            matchesList = new List<Stack<LGSPMatch>>();
                                                                                        } else {
                                                                                            foreach(Stack<LGSPMatch> match in matchesList) {
                                                                                                foundPartialMatches.Add(match);
                                                                                            }
                                                                                            matchesList.Clear();
                                                                                        }
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge5.flags = candidate_BenzolRingC1Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                            candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                            candidate_BenzolRingC1Exposed_node_c6.flags = candidate_BenzolRingC1Exposed_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c6;
                                                                                            candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c5;
                                                                                            candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c4;
                                                                                            candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c3;
                                                                                            candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c2;
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c5;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c5==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c5);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_node_c2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge5.flags = candidate_BenzolRingC1Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                        candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                        candidate_BenzolRingC1Exposed_node_c6.flags = candidate_BenzolRingC1Exposed_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c6;
                                                                                        candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c5;
                                                                                        candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c4;
                                                                                        candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c3;
                                                                                        candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c2;
                                                                                        continue;
                                                                                    }
                                                                                    candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c2;
                                                                                    candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c3;
                                                                                    candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c4;
                                                                                    candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c5;
                                                                                    candidate_BenzolRingC1Exposed_node_c6.flags = candidate_BenzolRingC1Exposed_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_node_c6;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge0;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge1;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge2;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge3;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge5.flags = candidate_BenzolRingC1Exposed_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge5;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge6;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge7;
                                                                                    candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                                }
                                                                                while( (candidate_BenzolRingC1Exposed_edge__edge5 = candidate_BenzolRingC1Exposed_edge__edge5.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge5 );
                                                                            }
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                candidate_BenzolRingC1Exposed_edge__edge8.flags = candidate_BenzolRingC1Exposed_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge8;
                                                                            } else { 
                                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge8==0) {
                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge8);
                                                                                }
                                                                            }
                                                                        }
                                                                        while( (candidate_BenzolRingC1Exposed_edge__edge8 = candidate_BenzolRingC1Exposed_edge__edge8.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge8 );
                                                                    }
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRingC1Exposed_edge__edge4.flags = candidate_BenzolRingC1Exposed_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge4);
                                                                        }
                                                                    }
                                                                }
                                                                while( (candidate_BenzolRingC1Exposed_edge__edge4 = candidate_BenzolRingC1Exposed_edge__edge4.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge4 );
                                                            }
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRingC1Exposed_node_c5.flags = candidate_BenzolRingC1Exposed_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c5;
                                                            } else { 
                                                                if(prev__candidate_BenzolRingC1Exposed_node_c5==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c5);
                                                                }
                                                            }
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRingC1Exposed_edge__edge3.flags = candidate_BenzolRingC1Exposed_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge3);
                                                                }
                                                            }
                                                        }
                                                        while( (candidate_BenzolRingC1Exposed_edge__edge3 = candidate_BenzolRingC1Exposed_edge__edge3.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge3 );
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_BenzolRingC1Exposed_edge__edge7.flags = candidate_BenzolRingC1Exposed_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge7;
                                                    } else { 
                                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge7==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge7);
                                                        }
                                                    }
                                                }
                                                while( (candidate_BenzolRingC1Exposed_edge__edge7 = candidate_BenzolRingC1Exposed_edge__edge7.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge7 );
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRingC1Exposed_node_c4.flags = candidate_BenzolRingC1Exposed_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c4;
                                            } else { 
                                                if(prev__candidate_BenzolRingC1Exposed_node_c4==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c4);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRingC1Exposed_edge__edge2.flags = candidate_BenzolRingC1Exposed_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRingC1Exposed_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge2);
                                                }
                                            }
                                        }
                                        while( (candidate_BenzolRingC1Exposed_edge__edge2 = candidate_BenzolRingC1Exposed_edge__edge2.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge2 );
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRingC1Exposed_node_c3.flags = candidate_BenzolRingC1Exposed_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c3;
                                    } else { 
                                        if(prev__candidate_BenzolRingC1Exposed_node_c3==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c3);
                                        }
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRingC1Exposed_edge__edge1.flags = candidate_BenzolRingC1Exposed_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRingC1Exposed_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge1);
                                        }
                                    }
                                }
                                while( (candidate_BenzolRingC1Exposed_edge__edge1 = candidate_BenzolRingC1Exposed_edge__edge1.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge1 );
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_BenzolRingC1Exposed_edge__edge6.flags = candidate_BenzolRingC1Exposed_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge6;
                            } else { 
                                if(prev__candidate_BenzolRingC1Exposed_edge__edge6==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge6);
                                }
                            }
                        }
                        while( (candidate_BenzolRingC1Exposed_edge__edge6 = candidate_BenzolRingC1Exposed_edge__edge6.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge6 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRingC1Exposed_node_c2.flags = candidate_BenzolRingC1Exposed_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_node_c2;
                    } else { 
                        if(prev__candidate_BenzolRingC1Exposed_node_c2==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1Exposed_node_c2);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRingC1Exposed_edge__edge0.flags = candidate_BenzolRingC1Exposed_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1Exposed_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRingC1Exposed_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1Exposed_edge__edge0);
                        }
                    }
                }
                while( (candidate_BenzolRingC1Exposed_edge__edge0 = candidate_BenzolRingC1Exposed_edge__edge0.outNext) != head_candidate_BenzolRingC1Exposed_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_BenzolRingC1ExposedNotC6Nitro : LGSPSubpatternAction
    {
        private PatternAction_BenzolRingC1ExposedNotC6Nitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRingC1ExposedNotC6Nitro.Instance.patternGraph;
        }

        public static PatternAction_BenzolRingC1ExposedNotC6Nitro getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_BenzolRingC1ExposedNotC6Nitro newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_BenzolRingC1ExposedNotC6Nitro(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_BenzolRingC1ExposedNotC6Nitro oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_BenzolRingC1ExposedNotC6Nitro freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_BenzolRingC1ExposedNotC6Nitro next = null;

        public LGSPNode BenzolRingC1ExposedNotC6Nitro_node_c1;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset BenzolRingC1ExposedNotC6Nitro_node_c1 
            LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c1 = BenzolRingC1ExposedNotC6Nitro_node_c1;
            // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge0 from BenzolRingC1ExposedNotC6Nitro_node_c1 
            LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c1.outhead;
            if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 != null)
            {
                LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                    }
                    // Implicit Target BenzolRingC1ExposedNotC6Nitro_node_c2 from BenzolRingC1ExposedNotC6Nitro_edge__edge0 
                    LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c2 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.target;
                    if(!NodeType_C.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.type.TypeID]) {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2))
                        && candidate_BenzolRingC1ExposedNotC6Nitro_node_c2==candidate_BenzolRingC1ExposedNotC6Nitro_node_c1
                        )
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                        } else { 
                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                            }
                        }
                        continue;
                    }
                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2) ? 1U : 0U;
                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2,candidate_BenzolRingC1ExposedNotC6Nitro_node_c2);
                    }
                    // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge6 from BenzolRingC1ExposedNotC6Nitro_node_c1 
                    LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c1.outhead;
                    if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 != null)
                    {
                        LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.type.TypeID]) {
                                continue;
                            }
                            if(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.target != candidate_BenzolRingC1ExposedNotC6Nitro_node_c2) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6))
                                && candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6) ? 1U : 0U;
                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6);
                            }
                            // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge1 from BenzolRingC1ExposedNotC6Nitro_node_c2 
                            LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.outhead;
                            if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 != null)
                            {
                                LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.type.TypeID]) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1))
                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1) ? 1U : 0U;
                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                    }
                                    // Implicit Target BenzolRingC1ExposedNotC6Nitro_node_c3 from BenzolRingC1ExposedNotC6Nitro_edge__edge1 
                                    LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c3 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.target;
                                    if(!NodeType_C.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.type.TypeID]) {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3))
                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_node_c3==candidate_BenzolRingC1ExposedNotC6Nitro_node_c1
                                            || candidate_BenzolRingC1ExposedNotC6Nitro_node_c3==candidate_BenzolRingC1ExposedNotC6Nitro_node_c2
                                            )
                                        )
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                        } else { 
                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                            }
                                        }
                                        continue;
                                    }
                                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3) ? 1U : 0U;
                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3,candidate_BenzolRingC1ExposedNotC6Nitro_node_c3);
                                    }
                                    // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge2 from BenzolRingC1ExposedNotC6Nitro_node_c3 
                                    LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.outhead;
                                    if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 != null)
                                    {
                                        LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.type.TypeID]) {
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2))
                                                && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                continue;
                                            }
                                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            } else {
                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2) ? 1U : 0U;
                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                            }
                                            // Implicit Target BenzolRingC1ExposedNotC6Nitro_node_c4 from BenzolRingC1ExposedNotC6Nitro_edge__edge2 
                                            LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c4 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.target;
                                            if(!NodeType_C.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.type.TypeID]) {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4))
                                                && (candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==candidate_BenzolRingC1ExposedNotC6Nitro_node_c1
                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==candidate_BenzolRingC1ExposedNotC6Nitro_node_c2
                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==candidate_BenzolRingC1ExposedNotC6Nitro_node_c3
                                                    )
                                                )
                                            {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            if((candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                } else { 
                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                    }
                                                }
                                                continue;
                                            }
                                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            } else {
                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4) ? 1U : 0U;
                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4,candidate_BenzolRingC1ExposedNotC6Nitro_node_c4);
                                            }
                                            // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge7 from BenzolRingC1ExposedNotC6Nitro_node_c3 
                                            LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.outhead;
                                            if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 != null)
                                            {
                                                LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                do
                                                {
                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.type.TypeID]) {
                                                        continue;
                                                    }
                                                    if(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.target != candidate_BenzolRingC1ExposedNotC6Nitro_node_c4) {
                                                        continue;
                                                    }
                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7))
                                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2
                                                            )
                                                        )
                                                    {
                                                        continue;
                                                    }
                                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                    {
                                                        continue;
                                                    }
                                                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    } else {
                                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7) ? 1U : 0U;
                                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7);
                                                    }
                                                    // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge3 from BenzolRingC1ExposedNotC6Nitro_node_c4 
                                                    LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.outhead;
                                                    if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 != null)
                                                    {
                                                        LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                        do
                                                        {
                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.type.TypeID]) {
                                                                continue;
                                                            }
                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3))
                                                                && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7
                                                                    )
                                                                )
                                                            {
                                                                continue;
                                                            }
                                                            if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                            {
                                                                continue;
                                                            }
                                                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            } else {
                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3) ? 1U : 0U;
                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                            }
                                                            // Implicit Target BenzolRingC1ExposedNotC6Nitro_node_c5 from BenzolRingC1ExposedNotC6Nitro_edge__edge3 
                                                            LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c5 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.target;
                                                            if(!NodeType_C.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.type.TypeID]) {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5))
                                                                && (candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==candidate_BenzolRingC1ExposedNotC6Nitro_node_c1
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==candidate_BenzolRingC1ExposedNotC6Nitro_node_c2
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==candidate_BenzolRingC1ExposedNotC6Nitro_node_c3
                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==candidate_BenzolRingC1ExposedNotC6Nitro_node_c4
                                                                    )
                                                                )
                                                            {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            if((candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                            {
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                } else { 
                                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                    }
                                                                }
                                                                continue;
                                                            }
                                                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            } else {
                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5) ? 1U : 0U;
                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5,candidate_BenzolRingC1ExposedNotC6Nitro_node_c5);
                                                            }
                                                            // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge4 from BenzolRingC1ExposedNotC6Nitro_node_c5 
                                                            LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.outhead;
                                                            if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 != null)
                                                            {
                                                                LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                do
                                                                {
                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.type.TypeID]) {
                                                                        continue;
                                                                    }
                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4))
                                                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3
                                                                            )
                                                                        )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    } else {
                                                                        prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4) ? 1U : 0U;
                                                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                    }
                                                                    // Implicit Target BenzolRingC1ExposedNotC6Nitro_node_c6 from BenzolRingC1ExposedNotC6Nitro_edge__edge4 
                                                                    LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_node_c6 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.target;
                                                                    if(!NodeType_C.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.type.TypeID]) {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_node_c6))
                                                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_node_c6==candidate_BenzolRingC1ExposedNotC6Nitro_node_c1
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_node_c6==candidate_BenzolRingC1ExposedNotC6Nitro_node_c2
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_node_c6==candidate_BenzolRingC1ExposedNotC6Nitro_node_c3
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_node_c6==candidate_BenzolRingC1ExposedNotC6Nitro_node_c4
                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_node_c6==candidate_BenzolRingC1ExposedNotC6Nitro_node_c5
                                                                            )
                                                                        )
                                                                    {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                    {
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                        } else { 
                                                                            if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                            }
                                                                        }
                                                                        continue;
                                                                    }
                                                                    // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge8 from BenzolRingC1ExposedNotC6Nitro_node_c5 
                                                                    LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.outhead;
                                                                    if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 != null)
                                                                    {
                                                                        LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                        do
                                                                        {
                                                                            if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.type.TypeID]) {
                                                                                continue;
                                                                            }
                                                                            if(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.target != candidate_BenzolRingC1ExposedNotC6Nitro_node_c6) {
                                                                                continue;
                                                                            }
                                                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8))
                                                                                && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3
                                                                                    || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4
                                                                                    )
                                                                                )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            uint prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            } else {
                                                                                prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8) ? 1U : 0U;
                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8,candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8);
                                                                            }
                                                                            // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_edge__edge5 from BenzolRingC1ExposedNotC6Nitro_node_c6 
                                                                            LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.outhead;
                                                                            if(head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 != null)
                                                                            {
                                                                                LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 = head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                do
                                                                                {
                                                                                    if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.type.TypeID]) {
                                                                                        continue;
                                                                                    }
                                                                                    if(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.target != candidate_BenzolRingC1ExposedNotC6Nitro_node_c1) {
                                                                                        continue;
                                                                                    }
                                                                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5))
                                                                                        && (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4
                                                                                            || candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5==candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8
                                                                                            )
                                                                                        )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if((candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    // NegativePattern 
                                                                                    {
                                                                                        ++negLevel;
                                                                                        if(negLevel > (int) LGSPElemFlags.MAX_NEG_LEVEL && negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL > graph.atNegLevelMatchedElements.Count) {
                                                                                            graph.atNegLevelMatchedElements.Add(new Pair<Dictionary<LGSPNode, LGSPNode>, Dictionary<LGSPEdge, LGSPEdge>>());
                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst = new Dictionary<LGSPNode, LGSPNode>();
                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd = new Dictionary<LGSPEdge, LGSPEdge>();
                                                                                        }
                                                                                        // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 from BenzolRingC1ExposedNotC6Nitro_node_c6 
                                                                                        LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.outhead;
                                                                                        if(head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 != null)
                                                                                        {
                                                                                            LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                    prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                } else {
                                                                                                    prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0) ? 1U : 0U;
                                                                                                    if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0,candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0);
                                                                                                }
                                                                                                // Implicit Target BenzolRingC1ExposedNotC6Nitro_neg_0_node_n from BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 
                                                                                                LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node_n = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.target;
                                                                                                if(!NodeType_N.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node_n.type.TypeID]) {
                                                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                                    } else { 
                                                                                                        if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0==0) {
                                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0);
                                                                                                        }
                                                                                                    }
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node_n.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                {
                                                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                                    } else { 
                                                                                                        if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0==0) {
                                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0);
                                                                                                        }
                                                                                                    }
                                                                                                    continue;
                                                                                                }
                                                                                                // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 from BenzolRingC1ExposedNotC6Nitro_neg_0_node_n 
                                                                                                LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node_n.outhead;
                                                                                                if(head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 != null)
                                                                                                {
                                                                                                    LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1))
                                                                                                            && candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1==candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                            prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        } else {
                                                                                                            prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1) ? 1U : 0U;
                                                                                                            if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1,candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1);
                                                                                                        }
                                                                                                        // Implicit Target BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 from BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 
                                                                                                        LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.target;
                                                                                                        if(!NodeType_O.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.type.TypeID]) {
                                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                            } else { 
                                                                                                                if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1==0) {
                                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1);
                                                                                                                }
                                                                                                            }
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                        {
                                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                            } else { 
                                                                                                                if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1==0) {
                                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1);
                                                                                                                }
                                                                                                            }
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0;
                                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                            prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        } else {
                                                                                                            prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0) ? 1U : 0U;
                                                                                                            if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0,candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0);
                                                                                                        }
                                                                                                        // Extend Outgoing BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 from BenzolRingC1ExposedNotC6Nitro_neg_0_node_n 
                                                                                                        LGSPEdge head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node_n.outhead;
                                                                                                        if(head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 != null)
                                                                                                        {
                                                                                                            LGSPEdge candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 = head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2))
                                                                                                                    && (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2==candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0
                                                                                                                        || candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2==candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // Implicit Target BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1 from BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 
                                                                                                                LGSPNode candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.target;
                                                                                                                if(!NodeType_O.isMyType[candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1))
                                                                                                                    && candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1==candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // negative pattern found
                                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0;
                                                                                                                } else { 
                                                                                                                    if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0==0) {
                                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0);
                                                                                                                    }
                                                                                                                }
                                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                                } else { 
                                                                                                                    if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1==0) {
                                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1);
                                                                                                                    }
                                                                                                                }
                                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                                                } else { 
                                                                                                                    if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0==0) {
                                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0);
                                                                                                                    }
                                                                                                                }
                                                                                                                if(negLevel > (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Clear();
                                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Clear();
                                                                                                                }
                                                                                                                --negLevel;
                                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                                                } else { 
                                                                                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==0) {
                                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8);
                                                                                                                    }
                                                                                                                }
                                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                                                } else { 
                                                                                                                    if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                                                                    }
                                                                                                                }
                                                                                                                goto label0;
                                                                                                            }
                                                                                                            while( (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge2 );
                                                                                                        }
                                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0;
                                                                                                        } else { 
                                                                                                            if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0==0) {
                                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_node__node0);
                                                                                                            }
                                                                                                        }
                                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1;
                                                                                                        } else { 
                                                                                                            if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1==0) {
                                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    while( (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge1 );
                                                                                                }
                                                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0;
                                                                                                } else { 
                                                                                                    if(prev_neg_0__candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0==0) {
                                                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            while( (candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_neg_0_edge__edge0 );
                                                                                        }
                                                                                        if(negLevel > (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Clear();
                                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Clear();
                                                                                        }
                                                                                        --negLevel;
                                                                                    }
                                                                                    // Check whether there are subpattern matching tasks left to execute
                                                                                    if(openTasks.Count==0)
                                                                                    {
                                                                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c1] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c2] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c3] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c4] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c5] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c6] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge0] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge1] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge2] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge3] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge4] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge5] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge6] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge7] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge8] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        goto label1;
                                                                                    }
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c6 = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    uint prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                    prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                    // Match subpatterns 
                                                                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                    // Check whether subpatterns were found 
                                                                                    if(matchesList.Count>0) {
                                                                                        // subpatterns/alternatives were found, extend the partial matches by our local match object
                                                                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                        {
                                                                                            LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new object[0], new LGSPMatch[0+0]);
                                                                                            match.patternGraph = patternGraph;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c1] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c1;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c2] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c3] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c4] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c5] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_NodeNums.@c6] = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge0] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge1] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge2] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge3] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge4] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge5] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge6] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge7] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1ExposedNotC6Nitro.BenzolRingC1ExposedNotC6Nitro_EdgeNums.@_edge8] = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                            currentFoundPartialMatch.Push(match);
                                                                                        }
                                                                                        if(matchesList==foundPartialMatches) {
                                                                                            matchesList = new List<Stack<LGSPMatch>>();
                                                                                        } else {
                                                                                            foreach(Stack<LGSPMatch> match in matchesList) {
                                                                                                foundPartialMatches.Add(match);
                                                                                            }
                                                                                            matchesList.Clear();
                                                                                        }
                                                                                        // if enough matches were found, we leave
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                            candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2);
                                                                                                }
                                                                                            }
                                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                            } else { 
                                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                                                                                                }
                                                                                            }
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                        goto label2;
                                                                                    }
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_node_c6;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                                                    candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
label1: ;
label2: ;
                                                                                }
                                                                                while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge5 );
                                                                            }
                                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8;
                                                                            } else { 
                                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8==0) {
                                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8);
                                                                                }
                                                                            }
                                                                        }
                                                                        while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge8 );
                                                                    }
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4);
                                                                        }
                                                                    }
label0: ;
                                                                }
                                                                while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge4 );
                                                            }
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5;
                                                            } else { 
                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c5==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c5);
                                                                }
                                                            }
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3);
                                                                }
                                                            }
                                                        }
                                                        while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge3 );
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7;
                                                    } else { 
                                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7);
                                                        }
                                                    }
                                                }
                                                while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge7 );
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4;
                                            } else { 
                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c4==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c4);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2;
                                            } else { 
                                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2);
                                                }
                                            }
                                        }
                                        while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge2 );
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3;
                                    } else { 
                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c3==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c3);
                                        }
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1;
                                    } else { 
                                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1);
                                        }
                                    }
                                }
                                while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge1 );
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6;
                            } else { 
                                if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6);
                                }
                            }
                        }
                        while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge6 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags = candidate_BenzolRingC1ExposedNotC6Nitro_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2;
                    } else { 
                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_node_c2==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_node_c2);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0;
                    } else { 
                        if(prev__candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0);
                        }
                    }
                }
                while( (candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 = candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0.outNext) != head_candidate_BenzolRingC1ExposedNotC6Nitro_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Oxygen : LGSPSubpatternAction
    {
        private PatternAction_Oxygen(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Oxygen.Instance.patternGraph;
        }

        public static PatternAction_Oxygen getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_Oxygen newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_Oxygen(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_Oxygen oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_Oxygen freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_Oxygen next = null;

        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // Lookup Oxygen_edge__edge0 
            int type_id_candidate_Oxygen_edge__edge0 = 1;
            for(LGSPEdge head_candidate_Oxygen_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_Oxygen_edge__edge0], candidate_Oxygen_edge__edge0 = head_candidate_Oxygen_edge__edge0.typeNext; candidate_Oxygen_edge__edge0 != head_candidate_Oxygen_edge__edge0; candidate_Oxygen_edge__edge0 = candidate_Oxygen_edge__edge0.typeNext)
            {
                if((candidate_Oxygen_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    continue;
                }
                uint prev__candidate_Oxygen_edge__edge0;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_Oxygen_edge__edge0 = candidate_Oxygen_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_Oxygen_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_Oxygen_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Oxygen_edge__edge0) ? 1U : 0U;
                    if(prev__candidate_Oxygen_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Oxygen_edge__edge0,candidate_Oxygen_edge__edge0);
                }
                // Implicit Source Oxygen_node_o1 from Oxygen_edge__edge0 
                LGSPNode candidate_Oxygen_node_o1 = candidate_Oxygen_edge__edge0.source;
                if(!NodeType_O.isMyType[candidate_Oxygen_node_o1.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                    } else { 
                        if(prev__candidate_Oxygen_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                        }
                    }
                    continue;
                }
                if((candidate_Oxygen_node_o1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                    } else { 
                        if(prev__candidate_Oxygen_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_Oxygen_node_o1;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_Oxygen_node_o1 = candidate_Oxygen_node_o1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_Oxygen_node_o1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_Oxygen_node_o1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Oxygen_node_o1) ? 1U : 0U;
                    if(prev__candidate_Oxygen_node_o1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Oxygen_node_o1,candidate_Oxygen_node_o1);
                }
                // Implicit Target Oxygen_node_o2 from Oxygen_edge__edge0 
                LGSPNode candidate_Oxygen_node_o2 = candidate_Oxygen_edge__edge0.target;
                if(!NodeType_O.isMyType[candidate_Oxygen_node_o2.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                    } else { 
                        if(prev__candidate_Oxygen_node_o1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                    } else { 
                        if(prev__candidate_Oxygen_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                        }
                    }
                    continue;
                }
                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Oxygen_node_o2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Oxygen_node_o2))
                    && candidate_Oxygen_node_o2==candidate_Oxygen_node_o1
                    )
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                    } else { 
                        if(prev__candidate_Oxygen_node_o1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                    } else { 
                        if(prev__candidate_Oxygen_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                        }
                    }
                    continue;
                }
                if((candidate_Oxygen_node_o2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                    } else { 
                        if(prev__candidate_Oxygen_node_o1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                    } else { 
                        if(prev__candidate_Oxygen_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                        }
                    }
                    continue;
                }
                // Extend Outgoing Oxygen_edge__edge1 from Oxygen_node_o2 
                LGSPEdge head_candidate_Oxygen_edge__edge1 = candidate_Oxygen_node_o2.outhead;
                if(head_candidate_Oxygen_edge__edge1 != null)
                {
                    LGSPEdge candidate_Oxygen_edge__edge1 = head_candidate_Oxygen_edge__edge1;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_Oxygen_edge__edge1.type.TypeID]) {
                            continue;
                        }
                        if(candidate_Oxygen_edge__edge1.target != candidate_Oxygen_node_o1) {
                            continue;
                        }
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Oxygen_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Oxygen_edge__edge1))
                            && candidate_Oxygen_edge__edge1==candidate_Oxygen_edge__edge0
                            )
                        {
                            continue;
                        }
                        if((candidate_Oxygen_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                        {
                            continue;
                        }
                        // Check whether there are subpattern matching tasks left to execute
                        if(openTasks.Count==0)
                        {
                            Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                            foundPartialMatches.Add(currentFoundPartialMatch);
                            LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[2], new object[0], new LGSPMatch[0]);
                            match.patternGraph = patternGraph;
                            match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o1] = candidate_Oxygen_node_o1;
                            match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o2] = candidate_Oxygen_node_o2;
                            match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge0] = candidate_Oxygen_edge__edge0;
                            match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge1] = candidate_Oxygen_edge__edge1;
                            currentFoundPartialMatch.Push(match);
                            // if enough matches were found, we leave
                            if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                            {
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                                } else { 
                                    if(prev__candidate_Oxygen_node_o1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                                } else { 
                                    if(prev__candidate_Oxygen_edge__edge0==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                                    }
                                }
                                openTasks.Push(this);
                                return;
                            }
                            continue;
                        }
                        uint prevGlobal__candidate_Oxygen_node_o1;
                        prevGlobal__candidate_Oxygen_node_o1 = candidate_Oxygen_node_o1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        candidate_Oxygen_node_o1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        uint prevGlobal__candidate_Oxygen_node_o2;
                        prevGlobal__candidate_Oxygen_node_o2 = candidate_Oxygen_node_o2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        candidate_Oxygen_node_o2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        uint prevGlobal__candidate_Oxygen_edge__edge0;
                        prevGlobal__candidate_Oxygen_edge__edge0 = candidate_Oxygen_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        candidate_Oxygen_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        uint prevGlobal__candidate_Oxygen_edge__edge1;
                        prevGlobal__candidate_Oxygen_edge__edge1 = candidate_Oxygen_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        candidate_Oxygen_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                        // Match subpatterns 
                        openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                        // Check whether subpatterns were found 
                        if(matchesList.Count>0) {
                            // subpatterns/alternatives were found, extend the partial matches by our local match object
                            foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                            {
                                LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[2], new object[0], new LGSPMatch[0+0]);
                                match.patternGraph = patternGraph;
                                match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o1] = candidate_Oxygen_node_o1;
                                match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o2] = candidate_Oxygen_node_o2;
                                match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge0] = candidate_Oxygen_edge__edge0;
                                match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge1] = candidate_Oxygen_edge__edge1;
                                currentFoundPartialMatch.Push(match);
                            }
                            if(matchesList==foundPartialMatches) {
                                matchesList = new List<Stack<LGSPMatch>>();
                            } else {
                                foreach(Stack<LGSPMatch> match in matchesList) {
                                    foundPartialMatches.Add(match);
                                }
                                matchesList.Clear();
                            }
                            // if enough matches were found, we leave
                            if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                            {
                                candidate_Oxygen_edge__edge1.flags = candidate_Oxygen_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge1;
                                candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge0;
                                candidate_Oxygen_node_o2.flags = candidate_Oxygen_node_o2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o2;
                                candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o1;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                                } else { 
                                    if(prev__candidate_Oxygen_node_o1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                                } else { 
                                    if(prev__candidate_Oxygen_edge__edge0==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                                    }
                                }
                                openTasks.Push(this);
                                return;
                            }
                            candidate_Oxygen_edge__edge1.flags = candidate_Oxygen_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge1;
                            candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge0;
                            candidate_Oxygen_node_o2.flags = candidate_Oxygen_node_o2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o2;
                            candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o1;
                            continue;
                        }
                        candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o1;
                        candidate_Oxygen_node_o2.flags = candidate_Oxygen_node_o2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_node_o2;
                        candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge0;
                        candidate_Oxygen_edge__edge1.flags = candidate_Oxygen_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Oxygen_edge__edge1;
                    }
                    while( (candidate_Oxygen_edge__edge1 = candidate_Oxygen_edge__edge1.outNext) != head_candidate_Oxygen_edge__edge1 );
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_Oxygen_node_o1.flags = candidate_Oxygen_node_o1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_node_o1;
                } else { 
                    if(prev__candidate_Oxygen_node_o1==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Oxygen_node_o1);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_Oxygen_edge__edge0.flags = candidate_Oxygen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Oxygen_edge__edge0;
                } else { 
                    if(prev__candidate_Oxygen_edge__edge0==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Oxygen_edge__edge0);
                    }
                }
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Hydrogen : LGSPSubpatternAction
    {
        private PatternAction_Hydrogen(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Hydrogen.Instance.patternGraph;
        }

        public static PatternAction_Hydrogen getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_Hydrogen newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_Hydrogen(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_Hydrogen oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_Hydrogen freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_Hydrogen next = null;

        public LGSPNode Hydrogen_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset Hydrogen_node_anchor 
            LGSPNode candidate_Hydrogen_node_anchor = Hydrogen_node_anchor;
            // Extend Outgoing Hydrogen_edge__edge0 from Hydrogen_node_anchor 
            LGSPEdge head_candidate_Hydrogen_edge__edge0 = candidate_Hydrogen_node_anchor.outhead;
            if(head_candidate_Hydrogen_edge__edge0 != null)
            {
                LGSPEdge candidate_Hydrogen_edge__edge0 = head_candidate_Hydrogen_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_Hydrogen_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_Hydrogen_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    // Implicit Target Hydrogen_node__node0 from Hydrogen_edge__edge0 
                    LGSPNode candidate_Hydrogen_node__node0 = candidate_Hydrogen_edge__edge0.target;
                    if(!NodeType_H.isMyType[candidate_Hydrogen_node__node0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_Hydrogen_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    // Check whether there are subpattern matching tasks left to execute
                    if(openTasks.Count==0)
                    {
                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                        foundPartialMatches.Add(currentFoundPartialMatch);
                        LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[1], new object[0], new LGSPMatch[0]);
                        match.patternGraph = patternGraph;
                        match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@anchor] = candidate_Hydrogen_node_anchor;
                        match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@_node0] = candidate_Hydrogen_node__node0;
                        match.Edges[(int)Pattern_Hydrogen.Hydrogen_EdgeNums.@_edge0] = candidate_Hydrogen_edge__edge0;
                        currentFoundPartialMatch.Push(match);
                        // if enough matches were found, we leave
                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                        {
                            openTasks.Push(this);
                            return;
                        }
                        continue;
                    }
                    uint prevGlobal__candidate_Hydrogen_node__node0;
                    prevGlobal__candidate_Hydrogen_node__node0 = candidate_Hydrogen_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                    candidate_Hydrogen_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                    uint prevGlobal__candidate_Hydrogen_edge__edge0;
                    prevGlobal__candidate_Hydrogen_edge__edge0 = candidate_Hydrogen_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                    candidate_Hydrogen_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                    // Match subpatterns 
                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                    // Check whether subpatterns were found 
                    if(matchesList.Count>0) {
                        // subpatterns/alternatives were found, extend the partial matches by our local match object
                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                        {
                            LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[1], new object[0], new LGSPMatch[0+0]);
                            match.patternGraph = patternGraph;
                            match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@anchor] = candidate_Hydrogen_node_anchor;
                            match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@_node0] = candidate_Hydrogen_node__node0;
                            match.Edges[(int)Pattern_Hydrogen.Hydrogen_EdgeNums.@_edge0] = candidate_Hydrogen_edge__edge0;
                            currentFoundPartialMatch.Push(match);
                        }
                        if(matchesList==foundPartialMatches) {
                            matchesList = new List<Stack<LGSPMatch>>();
                        } else {
                            foreach(Stack<LGSPMatch> match in matchesList) {
                                foundPartialMatches.Add(match);
                            }
                            matchesList.Clear();
                        }
                        // if enough matches were found, we leave
                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                        {
                            candidate_Hydrogen_edge__edge0.flags = candidate_Hydrogen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_edge__edge0;
                            candidate_Hydrogen_node__node0.flags = candidate_Hydrogen_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_node__node0;
                            openTasks.Push(this);
                            return;
                        }
                        candidate_Hydrogen_edge__edge0.flags = candidate_Hydrogen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_edge__edge0;
                        candidate_Hydrogen_node__node0.flags = candidate_Hydrogen_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_node__node0;
                        continue;
                    }
                    candidate_Hydrogen_node__node0.flags = candidate_Hydrogen_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_node__node0;
                    candidate_Hydrogen_edge__edge0.flags = candidate_Hydrogen_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydrogen_edge__edge0;
                }
                while( (candidate_Hydrogen_edge__edge0 = candidate_Hydrogen_edge__edge0.outNext) != head_candidate_Hydrogen_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Hydroxyl : LGSPSubpatternAction
    {
        private PatternAction_Hydroxyl(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Hydroxyl.Instance.patternGraph;
        }

        public static PatternAction_Hydroxyl getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_Hydroxyl newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_Hydroxyl(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_Hydroxyl oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_Hydroxyl freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_Hydroxyl next = null;

        public LGSPNode Hydroxyl_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset Hydroxyl_node_anchor 
            LGSPNode candidate_Hydroxyl_node_anchor = Hydroxyl_node_anchor;
            // Extend Outgoing Hydroxyl_edge__edge0 from Hydroxyl_node_anchor 
            LGSPEdge head_candidate_Hydroxyl_edge__edge0 = candidate_Hydroxyl_node_anchor.outhead;
            if(head_candidate_Hydroxyl_edge__edge0 != null)
            {
                LGSPEdge candidate_Hydroxyl_edge__edge0 = head_candidate_Hydroxyl_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_Hydroxyl_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_Hydroxyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_Hydroxyl_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_Hydroxyl_edge__edge0 = candidate_Hydroxyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_Hydroxyl_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_Hydroxyl_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Hydroxyl_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_Hydroxyl_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Hydroxyl_edge__edge0,candidate_Hydroxyl_edge__edge0);
                    }
                    // Implicit Target Hydroxyl_node__node0 from Hydroxyl_edge__edge0 
                    LGSPNode candidate_Hydroxyl_node__node0 = candidate_Hydroxyl_edge__edge0.target;
                    if(!NodeType_O.isMyType[candidate_Hydroxyl_node__node0.type.TypeID]) {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Hydroxyl_edge__edge0;
                        } else { 
                            if(prev__candidate_Hydroxyl_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Hydroxyl_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((candidate_Hydroxyl_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Hydroxyl_edge__edge0;
                        } else { 
                            if(prev__candidate_Hydroxyl_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Hydroxyl_edge__edge0);
                            }
                        }
                        continue;
                    }
                    // Extend Outgoing Hydroxyl_edge__edge1 from Hydroxyl_node__node0 
                    LGSPEdge head_candidate_Hydroxyl_edge__edge1 = candidate_Hydroxyl_node__node0.outhead;
                    if(head_candidate_Hydroxyl_edge__edge1 != null)
                    {
                        LGSPEdge candidate_Hydroxyl_edge__edge1 = head_candidate_Hydroxyl_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_Hydroxyl_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Hydroxyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Hydroxyl_edge__edge1))
                                && candidate_Hydroxyl_edge__edge1==candidate_Hydroxyl_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_Hydroxyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            // Implicit Target Hydroxyl_node__node1 from Hydroxyl_edge__edge1 
                            LGSPNode candidate_Hydroxyl_node__node1 = candidate_Hydroxyl_edge__edge1.target;
                            if(!NodeType_H.isMyType[candidate_Hydroxyl_node__node1.type.TypeID]) {
                                continue;
                            }
                            if((candidate_Hydroxyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            // Check whether there are subpattern matching tasks left to execute
                            if(openTasks.Count==0)
                            {
                                Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                foundPartialMatches.Add(currentFoundPartialMatch);
                                LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[2], new object[0], new LGSPMatch[0]);
                                match.patternGraph = patternGraph;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@anchor] = candidate_Hydroxyl_node_anchor;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node0] = candidate_Hydroxyl_node__node0;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node1] = candidate_Hydroxyl_node__node1;
                                match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge0] = candidate_Hydroxyl_edge__edge0;
                                match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge1] = candidate_Hydroxyl_edge__edge1;
                                currentFoundPartialMatch.Push(match);
                                // if enough matches were found, we leave
                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Hydroxyl_edge__edge0;
                                    } else { 
                                        if(prev__candidate_Hydroxyl_edge__edge0==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Hydroxyl_edge__edge0);
                                        }
                                    }
                                    openTasks.Push(this);
                                    return;
                                }
                                continue;
                            }
                            uint prevGlobal__candidate_Hydroxyl_node__node0;
                            prevGlobal__candidate_Hydroxyl_node__node0 = candidate_Hydroxyl_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            candidate_Hydroxyl_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            uint prevGlobal__candidate_Hydroxyl_node__node1;
                            prevGlobal__candidate_Hydroxyl_node__node1 = candidate_Hydroxyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            candidate_Hydroxyl_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            uint prevGlobal__candidate_Hydroxyl_edge__edge0;
                            prevGlobal__candidate_Hydroxyl_edge__edge0 = candidate_Hydroxyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            candidate_Hydroxyl_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            uint prevGlobal__candidate_Hydroxyl_edge__edge1;
                            prevGlobal__candidate_Hydroxyl_edge__edge1 = candidate_Hydroxyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            candidate_Hydroxyl_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                            // Match subpatterns 
                            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                            // Check whether subpatterns were found 
                            if(matchesList.Count>0) {
                                // subpatterns/alternatives were found, extend the partial matches by our local match object
                                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                {
                                    LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[2], new object[0], new LGSPMatch[0+0]);
                                    match.patternGraph = patternGraph;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@anchor] = candidate_Hydroxyl_node_anchor;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node0] = candidate_Hydroxyl_node__node0;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node1] = candidate_Hydroxyl_node__node1;
                                    match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge0] = candidate_Hydroxyl_edge__edge0;
                                    match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge1] = candidate_Hydroxyl_edge__edge1;
                                    currentFoundPartialMatch.Push(match);
                                }
                                if(matchesList==foundPartialMatches) {
                                    matchesList = new List<Stack<LGSPMatch>>();
                                } else {
                                    foreach(Stack<LGSPMatch> match in matchesList) {
                                        foundPartialMatches.Add(match);
                                    }
                                    matchesList.Clear();
                                }
                                // if enough matches were found, we leave
                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                {
                                    candidate_Hydroxyl_edge__edge1.flags = candidate_Hydroxyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge1;
                                    candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge0;
                                    candidate_Hydroxyl_node__node1.flags = candidate_Hydroxyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node1;
                                    candidate_Hydroxyl_node__node0.flags = candidate_Hydroxyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node0;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Hydroxyl_edge__edge0;
                                    } else { 
                                        if(prev__candidate_Hydroxyl_edge__edge0==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Hydroxyl_edge__edge0);
                                        }
                                    }
                                    openTasks.Push(this);
                                    return;
                                }
                                candidate_Hydroxyl_edge__edge1.flags = candidate_Hydroxyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge1;
                                candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge0;
                                candidate_Hydroxyl_node__node1.flags = candidate_Hydroxyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node1;
                                candidate_Hydroxyl_node__node0.flags = candidate_Hydroxyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node0;
                                continue;
                            }
                            candidate_Hydroxyl_node__node0.flags = candidate_Hydroxyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node0;
                            candidate_Hydroxyl_node__node1.flags = candidate_Hydroxyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_node__node1;
                            candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge0;
                            candidate_Hydroxyl_edge__edge1.flags = candidate_Hydroxyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Hydroxyl_edge__edge1;
                        }
                        while( (candidate_Hydroxyl_edge__edge1 = candidate_Hydroxyl_edge__edge1.outNext) != head_candidate_Hydroxyl_edge__edge1 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Hydroxyl_edge__edge0.flags = candidate_Hydroxyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Hydroxyl_edge__edge0;
                    } else { 
                        if(prev__candidate_Hydroxyl_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Hydroxyl_edge__edge0);
                        }
                    }
                }
                while( (candidate_Hydroxyl_edge__edge0 = candidate_Hydroxyl_edge__edge0.outNext) != head_candidate_Hydroxyl_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Methyl : LGSPSubpatternAction
    {
        private PatternAction_Methyl(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Methyl.Instance.patternGraph;
        }

        public static PatternAction_Methyl getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_Methyl newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_Methyl(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_Methyl oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_Methyl freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_Methyl next = null;

        public LGSPNode Methyl_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset Methyl_node_anchor 
            LGSPNode candidate_Methyl_node_anchor = Methyl_node_anchor;
            // Extend Outgoing Methyl_edge__edge0 from Methyl_node_anchor 
            LGSPEdge head_candidate_Methyl_edge__edge0 = candidate_Methyl_node_anchor.outhead;
            if(head_candidate_Methyl_edge__edge0 != null)
            {
                LGSPEdge candidate_Methyl_edge__edge0 = head_candidate_Methyl_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_Methyl_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_Methyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_Methyl_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_Methyl_edge__edge0 = candidate_Methyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_Methyl_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_Methyl_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Methyl_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_Methyl_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Methyl_edge__edge0,candidate_Methyl_edge__edge0);
                    }
                    // Implicit Target Methyl_node_c from Methyl_edge__edge0 
                    LGSPNode candidate_Methyl_node_c = candidate_Methyl_edge__edge0.target;
                    if(!NodeType_C.isMyType[candidate_Methyl_node_c.type.TypeID]) {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                        } else { 
                            if(prev__candidate_Methyl_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Methyl_node_c))
                        && candidate_Methyl_node_c==candidate_Methyl_node_anchor
                        )
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                        } else { 
                            if(prev__candidate_Methyl_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((candidate_Methyl_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                        } else { 
                            if(prev__candidate_Methyl_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                            }
                        }
                        continue;
                    }
                    // Extend Outgoing Methyl_edge__edge1 from Methyl_node_c 
                    LGSPEdge head_candidate_Methyl_edge__edge1 = candidate_Methyl_node_c.outhead;
                    if(head_candidate_Methyl_edge__edge1 != null)
                    {
                        LGSPEdge candidate_Methyl_edge__edge1 = head_candidate_Methyl_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_Methyl_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Methyl_edge__edge1))
                                && candidate_Methyl_edge__edge1==candidate_Methyl_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_Methyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            uint prev__candidate_Methyl_edge__edge1;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_Methyl_edge__edge1 = candidate_Methyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_Methyl_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_Methyl_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Methyl_edge__edge1) ? 1U : 0U;
                                if(prev__candidate_Methyl_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Methyl_edge__edge1,candidate_Methyl_edge__edge1);
                            }
                            // Implicit Target Methyl_node__node0 from Methyl_edge__edge1 
                            LGSPNode candidate_Methyl_node__node0 = candidate_Methyl_edge__edge1.target;
                            if(!NodeType_H.isMyType[candidate_Methyl_node__node0.type.TypeID]) {
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge1;
                                } else { 
                                    if(prev__candidate_Methyl_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge1);
                                    }
                                }
                                continue;
                            }
                            if((candidate_Methyl_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge1;
                                } else { 
                                    if(prev__candidate_Methyl_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge1);
                                    }
                                }
                                continue;
                            }
                            uint prev__candidate_Methyl_node__node0;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_Methyl_node__node0 = candidate_Methyl_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_Methyl_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_Methyl_node__node0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Methyl_node__node0) ? 1U : 0U;
                                if(prev__candidate_Methyl_node__node0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Methyl_node__node0,candidate_Methyl_node__node0);
                            }
                            // Extend Outgoing Methyl_edge__edge2 from Methyl_node_c 
                            LGSPEdge head_candidate_Methyl_edge__edge2 = candidate_Methyl_node_c.outhead;
                            if(head_candidate_Methyl_edge__edge2 != null)
                            {
                                LGSPEdge candidate_Methyl_edge__edge2 = head_candidate_Methyl_edge__edge2;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[candidate_Methyl_edge__edge2.type.TypeID]) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Methyl_edge__edge2))
                                        && (candidate_Methyl_edge__edge2==candidate_Methyl_edge__edge0
                                            || candidate_Methyl_edge__edge2==candidate_Methyl_edge__edge1
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_Methyl_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    uint prev__candidate_Methyl_edge__edge2;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_Methyl_edge__edge2 = candidate_Methyl_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_Methyl_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_Methyl_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Methyl_edge__edge2) ? 1U : 0U;
                                        if(prev__candidate_Methyl_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Methyl_edge__edge2,candidate_Methyl_edge__edge2);
                                    }
                                    // Implicit Target Methyl_node__node1 from Methyl_edge__edge2 
                                    LGSPNode candidate_Methyl_node__node1 = candidate_Methyl_edge__edge2.target;
                                    if(!NodeType_H.isMyType[candidate_Methyl_node__node1.type.TypeID]) {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                        } else { 
                                            if(prev__candidate_Methyl_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                            }
                                        }
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Methyl_node__node1))
                                        && candidate_Methyl_node__node1==candidate_Methyl_node__node0
                                        )
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                        } else { 
                                            if(prev__candidate_Methyl_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                            }
                                        }
                                        continue;
                                    }
                                    if((candidate_Methyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                        } else { 
                                            if(prev__candidate_Methyl_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                            }
                                        }
                                        continue;
                                    }
                                    uint prev__candidate_Methyl_node__node1;
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        prev__candidate_Methyl_node__node1 = candidate_Methyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_Methyl_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    } else {
                                        prev__candidate_Methyl_node__node1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Methyl_node__node1) ? 1U : 0U;
                                        if(prev__candidate_Methyl_node__node1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Methyl_node__node1,candidate_Methyl_node__node1);
                                    }
                                    // Extend Outgoing Methyl_edge__edge3 from Methyl_node_c 
                                    LGSPEdge head_candidate_Methyl_edge__edge3 = candidate_Methyl_node_c.outhead;
                                    if(head_candidate_Methyl_edge__edge3 != null)
                                    {
                                        LGSPEdge candidate_Methyl_edge__edge3 = head_candidate_Methyl_edge__edge3;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[candidate_Methyl_edge__edge3.type.TypeID]) {
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Methyl_edge__edge3))
                                                && (candidate_Methyl_edge__edge3==candidate_Methyl_edge__edge0
                                                    || candidate_Methyl_edge__edge3==candidate_Methyl_edge__edge1
                                                    || candidate_Methyl_edge__edge3==candidate_Methyl_edge__edge2
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if((candidate_Methyl_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                continue;
                                            }
                                            // Implicit Target Methyl_node__node2 from Methyl_edge__edge3 
                                            LGSPNode candidate_Methyl_node__node2 = candidate_Methyl_edge__edge3.target;
                                            if(!NodeType_H.isMyType[candidate_Methyl_node__node2.type.TypeID]) {
                                                continue;
                                            }
                                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Methyl_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Methyl_node__node2))
                                                && (candidate_Methyl_node__node2==candidate_Methyl_node__node0
                                                    || candidate_Methyl_node__node2==candidate_Methyl_node__node1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if((candidate_Methyl_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                            {
                                                continue;
                                            }
                                            // Check whether there are subpattern matching tasks left to execute
                                            if(openTasks.Count==0)
                                            {
                                                Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                foundPartialMatches.Add(currentFoundPartialMatch);
                                                LGSPMatch match = new LGSPMatch(new LGSPNode[5], new LGSPEdge[4], new object[0], new LGSPMatch[0]);
                                                match.patternGraph = patternGraph;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@anchor] = candidate_Methyl_node_anchor;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@c] = candidate_Methyl_node_c;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node0] = candidate_Methyl_node__node0;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node1] = candidate_Methyl_node__node1;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node2] = candidate_Methyl_node__node2;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge0] = candidate_Methyl_edge__edge0;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge1] = candidate_Methyl_edge__edge1;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge2] = candidate_Methyl_edge__edge2;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge3] = candidate_Methyl_edge__edge3;
                                                currentFoundPartialMatch.Push(match);
                                                // if enough matches were found, we leave
                                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                {
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node1;
                                                    } else { 
                                                        if(prev__candidate_Methyl_node__node1==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node1);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge2==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node0;
                                                    } else { 
                                                        if(prev__candidate_Methyl_node__node0==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node0);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge1;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge1==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge1);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge0==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                                                        }
                                                    }
                                                    openTasks.Push(this);
                                                    return;
                                                }
                                                continue;
                                            }
                                            uint prevGlobal__candidate_Methyl_node_c;
                                            prevGlobal__candidate_Methyl_node_c = candidate_Methyl_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_node_c.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_node__node0;
                                            prevGlobal__candidate_Methyl_node__node0 = candidate_Methyl_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_node__node1;
                                            prevGlobal__candidate_Methyl_node__node1 = candidate_Methyl_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_node__node2;
                                            prevGlobal__candidate_Methyl_node__node2 = candidate_Methyl_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_node__node2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_edge__edge0;
                                            prevGlobal__candidate_Methyl_edge__edge0 = candidate_Methyl_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_edge__edge1;
                                            prevGlobal__candidate_Methyl_edge__edge1 = candidate_Methyl_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_edge__edge2;
                                            prevGlobal__candidate_Methyl_edge__edge2 = candidate_Methyl_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            uint prevGlobal__candidate_Methyl_edge__edge3;
                                            prevGlobal__candidate_Methyl_edge__edge3 = candidate_Methyl_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            candidate_Methyl_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                            // Match subpatterns 
                                            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                            // Check whether subpatterns were found 
                                            if(matchesList.Count>0) {
                                                // subpatterns/alternatives were found, extend the partial matches by our local match object
                                                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                {
                                                    LGSPMatch match = new LGSPMatch(new LGSPNode[5], new LGSPEdge[4], new object[0], new LGSPMatch[0+0]);
                                                    match.patternGraph = patternGraph;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@anchor] = candidate_Methyl_node_anchor;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@c] = candidate_Methyl_node_c;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node0] = candidate_Methyl_node__node0;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node1] = candidate_Methyl_node__node1;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node2] = candidate_Methyl_node__node2;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge0] = candidate_Methyl_edge__edge0;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge1] = candidate_Methyl_edge__edge1;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge2] = candidate_Methyl_edge__edge2;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge3] = candidate_Methyl_edge__edge3;
                                                    currentFoundPartialMatch.Push(match);
                                                }
                                                if(matchesList==foundPartialMatches) {
                                                    matchesList = new List<Stack<LGSPMatch>>();
                                                } else {
                                                    foreach(Stack<LGSPMatch> match in matchesList) {
                                                        foundPartialMatches.Add(match);
                                                    }
                                                    matchesList.Clear();
                                                }
                                                // if enough matches were found, we leave
                                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                {
                                                    candidate_Methyl_edge__edge3.flags = candidate_Methyl_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge3;
                                                    candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge2;
                                                    candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge1;
                                                    candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge0;
                                                    candidate_Methyl_node__node2.flags = candidate_Methyl_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node2;
                                                    candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node1;
                                                    candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node0;
                                                    candidate_Methyl_node_c.flags = candidate_Methyl_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node_c;
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node1;
                                                    } else { 
                                                        if(prev__candidate_Methyl_node__node1==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node1);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge2==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node0;
                                                    } else { 
                                                        if(prev__candidate_Methyl_node__node0==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node0);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge1;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge1==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge1);
                                                        }
                                                    }
                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                        candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                                                    } else { 
                                                        if(prev__candidate_Methyl_edge__edge0==0) {
                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                                                        }
                                                    }
                                                    openTasks.Push(this);
                                                    return;
                                                }
                                                candidate_Methyl_edge__edge3.flags = candidate_Methyl_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge3;
                                                candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge2;
                                                candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge1;
                                                candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge0;
                                                candidate_Methyl_node__node2.flags = candidate_Methyl_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node2;
                                                candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node1;
                                                candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node0;
                                                candidate_Methyl_node_c.flags = candidate_Methyl_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node_c;
                                                continue;
                                            }
                                            candidate_Methyl_node_c.flags = candidate_Methyl_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node_c;
                                            candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node0;
                                            candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node1;
                                            candidate_Methyl_node__node2.flags = candidate_Methyl_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_node__node2;
                                            candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge0;
                                            candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge1;
                                            candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge2;
                                            candidate_Methyl_edge__edge3.flags = candidate_Methyl_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Methyl_edge__edge3;
                                        }
                                        while( (candidate_Methyl_edge__edge3 = candidate_Methyl_edge__edge3.outNext) != head_candidate_Methyl_edge__edge3 );
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_Methyl_node__node1.flags = candidate_Methyl_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node1;
                                    } else { 
                                        if(prev__candidate_Methyl_node__node1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node1);
                                        }
                                    }
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_Methyl_edge__edge2.flags = candidate_Methyl_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge2;
                                    } else { 
                                        if(prev__candidate_Methyl_edge__edge2==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge2);
                                        }
                                    }
                                }
                                while( (candidate_Methyl_edge__edge2 = candidate_Methyl_edge__edge2.outNext) != head_candidate_Methyl_edge__edge2 );
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_Methyl_node__node0.flags = candidate_Methyl_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_node__node0;
                            } else { 
                                if(prev__candidate_Methyl_node__node0==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Methyl_node__node0);
                                }
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_Methyl_edge__edge1.flags = candidate_Methyl_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge1;
                            } else { 
                                if(prev__candidate_Methyl_edge__edge1==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge1);
                                }
                            }
                        }
                        while( (candidate_Methyl_edge__edge1 = candidate_Methyl_edge__edge1.outNext) != head_candidate_Methyl_edge__edge1 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Methyl_edge__edge0.flags = candidate_Methyl_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Methyl_edge__edge0;
                    } else { 
                        if(prev__candidate_Methyl_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Methyl_edge__edge0);
                        }
                    }
                }
                while( (candidate_Methyl_edge__edge0 = candidate_Methyl_edge__edge0.outNext) != head_candidate_Methyl_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Nitro : LGSPSubpatternAction
    {
        private PatternAction_Nitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Nitro.Instance.patternGraph;
        }

        public static PatternAction_Nitro getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_Nitro newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_Nitro(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_Nitro oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_Nitro freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_Nitro next = null;

        public LGSPNode Nitro_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset Nitro_node_anchor 
            LGSPNode candidate_Nitro_node_anchor = Nitro_node_anchor;
            // Extend Outgoing Nitro_edge__edge0 from Nitro_node_anchor 
            LGSPEdge head_candidate_Nitro_edge__edge0 = candidate_Nitro_node_anchor.outhead;
            if(head_candidate_Nitro_edge__edge0 != null)
            {
                LGSPEdge candidate_Nitro_edge__edge0 = head_candidate_Nitro_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[candidate_Nitro_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if((candidate_Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        continue;
                    }
                    uint prev__candidate_Nitro_edge__edge0;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_Nitro_edge__edge0 = candidate_Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_Nitro_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_Nitro_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Nitro_edge__edge0) ? 1U : 0U;
                        if(prev__candidate_Nitro_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Nitro_edge__edge0,candidate_Nitro_edge__edge0);
                    }
                    // Implicit Target Nitro_node_n from Nitro_edge__edge0 
                    LGSPNode candidate_Nitro_node_n = candidate_Nitro_edge__edge0.target;
                    if(!NodeType_N.isMyType[candidate_Nitro_node_n.type.TypeID]) {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge0;
                        } else { 
                            if(prev__candidate_Nitro_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge0);
                            }
                        }
                        continue;
                    }
                    if((candidate_Nitro_node_n.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                    {
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge0;
                        } else { 
                            if(prev__candidate_Nitro_edge__edge0==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge0);
                            }
                        }
                        continue;
                    }
                    // Extend Outgoing Nitro_edge__edge1 from Nitro_node_n 
                    LGSPEdge head_candidate_Nitro_edge__edge1 = candidate_Nitro_node_n.outhead;
                    if(head_candidate_Nitro_edge__edge1 != null)
                    {
                        LGSPEdge candidate_Nitro_edge__edge1 = head_candidate_Nitro_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[candidate_Nitro_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Nitro_edge__edge1))
                                && candidate_Nitro_edge__edge1==candidate_Nitro_edge__edge0
                                )
                            {
                                continue;
                            }
                            if((candidate_Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                continue;
                            }
                            uint prev__candidate_Nitro_edge__edge1;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_Nitro_edge__edge1 = candidate_Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_Nitro_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_Nitro_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_Nitro_edge__edge1) ? 1U : 0U;
                                if(prev__candidate_Nitro_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_Nitro_edge__edge1,candidate_Nitro_edge__edge1);
                            }
                            // Implicit Target Nitro_node__node0 from Nitro_edge__edge1 
                            LGSPNode candidate_Nitro_node__node0 = candidate_Nitro_edge__edge1.target;
                            if(!NodeType_O.isMyType[candidate_Nitro_node__node0.type.TypeID]) {
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge1;
                                } else { 
                                    if(prev__candidate_Nitro_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge1);
                                    }
                                }
                                continue;
                            }
                            if((candidate_Nitro_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                            {
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge1;
                                } else { 
                                    if(prev__candidate_Nitro_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge1);
                                    }
                                }
                                continue;
                            }
                            uint prev__candidate_Nitro_node__node0;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_Nitro_node__node0 = candidate_Nitro_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_Nitro_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_Nitro_node__node0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Nitro_node__node0) ? 1U : 0U;
                                if(prev__candidate_Nitro_node__node0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Nitro_node__node0,candidate_Nitro_node__node0);
                            }
                            // Extend Outgoing Nitro_edge__edge2 from Nitro_node_n 
                            LGSPEdge head_candidate_Nitro_edge__edge2 = candidate_Nitro_node_n.outhead;
                            if(head_candidate_Nitro_edge__edge2 != null)
                            {
                                LGSPEdge candidate_Nitro_edge__edge2 = head_candidate_Nitro_edge__edge2;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[candidate_Nitro_edge__edge2.type.TypeID]) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_Nitro_edge__edge2))
                                        && (candidate_Nitro_edge__edge2==candidate_Nitro_edge__edge0
                                            || candidate_Nitro_edge__edge2==candidate_Nitro_edge__edge1
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    // Implicit Target Nitro_node__node1 from Nitro_edge__edge2 
                                    LGSPNode candidate_Nitro_node__node1 = candidate_Nitro_edge__edge2.target;
                                    if(!NodeType_O.isMyType[candidate_Nitro_node__node1.type.TypeID]) {
                                        continue;
                                    }
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Nitro_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Nitro_node__node1))
                                        && candidate_Nitro_node__node1==candidate_Nitro_node__node0
                                        )
                                    {
                                        continue;
                                    }
                                    if((candidate_Nitro_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)==(uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN)
                                    {
                                        continue;
                                    }
                                    // Check whether there are subpattern matching tasks left to execute
                                    if(openTasks.Count==0)
                                    {
                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                        LGSPMatch match = new LGSPMatch(new LGSPNode[4], new LGSPEdge[3], new object[0], new LGSPMatch[0]);
                                        match.patternGraph = patternGraph;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@anchor] = candidate_Nitro_node_anchor;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@n] = candidate_Nitro_node_n;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node0] = candidate_Nitro_node__node0;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node1] = candidate_Nitro_node__node1;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge0] = candidate_Nitro_edge__edge0;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge1] = candidate_Nitro_edge__edge1;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge2] = candidate_Nitro_edge__edge2;
                                        currentFoundPartialMatch.Push(match);
                                        // if enough matches were found, we leave
                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_node__node0;
                                            } else { 
                                                if(prev__candidate_Nitro_node__node0==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Nitro_node__node0);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge1;
                                            } else { 
                                                if(prev__candidate_Nitro_edge__edge1==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge1);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge0;
                                            } else { 
                                                if(prev__candidate_Nitro_edge__edge0==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge0);
                                                }
                                            }
                                            openTasks.Push(this);
                                            return;
                                        }
                                        continue;
                                    }
                                    uint prevGlobal__candidate_Nitro_node_n;
                                    prevGlobal__candidate_Nitro_node_n = candidate_Nitro_node_n.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_node_n.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Nitro_node__node0;
                                    prevGlobal__candidate_Nitro_node__node0 = candidate_Nitro_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Nitro_node__node1;
                                    prevGlobal__candidate_Nitro_node__node1 = candidate_Nitro_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Nitro_edge__edge0;
                                    prevGlobal__candidate_Nitro_edge__edge0 = candidate_Nitro_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Nitro_edge__edge1;
                                    prevGlobal__candidate_Nitro_edge__edge1 = candidate_Nitro_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Nitro_edge__edge2;
                                    prevGlobal__candidate_Nitro_edge__edge2 = candidate_Nitro_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Nitro_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    // Match subpatterns 
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                    // Check whether subpatterns were found 
                                    if(matchesList.Count>0) {
                                        // subpatterns/alternatives were found, extend the partial matches by our local match object
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = new LGSPMatch(new LGSPNode[4], new LGSPEdge[3], new object[0], new LGSPMatch[0+0]);
                                            match.patternGraph = patternGraph;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@anchor] = candidate_Nitro_node_anchor;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@n] = candidate_Nitro_node_n;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node0] = candidate_Nitro_node__node0;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node1] = candidate_Nitro_node__node1;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge0] = candidate_Nitro_edge__edge0;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge1] = candidate_Nitro_edge__edge1;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge2] = candidate_Nitro_edge__edge2;
                                            currentFoundPartialMatch.Push(match);
                                        }
                                        if(matchesList==foundPartialMatches) {
                                            matchesList = new List<Stack<LGSPMatch>>();
                                        } else {
                                            foreach(Stack<LGSPMatch> match in matchesList) {
                                                foundPartialMatches.Add(match);
                                            }
                                            matchesList.Clear();
                                        }
                                        // if enough matches were found, we leave
                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                        {
                                            candidate_Nitro_edge__edge2.flags = candidate_Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge2;
                                            candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge1;
                                            candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge0;
                                            candidate_Nitro_node__node1.flags = candidate_Nitro_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node1;
                                            candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node0;
                                            candidate_Nitro_node_n.flags = candidate_Nitro_node_n.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node_n;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_node__node0;
                                            } else { 
                                                if(prev__candidate_Nitro_node__node0==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Nitro_node__node0);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge1;
                                            } else { 
                                                if(prev__candidate_Nitro_edge__edge1==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge1);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge0;
                                            } else { 
                                                if(prev__candidate_Nitro_edge__edge0==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge0);
                                                }
                                            }
                                            openTasks.Push(this);
                                            return;
                                        }
                                        candidate_Nitro_edge__edge2.flags = candidate_Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge2;
                                        candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge1;
                                        candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge0;
                                        candidate_Nitro_node__node1.flags = candidate_Nitro_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node1;
                                        candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node0;
                                        candidate_Nitro_node_n.flags = candidate_Nitro_node_n.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node_n;
                                        continue;
                                    }
                                    candidate_Nitro_node_n.flags = candidate_Nitro_node_n.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node_n;
                                    candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node0;
                                    candidate_Nitro_node__node1.flags = candidate_Nitro_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_node__node1;
                                    candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge0;
                                    candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge1;
                                    candidate_Nitro_edge__edge2.flags = candidate_Nitro_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Nitro_edge__edge2;
                                }
                                while( (candidate_Nitro_edge__edge2 = candidate_Nitro_edge__edge2.outNext) != head_candidate_Nitro_edge__edge2 );
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_Nitro_node__node0.flags = candidate_Nitro_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_node__node0;
                            } else { 
                                if(prev__candidate_Nitro_node__node0==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Nitro_node__node0);
                                }
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_Nitro_edge__edge1.flags = candidate_Nitro_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge1;
                            } else { 
                                if(prev__candidate_Nitro_edge__edge1==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge1);
                                }
                            }
                        }
                        while( (candidate_Nitro_edge__edge1 = candidate_Nitro_edge__edge1.outNext) != head_candidate_Nitro_edge__edge1 );
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Nitro_edge__edge0.flags = candidate_Nitro_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Nitro_edge__edge0;
                    } else { 
                        if(prev__candidate_Nitro_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_Nitro_edge__edge0);
                        }
                    }
                }
                while( (candidate_Nitro_edge__edge0 = candidate_Nitro_edge__edge0.outNext) != head_candidate_Nitro_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_TriNitro : LGSPSubpatternAction
    {
        private PatternAction_TriNitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_TriNitro.Instance.patternGraph;
        }

        public static PatternAction_TriNitro getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_TriNitro newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_TriNitro(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_TriNitro oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_TriNitro freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_TriNitro next = null;

        public LGSPNode TriNitro_node_c2;
        public LGSPNode TriNitro_node_c4;
        public LGSPNode TriNitro_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset TriNitro_node_c2 
            LGSPNode candidate_TriNitro_node_c2 = TriNitro_node_c2;
            // SubPreset TriNitro_node_c4 
            LGSPNode candidate_TriNitro_node_c4 = TriNitro_node_c4;
            // SubPreset TriNitro_node_c6 
            LGSPNode candidate_TriNitro_node_c6 = TriNitro_node_c6;
            // Push subpattern matching task for _subpattern2
            PatternAction_Nitro taskFor__subpattern2 = PatternAction_Nitro.getNewTask(graph, openTasks);
            taskFor__subpattern2.Nitro_node_anchor = candidate_TriNitro_node_c6;
            openTasks.Push(taskFor__subpattern2);
            // Push subpattern matching task for _subpattern1
            PatternAction_Nitro taskFor__subpattern1 = PatternAction_Nitro.getNewTask(graph, openTasks);
            taskFor__subpattern1.Nitro_node_anchor = candidate_TriNitro_node_c4;
            openTasks.Push(taskFor__subpattern1);
            // Push subpattern matching task for _subpattern0
            PatternAction_Nitro taskFor__subpattern0 = PatternAction_Nitro.getNewTask(graph, openTasks);
            taskFor__subpattern0.Nitro_node_anchor = candidate_TriNitro_node_c2;
            openTasks.Push(taskFor__subpattern0);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for _subpattern0
            openTasks.Pop();
            PatternAction_Nitro.releaseTask(taskFor__subpattern0);
            // Pop subpattern matching task for _subpattern1
            openTasks.Pop();
            PatternAction_Nitro.releaseTask(taskFor__subpattern1);
            // Pop subpattern matching task for _subpattern2
            openTasks.Pop();
            PatternAction_Nitro.releaseTask(taskFor__subpattern2);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[0], new object[0], new LGSPMatch[3+0]);
                    match.patternGraph = patternGraph;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c2] = candidate_TriNitro_node_c2;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c4] = candidate_TriNitro_node_c4;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c6] = candidate_TriNitro_node_c6;
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                    currentFoundPartialMatch.Push(match);
                }
                if(matchesList==foundPartialMatches) {
                    matchesList = new List<Stack<LGSPMatch>>();
                } else {
                    foreach(Stack<LGSPMatch> match in matchesList) {
                        foundPartialMatches.Add(match);
                    }
                    matchesList.Clear();
                }
                // if enough matches were found, we leave
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    openTasks.Push(this);
                    return;
                }
                openTasks.Push(this);
                return;
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_ToluolCoreThenTriNitro : LGSPSubpatternAction
    {
        private PatternAction_ToluolCoreThenTriNitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_ToluolCoreThenTriNitro.Instance.patternGraph;
        }

        public static PatternAction_ToluolCoreThenTriNitro getNewTask(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            PatternAction_ToluolCoreThenTriNitro newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.graph = graph_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_ToluolCoreThenTriNitro(graph_, openTasks_);
            }
        return newTask;
        }

        public static void releaseTask(PatternAction_ToluolCoreThenTriNitro oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.graph = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_ToluolCoreThenTriNitro freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_ToluolCoreThenTriNitro next = null;

        public LGSPNode ToluolCoreThenTriNitro_node_c1;
        public LGSPNode ToluolCoreThenTriNitro_node_c2;
        public LGSPNode ToluolCoreThenTriNitro_node_c3;
        public LGSPNode ToluolCoreThenTriNitro_node_c4;
        public LGSPNode ToluolCoreThenTriNitro_node_c5;
        public LGSPNode ToluolCoreThenTriNitro_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches, int negLevel)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset ToluolCoreThenTriNitro_node_c1 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c1 = ToluolCoreThenTriNitro_node_c1;
            // SubPreset ToluolCoreThenTriNitro_node_c2 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c2 = ToluolCoreThenTriNitro_node_c2;
            // SubPreset ToluolCoreThenTriNitro_node_c3 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c3 = ToluolCoreThenTriNitro_node_c3;
            // SubPreset ToluolCoreThenTriNitro_node_c4 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c4 = ToluolCoreThenTriNitro_node_c4;
            // SubPreset ToluolCoreThenTriNitro_node_c5 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c5 = ToluolCoreThenTriNitro_node_c5;
            // SubPreset ToluolCoreThenTriNitro_node_c6 
            LGSPNode candidate_ToluolCoreThenTriNitro_node_c6 = ToluolCoreThenTriNitro_node_c6;
            // Push subpattern matching task for _subpattern3
            PatternAction_TriNitro taskFor__subpattern3 = PatternAction_TriNitro.getNewTask(graph, openTasks);
            taskFor__subpattern3.TriNitro_node_c2 = candidate_ToluolCoreThenTriNitro_node_c2;
            taskFor__subpattern3.TriNitro_node_c4 = candidate_ToluolCoreThenTriNitro_node_c4;
            taskFor__subpattern3.TriNitro_node_c6 = candidate_ToluolCoreThenTriNitro_node_c6;
            openTasks.Push(taskFor__subpattern3);
            // Push subpattern matching task for _subpattern2
            PatternAction_Hydrogen taskFor__subpattern2 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
            taskFor__subpattern2.Hydrogen_node_anchor = candidate_ToluolCoreThenTriNitro_node_c5;
            openTasks.Push(taskFor__subpattern2);
            // Push subpattern matching task for _subpattern1
            PatternAction_Hydrogen taskFor__subpattern1 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
            taskFor__subpattern1.Hydrogen_node_anchor = candidate_ToluolCoreThenTriNitro_node_c3;
            openTasks.Push(taskFor__subpattern1);
            // Push subpattern matching task for _subpattern0
            PatternAction_Methyl taskFor__subpattern0 = PatternAction_Methyl.getNewTask(graph, openTasks);
            taskFor__subpattern0.Methyl_node_anchor = candidate_ToluolCoreThenTriNitro_node_c1;
            openTasks.Push(taskFor__subpattern0);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for _subpattern0
            openTasks.Pop();
            PatternAction_Methyl.releaseTask(taskFor__subpattern0);
            // Pop subpattern matching task for _subpattern1
            openTasks.Pop();
            PatternAction_Hydrogen.releaseTask(taskFor__subpattern1);
            // Pop subpattern matching task for _subpattern2
            openTasks.Pop();
            PatternAction_Hydrogen.releaseTask(taskFor__subpattern2);
            // Pop subpattern matching task for _subpattern3
            openTasks.Pop();
            PatternAction_TriNitro.releaseTask(taskFor__subpattern3);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[0], new object[0], new LGSPMatch[4+0]);
                    match.patternGraph = patternGraph;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c1] = candidate_ToluolCoreThenTriNitro_node_c1;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c2] = candidate_ToluolCoreThenTriNitro_node_c2;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c3] = candidate_ToluolCoreThenTriNitro_node_c3;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c4] = candidate_ToluolCoreThenTriNitro_node_c4;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c5] = candidate_ToluolCoreThenTriNitro_node_c5;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c6] = candidate_ToluolCoreThenTriNitro_node_c6;
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                    currentFoundPartialMatch.Push(match);
                }
                if(matchesList==foundPartialMatches) {
                    matchesList = new List<Stack<LGSPMatch>>();
                } else {
                    foreach(Stack<LGSPMatch> match in matchesList) {
                        foundPartialMatches.Add(match);
                    }
                    matchesList.Clear();
                }
                // if enough matches were found, we leave
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    openTasks.Push(this);
                    return;
                }
                openTasks.Push(this);
                return;
            }
            openTasks.Push(this);
            return;
        }
    }

    public class Action_BenzolRing : LGSPAction
    {
        public Action_BenzolRing() {
            rulePattern = Rule_BenzolRing.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 1 + 0);
        }

        public override string Name { get { return "BenzolRing"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_BenzolRing instance = new Action_BenzolRing();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Push subpattern matching task for _subpattern0
            PatternAction_BenzolRing taskFor__subpattern0 = PatternAction_BenzolRing.getNewTask(graph, openTasks);
            openTasks.Push(taskFor__subpattern0);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for _subpattern0
            openTasks.Pop();
            PatternAction_BenzolRing.releaseTask(taskFor__subpattern0);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                    match.patternGraph = rulePattern.patternGraph;
                    match.EmbeddedGraphs[(int)Rule_BenzolRing.BenzolRing_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    matches.matchesList.PositionWasFilledFixIt();
                }
                matchesList.Clear();
                // if enough matches were found, we leave
                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                {
                    return matches;
                }
                return matches;
            }
            return matches;
        }
    }

    public class Action_TNTTotallyFolded : LGSPAction
    {
        public Action_TNTTotallyFolded() {
            rulePattern = Rule_TNTTotallyFolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 0, 0, 7 + 0);
        }

        public override string Name { get { return "TNTTotallyFolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTTotallyFolded instance = new Action_TNTTotallyFolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup TNTTotallyFolded_node_c3 
            int type_id_candidate_TNTTotallyFolded_node_c3 = 1;
            for(LGSPNode head_candidate_TNTTotallyFolded_node_c3 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c3], candidate_TNTTotallyFolded_node_c3 = head_candidate_TNTTotallyFolded_node_c3.typeNext; candidate_TNTTotallyFolded_node_c3 != head_candidate_TNTTotallyFolded_node_c3; candidate_TNTTotallyFolded_node_c3 = candidate_TNTTotallyFolded_node_c3.typeNext)
            {
                uint prev__candidate_TNTTotallyFolded_node_c3;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNTTotallyFolded_node_c3 = candidate_TNTTotallyFolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNTTotallyFolded_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNTTotallyFolded_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c3) ? 1U : 0U;
                    if(prev__candidate_TNTTotallyFolded_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTTotallyFolded_node_c3,candidate_TNTTotallyFolded_node_c3);
                }
                // Lookup TNTTotallyFolded_node_c5 
                int type_id_candidate_TNTTotallyFolded_node_c5 = 1;
                for(LGSPNode head_candidate_TNTTotallyFolded_node_c5 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c5], candidate_TNTTotallyFolded_node_c5 = head_candidate_TNTTotallyFolded_node_c5.typeNext; candidate_TNTTotallyFolded_node_c5 != head_candidate_TNTTotallyFolded_node_c5; candidate_TNTTotallyFolded_node_c5 = candidate_TNTTotallyFolded_node_c5.typeNext)
                {
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTTotallyFolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c5))
                        && candidate_TNTTotallyFolded_node_c5==candidate_TNTTotallyFolded_node_c3
                        )
                    {
                        continue;
                    }
                    uint prev__candidate_TNTTotallyFolded_node_c5;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_TNTTotallyFolded_node_c5 = candidate_TNTTotallyFolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_TNTTotallyFolded_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_TNTTotallyFolded_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c5) ? 1U : 0U;
                        if(prev__candidate_TNTTotallyFolded_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTTotallyFolded_node_c5,candidate_TNTTotallyFolded_node_c5);
                    }
                    // Lookup TNTTotallyFolded_node_c6 
                    int type_id_candidate_TNTTotallyFolded_node_c6 = 1;
                    for(LGSPNode head_candidate_TNTTotallyFolded_node_c6 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c6], candidate_TNTTotallyFolded_node_c6 = head_candidate_TNTTotallyFolded_node_c6.typeNext; candidate_TNTTotallyFolded_node_c6 != head_candidate_TNTTotallyFolded_node_c6; candidate_TNTTotallyFolded_node_c6 = candidate_TNTTotallyFolded_node_c6.typeNext)
                    {
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTTotallyFolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c6))
                            && (candidate_TNTTotallyFolded_node_c6==candidate_TNTTotallyFolded_node_c3
                                || candidate_TNTTotallyFolded_node_c6==candidate_TNTTotallyFolded_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNTTotallyFolded_node_c6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_TNTTotallyFolded_node_c6 = candidate_TNTTotallyFolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_TNTTotallyFolded_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_TNTTotallyFolded_node_c6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c6) ? 1U : 0U;
                            if(prev__candidate_TNTTotallyFolded_node_c6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTTotallyFolded_node_c6,candidate_TNTTotallyFolded_node_c6);
                        }
                        // Lookup TNTTotallyFolded_node_c4 
                        int type_id_candidate_TNTTotallyFolded_node_c4 = 1;
                        for(LGSPNode head_candidate_TNTTotallyFolded_node_c4 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c4], candidate_TNTTotallyFolded_node_c4 = head_candidate_TNTTotallyFolded_node_c4.typeNext; candidate_TNTTotallyFolded_node_c4 != head_candidate_TNTTotallyFolded_node_c4; candidate_TNTTotallyFolded_node_c4 = candidate_TNTTotallyFolded_node_c4.typeNext)
                        {
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTTotallyFolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c4))
                                && (candidate_TNTTotallyFolded_node_c4==candidate_TNTTotallyFolded_node_c3
                                    || candidate_TNTTotallyFolded_node_c4==candidate_TNTTotallyFolded_node_c5
                                    || candidate_TNTTotallyFolded_node_c4==candidate_TNTTotallyFolded_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            uint prev__candidate_TNTTotallyFolded_node_c4;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_TNTTotallyFolded_node_c4 = candidate_TNTTotallyFolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNTTotallyFolded_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_TNTTotallyFolded_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c4) ? 1U : 0U;
                                if(prev__candidate_TNTTotallyFolded_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTTotallyFolded_node_c4,candidate_TNTTotallyFolded_node_c4);
                            }
                            // Lookup TNTTotallyFolded_node_c2 
                            int type_id_candidate_TNTTotallyFolded_node_c2 = 1;
                            for(LGSPNode head_candidate_TNTTotallyFolded_node_c2 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c2], candidate_TNTTotallyFolded_node_c2 = head_candidate_TNTTotallyFolded_node_c2.typeNext; candidate_TNTTotallyFolded_node_c2 != head_candidate_TNTTotallyFolded_node_c2; candidate_TNTTotallyFolded_node_c2 = candidate_TNTTotallyFolded_node_c2.typeNext)
                            {
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTTotallyFolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c2))
                                    && (candidate_TNTTotallyFolded_node_c2==candidate_TNTTotallyFolded_node_c3
                                        || candidate_TNTTotallyFolded_node_c2==candidate_TNTTotallyFolded_node_c5
                                        || candidate_TNTTotallyFolded_node_c2==candidate_TNTTotallyFolded_node_c6
                                        || candidate_TNTTotallyFolded_node_c2==candidate_TNTTotallyFolded_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNTTotallyFolded_node_c2;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNTTotallyFolded_node_c2 = candidate_TNTTotallyFolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNTTotallyFolded_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNTTotallyFolded_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c2) ? 1U : 0U;
                                    if(prev__candidate_TNTTotallyFolded_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTTotallyFolded_node_c2,candidate_TNTTotallyFolded_node_c2);
                                }
                                // Lookup TNTTotallyFolded_node_c1 
                                int type_id_candidate_TNTTotallyFolded_node_c1 = 1;
                                for(LGSPNode head_candidate_TNTTotallyFolded_node_c1 = graph.nodesByTypeHeads[type_id_candidate_TNTTotallyFolded_node_c1], candidate_TNTTotallyFolded_node_c1 = head_candidate_TNTTotallyFolded_node_c1.typeNext; candidate_TNTTotallyFolded_node_c1 != head_candidate_TNTTotallyFolded_node_c1; candidate_TNTTotallyFolded_node_c1 = candidate_TNTTotallyFolded_node_c1.typeNext)
                                {
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTTotallyFolded_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTTotallyFolded_node_c1))
                                        && (candidate_TNTTotallyFolded_node_c1==candidate_TNTTotallyFolded_node_c3
                                            || candidate_TNTTotallyFolded_node_c1==candidate_TNTTotallyFolded_node_c5
                                            || candidate_TNTTotallyFolded_node_c1==candidate_TNTTotallyFolded_node_c6
                                            || candidate_TNTTotallyFolded_node_c1==candidate_TNTTotallyFolded_node_c4
                                            || candidate_TNTTotallyFolded_node_c1==candidate_TNTTotallyFolded_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    // Push subpattern matching task for _subpattern6
                                    PatternAction_Nitro taskFor__subpattern6 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                    taskFor__subpattern6.Nitro_node_anchor = candidate_TNTTotallyFolded_node_c6;
                                    openTasks.Push(taskFor__subpattern6);
                                    // Push subpattern matching task for _subpattern5
                                    PatternAction_Hydrogen taskFor__subpattern5 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern5.Hydrogen_node_anchor = candidate_TNTTotallyFolded_node_c5;
                                    openTasks.Push(taskFor__subpattern5);
                                    // Push subpattern matching task for _subpattern4
                                    PatternAction_Nitro taskFor__subpattern4 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                    taskFor__subpattern4.Nitro_node_anchor = candidate_TNTTotallyFolded_node_c4;
                                    openTasks.Push(taskFor__subpattern4);
                                    // Push subpattern matching task for _subpattern3
                                    PatternAction_Hydrogen taskFor__subpattern3 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern3.Hydrogen_node_anchor = candidate_TNTTotallyFolded_node_c3;
                                    openTasks.Push(taskFor__subpattern3);
                                    // Push subpattern matching task for _subpattern2
                                    PatternAction_Nitro taskFor__subpattern2 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                    taskFor__subpattern2.Nitro_node_anchor = candidate_TNTTotallyFolded_node_c2;
                                    openTasks.Push(taskFor__subpattern2);
                                    // Push subpattern matching task for _subpattern1
                                    PatternAction_Methyl taskFor__subpattern1 = PatternAction_Methyl.getNewTask(graph, openTasks);
                                    taskFor__subpattern1.Methyl_node_anchor = candidate_TNTTotallyFolded_node_c1;
                                    openTasks.Push(taskFor__subpattern1);
                                    // Push subpattern matching task for _subpattern0
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = PatternAction_BenzolRingC123456Exposed.getNewTask(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = candidate_TNTTotallyFolded_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = candidate_TNTTotallyFolded_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = candidate_TNTTotallyFolded_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = candidate_TNTTotallyFolded_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = candidate_TNTTotallyFolded_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = candidate_TNTTotallyFolded_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c1;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c1 = candidate_TNTTotallyFolded_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c2;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c2 = candidate_TNTTotallyFolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c3;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c3 = candidate_TNTTotallyFolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c4;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c4 = candidate_TNTTotallyFolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c5;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c5 = candidate_TNTTotallyFolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTTotallyFolded_node_c6;
                                    prevGlobal__candidate_TNTTotallyFolded_node_c6 = candidate_TNTTotallyFolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTTotallyFolded_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    // Match subpatterns 
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                    // Pop subpattern matching task for _subpattern0
                                    openTasks.Pop();
                                    PatternAction_BenzolRingC123456Exposed.releaseTask(taskFor__subpattern0);
                                    // Pop subpattern matching task for _subpattern1
                                    openTasks.Pop();
                                    PatternAction_Methyl.releaseTask(taskFor__subpattern1);
                                    // Pop subpattern matching task for _subpattern2
                                    openTasks.Pop();
                                    PatternAction_Nitro.releaseTask(taskFor__subpattern2);
                                    // Pop subpattern matching task for _subpattern3
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern3);
                                    // Pop subpattern matching task for _subpattern4
                                    openTasks.Pop();
                                    PatternAction_Nitro.releaseTask(taskFor__subpattern4);
                                    // Pop subpattern matching task for _subpattern5
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern5);
                                    // Pop subpattern matching task for _subpattern6
                                    openTasks.Pop();
                                    PatternAction_Nitro.releaseTask(taskFor__subpattern6);
                                    // Check whether subpatterns were found 
                                    if(matchesList.Count>0) {
                                        // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c1] = candidate_TNTTotallyFolded_node_c1;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c2] = candidate_TNTTotallyFolded_node_c2;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c3] = candidate_TNTTotallyFolded_node_c3;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c4] = candidate_TNTTotallyFolded_node_c4;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c5] = candidate_TNTTotallyFolded_node_c5;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c6] = candidate_TNTTotallyFolded_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern6] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        // if enough matches were found, we leave
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            candidate_TNTTotallyFolded_node_c6.flags = candidate_TNTTotallyFolded_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c6;
                                            candidate_TNTTotallyFolded_node_c5.flags = candidate_TNTTotallyFolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c5;
                                            candidate_TNTTotallyFolded_node_c4.flags = candidate_TNTTotallyFolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c4;
                                            candidate_TNTTotallyFolded_node_c3.flags = candidate_TNTTotallyFolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c3;
                                            candidate_TNTTotallyFolded_node_c2.flags = candidate_TNTTotallyFolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c2;
                                            candidate_TNTTotallyFolded_node_c1.flags = candidate_TNTTotallyFolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c1;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTTotallyFolded_node_c2.flags = candidate_TNTTotallyFolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c2;
                                            } else { 
                                                if(prev__candidate_TNTTotallyFolded_node_c2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c2);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTTotallyFolded_node_c4.flags = candidate_TNTTotallyFolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c4;
                                            } else { 
                                                if(prev__candidate_TNTTotallyFolded_node_c4==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c4);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTTotallyFolded_node_c6.flags = candidate_TNTTotallyFolded_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c6;
                                            } else { 
                                                if(prev__candidate_TNTTotallyFolded_node_c6==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c6);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTTotallyFolded_node_c5.flags = candidate_TNTTotallyFolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c5;
                                            } else { 
                                                if(prev__candidate_TNTTotallyFolded_node_c5==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c5);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTTotallyFolded_node_c3.flags = candidate_TNTTotallyFolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c3;
                                            } else { 
                                                if(prev__candidate_TNTTotallyFolded_node_c3==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c3);
                                                }
                                            }
                                            return matches;
                                        }
                                        candidate_TNTTotallyFolded_node_c6.flags = candidate_TNTTotallyFolded_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c6;
                                        candidate_TNTTotallyFolded_node_c5.flags = candidate_TNTTotallyFolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c5;
                                        candidate_TNTTotallyFolded_node_c4.flags = candidate_TNTTotallyFolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c4;
                                        candidate_TNTTotallyFolded_node_c3.flags = candidate_TNTTotallyFolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c3;
                                        candidate_TNTTotallyFolded_node_c2.flags = candidate_TNTTotallyFolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c2;
                                        candidate_TNTTotallyFolded_node_c1.flags = candidate_TNTTotallyFolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c1;
                                        continue;
                                    }
                                    candidate_TNTTotallyFolded_node_c1.flags = candidate_TNTTotallyFolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c1;
                                    candidate_TNTTotallyFolded_node_c2.flags = candidate_TNTTotallyFolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c2;
                                    candidate_TNTTotallyFolded_node_c3.flags = candidate_TNTTotallyFolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c3;
                                    candidate_TNTTotallyFolded_node_c4.flags = candidate_TNTTotallyFolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c4;
                                    candidate_TNTTotallyFolded_node_c5.flags = candidate_TNTTotallyFolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c5;
                                    candidate_TNTTotallyFolded_node_c6.flags = candidate_TNTTotallyFolded_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTTotallyFolded_node_c6;
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNTTotallyFolded_node_c2.flags = candidate_TNTTotallyFolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c2;
                                } else { 
                                    if(prev__candidate_TNTTotallyFolded_node_c2==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c2);
                                    }
                                }
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_TNTTotallyFolded_node_c4.flags = candidate_TNTTotallyFolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c4;
                            } else { 
                                if(prev__candidate_TNTTotallyFolded_node_c4==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c4);
                                }
                            }
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_TNTTotallyFolded_node_c6.flags = candidate_TNTTotallyFolded_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c6;
                        } else { 
                            if(prev__candidate_TNTTotallyFolded_node_c6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c6);
                            }
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNTTotallyFolded_node_c5.flags = candidate_TNTTotallyFolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c5;
                    } else { 
                        if(prev__candidate_TNTTotallyFolded_node_c5==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c5);
                        }
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNTTotallyFolded_node_c3.flags = candidate_TNTTotallyFolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTTotallyFolded_node_c3;
                } else { 
                    if(prev__candidate_TNTTotallyFolded_node_c3==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTTotallyFolded_node_c3);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_TNTChain : LGSPAction
    {
        public Action_TNTChain() {
            rulePattern = Rule_TNTChain.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 0, 0, 2 + 0);
        }

        public override string Name { get { return "TNTChain"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTChain instance = new Action_TNTChain();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup TNTChain_node_c3 
            int type_id_candidate_TNTChain_node_c3 = 1;
            for(LGSPNode head_candidate_TNTChain_node_c3 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c3], candidate_TNTChain_node_c3 = head_candidate_TNTChain_node_c3.typeNext; candidate_TNTChain_node_c3 != head_candidate_TNTChain_node_c3; candidate_TNTChain_node_c3 = candidate_TNTChain_node_c3.typeNext)
            {
                uint prev__candidate_TNTChain_node_c3;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNTChain_node_c3 = candidate_TNTChain_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNTChain_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNTChain_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTChain_node_c3) ? 1U : 0U;
                    if(prev__candidate_TNTChain_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTChain_node_c3,candidate_TNTChain_node_c3);
                }
                // Lookup TNTChain_node_c5 
                int type_id_candidate_TNTChain_node_c5 = 1;
                for(LGSPNode head_candidate_TNTChain_node_c5 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c5], candidate_TNTChain_node_c5 = head_candidate_TNTChain_node_c5.typeNext; candidate_TNTChain_node_c5 != head_candidate_TNTChain_node_c5; candidate_TNTChain_node_c5 = candidate_TNTChain_node_c5.typeNext)
                {
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTChain_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTChain_node_c5))
                        && candidate_TNTChain_node_c5==candidate_TNTChain_node_c3
                        )
                    {
                        continue;
                    }
                    uint prev__candidate_TNTChain_node_c5;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_TNTChain_node_c5 = candidate_TNTChain_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_TNTChain_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_TNTChain_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTChain_node_c5) ? 1U : 0U;
                        if(prev__candidate_TNTChain_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTChain_node_c5,candidate_TNTChain_node_c5);
                    }
                    // Lookup TNTChain_node_c6 
                    int type_id_candidate_TNTChain_node_c6 = 1;
                    for(LGSPNode head_candidate_TNTChain_node_c6 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c6], candidate_TNTChain_node_c6 = head_candidate_TNTChain_node_c6.typeNext; candidate_TNTChain_node_c6 != head_candidate_TNTChain_node_c6; candidate_TNTChain_node_c6 = candidate_TNTChain_node_c6.typeNext)
                    {
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTChain_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTChain_node_c6))
                            && (candidate_TNTChain_node_c6==candidate_TNTChain_node_c3
                                || candidate_TNTChain_node_c6==candidate_TNTChain_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNTChain_node_c6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_TNTChain_node_c6 = candidate_TNTChain_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_TNTChain_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_TNTChain_node_c6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTChain_node_c6) ? 1U : 0U;
                            if(prev__candidate_TNTChain_node_c6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTChain_node_c6,candidate_TNTChain_node_c6);
                        }
                        // Lookup TNTChain_node_c4 
                        int type_id_candidate_TNTChain_node_c4 = 1;
                        for(LGSPNode head_candidate_TNTChain_node_c4 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c4], candidate_TNTChain_node_c4 = head_candidate_TNTChain_node_c4.typeNext; candidate_TNTChain_node_c4 != head_candidate_TNTChain_node_c4; candidate_TNTChain_node_c4 = candidate_TNTChain_node_c4.typeNext)
                        {
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTChain_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTChain_node_c4))
                                && (candidate_TNTChain_node_c4==candidate_TNTChain_node_c3
                                    || candidate_TNTChain_node_c4==candidate_TNTChain_node_c5
                                    || candidate_TNTChain_node_c4==candidate_TNTChain_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            uint prev__candidate_TNTChain_node_c4;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_TNTChain_node_c4 = candidate_TNTChain_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNTChain_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_TNTChain_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTChain_node_c4) ? 1U : 0U;
                                if(prev__candidate_TNTChain_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTChain_node_c4,candidate_TNTChain_node_c4);
                            }
                            // Lookup TNTChain_node_c2 
                            int type_id_candidate_TNTChain_node_c2 = 1;
                            for(LGSPNode head_candidate_TNTChain_node_c2 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c2], candidate_TNTChain_node_c2 = head_candidate_TNTChain_node_c2.typeNext; candidate_TNTChain_node_c2 != head_candidate_TNTChain_node_c2; candidate_TNTChain_node_c2 = candidate_TNTChain_node_c2.typeNext)
                            {
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTChain_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTChain_node_c2))
                                    && (candidate_TNTChain_node_c2==candidate_TNTChain_node_c3
                                        || candidate_TNTChain_node_c2==candidate_TNTChain_node_c5
                                        || candidate_TNTChain_node_c2==candidate_TNTChain_node_c6
                                        || candidate_TNTChain_node_c2==candidate_TNTChain_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNTChain_node_c2;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNTChain_node_c2 = candidate_TNTChain_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNTChain_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNTChain_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNTChain_node_c2) ? 1U : 0U;
                                    if(prev__candidate_TNTChain_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNTChain_node_c2,candidate_TNTChain_node_c2);
                                }
                                // Lookup TNTChain_node_c1 
                                int type_id_candidate_TNTChain_node_c1 = 1;
                                for(LGSPNode head_candidate_TNTChain_node_c1 = graph.nodesByTypeHeads[type_id_candidate_TNTChain_node_c1], candidate_TNTChain_node_c1 = head_candidate_TNTChain_node_c1.typeNext; candidate_TNTChain_node_c1 != head_candidate_TNTChain_node_c1; candidate_TNTChain_node_c1 = candidate_TNTChain_node_c1.typeNext)
                                {
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNTChain_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNTChain_node_c1))
                                        && (candidate_TNTChain_node_c1==candidate_TNTChain_node_c3
                                            || candidate_TNTChain_node_c1==candidate_TNTChain_node_c5
                                            || candidate_TNTChain_node_c1==candidate_TNTChain_node_c6
                                            || candidate_TNTChain_node_c1==candidate_TNTChain_node_c4
                                            || candidate_TNTChain_node_c1==candidate_TNTChain_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    // Push subpattern matching task for _subpattern1
                                    PatternAction_ToluolCoreThenTriNitro taskFor__subpattern1 = PatternAction_ToluolCoreThenTriNitro.getNewTask(graph, openTasks);
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c1 = candidate_TNTChain_node_c1;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c2 = candidate_TNTChain_node_c2;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c3 = candidate_TNTChain_node_c3;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c4 = candidate_TNTChain_node_c4;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c5 = candidate_TNTChain_node_c5;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c6 = candidate_TNTChain_node_c6;
                                    openTasks.Push(taskFor__subpattern1);
                                    // Push subpattern matching task for _subpattern0
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = PatternAction_BenzolRingC123456Exposed.getNewTask(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = candidate_TNTChain_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = candidate_TNTChain_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = candidate_TNTChain_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = candidate_TNTChain_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = candidate_TNTChain_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = candidate_TNTChain_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    uint prevGlobal__candidate_TNTChain_node_c1;
                                    prevGlobal__candidate_TNTChain_node_c1 = candidate_TNTChain_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTChain_node_c2;
                                    prevGlobal__candidate_TNTChain_node_c2 = candidate_TNTChain_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTChain_node_c3;
                                    prevGlobal__candidate_TNTChain_node_c3 = candidate_TNTChain_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTChain_node_c4;
                                    prevGlobal__candidate_TNTChain_node_c4 = candidate_TNTChain_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTChain_node_c5;
                                    prevGlobal__candidate_TNTChain_node_c5 = candidate_TNTChain_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_TNTChain_node_c6;
                                    prevGlobal__candidate_TNTChain_node_c6 = candidate_TNTChain_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_TNTChain_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    // Match subpatterns 
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                    // Pop subpattern matching task for _subpattern0
                                    openTasks.Pop();
                                    PatternAction_BenzolRingC123456Exposed.releaseTask(taskFor__subpattern0);
                                    // Pop subpattern matching task for _subpattern1
                                    openTasks.Pop();
                                    PatternAction_ToluolCoreThenTriNitro.releaseTask(taskFor__subpattern1);
                                    // Check whether subpatterns were found 
                                    if(matchesList.Count>0) {
                                        // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c1] = candidate_TNTChain_node_c1;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c2] = candidate_TNTChain_node_c2;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c3] = candidate_TNTChain_node_c3;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c4] = candidate_TNTChain_node_c4;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c5] = candidate_TNTChain_node_c5;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c6] = candidate_TNTChain_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_TNTChain.TNTChain_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTChain.TNTChain_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        // if enough matches were found, we leave
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            candidate_TNTChain_node_c6.flags = candidate_TNTChain_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c6;
                                            candidate_TNTChain_node_c5.flags = candidate_TNTChain_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c5;
                                            candidate_TNTChain_node_c4.flags = candidate_TNTChain_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c4;
                                            candidate_TNTChain_node_c3.flags = candidate_TNTChain_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c3;
                                            candidate_TNTChain_node_c2.flags = candidate_TNTChain_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c2;
                                            candidate_TNTChain_node_c1.flags = candidate_TNTChain_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c1;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTChain_node_c2.flags = candidate_TNTChain_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c2;
                                            } else { 
                                                if(prev__candidate_TNTChain_node_c2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c2);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTChain_node_c4.flags = candidate_TNTChain_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c4;
                                            } else { 
                                                if(prev__candidate_TNTChain_node_c4==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c4);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTChain_node_c6.flags = candidate_TNTChain_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c6;
                                            } else { 
                                                if(prev__candidate_TNTChain_node_c6==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c6);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTChain_node_c5.flags = candidate_TNTChain_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c5;
                                            } else { 
                                                if(prev__candidate_TNTChain_node_c5==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c5);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNTChain_node_c3.flags = candidate_TNTChain_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c3;
                                            } else { 
                                                if(prev__candidate_TNTChain_node_c3==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c3);
                                                }
                                            }
                                            return matches;
                                        }
                                        candidate_TNTChain_node_c6.flags = candidate_TNTChain_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c6;
                                        candidate_TNTChain_node_c5.flags = candidate_TNTChain_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c5;
                                        candidate_TNTChain_node_c4.flags = candidate_TNTChain_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c4;
                                        candidate_TNTChain_node_c3.flags = candidate_TNTChain_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c3;
                                        candidate_TNTChain_node_c2.flags = candidate_TNTChain_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c2;
                                        candidate_TNTChain_node_c1.flags = candidate_TNTChain_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c1;
                                        continue;
                                    }
                                    candidate_TNTChain_node_c1.flags = candidate_TNTChain_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c1;
                                    candidate_TNTChain_node_c2.flags = candidate_TNTChain_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c2;
                                    candidate_TNTChain_node_c3.flags = candidate_TNTChain_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c3;
                                    candidate_TNTChain_node_c4.flags = candidate_TNTChain_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c4;
                                    candidate_TNTChain_node_c5.flags = candidate_TNTChain_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c5;
                                    candidate_TNTChain_node_c6.flags = candidate_TNTChain_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNTChain_node_c6;
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNTChain_node_c2.flags = candidate_TNTChain_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c2;
                                } else { 
                                    if(prev__candidate_TNTChain_node_c2==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c2);
                                    }
                                }
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_TNTChain_node_c4.flags = candidate_TNTChain_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c4;
                            } else { 
                                if(prev__candidate_TNTChain_node_c4==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c4);
                                }
                            }
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_TNTChain_node_c6.flags = candidate_TNTChain_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c6;
                        } else { 
                            if(prev__candidate_TNTChain_node_c6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c6);
                            }
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNTChain_node_c5.flags = candidate_TNTChain_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c5;
                    } else { 
                        if(prev__candidate_TNTChain_node_c5==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c5);
                        }
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNTChain_node_c3.flags = candidate_TNTChain_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTChain_node_c3;
                } else { 
                    if(prev__candidate_TNTChain_node_c3==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNTChain_node_c3);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_ToluolCore : LGSPAction
    {
        public Action_ToluolCore() {
            rulePattern = Rule_ToluolCore.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 1, 0, 0, 2 + 0);
        }

        public override string Name { get { return "ToluolCore"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_ToluolCore instance = new Action_ToluolCore();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup ToluolCore_node_c1 
            int type_id_candidate_ToluolCore_node_c1 = 1;
            for(LGSPNode head_candidate_ToluolCore_node_c1 = graph.nodesByTypeHeads[type_id_candidate_ToluolCore_node_c1], candidate_ToluolCore_node_c1 = head_candidate_ToluolCore_node_c1.typeNext; candidate_ToluolCore_node_c1 != head_candidate_ToluolCore_node_c1; candidate_ToluolCore_node_c1 = candidate_ToluolCore_node_c1.typeNext)
            {
                // Push subpattern matching task for _subpattern1
                PatternAction_Methyl taskFor__subpattern1 = PatternAction_Methyl.getNewTask(graph, openTasks);
                taskFor__subpattern1.Methyl_node_anchor = candidate_ToluolCore_node_c1;
                openTasks.Push(taskFor__subpattern1);
                // Push subpattern matching task for _subpattern0
                PatternAction_BenzolRingC1Exposed taskFor__subpattern0 = PatternAction_BenzolRingC1Exposed.getNewTask(graph, openTasks);
                taskFor__subpattern0.BenzolRingC1Exposed_node_c1 = candidate_ToluolCore_node_c1;
                openTasks.Push(taskFor__subpattern0);
                uint prevGlobal__candidate_ToluolCore_node_c1;
                prevGlobal__candidate_ToluolCore_node_c1 = candidate_ToluolCore_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                candidate_ToluolCore_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                // Match subpatterns 
                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                // Pop subpattern matching task for _subpattern0
                openTasks.Pop();
                PatternAction_BenzolRingC1Exposed.releaseTask(taskFor__subpattern0);
                // Pop subpattern matching task for _subpattern1
                openTasks.Pop();
                PatternAction_Methyl.releaseTask(taskFor__subpattern1);
                // Check whether subpatterns were found 
                if(matchesList.Count>0) {
                    // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                    {
                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                        match.patternGraph = rulePattern.patternGraph;
                        match.Nodes[(int)Rule_ToluolCore.ToluolCore_NodeNums.@c1] = candidate_ToluolCore_node_c1;
                        match.EmbeddedGraphs[(int)Rule_ToluolCore.ToluolCore_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                        match.EmbeddedGraphs[(int)Rule_ToluolCore.ToluolCore_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                        matches.matchesList.PositionWasFilledFixIt();
                    }
                    matchesList.Clear();
                    // if enough matches were found, we leave
                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                    {
                        candidate_ToluolCore_node_c1.flags = candidate_ToluolCore_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCore_node_c1;
                        return matches;
                    }
                    candidate_ToluolCore_node_c1.flags = candidate_ToluolCore_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCore_node_c1;
                    continue;
                }
                candidate_ToluolCore_node_c1.flags = candidate_ToluolCore_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCore_node_c1;
            }
            return matches;
        }
    }

    public class Action_ToluolCoreNotC6Nitro : LGSPAction
    {
        public Action_ToluolCoreNotC6Nitro() {
            rulePattern = Rule_ToluolCoreNotC6Nitro.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 1, 0, 0, 2 + 0);
        }

        public override string Name { get { return "ToluolCoreNotC6Nitro"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_ToluolCoreNotC6Nitro instance = new Action_ToluolCoreNotC6Nitro();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup ToluolCoreNotC6Nitro_node_c1 
            int type_id_candidate_ToluolCoreNotC6Nitro_node_c1 = 1;
            for(LGSPNode head_candidate_ToluolCoreNotC6Nitro_node_c1 = graph.nodesByTypeHeads[type_id_candidate_ToluolCoreNotC6Nitro_node_c1], candidate_ToluolCoreNotC6Nitro_node_c1 = head_candidate_ToluolCoreNotC6Nitro_node_c1.typeNext; candidate_ToluolCoreNotC6Nitro_node_c1 != head_candidate_ToluolCoreNotC6Nitro_node_c1; candidate_ToluolCoreNotC6Nitro_node_c1 = candidate_ToluolCoreNotC6Nitro_node_c1.typeNext)
            {
                // Push subpattern matching task for _subpattern1
                PatternAction_Methyl taskFor__subpattern1 = PatternAction_Methyl.getNewTask(graph, openTasks);
                taskFor__subpattern1.Methyl_node_anchor = candidate_ToluolCoreNotC6Nitro_node_c1;
                openTasks.Push(taskFor__subpattern1);
                // Push subpattern matching task for _subpattern0
                PatternAction_BenzolRingC1ExposedNotC6Nitro taskFor__subpattern0 = PatternAction_BenzolRingC1ExposedNotC6Nitro.getNewTask(graph, openTasks);
                taskFor__subpattern0.BenzolRingC1ExposedNotC6Nitro_node_c1 = candidate_ToluolCoreNotC6Nitro_node_c1;
                openTasks.Push(taskFor__subpattern0);
                uint prevGlobal__candidate_ToluolCoreNotC6Nitro_node_c1;
                prevGlobal__candidate_ToluolCoreNotC6Nitro_node_c1 = candidate_ToluolCoreNotC6Nitro_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                candidate_ToluolCoreNotC6Nitro_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                // Match subpatterns 
                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                // Pop subpattern matching task for _subpattern0
                openTasks.Pop();
                PatternAction_BenzolRingC1ExposedNotC6Nitro.releaseTask(taskFor__subpattern0);
                // Pop subpattern matching task for _subpattern1
                openTasks.Pop();
                PatternAction_Methyl.releaseTask(taskFor__subpattern1);
                // Check whether subpatterns were found 
                if(matchesList.Count>0) {
                    // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                    {
                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                        match.patternGraph = rulePattern.patternGraph;
                        match.Nodes[(int)Rule_ToluolCoreNotC6Nitro.ToluolCoreNotC6Nitro_NodeNums.@c1] = candidate_ToluolCoreNotC6Nitro_node_c1;
                        match.EmbeddedGraphs[(int)Rule_ToluolCoreNotC6Nitro.ToluolCoreNotC6Nitro_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                        match.EmbeddedGraphs[(int)Rule_ToluolCoreNotC6Nitro.ToluolCoreNotC6Nitro_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                        matches.matchesList.PositionWasFilledFixIt();
                    }
                    matchesList.Clear();
                    // if enough matches were found, we leave
                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                    {
                        candidate_ToluolCoreNotC6Nitro_node_c1.flags = candidate_ToluolCoreNotC6Nitro_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCoreNotC6Nitro_node_c1;
                        return matches;
                    }
                    candidate_ToluolCoreNotC6Nitro_node_c1.flags = candidate_ToluolCoreNotC6Nitro_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCoreNotC6Nitro_node_c1;
                    continue;
                }
                candidate_ToluolCoreNotC6Nitro_node_c1.flags = candidate_ToluolCoreNotC6Nitro_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_ToluolCoreNotC6Nitro_node_c1;
            }
            return matches;
        }
    }

    public class Action_Toluol : LGSPAction
    {
        public Action_Toluol() {
            rulePattern = Rule_Toluol.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 0, 0, 7 + 0);
        }

        public override string Name { get { return "Toluol"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_Toluol instance = new Action_Toluol();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup Toluol_node_c3 
            int type_id_candidate_Toluol_node_c3 = 1;
            for(LGSPNode head_candidate_Toluol_node_c3 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c3], candidate_Toluol_node_c3 = head_candidate_Toluol_node_c3.typeNext; candidate_Toluol_node_c3 != head_candidate_Toluol_node_c3; candidate_Toluol_node_c3 = candidate_Toluol_node_c3.typeNext)
            {
                uint prev__candidate_Toluol_node_c3;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_Toluol_node_c3 = candidate_Toluol_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_Toluol_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_Toluol_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Toluol_node_c3) ? 1U : 0U;
                    if(prev__candidate_Toluol_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Toluol_node_c3,candidate_Toluol_node_c3);
                }
                // Lookup Toluol_node_c5 
                int type_id_candidate_Toluol_node_c5 = 1;
                for(LGSPNode head_candidate_Toluol_node_c5 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c5], candidate_Toluol_node_c5 = head_candidate_Toluol_node_c5.typeNext; candidate_Toluol_node_c5 != head_candidate_Toluol_node_c5; candidate_Toluol_node_c5 = candidate_Toluol_node_c5.typeNext)
                {
                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Toluol_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Toluol_node_c5))
                        && candidate_Toluol_node_c5==candidate_Toluol_node_c3
                        )
                    {
                        continue;
                    }
                    uint prev__candidate_Toluol_node_c5;
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        prev__candidate_Toluol_node_c5 = candidate_Toluol_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_Toluol_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    } else {
                        prev__candidate_Toluol_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Toluol_node_c5) ? 1U : 0U;
                        if(prev__candidate_Toluol_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Toluol_node_c5,candidate_Toluol_node_c5);
                    }
                    // Lookup Toluol_node_c6 
                    int type_id_candidate_Toluol_node_c6 = 1;
                    for(LGSPNode head_candidate_Toluol_node_c6 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c6], candidate_Toluol_node_c6 = head_candidate_Toluol_node_c6.typeNext; candidate_Toluol_node_c6 != head_candidate_Toluol_node_c6; candidate_Toluol_node_c6 = candidate_Toluol_node_c6.typeNext)
                    {
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Toluol_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Toluol_node_c6))
                            && (candidate_Toluol_node_c6==candidate_Toluol_node_c3
                                || candidate_Toluol_node_c6==candidate_Toluol_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_Toluol_node_c6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_Toluol_node_c6 = candidate_Toluol_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_Toluol_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_Toluol_node_c6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Toluol_node_c6) ? 1U : 0U;
                            if(prev__candidate_Toluol_node_c6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Toluol_node_c6,candidate_Toluol_node_c6);
                        }
                        // Lookup Toluol_node_c4 
                        int type_id_candidate_Toluol_node_c4 = 1;
                        for(LGSPNode head_candidate_Toluol_node_c4 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c4], candidate_Toluol_node_c4 = head_candidate_Toluol_node_c4.typeNext; candidate_Toluol_node_c4 != head_candidate_Toluol_node_c4; candidate_Toluol_node_c4 = candidate_Toluol_node_c4.typeNext)
                        {
                            if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Toluol_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Toluol_node_c4))
                                && (candidate_Toluol_node_c4==candidate_Toluol_node_c3
                                    || candidate_Toluol_node_c4==candidate_Toluol_node_c5
                                    || candidate_Toluol_node_c4==candidate_Toluol_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            uint prev__candidate_Toluol_node_c4;
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                prev__candidate_Toluol_node_c4 = candidate_Toluol_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_Toluol_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            } else {
                                prev__candidate_Toluol_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Toluol_node_c4) ? 1U : 0U;
                                if(prev__candidate_Toluol_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Toluol_node_c4,candidate_Toluol_node_c4);
                            }
                            // Lookup Toluol_node_c2 
                            int type_id_candidate_Toluol_node_c2 = 1;
                            for(LGSPNode head_candidate_Toluol_node_c2 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c2], candidate_Toluol_node_c2 = head_candidate_Toluol_node_c2.typeNext; candidate_Toluol_node_c2 != head_candidate_Toluol_node_c2; candidate_Toluol_node_c2 = candidate_Toluol_node_c2.typeNext)
                            {
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Toluol_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Toluol_node_c2))
                                    && (candidate_Toluol_node_c2==candidate_Toluol_node_c3
                                        || candidate_Toluol_node_c2==candidate_Toluol_node_c5
                                        || candidate_Toluol_node_c2==candidate_Toluol_node_c6
                                        || candidate_Toluol_node_c2==candidate_Toluol_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_Toluol_node_c2;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_Toluol_node_c2 = candidate_Toluol_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_Toluol_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_Toluol_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_Toluol_node_c2) ? 1U : 0U;
                                    if(prev__candidate_Toluol_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_Toluol_node_c2,candidate_Toluol_node_c2);
                                }
                                // Lookup Toluol_node_c1 
                                int type_id_candidate_Toluol_node_c1 = 1;
                                for(LGSPNode head_candidate_Toluol_node_c1 = graph.nodesByTypeHeads[type_id_candidate_Toluol_node_c1], candidate_Toluol_node_c1 = head_candidate_Toluol_node_c1.typeNext; candidate_Toluol_node_c1 != head_candidate_Toluol_node_c1; candidate_Toluol_node_c1 = candidate_Toluol_node_c1.typeNext)
                                {
                                    if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_Toluol_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_Toluol_node_c1))
                                        && (candidate_Toluol_node_c1==candidate_Toluol_node_c3
                                            || candidate_Toluol_node_c1==candidate_Toluol_node_c5
                                            || candidate_Toluol_node_c1==candidate_Toluol_node_c6
                                            || candidate_Toluol_node_c1==candidate_Toluol_node_c4
                                            || candidate_Toluol_node_c1==candidate_Toluol_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    // Push subpattern matching task for _subpattern6
                                    PatternAction_Hydrogen taskFor__subpattern6 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern6.Hydrogen_node_anchor = candidate_Toluol_node_c6;
                                    openTasks.Push(taskFor__subpattern6);
                                    // Push subpattern matching task for _subpattern5
                                    PatternAction_Hydrogen taskFor__subpattern5 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern5.Hydrogen_node_anchor = candidate_Toluol_node_c5;
                                    openTasks.Push(taskFor__subpattern5);
                                    // Push subpattern matching task for _subpattern4
                                    PatternAction_Hydrogen taskFor__subpattern4 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern4.Hydrogen_node_anchor = candidate_Toluol_node_c4;
                                    openTasks.Push(taskFor__subpattern4);
                                    // Push subpattern matching task for _subpattern3
                                    PatternAction_Hydrogen taskFor__subpattern3 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern3.Hydrogen_node_anchor = candidate_Toluol_node_c3;
                                    openTasks.Push(taskFor__subpattern3);
                                    // Push subpattern matching task for _subpattern2
                                    PatternAction_Hydrogen taskFor__subpattern2 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                    taskFor__subpattern2.Hydrogen_node_anchor = candidate_Toluol_node_c2;
                                    openTasks.Push(taskFor__subpattern2);
                                    // Push subpattern matching task for _subpattern1
                                    PatternAction_Methyl taskFor__subpattern1 = PatternAction_Methyl.getNewTask(graph, openTasks);
                                    taskFor__subpattern1.Methyl_node_anchor = candidate_Toluol_node_c1;
                                    openTasks.Push(taskFor__subpattern1);
                                    // Push subpattern matching task for _subpattern0
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = PatternAction_BenzolRingC123456Exposed.getNewTask(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = candidate_Toluol_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = candidate_Toluol_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = candidate_Toluol_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = candidate_Toluol_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = candidate_Toluol_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = candidate_Toluol_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    uint prevGlobal__candidate_Toluol_node_c1;
                                    prevGlobal__candidate_Toluol_node_c1 = candidate_Toluol_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Toluol_node_c2;
                                    prevGlobal__candidate_Toluol_node_c2 = candidate_Toluol_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Toluol_node_c3;
                                    prevGlobal__candidate_Toluol_node_c3 = candidate_Toluol_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Toluol_node_c4;
                                    prevGlobal__candidate_Toluol_node_c4 = candidate_Toluol_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Toluol_node_c5;
                                    prevGlobal__candidate_Toluol_node_c5 = candidate_Toluol_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    uint prevGlobal__candidate_Toluol_node_c6;
                                    prevGlobal__candidate_Toluol_node_c6 = candidate_Toluol_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    candidate_Toluol_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                    // Match subpatterns 
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                    // Pop subpattern matching task for _subpattern0
                                    openTasks.Pop();
                                    PatternAction_BenzolRingC123456Exposed.releaseTask(taskFor__subpattern0);
                                    // Pop subpattern matching task for _subpattern1
                                    openTasks.Pop();
                                    PatternAction_Methyl.releaseTask(taskFor__subpattern1);
                                    // Pop subpattern matching task for _subpattern2
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern2);
                                    // Pop subpattern matching task for _subpattern3
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern3);
                                    // Pop subpattern matching task for _subpattern4
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern4);
                                    // Pop subpattern matching task for _subpattern5
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern5);
                                    // Pop subpattern matching task for _subpattern6
                                    openTasks.Pop();
                                    PatternAction_Hydrogen.releaseTask(taskFor__subpattern6);
                                    // Check whether subpatterns were found 
                                    if(matchesList.Count>0) {
                                        // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c1] = candidate_Toluol_node_c1;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c2] = candidate_Toluol_node_c2;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c3] = candidate_Toluol_node_c3;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c4] = candidate_Toluol_node_c4;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c5] = candidate_Toluol_node_c5;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c6] = candidate_Toluol_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern6] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        // if enough matches were found, we leave
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            candidate_Toluol_node_c6.flags = candidate_Toluol_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c6;
                                            candidate_Toluol_node_c5.flags = candidate_Toluol_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c5;
                                            candidate_Toluol_node_c4.flags = candidate_Toluol_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c4;
                                            candidate_Toluol_node_c3.flags = candidate_Toluol_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c3;
                                            candidate_Toluol_node_c2.flags = candidate_Toluol_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c2;
                                            candidate_Toluol_node_c1.flags = candidate_Toluol_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c1;
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Toluol_node_c2.flags = candidate_Toluol_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c2;
                                            } else { 
                                                if(prev__candidate_Toluol_node_c2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c2);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Toluol_node_c4.flags = candidate_Toluol_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c4;
                                            } else { 
                                                if(prev__candidate_Toluol_node_c4==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c4);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Toluol_node_c6.flags = candidate_Toluol_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c6;
                                            } else { 
                                                if(prev__candidate_Toluol_node_c6==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c6);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Toluol_node_c5.flags = candidate_Toluol_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c5;
                                            } else { 
                                                if(prev__candidate_Toluol_node_c5==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c5);
                                                }
                                            }
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_Toluol_node_c3.flags = candidate_Toluol_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c3;
                                            } else { 
                                                if(prev__candidate_Toluol_node_c3==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c3);
                                                }
                                            }
                                            return matches;
                                        }
                                        candidate_Toluol_node_c6.flags = candidate_Toluol_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c6;
                                        candidate_Toluol_node_c5.flags = candidate_Toluol_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c5;
                                        candidate_Toluol_node_c4.flags = candidate_Toluol_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c4;
                                        candidate_Toluol_node_c3.flags = candidate_Toluol_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c3;
                                        candidate_Toluol_node_c2.flags = candidate_Toluol_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c2;
                                        candidate_Toluol_node_c1.flags = candidate_Toluol_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c1;
                                        continue;
                                    }
                                    candidate_Toluol_node_c1.flags = candidate_Toluol_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c1;
                                    candidate_Toluol_node_c2.flags = candidate_Toluol_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c2;
                                    candidate_Toluol_node_c3.flags = candidate_Toluol_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c3;
                                    candidate_Toluol_node_c4.flags = candidate_Toluol_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c4;
                                    candidate_Toluol_node_c5.flags = candidate_Toluol_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c5;
                                    candidate_Toluol_node_c6.flags = candidate_Toluol_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_Toluol_node_c6;
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_Toluol_node_c2.flags = candidate_Toluol_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c2;
                                } else { 
                                    if(prev__candidate_Toluol_node_c2==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c2);
                                    }
                                }
                            }
                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                candidate_Toluol_node_c4.flags = candidate_Toluol_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c4;
                            } else { 
                                if(prev__candidate_Toluol_node_c4==0) {
                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c4);
                                }
                            }
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_Toluol_node_c6.flags = candidate_Toluol_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c6;
                        } else { 
                            if(prev__candidate_Toluol_node_c6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c6);
                            }
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_Toluol_node_c5.flags = candidate_Toluol_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c5;
                    } else { 
                        if(prev__candidate_Toluol_node_c5==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c5);
                        }
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_Toluol_node_c3.flags = candidate_Toluol_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_Toluol_node_c3;
                } else { 
                    if(prev__candidate_Toluol_node_c3==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_Toluol_node_c3);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_TNT : LGSPAction
    {
        public Action_TNT() {
            rulePattern = Rule_TNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 9, 0, 6 + 0);
        }

        public override string Name { get { return "TNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNT instance = new Action_TNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup TNT_edge__edge0 
            int type_id_candidate_TNT_edge__edge0 = 1;
            for(LGSPEdge head_candidate_TNT_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_TNT_edge__edge0], candidate_TNT_edge__edge0 = head_candidate_TNT_edge__edge0.typeNext; candidate_TNT_edge__edge0 != head_candidate_TNT_edge__edge0; candidate_TNT_edge__edge0 = candidate_TNT_edge__edge0.typeNext)
            {
                uint prev__candidate_TNT_edge__edge0;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNT_edge__edge0 = candidate_TNT_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNT_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNT_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge0) ? 1U : 0U;
                    if(prev__candidate_TNT_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge0,candidate_TNT_edge__edge0);
                }
                // Implicit Source TNT_node_c1 from TNT_edge__edge0 
                LGSPNode candidate_TNT_node_c1 = candidate_TNT_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_TNT_node_c1.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge0;
                    } else { 
                        if(prev__candidate_TNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_TNT_node_c1;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNT_node_c1 = candidate_TNT_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNT_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNT_node_c1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNT_node_c1) ? 1U : 0U;
                    if(prev__candidate_TNT_node_c1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNT_node_c1,candidate_TNT_node_c1);
                }
                // Implicit Target TNT_node_c2 from TNT_edge__edge0 
                LGSPNode candidate_TNT_node_c2 = candidate_TNT_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_TNT_node_c2.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c1;
                    } else { 
                        if(prev__candidate_TNT_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge0;
                    } else { 
                        if(prev__candidate_TNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge0);
                        }
                    }
                    continue;
                }
                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNT_node_c2))
                    && candidate_TNT_node_c2==candidate_TNT_node_c1
                    )
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c1;
                    } else { 
                        if(prev__candidate_TNT_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge0;
                    } else { 
                        if(prev__candidate_TNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_TNT_node_c2;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNT_node_c2 = candidate_TNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNT_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNT_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNT_node_c2) ? 1U : 0U;
                    if(prev__candidate_TNT_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNT_node_c2,candidate_TNT_node_c2);
                }
                // Extend Outgoing TNT_edge__edge6 from TNT_node_c1 
                LGSPEdge head_candidate_TNT_edge__edge6 = candidate_TNT_node_c1.outhead;
                if(head_candidate_TNT_edge__edge6 != null)
                {
                    LGSPEdge candidate_TNT_edge__edge6 = head_candidate_TNT_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_TNT_edge__edge6.target != candidate_TNT_node_c2) {
                            continue;
                        }
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge6))
                            && candidate_TNT_edge__edge6==candidate_TNT_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNT_edge__edge6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_TNT_edge__edge6 = candidate_TNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_TNT_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_TNT_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge6) ? 1U : 0U;
                            if(prev__candidate_TNT_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge6,candidate_TNT_edge__edge6);
                        }
                        // Extend Outgoing TNT_edge__edge1 from TNT_node_c2 
                        LGSPEdge head_candidate_TNT_edge__edge1 = candidate_TNT_node_c2.outhead;
                        if(head_candidate_TNT_edge__edge1 != null)
                        {
                            LGSPEdge candidate_TNT_edge__edge1 = head_candidate_TNT_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge1))
                                    && (candidate_TNT_edge__edge1==candidate_TNT_edge__edge0
                                        || candidate_TNT_edge__edge1==candidate_TNT_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNT_edge__edge1;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNT_edge__edge1 = candidate_TNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNT_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNT_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge1) ? 1U : 0U;
                                    if(prev__candidate_TNT_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge1,candidate_TNT_edge__edge1);
                                }
                                // Implicit Target TNT_node_c3 from TNT_edge__edge1 
                                LGSPNode candidate_TNT_node_c3 = candidate_TNT_edge__edge1.target;
                                if(!NodeType_C.isMyType[candidate_TNT_node_c3.type.TypeID]) {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge1;
                                    } else { 
                                        if(prev__candidate_TNT_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNT_node_c3))
                                    && (candidate_TNT_node_c3==candidate_TNT_node_c1
                                        || candidate_TNT_node_c3==candidate_TNT_node_c2
                                        )
                                    )
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge1;
                                    } else { 
                                        if(prev__candidate_TNT_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                uint prev__candidate_TNT_node_c3;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNT_node_c3 = candidate_TNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNT_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNT_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNT_node_c3) ? 1U : 0U;
                                    if(prev__candidate_TNT_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNT_node_c3,candidate_TNT_node_c3);
                                }
                                // Extend Outgoing TNT_edge__edge2 from TNT_node_c3 
                                LGSPEdge head_candidate_TNT_edge__edge2 = candidate_TNT_node_c3.outhead;
                                if(head_candidate_TNT_edge__edge2 != null)
                                {
                                    LGSPEdge candidate_TNT_edge__edge2 = head_candidate_TNT_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge2))
                                            && (candidate_TNT_edge__edge2==candidate_TNT_edge__edge0
                                                || candidate_TNT_edge__edge2==candidate_TNT_edge__edge6
                                                || candidate_TNT_edge__edge2==candidate_TNT_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_TNT_edge__edge2;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_TNT_edge__edge2 = candidate_TNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_TNT_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_TNT_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge2) ? 1U : 0U;
                                            if(prev__candidate_TNT_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge2,candidate_TNT_edge__edge2);
                                        }
                                        // Implicit Target TNT_node_c4 from TNT_edge__edge2 
                                        LGSPNode candidate_TNT_node_c4 = candidate_TNT_edge__edge2.target;
                                        if(!NodeType_C.isMyType[candidate_TNT_node_c4.type.TypeID]) {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge2;
                                            } else { 
                                                if(prev__candidate_TNT_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNT_node_c4))
                                            && (candidate_TNT_node_c4==candidate_TNT_node_c1
                                                || candidate_TNT_node_c4==candidate_TNT_node_c2
                                                || candidate_TNT_node_c4==candidate_TNT_node_c3
                                                )
                                            )
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge2;
                                            } else { 
                                                if(prev__candidate_TNT_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        uint prev__candidate_TNT_node_c4;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_TNT_node_c4 = candidate_TNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_TNT_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_TNT_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNT_node_c4) ? 1U : 0U;
                                            if(prev__candidate_TNT_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNT_node_c4,candidate_TNT_node_c4);
                                        }
                                        // Extend Outgoing TNT_edge__edge7 from TNT_node_c3 
                                        LGSPEdge head_candidate_TNT_edge__edge7 = candidate_TNT_node_c3.outhead;
                                        if(head_candidate_TNT_edge__edge7 != null)
                                        {
                                            LGSPEdge candidate_TNT_edge__edge7 = head_candidate_TNT_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(candidate_TNT_edge__edge7.target != candidate_TNT_node_c4) {
                                                    continue;
                                                }
                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge7))
                                                    && (candidate_TNT_edge__edge7==candidate_TNT_edge__edge0
                                                        || candidate_TNT_edge__edge7==candidate_TNT_edge__edge6
                                                        || candidate_TNT_edge__edge7==candidate_TNT_edge__edge1
                                                        || candidate_TNT_edge__edge7==candidate_TNT_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_TNT_edge__edge7;
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    prev__candidate_TNT_edge__edge7 = candidate_TNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    candidate_TNT_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                } else {
                                                    prev__candidate_TNT_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge7) ? 1U : 0U;
                                                    if(prev__candidate_TNT_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge7,candidate_TNT_edge__edge7);
                                                }
                                                // Extend Outgoing TNT_edge__edge3 from TNT_node_c4 
                                                LGSPEdge head_candidate_TNT_edge__edge3 = candidate_TNT_node_c4.outhead;
                                                if(head_candidate_TNT_edge__edge3 != null)
                                                {
                                                    LGSPEdge candidate_TNT_edge__edge3 = head_candidate_TNT_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge3))
                                                            && (candidate_TNT_edge__edge3==candidate_TNT_edge__edge0
                                                                || candidate_TNT_edge__edge3==candidate_TNT_edge__edge6
                                                                || candidate_TNT_edge__edge3==candidate_TNT_edge__edge1
                                                                || candidate_TNT_edge__edge3==candidate_TNT_edge__edge2
                                                                || candidate_TNT_edge__edge3==candidate_TNT_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNT_edge__edge3;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_TNT_edge__edge3 = candidate_TNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_TNT_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_TNT_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge3) ? 1U : 0U;
                                                            if(prev__candidate_TNT_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge3,candidate_TNT_edge__edge3);
                                                        }
                                                        // Implicit Target TNT_node_c5 from TNT_edge__edge3 
                                                        LGSPNode candidate_TNT_node_c5 = candidate_TNT_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[candidate_TNT_node_c5.type.TypeID]) {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_TNT_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNT_node_c5))
                                                            && (candidate_TNT_node_c5==candidate_TNT_node_c1
                                                                || candidate_TNT_node_c5==candidate_TNT_node_c2
                                                                || candidate_TNT_node_c5==candidate_TNT_node_c3
                                                                || candidate_TNT_node_c5==candidate_TNT_node_c4
                                                                )
                                                            )
                                                        {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_TNT_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNT_node_c5;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_TNT_node_c5 = candidate_TNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_TNT_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_TNT_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNT_node_c5) ? 1U : 0U;
                                                            if(prev__candidate_TNT_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNT_node_c5,candidate_TNT_node_c5);
                                                        }
                                                        // Extend Outgoing TNT_edge__edge4 from TNT_node_c5 
                                                        LGSPEdge head_candidate_TNT_edge__edge4 = candidate_TNT_node_c5.outhead;
                                                        if(head_candidate_TNT_edge__edge4 != null)
                                                        {
                                                            LGSPEdge candidate_TNT_edge__edge4 = head_candidate_TNT_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge4))
                                                                    && (candidate_TNT_edge__edge4==candidate_TNT_edge__edge0
                                                                        || candidate_TNT_edge__edge4==candidate_TNT_edge__edge6
                                                                        || candidate_TNT_edge__edge4==candidate_TNT_edge__edge1
                                                                        || candidate_TNT_edge__edge4==candidate_TNT_edge__edge2
                                                                        || candidate_TNT_edge__edge4==candidate_TNT_edge__edge7
                                                                        || candidate_TNT_edge__edge4==candidate_TNT_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_TNT_edge__edge4;
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    prev__candidate_TNT_edge__edge4 = candidate_TNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    candidate_TNT_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                } else {
                                                                    prev__candidate_TNT_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge4) ? 1U : 0U;
                                                                    if(prev__candidate_TNT_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge4,candidate_TNT_edge__edge4);
                                                                }
                                                                // Implicit Target TNT_node_c6 from TNT_edge__edge4 
                                                                LGSPNode candidate_TNT_node_c6 = candidate_TNT_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[candidate_TNT_node_c6.type.TypeID]) {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_TNT_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNT_node_c6))
                                                                    && (candidate_TNT_node_c6==candidate_TNT_node_c1
                                                                        || candidate_TNT_node_c6==candidate_TNT_node_c2
                                                                        || candidate_TNT_node_c6==candidate_TNT_node_c3
                                                                        || candidate_TNT_node_c6==candidate_TNT_node_c4
                                                                        || candidate_TNT_node_c6==candidate_TNT_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_TNT_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                // Extend Outgoing TNT_edge__edge8 from TNT_node_c5 
                                                                LGSPEdge head_candidate_TNT_edge__edge8 = candidate_TNT_node_c5.outhead;
                                                                if(head_candidate_TNT_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge candidate_TNT_edge__edge8 = head_candidate_TNT_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(candidate_TNT_edge__edge8.target != candidate_TNT_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge8))
                                                                            && (candidate_TNT_edge__edge8==candidate_TNT_edge__edge0
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge6
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge1
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge2
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge7
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge3
                                                                                || candidate_TNT_edge__edge8==candidate_TNT_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNT_edge__edge8;
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            prev__candidate_TNT_edge__edge8 = candidate_TNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            candidate_TNT_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        } else {
                                                                            prev__candidate_TNT_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNT_edge__edge8) ? 1U : 0U;
                                                                            if(prev__candidate_TNT_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNT_edge__edge8,candidate_TNT_edge__edge8);
                                                                        }
                                                                        // Extend Outgoing TNT_edge__edge5 from TNT_node_c6 
                                                                        LGSPEdge head_candidate_TNT_edge__edge5 = candidate_TNT_node_c6.outhead;
                                                                        if(head_candidate_TNT_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge candidate_TNT_edge__edge5 = head_candidate_TNT_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_TNT_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(candidate_TNT_edge__edge5.target != candidate_TNT_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNT_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNT_edge__edge5))
                                                                                    && (candidate_TNT_edge__edge5==candidate_TNT_edge__edge0
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge6
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge1
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge2
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge7
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge3
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge4
                                                                                        || candidate_TNT_edge__edge5==candidate_TNT_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                // Push subpattern matching task for _subpattern5
                                                                                PatternAction_Nitro taskFor__subpattern5 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern5.Nitro_node_anchor = candidate_TNT_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                // Push subpattern matching task for _subpattern4
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = candidate_TNT_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                // Push subpattern matching task for _subpattern3
                                                                                PatternAction_Nitro taskFor__subpattern3 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = candidate_TNT_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                // Push subpattern matching task for _subpattern2
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = candidate_TNT_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                // Push subpattern matching task for _subpattern1
                                                                                PatternAction_Nitro taskFor__subpattern1 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = candidate_TNT_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                // Push subpattern matching task for _subpattern0
                                                                                PatternAction_Methyl taskFor__subpattern0 = PatternAction_Methyl.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern0.Methyl_node_anchor = candidate_TNT_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                uint prevGlobal__candidate_TNT_node_c1;
                                                                                prevGlobal__candidate_TNT_node_c1 = candidate_TNT_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_node_c2;
                                                                                prevGlobal__candidate_TNT_node_c2 = candidate_TNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_node_c3;
                                                                                prevGlobal__candidate_TNT_node_c3 = candidate_TNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_node_c4;
                                                                                prevGlobal__candidate_TNT_node_c4 = candidate_TNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_node_c5;
                                                                                prevGlobal__candidate_TNT_node_c5 = candidate_TNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_node_c6;
                                                                                prevGlobal__candidate_TNT_node_c6 = candidate_TNT_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge0;
                                                                                prevGlobal__candidate_TNT_edge__edge0 = candidate_TNT_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge1;
                                                                                prevGlobal__candidate_TNT_edge__edge1 = candidate_TNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge2;
                                                                                prevGlobal__candidate_TNT_edge__edge2 = candidate_TNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge3;
                                                                                prevGlobal__candidate_TNT_edge__edge3 = candidate_TNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge4;
                                                                                prevGlobal__candidate_TNT_edge__edge4 = candidate_TNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge5;
                                                                                prevGlobal__candidate_TNT_edge__edge5 = candidate_TNT_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge6;
                                                                                prevGlobal__candidate_TNT_edge__edge6 = candidate_TNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge7;
                                                                                prevGlobal__candidate_TNT_edge__edge7 = candidate_TNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNT_edge__edge8;
                                                                                prevGlobal__candidate_TNT_edge__edge8 = candidate_TNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNT_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                // Match subpatterns 
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                // Pop subpattern matching task for _subpattern0
                                                                                openTasks.Pop();
                                                                                PatternAction_Methyl.releaseTask(taskFor__subpattern0);
                                                                                // Pop subpattern matching task for _subpattern1
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern1);
                                                                                // Pop subpattern matching task for _subpattern2
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern2);
                                                                                // Pop subpattern matching task for _subpattern3
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern3);
                                                                                // Pop subpattern matching task for _subpattern4
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern4);
                                                                                // Pop subpattern matching task for _subpattern5
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern5);
                                                                                // Check whether subpatterns were found 
                                                                                if(matchesList.Count>0) {
                                                                                    // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c1] = candidate_TNT_node_c1;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c2] = candidate_TNT_node_c2;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c3] = candidate_TNT_node_c3;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c4] = candidate_TNT_node_c4;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c5] = candidate_TNT_node_c5;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c6] = candidate_TNT_node_c6;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge0] = candidate_TNT_edge__edge0;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge1] = candidate_TNT_edge__edge1;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge2] = candidate_TNT_edge__edge2;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge3] = candidate_TNT_edge__edge3;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge4] = candidate_TNT_edge__edge4;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge5] = candidate_TNT_edge__edge5;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge6] = candidate_TNT_edge__edge6;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge7] = candidate_TNT_edge__edge7;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge8] = candidate_TNT_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    // if enough matches were found, we leave
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        candidate_TNT_edge__edge8.flags = candidate_TNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge8;
                                                                                        candidate_TNT_edge__edge7.flags = candidate_TNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge7;
                                                                                        candidate_TNT_edge__edge6.flags = candidate_TNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge6;
                                                                                        candidate_TNT_edge__edge5.flags = candidate_TNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge5;
                                                                                        candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge4;
                                                                                        candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge3;
                                                                                        candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge2;
                                                                                        candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge1;
                                                                                        candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge0;
                                                                                        candidate_TNT_node_c6.flags = candidate_TNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c6;
                                                                                        candidate_TNT_node_c5.flags = candidate_TNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c5;
                                                                                        candidate_TNT_node_c4.flags = candidate_TNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c4;
                                                                                        candidate_TNT_node_c3.flags = candidate_TNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c3;
                                                                                        candidate_TNT_node_c2.flags = candidate_TNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c2;
                                                                                        candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c1;
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge8.flags = candidate_TNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge8;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge8==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge8);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge4;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_node_c5.flags = candidate_TNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c5;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_node_c5==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c5);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge3;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge7.flags = candidate_TNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge7;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge7==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge7);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_node_c4.flags = candidate_TNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c4;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_node_c4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge2;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_node_c3.flags = candidate_TNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c3;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_node_c3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge1;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge6.flags = candidate_TNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge6;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge6==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge6);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_node_c2.flags = candidate_TNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c2;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_node_c2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c1;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_node_c1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge0;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNT_edge__edge0==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge0);
                                                                                            }
                                                                                        }
                                                                                        return matches;
                                                                                    }
                                                                                    candidate_TNT_edge__edge8.flags = candidate_TNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge8;
                                                                                    candidate_TNT_edge__edge7.flags = candidate_TNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge7;
                                                                                    candidate_TNT_edge__edge6.flags = candidate_TNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge6;
                                                                                    candidate_TNT_edge__edge5.flags = candidate_TNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge5;
                                                                                    candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge4;
                                                                                    candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge3;
                                                                                    candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge2;
                                                                                    candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge1;
                                                                                    candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge0;
                                                                                    candidate_TNT_node_c6.flags = candidate_TNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c6;
                                                                                    candidate_TNT_node_c5.flags = candidate_TNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c5;
                                                                                    candidate_TNT_node_c4.flags = candidate_TNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c4;
                                                                                    candidate_TNT_node_c3.flags = candidate_TNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c3;
                                                                                    candidate_TNT_node_c2.flags = candidate_TNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c2;
                                                                                    candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c1;
                                                                                    continue;
                                                                                }
                                                                                candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c1;
                                                                                candidate_TNT_node_c2.flags = candidate_TNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c2;
                                                                                candidate_TNT_node_c3.flags = candidate_TNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c3;
                                                                                candidate_TNT_node_c4.flags = candidate_TNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c4;
                                                                                candidate_TNT_node_c5.flags = candidate_TNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c5;
                                                                                candidate_TNT_node_c6.flags = candidate_TNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_node_c6;
                                                                                candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge0;
                                                                                candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge1;
                                                                                candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge2;
                                                                                candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge3;
                                                                                candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge4;
                                                                                candidate_TNT_edge__edge5.flags = candidate_TNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge5;
                                                                                candidate_TNT_edge__edge6.flags = candidate_TNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge6;
                                                                                candidate_TNT_edge__edge7.flags = candidate_TNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge7;
                                                                                candidate_TNT_edge__edge8.flags = candidate_TNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNT_edge__edge8;
                                                                            }
                                                                            while( (candidate_TNT_edge__edge5 = candidate_TNT_edge__edge5.outNext) != head_candidate_TNT_edge__edge5 );
                                                                        }
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_TNT_edge__edge8.flags = candidate_TNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge8;
                                                                        } else { 
                                                                            if(prev__candidate_TNT_edge__edge8==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge8);
                                                                            }
                                                                        }
                                                                    }
                                                                    while( (candidate_TNT_edge__edge8 = candidate_TNT_edge__edge8.outNext) != head_candidate_TNT_edge__edge8 );
                                                                }
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_TNT_edge__edge4.flags = candidate_TNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge4;
                                                                } else { 
                                                                    if(prev__candidate_TNT_edge__edge4==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge4);
                                                                    }
                                                                }
                                                            }
                                                            while( (candidate_TNT_edge__edge4 = candidate_TNT_edge__edge4.outNext) != head_candidate_TNT_edge__edge4 );
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_TNT_node_c5.flags = candidate_TNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c5;
                                                        } else { 
                                                            if(prev__candidate_TNT_node_c5==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c5);
                                                            }
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_TNT_edge__edge3.flags = candidate_TNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge3;
                                                        } else { 
                                                            if(prev__candidate_TNT_edge__edge3==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge3);
                                                            }
                                                        }
                                                    }
                                                    while( (candidate_TNT_edge__edge3 = candidate_TNT_edge__edge3.outNext) != head_candidate_TNT_edge__edge3 );
                                                }
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_TNT_edge__edge7.flags = candidate_TNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge7;
                                                } else { 
                                                    if(prev__candidate_TNT_edge__edge7==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge7);
                                                    }
                                                }
                                            }
                                            while( (candidate_TNT_edge__edge7 = candidate_TNT_edge__edge7.outNext) != head_candidate_TNT_edge__edge7 );
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_TNT_node_c4.flags = candidate_TNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c4;
                                        } else { 
                                            if(prev__candidate_TNT_node_c4==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c4);
                                            }
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_TNT_edge__edge2.flags = candidate_TNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge2;
                                        } else { 
                                            if(prev__candidate_TNT_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge2);
                                            }
                                        }
                                    }
                                    while( (candidate_TNT_edge__edge2 = candidate_TNT_edge__edge2.outNext) != head_candidate_TNT_edge__edge2 );
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNT_node_c3.flags = candidate_TNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c3;
                                } else { 
                                    if(prev__candidate_TNT_node_c3==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c3);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNT_edge__edge1.flags = candidate_TNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge1;
                                } else { 
                                    if(prev__candidate_TNT_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge1);
                                    }
                                }
                            }
                            while( (candidate_TNT_edge__edge1 = candidate_TNT_edge__edge1.outNext) != head_candidate_TNT_edge__edge1 );
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_TNT_edge__edge6.flags = candidate_TNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge6;
                        } else { 
                            if(prev__candidate_TNT_edge__edge6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge6);
                            }
                        }
                    }
                    while( (candidate_TNT_edge__edge6 = candidate_TNT_edge__edge6.outNext) != head_candidate_TNT_edge__edge6 );
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNT_node_c2.flags = candidate_TNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c2;
                } else { 
                    if(prev__candidate_TNT_node_c2==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c2);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNT_node_c1.flags = candidate_TNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_node_c1;
                } else { 
                    if(prev__candidate_TNT_node_c1==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNT_node_c1);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNT_edge__edge0.flags = candidate_TNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNT_edge__edge0;
                } else { 
                    if(prev__candidate_TNT_edge__edge0==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNT_edge__edge0);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_TNTUnfolded : LGSPAction
    {
        public Action_TNTUnfolded() {
            rulePattern = Rule_TNTUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 21, 24, 0, 0 + 0);
        }

        public override string Name { get { return "TNTUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTUnfolded instance = new Action_TNTUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            // Lookup TNTUnfolded_edge__edge0 
            int type_id_candidate_TNTUnfolded_edge__edge0 = 1;
            for(LGSPEdge head_candidate_TNTUnfolded_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_TNTUnfolded_edge__edge0], candidate_TNTUnfolded_edge__edge0 = head_candidate_TNTUnfolded_edge__edge0.typeNext; candidate_TNTUnfolded_edge__edge0 != head_candidate_TNTUnfolded_edge__edge0; candidate_TNTUnfolded_edge__edge0 = candidate_TNTUnfolded_edge__edge0.typeNext)
            {
                uint prev__candidate_TNTUnfolded_edge__edge0;
                prev__candidate_TNTUnfolded_edge__edge0 = candidate_TNTUnfolded_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNTUnfolded_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Source TNTUnfolded_node_c1 from TNTUnfolded_edge__edge0 
                LGSPNode candidate_TNTUnfolded_node_c1 = candidate_TNTUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c1.type.TypeID]) {
                    candidate_TNTUnfolded_edge__edge0.flags = candidate_TNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_TNTUnfolded_node_c1;
                prev__candidate_TNTUnfolded_node_c1 = candidate_TNTUnfolded_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNTUnfolded_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Target TNTUnfolded_node_c2 from TNTUnfolded_edge__edge0 
                LGSPNode candidate_TNTUnfolded_node_c2 = candidate_TNTUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c2.type.TypeID]) {
                    candidate_TNTUnfolded_node_c1.flags = candidate_TNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c1;
                    candidate_TNTUnfolded_edge__edge0.flags = candidate_TNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge0;
                    continue;
                }
                if((candidate_TNTUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                    && candidate_TNTUnfolded_node_c2==candidate_TNTUnfolded_node_c1
                    )
                {
                    candidate_TNTUnfolded_node_c1.flags = candidate_TNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c1;
                    candidate_TNTUnfolded_edge__edge0.flags = candidate_TNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_TNTUnfolded_node_c2;
                prev__candidate_TNTUnfolded_node_c2 = candidate_TNTUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNTUnfolded_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Extend Outgoing TNTUnfolded_edge__edge6 from TNTUnfolded_node_c1 
                LGSPEdge head_candidate_TNTUnfolded_edge__edge6 = candidate_TNTUnfolded_node_c1.outhead;
                if(head_candidate_TNTUnfolded_edge__edge6 != null)
                {
                    LGSPEdge candidate_TNTUnfolded_edge__edge6 = head_candidate_TNTUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_TNTUnfolded_edge__edge6.target != candidate_TNTUnfolded_node_c2) {
                            continue;
                        }
                        if((candidate_TNTUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                            && candidate_TNTUnfolded_edge__edge6==candidate_TNTUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNTUnfolded_edge__edge6;
                        prev__candidate_TNTUnfolded_edge__edge6 = candidate_TNTUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_TNTUnfolded_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        // Extend Outgoing TNTUnfolded_edge__edge9 from TNTUnfolded_node_c1 
                        LGSPEdge head_candidate_TNTUnfolded_edge__edge9 = candidate_TNTUnfolded_node_c1.outhead;
                        if(head_candidate_TNTUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge candidate_TNTUnfolded_edge__edge9 = head_candidate_TNTUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if((candidate_TNTUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                    && (candidate_TNTUnfolded_edge__edge9==candidate_TNTUnfolded_edge__edge0
                                        || candidate_TNTUnfolded_edge__edge9==candidate_TNTUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNTUnfolded_edge__edge9;
                                prev__candidate_TNTUnfolded_edge__edge9 = candidate_TNTUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNTUnfolded_edge__edge9.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Implicit Target TNTUnfolded_node_c from TNTUnfolded_edge__edge9 
                                LGSPNode candidate_TNTUnfolded_node_c = candidate_TNTUnfolded_edge__edge9.target;
                                if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c.type.TypeID]) {
                                    candidate_TNTUnfolded_edge__edge9.flags = candidate_TNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge9;
                                    continue;
                                }
                                if((candidate_TNTUnfolded_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                    && (candidate_TNTUnfolded_node_c==candidate_TNTUnfolded_node_c1
                                        || candidate_TNTUnfolded_node_c==candidate_TNTUnfolded_node_c2
                                        )
                                    )
                                {
                                    candidate_TNTUnfolded_edge__edge9.flags = candidate_TNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge9;
                                    continue;
                                }
                                uint prev__candidate_TNTUnfolded_node_c;
                                prev__candidate_TNTUnfolded_node_c = candidate_TNTUnfolded_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNTUnfolded_node_c.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Extend Outgoing TNTUnfolded_edge__edge1 from TNTUnfolded_node_c2 
                                LGSPEdge head_candidate_TNTUnfolded_edge__edge1 = candidate_TNTUnfolded_node_c2.outhead;
                                if(head_candidate_TNTUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge candidate_TNTUnfolded_edge__edge1 = head_candidate_TNTUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if((candidate_TNTUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_TNTUnfolded_edge__edge1==candidate_TNTUnfolded_edge__edge0
                                                || candidate_TNTUnfolded_edge__edge1==candidate_TNTUnfolded_edge__edge6
                                                || candidate_TNTUnfolded_edge__edge1==candidate_TNTUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_TNTUnfolded_edge__edge1;
                                        prev__candidate_TNTUnfolded_edge__edge1 = candidate_TNTUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_TNTUnfolded_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Implicit Target TNTUnfolded_node_c3 from TNTUnfolded_edge__edge1 
                                        LGSPNode candidate_TNTUnfolded_node_c3 = candidate_TNTUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c3.type.TypeID]) {
                                            candidate_TNTUnfolded_edge__edge1.flags = candidate_TNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge1;
                                            continue;
                                        }
                                        if((candidate_TNTUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_TNTUnfolded_node_c3==candidate_TNTUnfolded_node_c1
                                                || candidate_TNTUnfolded_node_c3==candidate_TNTUnfolded_node_c2
                                                || candidate_TNTUnfolded_node_c3==candidate_TNTUnfolded_node_c
                                                )
                                            )
                                        {
                                            candidate_TNTUnfolded_edge__edge1.flags = candidate_TNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge1;
                                            continue;
                                        }
                                        uint prev__candidate_TNTUnfolded_node_c3;
                                        prev__candidate_TNTUnfolded_node_c3 = candidate_TNTUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_TNTUnfolded_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Extend Outgoing TNTUnfolded_edge__edge13 from TNTUnfolded_node_c2 
                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge13 = candidate_TNTUnfolded_node_c2.outhead;
                                        if(head_candidate_TNTUnfolded_edge__edge13 != null)
                                        {
                                            LGSPEdge candidate_TNTUnfolded_edge__edge13 = head_candidate_TNTUnfolded_edge__edge13;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge13.type.TypeID]) {
                                                    continue;
                                                }
                                                if((candidate_TNTUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                    && (candidate_TNTUnfolded_edge__edge13==candidate_TNTUnfolded_edge__edge0
                                                        || candidate_TNTUnfolded_edge__edge13==candidate_TNTUnfolded_edge__edge6
                                                        || candidate_TNTUnfolded_edge__edge13==candidate_TNTUnfolded_edge__edge9
                                                        || candidate_TNTUnfolded_edge__edge13==candidate_TNTUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_TNTUnfolded_edge__edge13;
                                                prev__candidate_TNTUnfolded_edge__edge13 = candidate_TNTUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_TNTUnfolded_edge__edge13.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Implicit Target TNTUnfolded_node_n2 from TNTUnfolded_edge__edge13 
                                                LGSPNode candidate_TNTUnfolded_node_n2 = candidate_TNTUnfolded_edge__edge13.target;
                                                if(!NodeType_N.isMyType[candidate_TNTUnfolded_node_n2.type.TypeID]) {
                                                    candidate_TNTUnfolded_edge__edge13.flags = candidate_TNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge13;
                                                    continue;
                                                }
                                                uint prev__candidate_TNTUnfolded_node_n2;
                                                prev__candidate_TNTUnfolded_node_n2 = candidate_TNTUnfolded_node_n2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_TNTUnfolded_node_n2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Extend Outgoing TNTUnfolded_edge__edge10 from TNTUnfolded_node_c 
                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge10 = candidate_TNTUnfolded_node_c.outhead;
                                                if(head_candidate_TNTUnfolded_edge__edge10 != null)
                                                {
                                                    LGSPEdge candidate_TNTUnfolded_edge__edge10 = head_candidate_TNTUnfolded_edge__edge10;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge10.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((candidate_TNTUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                            && (candidate_TNTUnfolded_edge__edge10==candidate_TNTUnfolded_edge__edge0
                                                                || candidate_TNTUnfolded_edge__edge10==candidate_TNTUnfolded_edge__edge6
                                                                || candidate_TNTUnfolded_edge__edge10==candidate_TNTUnfolded_edge__edge9
                                                                || candidate_TNTUnfolded_edge__edge10==candidate_TNTUnfolded_edge__edge1
                                                                || candidate_TNTUnfolded_edge__edge10==candidate_TNTUnfolded_edge__edge13
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNTUnfolded_edge__edge10;
                                                        prev__candidate_TNTUnfolded_edge__edge10 = candidate_TNTUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_TNTUnfolded_edge__edge10.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Implicit Target TNTUnfolded_node__node0 from TNTUnfolded_edge__edge10 
                                                        LGSPNode candidate_TNTUnfolded_node__node0 = candidate_TNTUnfolded_edge__edge10.target;
                                                        if(!NodeType_H.isMyType[candidate_TNTUnfolded_node__node0.type.TypeID]) {
                                                            candidate_TNTUnfolded_edge__edge10.flags = candidate_TNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge10;
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNTUnfolded_node__node0;
                                                        prev__candidate_TNTUnfolded_node__node0 = candidate_TNTUnfolded_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_TNTUnfolded_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Extend Outgoing TNTUnfolded_edge__edge11 from TNTUnfolded_node_c 
                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge11 = candidate_TNTUnfolded_node_c.outhead;
                                                        if(head_candidate_TNTUnfolded_edge__edge11 != null)
                                                        {
                                                            LGSPEdge candidate_TNTUnfolded_edge__edge11 = head_candidate_TNTUnfolded_edge__edge11;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge11.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((candidate_TNTUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                    && (candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge0
                                                                        || candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge6
                                                                        || candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge9
                                                                        || candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge1
                                                                        || candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge13
                                                                        || candidate_TNTUnfolded_edge__edge11==candidate_TNTUnfolded_edge__edge10
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_TNTUnfolded_edge__edge11;
                                                                prev__candidate_TNTUnfolded_edge__edge11 = candidate_TNTUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_TNTUnfolded_edge__edge11.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                // Implicit Target TNTUnfolded_node__node1 from TNTUnfolded_edge__edge11 
                                                                LGSPNode candidate_TNTUnfolded_node__node1 = candidate_TNTUnfolded_edge__edge11.target;
                                                                if(!NodeType_H.isMyType[candidate_TNTUnfolded_node__node1.type.TypeID]) {
                                                                    candidate_TNTUnfolded_edge__edge11.flags = candidate_TNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge11;
                                                                    continue;
                                                                }
                                                                if((candidate_TNTUnfolded_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                    && candidate_TNTUnfolded_node__node1==candidate_TNTUnfolded_node__node0
                                                                    )
                                                                {
                                                                    candidate_TNTUnfolded_edge__edge11.flags = candidate_TNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge11;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_TNTUnfolded_node__node1;
                                                                prev__candidate_TNTUnfolded_node__node1 = candidate_TNTUnfolded_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_TNTUnfolded_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                // Extend Outgoing TNTUnfolded_edge__edge12 from TNTUnfolded_node_c 
                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge12 = candidate_TNTUnfolded_node_c.outhead;
                                                                if(head_candidate_TNTUnfolded_edge__edge12 != null)
                                                                {
                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge12 = head_candidate_TNTUnfolded_edge__edge12;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge12.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_TNTUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && (candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge0
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge6
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge9
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge1
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge13
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge10
                                                                                || candidate_TNTUnfolded_edge__edge12==candidate_TNTUnfolded_edge__edge11
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNTUnfolded_edge__edge12;
                                                                        prev__candidate_TNTUnfolded_edge__edge12 = candidate_TNTUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_TNTUnfolded_edge__edge12.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Implicit Target TNTUnfolded_node__node2 from TNTUnfolded_edge__edge12 
                                                                        LGSPNode candidate_TNTUnfolded_node__node2 = candidate_TNTUnfolded_edge__edge12.target;
                                                                        if(!NodeType_H.isMyType[candidate_TNTUnfolded_node__node2.type.TypeID]) {
                                                                            candidate_TNTUnfolded_edge__edge12.flags = candidate_TNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge12;
                                                                            continue;
                                                                        }
                                                                        if((candidate_TNTUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && (candidate_TNTUnfolded_node__node2==candidate_TNTUnfolded_node__node0
                                                                                || candidate_TNTUnfolded_node__node2==candidate_TNTUnfolded_node__node1
                                                                                )
                                                                            )
                                                                        {
                                                                            candidate_TNTUnfolded_edge__edge12.flags = candidate_TNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge12;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNTUnfolded_node__node2;
                                                                        prev__candidate_TNTUnfolded_node__node2 = candidate_TNTUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_TNTUnfolded_node__node2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Extend Outgoing TNTUnfolded_edge__edge2 from TNTUnfolded_node_c3 
                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge2 = candidate_TNTUnfolded_node_c3.outhead;
                                                                        if(head_candidate_TNTUnfolded_edge__edge2 != null)
                                                                        {
                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge2 = head_candidate_TNTUnfolded_edge__edge2;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge2.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_TNTUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                    && (candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge0
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge6
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge9
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge1
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge13
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge10
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge11
                                                                                        || candidate_TNTUnfolded_edge__edge2==candidate_TNTUnfolded_edge__edge12
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_TNTUnfolded_edge__edge2;
                                                                                prev__candidate_TNTUnfolded_edge__edge2 = candidate_TNTUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_TNTUnfolded_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Implicit Target TNTUnfolded_node_c4 from TNTUnfolded_edge__edge2 
                                                                                LGSPNode candidate_TNTUnfolded_node_c4 = candidate_TNTUnfolded_edge__edge2.target;
                                                                                if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c4.type.TypeID]) {
                                                                                    candidate_TNTUnfolded_edge__edge2.flags = candidate_TNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge2;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_TNTUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                    && (candidate_TNTUnfolded_node_c4==candidate_TNTUnfolded_node_c1
                                                                                        || candidate_TNTUnfolded_node_c4==candidate_TNTUnfolded_node_c2
                                                                                        || candidate_TNTUnfolded_node_c4==candidate_TNTUnfolded_node_c
                                                                                        || candidate_TNTUnfolded_node_c4==candidate_TNTUnfolded_node_c3
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    candidate_TNTUnfolded_edge__edge2.flags = candidate_TNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge2;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_TNTUnfolded_node_c4;
                                                                                prev__candidate_TNTUnfolded_node_c4 = candidate_TNTUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_TNTUnfolded_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Extend Outgoing TNTUnfolded_edge__edge7 from TNTUnfolded_node_c3 
                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge7 = candidate_TNTUnfolded_node_c3.outhead;
                                                                                if(head_candidate_TNTUnfolded_edge__edge7 != null)
                                                                                {
                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge7 = head_candidate_TNTUnfolded_edge__edge7;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge7.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if(candidate_TNTUnfolded_edge__edge7.target != candidate_TNTUnfolded_node_c4) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_TNTUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                            && (candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge0
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge6
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge9
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge1
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge13
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge10
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge11
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge12
                                                                                                || candidate_TNTUnfolded_edge__edge7==candidate_TNTUnfolded_edge__edge2
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_TNTUnfolded_edge__edge7;
                                                                                        prev__candidate_TNTUnfolded_edge__edge7 = candidate_TNTUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        candidate_TNTUnfolded_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        // Extend Outgoing TNTUnfolded_edge__edge16 from TNTUnfolded_node_c3 
                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge16 = candidate_TNTUnfolded_node_c3.outhead;
                                                                                        if(head_candidate_TNTUnfolded_edge__edge16 != null)
                                                                                        {
                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge16 = head_candidate_TNTUnfolded_edge__edge16;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge16.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_TNTUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge0
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge6
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge9
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge1
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge13
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge10
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge11
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge12
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge2
                                                                                                        || candidate_TNTUnfolded_edge__edge16==candidate_TNTUnfolded_edge__edge7
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_TNTUnfolded_edge__edge16;
                                                                                                prev__candidate_TNTUnfolded_edge__edge16 = candidate_TNTUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_TNTUnfolded_edge__edge16.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Implicit Target TNTUnfolded_node__node5 from TNTUnfolded_edge__edge16 
                                                                                                LGSPNode candidate_TNTUnfolded_node__node5 = candidate_TNTUnfolded_edge__edge16.target;
                                                                                                if(!NodeType_H.isMyType[candidate_TNTUnfolded_node__node5.type.TypeID]) {
                                                                                                    candidate_TNTUnfolded_edge__edge16.flags = candidate_TNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge16;
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_TNTUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_TNTUnfolded_node__node5==candidate_TNTUnfolded_node__node0
                                                                                                        || candidate_TNTUnfolded_node__node5==candidate_TNTUnfolded_node__node1
                                                                                                        || candidate_TNTUnfolded_node__node5==candidate_TNTUnfolded_node__node2
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    candidate_TNTUnfolded_edge__edge16.flags = candidate_TNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge16;
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_TNTUnfolded_node__node5;
                                                                                                prev__candidate_TNTUnfolded_node__node5 = candidate_TNTUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_TNTUnfolded_node__node5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Extend Outgoing TNTUnfolded_edge__edge14 from TNTUnfolded_node_n2 
                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge14 = candidate_TNTUnfolded_node_n2.outhead;
                                                                                                if(head_candidate_TNTUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge14 = head_candidate_TNTUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_TNTUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                            && (candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge0
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge6
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge9
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge1
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge13
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge10
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge11
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge12
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge2
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge7
                                                                                                                || candidate_TNTUnfolded_edge__edge14==candidate_TNTUnfolded_edge__edge16
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge14;
                                                                                                        prev__candidate_TNTUnfolded_edge__edge14 = candidate_TNTUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_TNTUnfolded_edge__edge14.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Implicit Target TNTUnfolded_node__node3 from TNTUnfolded_edge__edge14 
                                                                                                        LGSPNode candidate_TNTUnfolded_node__node3 = candidate_TNTUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node3.type.TypeID]) {
                                                                                                            candidate_TNTUnfolded_edge__edge14.flags = candidate_TNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge14;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_TNTUnfolded_node__node3;
                                                                                                        prev__candidate_TNTUnfolded_node__node3 = candidate_TNTUnfolded_node__node3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_TNTUnfolded_node__node3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge15 from TNTUnfolded_node_n2 
                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge15 = candidate_TNTUnfolded_node_n2.outhead;
                                                                                                        if(head_candidate_TNTUnfolded_edge__edge15 != null)
                                                                                                        {
                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge15 = head_candidate_TNTUnfolded_edge__edge15;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_TNTUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && (candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge0
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge6
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge9
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge1
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge13
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge10
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge11
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge12
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge2
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge7
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge16
                                                                                                                        || candidate_TNTUnfolded_edge__edge15==candidate_TNTUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge15;
                                                                                                                prev__candidate_TNTUnfolded_edge__edge15 = candidate_TNTUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                candidate_TNTUnfolded_edge__edge15.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                // Implicit Target TNTUnfolded_node__node4 from TNTUnfolded_edge__edge15 
                                                                                                                LGSPNode candidate_TNTUnfolded_node__node4 = candidate_TNTUnfolded_edge__edge15.target;
                                                                                                                if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node4.type.TypeID]) {
                                                                                                                    candidate_TNTUnfolded_edge__edge15.flags = candidate_TNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge15;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_TNTUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && candidate_TNTUnfolded_node__node4==candidate_TNTUnfolded_node__node3
                                                                                                                    )
                                                                                                                {
                                                                                                                    candidate_TNTUnfolded_edge__edge15.flags = candidate_TNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge15;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_TNTUnfolded_node__node4;
                                                                                                                prev__candidate_TNTUnfolded_node__node4 = candidate_TNTUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                candidate_TNTUnfolded_node__node4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge3 from TNTUnfolded_node_c4 
                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge3 = candidate_TNTUnfolded_node_c4.outhead;
                                                                                                                if(head_candidate_TNTUnfolded_edge__edge3 != null)
                                                                                                                {
                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge3 = head_candidate_TNTUnfolded_edge__edge3;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge3.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_TNTUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                            && (candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge0
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge6
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge9
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge1
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge13
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge10
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge11
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge12
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge2
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge7
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge16
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge14
                                                                                                                                || candidate_TNTUnfolded_edge__edge3==candidate_TNTUnfolded_edge__edge15
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge3;
                                                                                                                        prev__candidate_TNTUnfolded_edge__edge3 = candidate_TNTUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        candidate_TNTUnfolded_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        // Implicit Target TNTUnfolded_node_c5 from TNTUnfolded_edge__edge3 
                                                                                                                        LGSPNode candidate_TNTUnfolded_node_c5 = candidate_TNTUnfolded_edge__edge3.target;
                                                                                                                        if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c5.type.TypeID]) {
                                                                                                                            candidate_TNTUnfolded_edge__edge3.flags = candidate_TNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge3;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_TNTUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                            && (candidate_TNTUnfolded_node_c5==candidate_TNTUnfolded_node_c1
                                                                                                                                || candidate_TNTUnfolded_node_c5==candidate_TNTUnfolded_node_c2
                                                                                                                                || candidate_TNTUnfolded_node_c5==candidate_TNTUnfolded_node_c
                                                                                                                                || candidate_TNTUnfolded_node_c5==candidate_TNTUnfolded_node_c3
                                                                                                                                || candidate_TNTUnfolded_node_c5==candidate_TNTUnfolded_node_c4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            candidate_TNTUnfolded_edge__edge3.flags = candidate_TNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge3;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_TNTUnfolded_node_c5;
                                                                                                                        prev__candidate_TNTUnfolded_node_c5 = candidate_TNTUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        candidate_TNTUnfolded_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge17 from TNTUnfolded_node_c4 
                                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge17 = candidate_TNTUnfolded_node_c4.outhead;
                                                                                                                        if(head_candidate_TNTUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge17 = head_candidate_TNTUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_TNTUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && (candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge0
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge6
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge9
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge1
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge13
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge10
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge11
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge12
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge2
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge7
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge16
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge14
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge15
                                                                                                                                        || candidate_TNTUnfolded_edge__edge17==candidate_TNTUnfolded_edge__edge3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge17;
                                                                                                                                prev__candidate_TNTUnfolded_edge__edge17 = candidate_TNTUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                candidate_TNTUnfolded_edge__edge17.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                // Implicit Target TNTUnfolded_node_n4 from TNTUnfolded_edge__edge17 
                                                                                                                                LGSPNode candidate_TNTUnfolded_node_n4 = candidate_TNTUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_N.isMyType[candidate_TNTUnfolded_node_n4.type.TypeID]) {
                                                                                                                                    candidate_TNTUnfolded_edge__edge17.flags = candidate_TNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_TNTUnfolded_node_n4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && candidate_TNTUnfolded_node_n4==candidate_TNTUnfolded_node_n2
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    candidate_TNTUnfolded_edge__edge17.flags = candidate_TNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_TNTUnfolded_node_n4;
                                                                                                                                prev__candidate_TNTUnfolded_node_n4 = candidate_TNTUnfolded_node_n4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                candidate_TNTUnfolded_node_n4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge4 from TNTUnfolded_node_c5 
                                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge4 = candidate_TNTUnfolded_node_c5.outhead;
                                                                                                                                if(head_candidate_TNTUnfolded_edge__edge4 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge4 = head_candidate_TNTUnfolded_edge__edge4;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_TNTUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                || candidate_TNTUnfolded_edge__edge4==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge4;
                                                                                                                                        prev__candidate_TNTUnfolded_edge__edge4 = candidate_TNTUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        candidate_TNTUnfolded_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        // Implicit Target TNTUnfolded_node_c6 from TNTUnfolded_edge__edge4 
                                                                                                                                        LGSPNode candidate_TNTUnfolded_node_c6 = candidate_TNTUnfolded_edge__edge4.target;
                                                                                                                                        if(!NodeType_C.isMyType[candidate_TNTUnfolded_node_c6.type.TypeID]) {
                                                                                                                                            candidate_TNTUnfolded_edge__edge4.flags = candidate_TNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_TNTUnfolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c1
                                                                                                                                                || candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c2
                                                                                                                                                || candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c
                                                                                                                                                || candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c3
                                                                                                                                                || candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c4
                                                                                                                                                || candidate_TNTUnfolded_node_c6==candidate_TNTUnfolded_node_c5
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            candidate_TNTUnfolded_edge__edge4.flags = candidate_TNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge8 from TNTUnfolded_node_c5 
                                                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge8 = candidate_TNTUnfolded_node_c5.outhead;
                                                                                                                                        if(head_candidate_TNTUnfolded_edge__edge8 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge8 = head_candidate_TNTUnfolded_edge__edge8;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(candidate_TNTUnfolded_edge__edge8.target != candidate_TNTUnfolded_node_c6) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_TNTUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                    && (candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                        || candidate_TNTUnfolded_edge__edge8==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge8;
                                                                                                                                                prev__candidate_TNTUnfolded_edge__edge8 = candidate_TNTUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                candidate_TNTUnfolded_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge20 from TNTUnfolded_node_c5 
                                                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge20 = candidate_TNTUnfolded_node_c5.outhead;
                                                                                                                                                if(head_candidate_TNTUnfolded_edge__edge20 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge20 = head_candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_TNTUnfolded_edge__edge20.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                            && (candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                || candidate_TNTUnfolded_edge__edge20==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                        prev__candidate_TNTUnfolded_edge__edge20 = candidate_TNTUnfolded_edge__edge20.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        candidate_TNTUnfolded_edge__edge20.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        // Implicit Target TNTUnfolded_node__node8 from TNTUnfolded_edge__edge20 
                                                                                                                                                        LGSPNode candidate_TNTUnfolded_node__node8 = candidate_TNTUnfolded_edge__edge20.target;
                                                                                                                                                        if(!NodeType_H.isMyType[candidate_TNTUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                            candidate_TNTUnfolded_edge__edge20.flags = candidate_TNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_TNTUnfolded_node__node8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                            && (candidate_TNTUnfolded_node__node8==candidate_TNTUnfolded_node__node0
                                                                                                                                                                || candidate_TNTUnfolded_node__node8==candidate_TNTUnfolded_node__node1
                                                                                                                                                                || candidate_TNTUnfolded_node__node8==candidate_TNTUnfolded_node__node2
                                                                                                                                                                || candidate_TNTUnfolded_node__node8==candidate_TNTUnfolded_node__node5
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            candidate_TNTUnfolded_edge__edge20.flags = candidate_TNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge18 from TNTUnfolded_node_n4 
                                                                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge18 = candidate_TNTUnfolded_node_n4.outhead;
                                                                                                                                                        if(head_candidate_TNTUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge18 = head_candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_TNTUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge18==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                                prev__candidate_TNTUnfolded_edge__edge18 = candidate_TNTUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                candidate_TNTUnfolded_edge__edge18.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                // Implicit Target TNTUnfolded_node__node6 from TNTUnfolded_edge__edge18 
                                                                                                                                                                LGSPNode candidate_TNTUnfolded_node__node6 = candidate_TNTUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node6.type.TypeID]) {
                                                                                                                                                                    candidate_TNTUnfolded_edge__edge18.flags = candidate_TNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_TNTUnfolded_node__node6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_TNTUnfolded_node__node6==candidate_TNTUnfolded_node__node3
                                                                                                                                                                        || candidate_TNTUnfolded_node__node6==candidate_TNTUnfolded_node__node4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    candidate_TNTUnfolded_edge__edge18.flags = candidate_TNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_TNTUnfolded_node__node6;
                                                                                                                                                                prev__candidate_TNTUnfolded_node__node6 = candidate_TNTUnfolded_node__node6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                candidate_TNTUnfolded_node__node6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge19 from TNTUnfolded_node_n4 
                                                                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge19 = candidate_TNTUnfolded_node_n4.outhead;
                                                                                                                                                                if(head_candidate_TNTUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge19 = head_candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_TNTUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge19==candidate_TNTUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                        prev__candidate_TNTUnfolded_edge__edge19 = candidate_TNTUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        candidate_TNTUnfolded_edge__edge19.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        // Implicit Target TNTUnfolded_node__node7 from TNTUnfolded_edge__edge19 
                                                                                                                                                                        LGSPNode candidate_TNTUnfolded_node__node7 = candidate_TNTUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            candidate_TNTUnfolded_edge__edge19.flags = candidate_TNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_TNTUnfolded_node__node7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_TNTUnfolded_node__node7==candidate_TNTUnfolded_node__node3
                                                                                                                                                                                || candidate_TNTUnfolded_node__node7==candidate_TNTUnfolded_node__node4
                                                                                                                                                                                || candidate_TNTUnfolded_node__node7==candidate_TNTUnfolded_node__node6
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            candidate_TNTUnfolded_edge__edge19.flags = candidate_TNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_TNTUnfolded_node__node7;
                                                                                                                                                                        prev__candidate_TNTUnfolded_node__node7 = candidate_TNTUnfolded_node__node7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        candidate_TNTUnfolded_node__node7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge5 from TNTUnfolded_node_c6 
                                                                                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge5 = candidate_TNTUnfolded_node_c6.outhead;
                                                                                                                                                                        if(head_candidate_TNTUnfolded_edge__edge5 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge5 = head_candidate_TNTUnfolded_edge__edge5;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(candidate_TNTUnfolded_edge__edge5.target != candidate_TNTUnfolded_node_c1) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_TNTUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                    && (candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge18
                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge5==candidate_TNTUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge5;
                                                                                                                                                                                prev__candidate_TNTUnfolded_edge__edge5 = candidate_TNTUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                candidate_TNTUnfolded_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge21 from TNTUnfolded_node_c6 
                                                                                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge21 = candidate_TNTUnfolded_node_c6.outhead;
                                                                                                                                                                                if(head_candidate_TNTUnfolded_edge__edge21 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge21 = head_candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge21.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_TNTUnfolded_edge__edge21.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                            && (candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge18
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge19
                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge21==candidate_TNTUnfolded_edge__edge5
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                        prev__candidate_TNTUnfolded_edge__edge21 = candidate_TNTUnfolded_edge__edge21.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                        candidate_TNTUnfolded_edge__edge21.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                        // Implicit Target TNTUnfolded_node_n6 from TNTUnfolded_edge__edge21 
                                                                                                                                                                                        LGSPNode candidate_TNTUnfolded_node_n6 = candidate_TNTUnfolded_edge__edge21.target;
                                                                                                                                                                                        if(!NodeType_N.isMyType[candidate_TNTUnfolded_node_n6.type.TypeID]) {
                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge21.flags = candidate_TNTUnfolded_edge__edge21.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_TNTUnfolded_node_n6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                            && (candidate_TNTUnfolded_node_n6==candidate_TNTUnfolded_node_n2
                                                                                                                                                                                                || candidate_TNTUnfolded_node_n6==candidate_TNTUnfolded_node_n4
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge21.flags = candidate_TNTUnfolded_edge__edge21.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // Extend Outgoing TNTUnfolded_edge__edge22 from TNTUnfolded_node_n6 
                                                                                                                                                                                        LGSPEdge head_candidate_TNTUnfolded_edge__edge22 = candidate_TNTUnfolded_node_n6.outhead;
                                                                                                                                                                                        if(head_candidate_TNTUnfolded_edge__edge22 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            LGSPEdge candidate_TNTUnfolded_edge__edge22 = head_candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge22.type.TypeID]) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_TNTUnfolded_edge__edge22.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                                    && (candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge18
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge19
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge5
                                                                                                                                                                                                        || candidate_TNTUnfolded_edge__edge22==candidate_TNTUnfolded_edge__edge21
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                prev__candidate_TNTUnfolded_edge__edge22 = candidate_TNTUnfolded_edge__edge22.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                                candidate_TNTUnfolded_edge__edge22.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                                // Implicit Target TNTUnfolded_node__node9 from TNTUnfolded_edge__edge22 
                                                                                                                                                                                                LGSPNode candidate_TNTUnfolded_node__node9 = candidate_TNTUnfolded_edge__edge22.target;
                                                                                                                                                                                                if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node9.type.TypeID]) {
                                                                                                                                                                                                    candidate_TNTUnfolded_edge__edge22.flags = candidate_TNTUnfolded_edge__edge22.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_TNTUnfolded_node__node9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                                    && (candidate_TNTUnfolded_node__node9==candidate_TNTUnfolded_node__node3
                                                                                                                                                                                                        || candidate_TNTUnfolded_node__node9==candidate_TNTUnfolded_node__node4
                                                                                                                                                                                                        || candidate_TNTUnfolded_node__node9==candidate_TNTUnfolded_node__node6
                                                                                                                                                                                                        || candidate_TNTUnfolded_node__node9==candidate_TNTUnfolded_node__node7
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                {
                                                                                                                                                                                                    candidate_TNTUnfolded_edge__edge22.flags = candidate_TNTUnfolded_edge__edge22.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_TNTUnfolded_node__node9;
                                                                                                                                                                                                prev__candidate_TNTUnfolded_node__node9 = candidate_TNTUnfolded_node__node9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                                candidate_TNTUnfolded_node__node9.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                                // Extend Outgoing TNTUnfolded_edge__edge23 from TNTUnfolded_node_n6 
                                                                                                                                                                                                LGSPEdge head_candidate_TNTUnfolded_edge__edge23 = candidate_TNTUnfolded_node_n6.outhead;
                                                                                                                                                                                                if(head_candidate_TNTUnfolded_edge__edge23 != null)
                                                                                                                                                                                                {
                                                                                                                                                                                                    LGSPEdge candidate_TNTUnfolded_edge__edge23 = head_candidate_TNTUnfolded_edge__edge23;
                                                                                                                                                                                                    do
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNTUnfolded_edge__edge23.type.TypeID]) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_TNTUnfolded_edge__edge23.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                                            && (candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge0
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge6
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge9
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge1
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge13
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge10
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge11
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge12
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge2
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge7
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge16
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge14
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge15
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge3
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge17
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge4
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge8
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge20
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge18
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge19
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge5
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge21
                                                                                                                                                                                                                || candidate_TNTUnfolded_edge__edge23==candidate_TNTUnfolded_edge__edge22
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        // Implicit Target TNTUnfolded_node__node10 from TNTUnfolded_edge__edge23 
                                                                                                                                                                                                        LGSPNode candidate_TNTUnfolded_node__node10 = candidate_TNTUnfolded_edge__edge23.target;
                                                                                                                                                                                                        if(!NodeType_O.isMyType[candidate_TNTUnfolded_node__node10.type.TypeID]) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_TNTUnfolded_node__node10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                                            && (candidate_TNTUnfolded_node__node10==candidate_TNTUnfolded_node__node3
                                                                                                                                                                                                                || candidate_TNTUnfolded_node__node10==candidate_TNTUnfolded_node__node4
                                                                                                                                                                                                                || candidate_TNTUnfolded_node__node10==candidate_TNTUnfolded_node__node6
                                                                                                                                                                                                                || candidate_TNTUnfolded_node__node10==candidate_TNTUnfolded_node__node7
                                                                                                                                                                                                                || candidate_TNTUnfolded_node__node10==candidate_TNTUnfolded_node__node9
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c1] = candidate_TNTUnfolded_node_c1;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c2] = candidate_TNTUnfolded_node_c2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c3] = candidate_TNTUnfolded_node_c3;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c4] = candidate_TNTUnfolded_node_c4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c5] = candidate_TNTUnfolded_node_c5;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c6] = candidate_TNTUnfolded_node_c6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c] = candidate_TNTUnfolded_node_c;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node0] = candidate_TNTUnfolded_node__node0;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node1] = candidate_TNTUnfolded_node__node1;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node2] = candidate_TNTUnfolded_node__node2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n2] = candidate_TNTUnfolded_node_n2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node3] = candidate_TNTUnfolded_node__node3;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node4] = candidate_TNTUnfolded_node__node4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node5] = candidate_TNTUnfolded_node__node5;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n4] = candidate_TNTUnfolded_node_n4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node6] = candidate_TNTUnfolded_node__node6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node7] = candidate_TNTUnfolded_node__node7;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node8] = candidate_TNTUnfolded_node__node8;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n6] = candidate_TNTUnfolded_node_n6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node9] = candidate_TNTUnfolded_node__node9;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node10] = candidate_TNTUnfolded_node__node10;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge0] = candidate_TNTUnfolded_edge__edge0;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge1] = candidate_TNTUnfolded_edge__edge1;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge2] = candidate_TNTUnfolded_edge__edge2;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge3] = candidate_TNTUnfolded_edge__edge3;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge4] = candidate_TNTUnfolded_edge__edge4;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge5] = candidate_TNTUnfolded_edge__edge5;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge6] = candidate_TNTUnfolded_edge__edge6;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge7] = candidate_TNTUnfolded_edge__edge7;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge8] = candidate_TNTUnfolded_edge__edge8;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge9] = candidate_TNTUnfolded_edge__edge9;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge10] = candidate_TNTUnfolded_edge__edge10;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge11] = candidate_TNTUnfolded_edge__edge11;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge12] = candidate_TNTUnfolded_edge__edge12;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge13] = candidate_TNTUnfolded_edge__edge13;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge14] = candidate_TNTUnfolded_edge__edge14;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge15] = candidate_TNTUnfolded_edge__edge15;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge16] = candidate_TNTUnfolded_edge__edge16;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge17] = candidate_TNTUnfolded_edge__edge17;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge18] = candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge19] = candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge20] = candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge21] = candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge22] = candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge23] = candidate_TNTUnfolded_edge__edge23;
                                                                                                                                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                                        // if enough matches were found, we leave
                                                                                                                                                                                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n6.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge23);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n6.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge22);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c6.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge21);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c6.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge5);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n4.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge19);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n4.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge18);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c5.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge20);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c5.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge8);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c5.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge4);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c4.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge17);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c4.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge3);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n2.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge15);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n2.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge14);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c3.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge16);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c3.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge7);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c3.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge2);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge12);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge11);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge10);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c2.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge13);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c2.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge1);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c1.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge9);
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c1.MoveOutHeadAfter(candidate_TNTUnfolded_edge__edge6);
                                                                                                                                                                                                            graph.MoveHeadAfter(candidate_TNTUnfolded_edge__edge0);
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node9.flags = candidate_TNTUnfolded_node__node9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node9;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge22.flags = candidate_TNTUnfolded_edge__edge22.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge21.flags = candidate_TNTUnfolded_edge__edge21.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge5.flags = candidate_TNTUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge5;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node7.flags = candidate_TNTUnfolded_node__node7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node7;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge19.flags = candidate_TNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node6.flags = candidate_TNTUnfolded_node__node6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node6;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge18.flags = candidate_TNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge20.flags = candidate_TNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge8.flags = candidate_TNTUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge8;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge4.flags = candidate_TNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge4;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n4.flags = candidate_TNTUnfolded_node_n4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_n4;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge17.flags = candidate_TNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge17;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c5.flags = candidate_TNTUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c5;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge3.flags = candidate_TNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge3;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node4.flags = candidate_TNTUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node4;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge15.flags = candidate_TNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge15;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node3.flags = candidate_TNTUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node3;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge14.flags = candidate_TNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge14;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node5.flags = candidate_TNTUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node5;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge16.flags = candidate_TNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge16;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge7.flags = candidate_TNTUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge7;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c4.flags = candidate_TNTUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c4;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge2.flags = candidate_TNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge2;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node2.flags = candidate_TNTUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node2;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge12.flags = candidate_TNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge12;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node1.flags = candidate_TNTUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node1;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge11.flags = candidate_TNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge11;
                                                                                                                                                                                                            candidate_TNTUnfolded_node__node0.flags = candidate_TNTUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node0;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge10.flags = candidate_TNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge10;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_n2.flags = candidate_TNTUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_n2;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge13.flags = candidate_TNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge13;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c3.flags = candidate_TNTUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c3;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge1.flags = candidate_TNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge1;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c.flags = candidate_TNTUnfolded_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge9.flags = candidate_TNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge9;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge6.flags = candidate_TNTUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge6;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c2.flags = candidate_TNTUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c2;
                                                                                                                                                                                                            candidate_TNTUnfolded_node_c1.flags = candidate_TNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c1;
                                                                                                                                                                                                            candidate_TNTUnfolded_edge__edge0.flags = candidate_TNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge0;
                                                                                                                                                                                                            return matches;
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    while( (candidate_TNTUnfolded_edge__edge23 = candidate_TNTUnfolded_edge__edge23.outNext) != head_candidate_TNTUnfolded_edge__edge23 );
                                                                                                                                                                                                }
                                                                                                                                                                                                candidate_TNTUnfolded_node__node9.flags = candidate_TNTUnfolded_node__node9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node9;
                                                                                                                                                                                                candidate_TNTUnfolded_edge__edge22.flags = candidate_TNTUnfolded_edge__edge22.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge22;
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (candidate_TNTUnfolded_edge__edge22 = candidate_TNTUnfolded_edge__edge22.outNext) != head_candidate_TNTUnfolded_edge__edge22 );
                                                                                                                                                                                        }
                                                                                                                                                                                        candidate_TNTUnfolded_edge__edge21.flags = candidate_TNTUnfolded_edge__edge21.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge21;
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_TNTUnfolded_edge__edge21 = candidate_TNTUnfolded_edge__edge21.outNext) != head_candidate_TNTUnfolded_edge__edge21 );
                                                                                                                                                                                }
                                                                                                                                                                                candidate_TNTUnfolded_edge__edge5.flags = candidate_TNTUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge5;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_TNTUnfolded_edge__edge5 = candidate_TNTUnfolded_edge__edge5.outNext) != head_candidate_TNTUnfolded_edge__edge5 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_TNTUnfolded_node__node7.flags = candidate_TNTUnfolded_node__node7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node7;
                                                                                                                                                                        candidate_TNTUnfolded_edge__edge19.flags = candidate_TNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge19;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_TNTUnfolded_edge__edge19 = candidate_TNTUnfolded_edge__edge19.outNext) != head_candidate_TNTUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                candidate_TNTUnfolded_node__node6.flags = candidate_TNTUnfolded_node__node6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node6;
                                                                                                                                                                candidate_TNTUnfolded_edge__edge18.flags = candidate_TNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge18;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_TNTUnfolded_edge__edge18 = candidate_TNTUnfolded_edge__edge18.outNext) != head_candidate_TNTUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        candidate_TNTUnfolded_edge__edge20.flags = candidate_TNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge20;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_TNTUnfolded_edge__edge20 = candidate_TNTUnfolded_edge__edge20.outNext) != head_candidate_TNTUnfolded_edge__edge20 );
                                                                                                                                                }
                                                                                                                                                candidate_TNTUnfolded_edge__edge8.flags = candidate_TNTUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge8;
                                                                                                                                            }
                                                                                                                                            while( (candidate_TNTUnfolded_edge__edge8 = candidate_TNTUnfolded_edge__edge8.outNext) != head_candidate_TNTUnfolded_edge__edge8 );
                                                                                                                                        }
                                                                                                                                        candidate_TNTUnfolded_edge__edge4.flags = candidate_TNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge4;
                                                                                                                                    }
                                                                                                                                    while( (candidate_TNTUnfolded_edge__edge4 = candidate_TNTUnfolded_edge__edge4.outNext) != head_candidate_TNTUnfolded_edge__edge4 );
                                                                                                                                }
                                                                                                                                candidate_TNTUnfolded_node_n4.flags = candidate_TNTUnfolded_node_n4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_n4;
                                                                                                                                candidate_TNTUnfolded_edge__edge17.flags = candidate_TNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge17;
                                                                                                                            }
                                                                                                                            while( (candidate_TNTUnfolded_edge__edge17 = candidate_TNTUnfolded_edge__edge17.outNext) != head_candidate_TNTUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        candidate_TNTUnfolded_node_c5.flags = candidate_TNTUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c5;
                                                                                                                        candidate_TNTUnfolded_edge__edge3.flags = candidate_TNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge3;
                                                                                                                    }
                                                                                                                    while( (candidate_TNTUnfolded_edge__edge3 = candidate_TNTUnfolded_edge__edge3.outNext) != head_candidate_TNTUnfolded_edge__edge3 );
                                                                                                                }
                                                                                                                candidate_TNTUnfolded_node__node4.flags = candidate_TNTUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node4;
                                                                                                                candidate_TNTUnfolded_edge__edge15.flags = candidate_TNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge15;
                                                                                                            }
                                                                                                            while( (candidate_TNTUnfolded_edge__edge15 = candidate_TNTUnfolded_edge__edge15.outNext) != head_candidate_TNTUnfolded_edge__edge15 );
                                                                                                        }
                                                                                                        candidate_TNTUnfolded_node__node3.flags = candidate_TNTUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node3;
                                                                                                        candidate_TNTUnfolded_edge__edge14.flags = candidate_TNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge14;
                                                                                                    }
                                                                                                    while( (candidate_TNTUnfolded_edge__edge14 = candidate_TNTUnfolded_edge__edge14.outNext) != head_candidate_TNTUnfolded_edge__edge14 );
                                                                                                }
                                                                                                candidate_TNTUnfolded_node__node5.flags = candidate_TNTUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node5;
                                                                                                candidate_TNTUnfolded_edge__edge16.flags = candidate_TNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge16;
                                                                                            }
                                                                                            while( (candidate_TNTUnfolded_edge__edge16 = candidate_TNTUnfolded_edge__edge16.outNext) != head_candidate_TNTUnfolded_edge__edge16 );
                                                                                        }
                                                                                        candidate_TNTUnfolded_edge__edge7.flags = candidate_TNTUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge7;
                                                                                    }
                                                                                    while( (candidate_TNTUnfolded_edge__edge7 = candidate_TNTUnfolded_edge__edge7.outNext) != head_candidate_TNTUnfolded_edge__edge7 );
                                                                                }
                                                                                candidate_TNTUnfolded_node_c4.flags = candidate_TNTUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c4;
                                                                                candidate_TNTUnfolded_edge__edge2.flags = candidate_TNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge2;
                                                                            }
                                                                            while( (candidate_TNTUnfolded_edge__edge2 = candidate_TNTUnfolded_edge__edge2.outNext) != head_candidate_TNTUnfolded_edge__edge2 );
                                                                        }
                                                                        candidate_TNTUnfolded_node__node2.flags = candidate_TNTUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node2;
                                                                        candidate_TNTUnfolded_edge__edge12.flags = candidate_TNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge12;
                                                                    }
                                                                    while( (candidate_TNTUnfolded_edge__edge12 = candidate_TNTUnfolded_edge__edge12.outNext) != head_candidate_TNTUnfolded_edge__edge12 );
                                                                }
                                                                candidate_TNTUnfolded_node__node1.flags = candidate_TNTUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node1;
                                                                candidate_TNTUnfolded_edge__edge11.flags = candidate_TNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge11;
                                                            }
                                                            while( (candidate_TNTUnfolded_edge__edge11 = candidate_TNTUnfolded_edge__edge11.outNext) != head_candidate_TNTUnfolded_edge__edge11 );
                                                        }
                                                        candidate_TNTUnfolded_node__node0.flags = candidate_TNTUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node__node0;
                                                        candidate_TNTUnfolded_edge__edge10.flags = candidate_TNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge10;
                                                    }
                                                    while( (candidate_TNTUnfolded_edge__edge10 = candidate_TNTUnfolded_edge__edge10.outNext) != head_candidate_TNTUnfolded_edge__edge10 );
                                                }
                                                candidate_TNTUnfolded_node_n2.flags = candidate_TNTUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_n2;
                                                candidate_TNTUnfolded_edge__edge13.flags = candidate_TNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge13;
                                            }
                                            while( (candidate_TNTUnfolded_edge__edge13 = candidate_TNTUnfolded_edge__edge13.outNext) != head_candidate_TNTUnfolded_edge__edge13 );
                                        }
                                        candidate_TNTUnfolded_node_c3.flags = candidate_TNTUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c3;
                                        candidate_TNTUnfolded_edge__edge1.flags = candidate_TNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge1;
                                    }
                                    while( (candidate_TNTUnfolded_edge__edge1 = candidate_TNTUnfolded_edge__edge1.outNext) != head_candidate_TNTUnfolded_edge__edge1 );
                                }
                                candidate_TNTUnfolded_node_c.flags = candidate_TNTUnfolded_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c;
                                candidate_TNTUnfolded_edge__edge9.flags = candidate_TNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge9;
                            }
                            while( (candidate_TNTUnfolded_edge__edge9 = candidate_TNTUnfolded_edge__edge9.outNext) != head_candidate_TNTUnfolded_edge__edge9 );
                        }
                        candidate_TNTUnfolded_edge__edge6.flags = candidate_TNTUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge6;
                    }
                    while( (candidate_TNTUnfolded_edge__edge6 = candidate_TNTUnfolded_edge__edge6.outNext) != head_candidate_TNTUnfolded_edge__edge6 );
                }
                candidate_TNTUnfolded_node_c2.flags = candidate_TNTUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c2;
                candidate_TNTUnfolded_node_c1.flags = candidate_TNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_node_c1;
                candidate_TNTUnfolded_edge__edge0.flags = candidate_TNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNTUnfolded_edge__edge0;
            }
            return matches;
        }
    }

    public class Action_createTNT : LGSPAction
    {
        public Action_createTNT() {
            rulePattern = Rule_createTNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 0 + 0);
        }

        public override string Name { get { return "createTNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createTNT instance = new Action_createTNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            // if enough matches were found, we leave
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_DNT : LGSPAction
    {
        public Action_DNT() {
            rulePattern = Rule_DNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 9, 0, 6 + 0);
        }

        public override string Name { get { return "DNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_DNT instance = new Action_DNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup DNT_edge__edge0 
            int type_id_candidate_DNT_edge__edge0 = 1;
            for(LGSPEdge head_candidate_DNT_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_DNT_edge__edge0], candidate_DNT_edge__edge0 = head_candidate_DNT_edge__edge0.typeNext; candidate_DNT_edge__edge0 != head_candidate_DNT_edge__edge0; candidate_DNT_edge__edge0 = candidate_DNT_edge__edge0.typeNext)
            {
                uint prev__candidate_DNT_edge__edge0;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_DNT_edge__edge0 = candidate_DNT_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_DNT_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_DNT_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge0) ? 1U : 0U;
                    if(prev__candidate_DNT_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge0,candidate_DNT_edge__edge0);
                }
                // Implicit Source DNT_node_c1 from DNT_edge__edge0 
                LGSPNode candidate_DNT_node_c1 = candidate_DNT_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_DNT_node_c1.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge0;
                    } else { 
                        if(prev__candidate_DNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_DNT_node_c1;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_DNT_node_c1 = candidate_DNT_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_DNT_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_DNT_node_c1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_DNT_node_c1) ? 1U : 0U;
                    if(prev__candidate_DNT_node_c1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_DNT_node_c1,candidate_DNT_node_c1);
                }
                // Implicit Target DNT_node_c2 from DNT_edge__edge0 
                LGSPNode candidate_DNT_node_c2 = candidate_DNT_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_DNT_node_c2.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c1;
                    } else { 
                        if(prev__candidate_DNT_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge0;
                    } else { 
                        if(prev__candidate_DNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge0);
                        }
                    }
                    continue;
                }
                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_DNT_node_c2))
                    && candidate_DNT_node_c2==candidate_DNT_node_c1
                    )
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c1;
                    } else { 
                        if(prev__candidate_DNT_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge0;
                    } else { 
                        if(prev__candidate_DNT_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_DNT_node_c2;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_DNT_node_c2 = candidate_DNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_DNT_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_DNT_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_DNT_node_c2) ? 1U : 0U;
                    if(prev__candidate_DNT_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_DNT_node_c2,candidate_DNT_node_c2);
                }
                // Extend Outgoing DNT_edge__edge6 from DNT_node_c1 
                LGSPEdge head_candidate_DNT_edge__edge6 = candidate_DNT_node_c1.outhead;
                if(head_candidate_DNT_edge__edge6 != null)
                {
                    LGSPEdge candidate_DNT_edge__edge6 = head_candidate_DNT_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_DNT_edge__edge6.target != candidate_DNT_node_c2) {
                            continue;
                        }
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge6))
                            && candidate_DNT_edge__edge6==candidate_DNT_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_DNT_edge__edge6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_DNT_edge__edge6 = candidate_DNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_DNT_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_DNT_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge6) ? 1U : 0U;
                            if(prev__candidate_DNT_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge6,candidate_DNT_edge__edge6);
                        }
                        // Extend Outgoing DNT_edge__edge1 from DNT_node_c2 
                        LGSPEdge head_candidate_DNT_edge__edge1 = candidate_DNT_node_c2.outhead;
                        if(head_candidate_DNT_edge__edge1 != null)
                        {
                            LGSPEdge candidate_DNT_edge__edge1 = head_candidate_DNT_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge1))
                                    && (candidate_DNT_edge__edge1==candidate_DNT_edge__edge0
                                        || candidate_DNT_edge__edge1==candidate_DNT_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_DNT_edge__edge1;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_DNT_edge__edge1 = candidate_DNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_DNT_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_DNT_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge1) ? 1U : 0U;
                                    if(prev__candidate_DNT_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge1,candidate_DNT_edge__edge1);
                                }
                                // Implicit Target DNT_node_c3 from DNT_edge__edge1 
                                LGSPNode candidate_DNT_node_c3 = candidate_DNT_edge__edge1.target;
                                if(!NodeType_C.isMyType[candidate_DNT_node_c3.type.TypeID]) {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge1;
                                    } else { 
                                        if(prev__candidate_DNT_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_DNT_node_c3))
                                    && (candidate_DNT_node_c3==candidate_DNT_node_c1
                                        || candidate_DNT_node_c3==candidate_DNT_node_c2
                                        )
                                    )
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge1;
                                    } else { 
                                        if(prev__candidate_DNT_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                uint prev__candidate_DNT_node_c3;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_DNT_node_c3 = candidate_DNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_DNT_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_DNT_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_DNT_node_c3) ? 1U : 0U;
                                    if(prev__candidate_DNT_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_DNT_node_c3,candidate_DNT_node_c3);
                                }
                                // Extend Outgoing DNT_edge__edge2 from DNT_node_c3 
                                LGSPEdge head_candidate_DNT_edge__edge2 = candidate_DNT_node_c3.outhead;
                                if(head_candidate_DNT_edge__edge2 != null)
                                {
                                    LGSPEdge candidate_DNT_edge__edge2 = head_candidate_DNT_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge2))
                                            && (candidate_DNT_edge__edge2==candidate_DNT_edge__edge0
                                                || candidate_DNT_edge__edge2==candidate_DNT_edge__edge6
                                                || candidate_DNT_edge__edge2==candidate_DNT_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_DNT_edge__edge2;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_DNT_edge__edge2 = candidate_DNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_DNT_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_DNT_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge2) ? 1U : 0U;
                                            if(prev__candidate_DNT_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge2,candidate_DNT_edge__edge2);
                                        }
                                        // Implicit Target DNT_node_c4 from DNT_edge__edge2 
                                        LGSPNode candidate_DNT_node_c4 = candidate_DNT_edge__edge2.target;
                                        if(!NodeType_C.isMyType[candidate_DNT_node_c4.type.TypeID]) {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge2;
                                            } else { 
                                                if(prev__candidate_DNT_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_DNT_node_c4))
                                            && (candidate_DNT_node_c4==candidate_DNT_node_c1
                                                || candidate_DNT_node_c4==candidate_DNT_node_c2
                                                || candidate_DNT_node_c4==candidate_DNT_node_c3
                                                )
                                            )
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge2;
                                            } else { 
                                                if(prev__candidate_DNT_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        uint prev__candidate_DNT_node_c4;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_DNT_node_c4 = candidate_DNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_DNT_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_DNT_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_DNT_node_c4) ? 1U : 0U;
                                            if(prev__candidate_DNT_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_DNT_node_c4,candidate_DNT_node_c4);
                                        }
                                        // Extend Outgoing DNT_edge__edge7 from DNT_node_c3 
                                        LGSPEdge head_candidate_DNT_edge__edge7 = candidate_DNT_node_c3.outhead;
                                        if(head_candidate_DNT_edge__edge7 != null)
                                        {
                                            LGSPEdge candidate_DNT_edge__edge7 = head_candidate_DNT_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(candidate_DNT_edge__edge7.target != candidate_DNT_node_c4) {
                                                    continue;
                                                }
                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge7))
                                                    && (candidate_DNT_edge__edge7==candidate_DNT_edge__edge0
                                                        || candidate_DNT_edge__edge7==candidate_DNT_edge__edge6
                                                        || candidate_DNT_edge__edge7==candidate_DNT_edge__edge1
                                                        || candidate_DNT_edge__edge7==candidate_DNT_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_DNT_edge__edge7;
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    prev__candidate_DNT_edge__edge7 = candidate_DNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    candidate_DNT_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                } else {
                                                    prev__candidate_DNT_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge7) ? 1U : 0U;
                                                    if(prev__candidate_DNT_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge7,candidate_DNT_edge__edge7);
                                                }
                                                // Extend Outgoing DNT_edge__edge3 from DNT_node_c4 
                                                LGSPEdge head_candidate_DNT_edge__edge3 = candidate_DNT_node_c4.outhead;
                                                if(head_candidate_DNT_edge__edge3 != null)
                                                {
                                                    LGSPEdge candidate_DNT_edge__edge3 = head_candidate_DNT_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge3))
                                                            && (candidate_DNT_edge__edge3==candidate_DNT_edge__edge0
                                                                || candidate_DNT_edge__edge3==candidate_DNT_edge__edge6
                                                                || candidate_DNT_edge__edge3==candidate_DNT_edge__edge1
                                                                || candidate_DNT_edge__edge3==candidate_DNT_edge__edge2
                                                                || candidate_DNT_edge__edge3==candidate_DNT_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_DNT_edge__edge3;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_DNT_edge__edge3 = candidate_DNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_DNT_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_DNT_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge3) ? 1U : 0U;
                                                            if(prev__candidate_DNT_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge3,candidate_DNT_edge__edge3);
                                                        }
                                                        // Implicit Target DNT_node_c5 from DNT_edge__edge3 
                                                        LGSPNode candidate_DNT_node_c5 = candidate_DNT_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[candidate_DNT_node_c5.type.TypeID]) {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_DNT_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_DNT_node_c5))
                                                            && (candidate_DNT_node_c5==candidate_DNT_node_c1
                                                                || candidate_DNT_node_c5==candidate_DNT_node_c2
                                                                || candidate_DNT_node_c5==candidate_DNT_node_c3
                                                                || candidate_DNT_node_c5==candidate_DNT_node_c4
                                                                )
                                                            )
                                                        {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_DNT_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        uint prev__candidate_DNT_node_c5;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_DNT_node_c5 = candidate_DNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_DNT_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_DNT_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_DNT_node_c5) ? 1U : 0U;
                                                            if(prev__candidate_DNT_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_DNT_node_c5,candidate_DNT_node_c5);
                                                        }
                                                        // Extend Outgoing DNT_edge__edge4 from DNT_node_c5 
                                                        LGSPEdge head_candidate_DNT_edge__edge4 = candidate_DNT_node_c5.outhead;
                                                        if(head_candidate_DNT_edge__edge4 != null)
                                                        {
                                                            LGSPEdge candidate_DNT_edge__edge4 = head_candidate_DNT_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge4))
                                                                    && (candidate_DNT_edge__edge4==candidate_DNT_edge__edge0
                                                                        || candidate_DNT_edge__edge4==candidate_DNT_edge__edge6
                                                                        || candidate_DNT_edge__edge4==candidate_DNT_edge__edge1
                                                                        || candidate_DNT_edge__edge4==candidate_DNT_edge__edge2
                                                                        || candidate_DNT_edge__edge4==candidate_DNT_edge__edge7
                                                                        || candidate_DNT_edge__edge4==candidate_DNT_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_DNT_edge__edge4;
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    prev__candidate_DNT_edge__edge4 = candidate_DNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    candidate_DNT_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                } else {
                                                                    prev__candidate_DNT_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge4) ? 1U : 0U;
                                                                    if(prev__candidate_DNT_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge4,candidate_DNT_edge__edge4);
                                                                }
                                                                // Implicit Target DNT_node_c6 from DNT_edge__edge4 
                                                                LGSPNode candidate_DNT_node_c6 = candidate_DNT_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[candidate_DNT_node_c6.type.TypeID]) {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_DNT_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_DNT_node_c6))
                                                                    && (candidate_DNT_node_c6==candidate_DNT_node_c1
                                                                        || candidate_DNT_node_c6==candidate_DNT_node_c2
                                                                        || candidate_DNT_node_c6==candidate_DNT_node_c3
                                                                        || candidate_DNT_node_c6==candidate_DNT_node_c4
                                                                        || candidate_DNT_node_c6==candidate_DNT_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_DNT_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                // Extend Outgoing DNT_edge__edge8 from DNT_node_c5 
                                                                LGSPEdge head_candidate_DNT_edge__edge8 = candidate_DNT_node_c5.outhead;
                                                                if(head_candidate_DNT_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge candidate_DNT_edge__edge8 = head_candidate_DNT_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(candidate_DNT_edge__edge8.target != candidate_DNT_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge8))
                                                                            && (candidate_DNT_edge__edge8==candidate_DNT_edge__edge0
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge6
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge1
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge2
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge7
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge3
                                                                                || candidate_DNT_edge__edge8==candidate_DNT_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_DNT_edge__edge8;
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            prev__candidate_DNT_edge__edge8 = candidate_DNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            candidate_DNT_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        } else {
                                                                            prev__candidate_DNT_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_DNT_edge__edge8) ? 1U : 0U;
                                                                            if(prev__candidate_DNT_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_DNT_edge__edge8,candidate_DNT_edge__edge8);
                                                                        }
                                                                        // Extend Outgoing DNT_edge__edge5 from DNT_node_c6 
                                                                        LGSPEdge head_candidate_DNT_edge__edge5 = candidate_DNT_node_c6.outhead;
                                                                        if(head_candidate_DNT_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge candidate_DNT_edge__edge5 = head_candidate_DNT_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_DNT_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(candidate_DNT_edge__edge5.target != candidate_DNT_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_DNT_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_DNT_edge__edge5))
                                                                                    && (candidate_DNT_edge__edge5==candidate_DNT_edge__edge0
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge6
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge1
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge2
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge7
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge3
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge4
                                                                                        || candidate_DNT_edge__edge5==candidate_DNT_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                // Push subpattern matching task for _subpattern5
                                                                                PatternAction_Hydrogen taskFor__subpattern5 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern5.Hydrogen_node_anchor = candidate_DNT_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                // Push subpattern matching task for _subpattern4
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = candidate_DNT_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                // Push subpattern matching task for _subpattern3
                                                                                PatternAction_Nitro taskFor__subpattern3 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = candidate_DNT_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                // Push subpattern matching task for _subpattern2
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = candidate_DNT_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                // Push subpattern matching task for _subpattern1
                                                                                PatternAction_Nitro taskFor__subpattern1 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = candidate_DNT_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                // Push subpattern matching task for _subpattern0
                                                                                PatternAction_Methyl taskFor__subpattern0 = PatternAction_Methyl.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern0.Methyl_node_anchor = candidate_DNT_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                uint prevGlobal__candidate_DNT_node_c1;
                                                                                prevGlobal__candidate_DNT_node_c1 = candidate_DNT_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_node_c2;
                                                                                prevGlobal__candidate_DNT_node_c2 = candidate_DNT_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_node_c3;
                                                                                prevGlobal__candidate_DNT_node_c3 = candidate_DNT_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_node_c4;
                                                                                prevGlobal__candidate_DNT_node_c4 = candidate_DNT_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_node_c5;
                                                                                prevGlobal__candidate_DNT_node_c5 = candidate_DNT_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_node_c6;
                                                                                prevGlobal__candidate_DNT_node_c6 = candidate_DNT_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge0;
                                                                                prevGlobal__candidate_DNT_edge__edge0 = candidate_DNT_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge1;
                                                                                prevGlobal__candidate_DNT_edge__edge1 = candidate_DNT_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge2;
                                                                                prevGlobal__candidate_DNT_edge__edge2 = candidate_DNT_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge3;
                                                                                prevGlobal__candidate_DNT_edge__edge3 = candidate_DNT_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge4;
                                                                                prevGlobal__candidate_DNT_edge__edge4 = candidate_DNT_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge5;
                                                                                prevGlobal__candidate_DNT_edge__edge5 = candidate_DNT_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge6;
                                                                                prevGlobal__candidate_DNT_edge__edge6 = candidate_DNT_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge7;
                                                                                prevGlobal__candidate_DNT_edge__edge7 = candidate_DNT_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_DNT_edge__edge8;
                                                                                prevGlobal__candidate_DNT_edge__edge8 = candidate_DNT_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_DNT_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                // Match subpatterns 
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                // Pop subpattern matching task for _subpattern0
                                                                                openTasks.Pop();
                                                                                PatternAction_Methyl.releaseTask(taskFor__subpattern0);
                                                                                // Pop subpattern matching task for _subpattern1
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern1);
                                                                                // Pop subpattern matching task for _subpattern2
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern2);
                                                                                // Pop subpattern matching task for _subpattern3
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern3);
                                                                                // Pop subpattern matching task for _subpattern4
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern4);
                                                                                // Pop subpattern matching task for _subpattern5
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern5);
                                                                                // Check whether subpatterns were found 
                                                                                if(matchesList.Count>0) {
                                                                                    // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c1] = candidate_DNT_node_c1;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c2] = candidate_DNT_node_c2;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c3] = candidate_DNT_node_c3;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c4] = candidate_DNT_node_c4;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c5] = candidate_DNT_node_c5;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c6] = candidate_DNT_node_c6;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge0] = candidate_DNT_edge__edge0;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge1] = candidate_DNT_edge__edge1;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge2] = candidate_DNT_edge__edge2;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge3] = candidate_DNT_edge__edge3;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge4] = candidate_DNT_edge__edge4;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge5] = candidate_DNT_edge__edge5;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge6] = candidate_DNT_edge__edge6;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge7] = candidate_DNT_edge__edge7;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge8] = candidate_DNT_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    // if enough matches were found, we leave
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        candidate_DNT_edge__edge8.flags = candidate_DNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge8;
                                                                                        candidate_DNT_edge__edge7.flags = candidate_DNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge7;
                                                                                        candidate_DNT_edge__edge6.flags = candidate_DNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge6;
                                                                                        candidate_DNT_edge__edge5.flags = candidate_DNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge5;
                                                                                        candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge4;
                                                                                        candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge3;
                                                                                        candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge2;
                                                                                        candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge1;
                                                                                        candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge0;
                                                                                        candidate_DNT_node_c6.flags = candidate_DNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c6;
                                                                                        candidate_DNT_node_c5.flags = candidate_DNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c5;
                                                                                        candidate_DNT_node_c4.flags = candidate_DNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c4;
                                                                                        candidate_DNT_node_c3.flags = candidate_DNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c3;
                                                                                        candidate_DNT_node_c2.flags = candidate_DNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c2;
                                                                                        candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c1;
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge8.flags = candidate_DNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge8;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge8==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge8);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge4;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_node_c5.flags = candidate_DNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c5;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_node_c5==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c5);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge3;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge7.flags = candidate_DNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge7;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge7==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge7);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_node_c4.flags = candidate_DNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c4;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_node_c4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge2;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_node_c3.flags = candidate_DNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c3;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_node_c3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge1;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge6.flags = candidate_DNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge6;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge6==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge6);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_node_c2.flags = candidate_DNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c2;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_node_c2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c1;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_node_c1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge0;
                                                                                        } else { 
                                                                                            if(prev__candidate_DNT_edge__edge0==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge0);
                                                                                            }
                                                                                        }
                                                                                        return matches;
                                                                                    }
                                                                                    candidate_DNT_edge__edge8.flags = candidate_DNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge8;
                                                                                    candidate_DNT_edge__edge7.flags = candidate_DNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge7;
                                                                                    candidate_DNT_edge__edge6.flags = candidate_DNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge6;
                                                                                    candidate_DNT_edge__edge5.flags = candidate_DNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge5;
                                                                                    candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge4;
                                                                                    candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge3;
                                                                                    candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge2;
                                                                                    candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge1;
                                                                                    candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge0;
                                                                                    candidate_DNT_node_c6.flags = candidate_DNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c6;
                                                                                    candidate_DNT_node_c5.flags = candidate_DNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c5;
                                                                                    candidate_DNT_node_c4.flags = candidate_DNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c4;
                                                                                    candidate_DNT_node_c3.flags = candidate_DNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c3;
                                                                                    candidate_DNT_node_c2.flags = candidate_DNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c2;
                                                                                    candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c1;
                                                                                    continue;
                                                                                }
                                                                                candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c1;
                                                                                candidate_DNT_node_c2.flags = candidate_DNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c2;
                                                                                candidate_DNT_node_c3.flags = candidate_DNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c3;
                                                                                candidate_DNT_node_c4.flags = candidate_DNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c4;
                                                                                candidate_DNT_node_c5.flags = candidate_DNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c5;
                                                                                candidate_DNT_node_c6.flags = candidate_DNT_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_node_c6;
                                                                                candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge0;
                                                                                candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge1;
                                                                                candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge2;
                                                                                candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge3;
                                                                                candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge4;
                                                                                candidate_DNT_edge__edge5.flags = candidate_DNT_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge5;
                                                                                candidate_DNT_edge__edge6.flags = candidate_DNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge6;
                                                                                candidate_DNT_edge__edge7.flags = candidate_DNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge7;
                                                                                candidate_DNT_edge__edge8.flags = candidate_DNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_DNT_edge__edge8;
                                                                            }
                                                                            while( (candidate_DNT_edge__edge5 = candidate_DNT_edge__edge5.outNext) != head_candidate_DNT_edge__edge5 );
                                                                        }
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_DNT_edge__edge8.flags = candidate_DNT_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge8;
                                                                        } else { 
                                                                            if(prev__candidate_DNT_edge__edge8==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge8);
                                                                            }
                                                                        }
                                                                    }
                                                                    while( (candidate_DNT_edge__edge8 = candidate_DNT_edge__edge8.outNext) != head_candidate_DNT_edge__edge8 );
                                                                }
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_DNT_edge__edge4.flags = candidate_DNT_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge4;
                                                                } else { 
                                                                    if(prev__candidate_DNT_edge__edge4==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge4);
                                                                    }
                                                                }
                                                            }
                                                            while( (candidate_DNT_edge__edge4 = candidate_DNT_edge__edge4.outNext) != head_candidate_DNT_edge__edge4 );
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_DNT_node_c5.flags = candidate_DNT_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c5;
                                                        } else { 
                                                            if(prev__candidate_DNT_node_c5==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c5);
                                                            }
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_DNT_edge__edge3.flags = candidate_DNT_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge3;
                                                        } else { 
                                                            if(prev__candidate_DNT_edge__edge3==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge3);
                                                            }
                                                        }
                                                    }
                                                    while( (candidate_DNT_edge__edge3 = candidate_DNT_edge__edge3.outNext) != head_candidate_DNT_edge__edge3 );
                                                }
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_DNT_edge__edge7.flags = candidate_DNT_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge7;
                                                } else { 
                                                    if(prev__candidate_DNT_edge__edge7==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge7);
                                                    }
                                                }
                                            }
                                            while( (candidate_DNT_edge__edge7 = candidate_DNT_edge__edge7.outNext) != head_candidate_DNT_edge__edge7 );
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_DNT_node_c4.flags = candidate_DNT_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c4;
                                        } else { 
                                            if(prev__candidate_DNT_node_c4==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c4);
                                            }
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_DNT_edge__edge2.flags = candidate_DNT_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge2;
                                        } else { 
                                            if(prev__candidate_DNT_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge2);
                                            }
                                        }
                                    }
                                    while( (candidate_DNT_edge__edge2 = candidate_DNT_edge__edge2.outNext) != head_candidate_DNT_edge__edge2 );
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_DNT_node_c3.flags = candidate_DNT_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c3;
                                } else { 
                                    if(prev__candidate_DNT_node_c3==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c3);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_DNT_edge__edge1.flags = candidate_DNT_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge1;
                                } else { 
                                    if(prev__candidate_DNT_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge1);
                                    }
                                }
                            }
                            while( (candidate_DNT_edge__edge1 = candidate_DNT_edge__edge1.outNext) != head_candidate_DNT_edge__edge1 );
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_DNT_edge__edge6.flags = candidate_DNT_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge6;
                        } else { 
                            if(prev__candidate_DNT_edge__edge6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge6);
                            }
                        }
                    }
                    while( (candidate_DNT_edge__edge6 = candidate_DNT_edge__edge6.outNext) != head_candidate_DNT_edge__edge6 );
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_DNT_node_c2.flags = candidate_DNT_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c2;
                } else { 
                    if(prev__candidate_DNT_node_c2==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c2);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_DNT_node_c1.flags = candidate_DNT_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_node_c1;
                } else { 
                    if(prev__candidate_DNT_node_c1==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_DNT_node_c1);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_DNT_edge__edge0.flags = candidate_DNT_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNT_edge__edge0;
                } else { 
                    if(prev__candidate_DNT_edge__edge0==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_DNT_edge__edge0);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_DNTUnfolded : LGSPAction
    {
        public Action_DNTUnfolded() {
            rulePattern = Rule_DNTUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 19, 22, 0, 0 + 0);
        }

        public override string Name { get { return "DNTUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_DNTUnfolded instance = new Action_DNTUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            // Lookup DNTUnfolded_edge__edge0 
            int type_id_candidate_DNTUnfolded_edge__edge0 = 1;
            for(LGSPEdge head_candidate_DNTUnfolded_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_DNTUnfolded_edge__edge0], candidate_DNTUnfolded_edge__edge0 = head_candidate_DNTUnfolded_edge__edge0.typeNext; candidate_DNTUnfolded_edge__edge0 != head_candidate_DNTUnfolded_edge__edge0; candidate_DNTUnfolded_edge__edge0 = candidate_DNTUnfolded_edge__edge0.typeNext)
            {
                uint prev__candidate_DNTUnfolded_edge__edge0;
                prev__candidate_DNTUnfolded_edge__edge0 = candidate_DNTUnfolded_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_DNTUnfolded_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Source DNTUnfolded_node_c1 from DNTUnfolded_edge__edge0 
                LGSPNode candidate_DNTUnfolded_node_c1 = candidate_DNTUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c1.type.TypeID]) {
                    candidate_DNTUnfolded_edge__edge0.flags = candidate_DNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_DNTUnfolded_node_c1;
                prev__candidate_DNTUnfolded_node_c1 = candidate_DNTUnfolded_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_DNTUnfolded_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Target DNTUnfolded_node_c2 from DNTUnfolded_edge__edge0 
                LGSPNode candidate_DNTUnfolded_node_c2 = candidate_DNTUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c2.type.TypeID]) {
                    candidate_DNTUnfolded_node_c1.flags = candidate_DNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c1;
                    candidate_DNTUnfolded_edge__edge0.flags = candidate_DNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge0;
                    continue;
                }
                if((candidate_DNTUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                    && candidate_DNTUnfolded_node_c2==candidate_DNTUnfolded_node_c1
                    )
                {
                    candidate_DNTUnfolded_node_c1.flags = candidate_DNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c1;
                    candidate_DNTUnfolded_edge__edge0.flags = candidate_DNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_DNTUnfolded_node_c2;
                prev__candidate_DNTUnfolded_node_c2 = candidate_DNTUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_DNTUnfolded_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Extend Outgoing DNTUnfolded_edge__edge6 from DNTUnfolded_node_c1 
                LGSPEdge head_candidate_DNTUnfolded_edge__edge6 = candidate_DNTUnfolded_node_c1.outhead;
                if(head_candidate_DNTUnfolded_edge__edge6 != null)
                {
                    LGSPEdge candidate_DNTUnfolded_edge__edge6 = head_candidate_DNTUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_DNTUnfolded_edge__edge6.target != candidate_DNTUnfolded_node_c2) {
                            continue;
                        }
                        if((candidate_DNTUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                            && candidate_DNTUnfolded_edge__edge6==candidate_DNTUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_DNTUnfolded_edge__edge6;
                        prev__candidate_DNTUnfolded_edge__edge6 = candidate_DNTUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_DNTUnfolded_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        // Extend Outgoing DNTUnfolded_edge__edge9 from DNTUnfolded_node_c1 
                        LGSPEdge head_candidate_DNTUnfolded_edge__edge9 = candidate_DNTUnfolded_node_c1.outhead;
                        if(head_candidate_DNTUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge candidate_DNTUnfolded_edge__edge9 = head_candidate_DNTUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if((candidate_DNTUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                    && (candidate_DNTUnfolded_edge__edge9==candidate_DNTUnfolded_edge__edge0
                                        || candidate_DNTUnfolded_edge__edge9==candidate_DNTUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_DNTUnfolded_edge__edge9;
                                prev__candidate_DNTUnfolded_edge__edge9 = candidate_DNTUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_DNTUnfolded_edge__edge9.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Implicit Target DNTUnfolded_node_c from DNTUnfolded_edge__edge9 
                                LGSPNode candidate_DNTUnfolded_node_c = candidate_DNTUnfolded_edge__edge9.target;
                                if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c.type.TypeID]) {
                                    candidate_DNTUnfolded_edge__edge9.flags = candidate_DNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge9;
                                    continue;
                                }
                                if((candidate_DNTUnfolded_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                    && (candidate_DNTUnfolded_node_c==candidate_DNTUnfolded_node_c1
                                        || candidate_DNTUnfolded_node_c==candidate_DNTUnfolded_node_c2
                                        )
                                    )
                                {
                                    candidate_DNTUnfolded_edge__edge9.flags = candidate_DNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge9;
                                    continue;
                                }
                                uint prev__candidate_DNTUnfolded_node_c;
                                prev__candidate_DNTUnfolded_node_c = candidate_DNTUnfolded_node_c.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_DNTUnfolded_node_c.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Extend Outgoing DNTUnfolded_edge__edge1 from DNTUnfolded_node_c2 
                                LGSPEdge head_candidate_DNTUnfolded_edge__edge1 = candidate_DNTUnfolded_node_c2.outhead;
                                if(head_candidate_DNTUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge candidate_DNTUnfolded_edge__edge1 = head_candidate_DNTUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if((candidate_DNTUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_DNTUnfolded_edge__edge1==candidate_DNTUnfolded_edge__edge0
                                                || candidate_DNTUnfolded_edge__edge1==candidate_DNTUnfolded_edge__edge6
                                                || candidate_DNTUnfolded_edge__edge1==candidate_DNTUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_DNTUnfolded_edge__edge1;
                                        prev__candidate_DNTUnfolded_edge__edge1 = candidate_DNTUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_DNTUnfolded_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Implicit Target DNTUnfolded_node_c3 from DNTUnfolded_edge__edge1 
                                        LGSPNode candidate_DNTUnfolded_node_c3 = candidate_DNTUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c3.type.TypeID]) {
                                            candidate_DNTUnfolded_edge__edge1.flags = candidate_DNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge1;
                                            continue;
                                        }
                                        if((candidate_DNTUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_DNTUnfolded_node_c3==candidate_DNTUnfolded_node_c1
                                                || candidate_DNTUnfolded_node_c3==candidate_DNTUnfolded_node_c2
                                                || candidate_DNTUnfolded_node_c3==candidate_DNTUnfolded_node_c
                                                )
                                            )
                                        {
                                            candidate_DNTUnfolded_edge__edge1.flags = candidate_DNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge1;
                                            continue;
                                        }
                                        uint prev__candidate_DNTUnfolded_node_c3;
                                        prev__candidate_DNTUnfolded_node_c3 = candidate_DNTUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_DNTUnfolded_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Extend Outgoing DNTUnfolded_edge__edge13 from DNTUnfolded_node_c2 
                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge13 = candidate_DNTUnfolded_node_c2.outhead;
                                        if(head_candidate_DNTUnfolded_edge__edge13 != null)
                                        {
                                            LGSPEdge candidate_DNTUnfolded_edge__edge13 = head_candidate_DNTUnfolded_edge__edge13;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge13.type.TypeID]) {
                                                    continue;
                                                }
                                                if((candidate_DNTUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                    && (candidate_DNTUnfolded_edge__edge13==candidate_DNTUnfolded_edge__edge0
                                                        || candidate_DNTUnfolded_edge__edge13==candidate_DNTUnfolded_edge__edge6
                                                        || candidate_DNTUnfolded_edge__edge13==candidate_DNTUnfolded_edge__edge9
                                                        || candidate_DNTUnfolded_edge__edge13==candidate_DNTUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_DNTUnfolded_edge__edge13;
                                                prev__candidate_DNTUnfolded_edge__edge13 = candidate_DNTUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_DNTUnfolded_edge__edge13.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Implicit Target DNTUnfolded_node_n2 from DNTUnfolded_edge__edge13 
                                                LGSPNode candidate_DNTUnfolded_node_n2 = candidate_DNTUnfolded_edge__edge13.target;
                                                if(!NodeType_N.isMyType[candidate_DNTUnfolded_node_n2.type.TypeID]) {
                                                    candidate_DNTUnfolded_edge__edge13.flags = candidate_DNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge13;
                                                    continue;
                                                }
                                                uint prev__candidate_DNTUnfolded_node_n2;
                                                prev__candidate_DNTUnfolded_node_n2 = candidate_DNTUnfolded_node_n2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_DNTUnfolded_node_n2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Extend Outgoing DNTUnfolded_edge__edge10 from DNTUnfolded_node_c 
                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge10 = candidate_DNTUnfolded_node_c.outhead;
                                                if(head_candidate_DNTUnfolded_edge__edge10 != null)
                                                {
                                                    LGSPEdge candidate_DNTUnfolded_edge__edge10 = head_candidate_DNTUnfolded_edge__edge10;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge10.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((candidate_DNTUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                            && (candidate_DNTUnfolded_edge__edge10==candidate_DNTUnfolded_edge__edge0
                                                                || candidate_DNTUnfolded_edge__edge10==candidate_DNTUnfolded_edge__edge6
                                                                || candidate_DNTUnfolded_edge__edge10==candidate_DNTUnfolded_edge__edge9
                                                                || candidate_DNTUnfolded_edge__edge10==candidate_DNTUnfolded_edge__edge1
                                                                || candidate_DNTUnfolded_edge__edge10==candidate_DNTUnfolded_edge__edge13
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_DNTUnfolded_edge__edge10;
                                                        prev__candidate_DNTUnfolded_edge__edge10 = candidate_DNTUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_DNTUnfolded_edge__edge10.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Implicit Target DNTUnfolded_node__node0 from DNTUnfolded_edge__edge10 
                                                        LGSPNode candidate_DNTUnfolded_node__node0 = candidate_DNTUnfolded_edge__edge10.target;
                                                        if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node0.type.TypeID]) {
                                                            candidate_DNTUnfolded_edge__edge10.flags = candidate_DNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge10;
                                                            continue;
                                                        }
                                                        uint prev__candidate_DNTUnfolded_node__node0;
                                                        prev__candidate_DNTUnfolded_node__node0 = candidate_DNTUnfolded_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_DNTUnfolded_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Extend Outgoing DNTUnfolded_edge__edge11 from DNTUnfolded_node_c 
                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge11 = candidate_DNTUnfolded_node_c.outhead;
                                                        if(head_candidate_DNTUnfolded_edge__edge11 != null)
                                                        {
                                                            LGSPEdge candidate_DNTUnfolded_edge__edge11 = head_candidate_DNTUnfolded_edge__edge11;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge11.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((candidate_DNTUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                    && (candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge0
                                                                        || candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge6
                                                                        || candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge9
                                                                        || candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge1
                                                                        || candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge13
                                                                        || candidate_DNTUnfolded_edge__edge11==candidate_DNTUnfolded_edge__edge10
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_DNTUnfolded_edge__edge11;
                                                                prev__candidate_DNTUnfolded_edge__edge11 = candidate_DNTUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_DNTUnfolded_edge__edge11.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                // Implicit Target DNTUnfolded_node__node1 from DNTUnfolded_edge__edge11 
                                                                LGSPNode candidate_DNTUnfolded_node__node1 = candidate_DNTUnfolded_edge__edge11.target;
                                                                if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node1.type.TypeID]) {
                                                                    candidate_DNTUnfolded_edge__edge11.flags = candidate_DNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge11;
                                                                    continue;
                                                                }
                                                                if((candidate_DNTUnfolded_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                    && candidate_DNTUnfolded_node__node1==candidate_DNTUnfolded_node__node0
                                                                    )
                                                                {
                                                                    candidate_DNTUnfolded_edge__edge11.flags = candidate_DNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge11;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_DNTUnfolded_node__node1;
                                                                prev__candidate_DNTUnfolded_node__node1 = candidate_DNTUnfolded_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_DNTUnfolded_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                // Extend Outgoing DNTUnfolded_edge__edge12 from DNTUnfolded_node_c 
                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge12 = candidate_DNTUnfolded_node_c.outhead;
                                                                if(head_candidate_DNTUnfolded_edge__edge12 != null)
                                                                {
                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge12 = head_candidate_DNTUnfolded_edge__edge12;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge12.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_DNTUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && (candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge0
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge6
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge9
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge1
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge13
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge10
                                                                                || candidate_DNTUnfolded_edge__edge12==candidate_DNTUnfolded_edge__edge11
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_DNTUnfolded_edge__edge12;
                                                                        prev__candidate_DNTUnfolded_edge__edge12 = candidate_DNTUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_DNTUnfolded_edge__edge12.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Implicit Target DNTUnfolded_node__node2 from DNTUnfolded_edge__edge12 
                                                                        LGSPNode candidate_DNTUnfolded_node__node2 = candidate_DNTUnfolded_edge__edge12.target;
                                                                        if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node2.type.TypeID]) {
                                                                            candidate_DNTUnfolded_edge__edge12.flags = candidate_DNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge12;
                                                                            continue;
                                                                        }
                                                                        if((candidate_DNTUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && (candidate_DNTUnfolded_node__node2==candidate_DNTUnfolded_node__node0
                                                                                || candidate_DNTUnfolded_node__node2==candidate_DNTUnfolded_node__node1
                                                                                )
                                                                            )
                                                                        {
                                                                            candidate_DNTUnfolded_edge__edge12.flags = candidate_DNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge12;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_DNTUnfolded_node__node2;
                                                                        prev__candidate_DNTUnfolded_node__node2 = candidate_DNTUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_DNTUnfolded_node__node2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Extend Outgoing DNTUnfolded_edge__edge2 from DNTUnfolded_node_c3 
                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge2 = candidate_DNTUnfolded_node_c3.outhead;
                                                                        if(head_candidate_DNTUnfolded_edge__edge2 != null)
                                                                        {
                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge2 = head_candidate_DNTUnfolded_edge__edge2;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge2.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_DNTUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                    && (candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge0
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge6
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge9
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge1
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge13
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge10
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge11
                                                                                        || candidate_DNTUnfolded_edge__edge2==candidate_DNTUnfolded_edge__edge12
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_DNTUnfolded_edge__edge2;
                                                                                prev__candidate_DNTUnfolded_edge__edge2 = candidate_DNTUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_DNTUnfolded_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Implicit Target DNTUnfolded_node_c4 from DNTUnfolded_edge__edge2 
                                                                                LGSPNode candidate_DNTUnfolded_node_c4 = candidate_DNTUnfolded_edge__edge2.target;
                                                                                if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c4.type.TypeID]) {
                                                                                    candidate_DNTUnfolded_edge__edge2.flags = candidate_DNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge2;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_DNTUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                    && (candidate_DNTUnfolded_node_c4==candidate_DNTUnfolded_node_c1
                                                                                        || candidate_DNTUnfolded_node_c4==candidate_DNTUnfolded_node_c2
                                                                                        || candidate_DNTUnfolded_node_c4==candidate_DNTUnfolded_node_c
                                                                                        || candidate_DNTUnfolded_node_c4==candidate_DNTUnfolded_node_c3
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    candidate_DNTUnfolded_edge__edge2.flags = candidate_DNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge2;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_DNTUnfolded_node_c4;
                                                                                prev__candidate_DNTUnfolded_node_c4 = candidate_DNTUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_DNTUnfolded_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Extend Outgoing DNTUnfolded_edge__edge7 from DNTUnfolded_node_c3 
                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge7 = candidate_DNTUnfolded_node_c3.outhead;
                                                                                if(head_candidate_DNTUnfolded_edge__edge7 != null)
                                                                                {
                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge7 = head_candidate_DNTUnfolded_edge__edge7;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge7.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if(candidate_DNTUnfolded_edge__edge7.target != candidate_DNTUnfolded_node_c4) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_DNTUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                            && (candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge0
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge6
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge9
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge1
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge13
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge10
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge11
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge12
                                                                                                || candidate_DNTUnfolded_edge__edge7==candidate_DNTUnfolded_edge__edge2
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_DNTUnfolded_edge__edge7;
                                                                                        prev__candidate_DNTUnfolded_edge__edge7 = candidate_DNTUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        candidate_DNTUnfolded_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        // Extend Outgoing DNTUnfolded_edge__edge16 from DNTUnfolded_node_c3 
                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge16 = candidate_DNTUnfolded_node_c3.outhead;
                                                                                        if(head_candidate_DNTUnfolded_edge__edge16 != null)
                                                                                        {
                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge16 = head_candidate_DNTUnfolded_edge__edge16;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge16.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_DNTUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge0
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge6
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge9
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge1
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge13
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge10
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge11
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge12
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge2
                                                                                                        || candidate_DNTUnfolded_edge__edge16==candidate_DNTUnfolded_edge__edge7
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_DNTUnfolded_edge__edge16;
                                                                                                prev__candidate_DNTUnfolded_edge__edge16 = candidate_DNTUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_DNTUnfolded_edge__edge16.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Implicit Target DNTUnfolded_node__node5 from DNTUnfolded_edge__edge16 
                                                                                                LGSPNode candidate_DNTUnfolded_node__node5 = candidate_DNTUnfolded_edge__edge16.target;
                                                                                                if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node5.type.TypeID]) {
                                                                                                    candidate_DNTUnfolded_edge__edge16.flags = candidate_DNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge16;
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_DNTUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_DNTUnfolded_node__node5==candidate_DNTUnfolded_node__node0
                                                                                                        || candidate_DNTUnfolded_node__node5==candidate_DNTUnfolded_node__node1
                                                                                                        || candidate_DNTUnfolded_node__node5==candidate_DNTUnfolded_node__node2
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    candidate_DNTUnfolded_edge__edge16.flags = candidate_DNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge16;
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_DNTUnfolded_node__node5;
                                                                                                prev__candidate_DNTUnfolded_node__node5 = candidate_DNTUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_DNTUnfolded_node__node5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Extend Outgoing DNTUnfolded_edge__edge14 from DNTUnfolded_node_n2 
                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge14 = candidate_DNTUnfolded_node_n2.outhead;
                                                                                                if(head_candidate_DNTUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge14 = head_candidate_DNTUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_DNTUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                            && (candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge0
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge6
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge9
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge1
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge13
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge10
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge11
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge12
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge2
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge7
                                                                                                                || candidate_DNTUnfolded_edge__edge14==candidate_DNTUnfolded_edge__edge16
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_DNTUnfolded_edge__edge14;
                                                                                                        prev__candidate_DNTUnfolded_edge__edge14 = candidate_DNTUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_DNTUnfolded_edge__edge14.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Implicit Target DNTUnfolded_node__node3 from DNTUnfolded_edge__edge14 
                                                                                                        LGSPNode candidate_DNTUnfolded_node__node3 = candidate_DNTUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_O.isMyType[candidate_DNTUnfolded_node__node3.type.TypeID]) {
                                                                                                            candidate_DNTUnfolded_edge__edge14.flags = candidate_DNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge14;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_DNTUnfolded_node__node3;
                                                                                                        prev__candidate_DNTUnfolded_node__node3 = candidate_DNTUnfolded_node__node3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_DNTUnfolded_node__node3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Extend Outgoing DNTUnfolded_edge__edge15 from DNTUnfolded_node_n2 
                                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge15 = candidate_DNTUnfolded_node_n2.outhead;
                                                                                                        if(head_candidate_DNTUnfolded_edge__edge15 != null)
                                                                                                        {
                                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge15 = head_candidate_DNTUnfolded_edge__edge15;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_DNTUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && (candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge0
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge6
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge9
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge1
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge13
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge10
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge11
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge12
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge2
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge7
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge16
                                                                                                                        || candidate_DNTUnfolded_edge__edge15==candidate_DNTUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_DNTUnfolded_edge__edge15;
                                                                                                                prev__candidate_DNTUnfolded_edge__edge15 = candidate_DNTUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                candidate_DNTUnfolded_edge__edge15.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                // Implicit Target DNTUnfolded_node__node4 from DNTUnfolded_edge__edge15 
                                                                                                                LGSPNode candidate_DNTUnfolded_node__node4 = candidate_DNTUnfolded_edge__edge15.target;
                                                                                                                if(!NodeType_O.isMyType[candidate_DNTUnfolded_node__node4.type.TypeID]) {
                                                                                                                    candidate_DNTUnfolded_edge__edge15.flags = candidate_DNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge15;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_DNTUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && candidate_DNTUnfolded_node__node4==candidate_DNTUnfolded_node__node3
                                                                                                                    )
                                                                                                                {
                                                                                                                    candidate_DNTUnfolded_edge__edge15.flags = candidate_DNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge15;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_DNTUnfolded_node__node4;
                                                                                                                prev__candidate_DNTUnfolded_node__node4 = candidate_DNTUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                candidate_DNTUnfolded_node__node4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                // Extend Outgoing DNTUnfolded_edge__edge3 from DNTUnfolded_node_c4 
                                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge3 = candidate_DNTUnfolded_node_c4.outhead;
                                                                                                                if(head_candidate_DNTUnfolded_edge__edge3 != null)
                                                                                                                {
                                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge3 = head_candidate_DNTUnfolded_edge__edge3;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge3.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_DNTUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                            && (candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge0
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge6
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge9
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge1
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge13
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge10
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge11
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge12
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge2
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge7
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge16
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge14
                                                                                                                                || candidate_DNTUnfolded_edge__edge3==candidate_DNTUnfolded_edge__edge15
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_DNTUnfolded_edge__edge3;
                                                                                                                        prev__candidate_DNTUnfolded_edge__edge3 = candidate_DNTUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        candidate_DNTUnfolded_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        // Implicit Target DNTUnfolded_node_c5 from DNTUnfolded_edge__edge3 
                                                                                                                        LGSPNode candidate_DNTUnfolded_node_c5 = candidate_DNTUnfolded_edge__edge3.target;
                                                                                                                        if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c5.type.TypeID]) {
                                                                                                                            candidate_DNTUnfolded_edge__edge3.flags = candidate_DNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge3;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_DNTUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                            && (candidate_DNTUnfolded_node_c5==candidate_DNTUnfolded_node_c1
                                                                                                                                || candidate_DNTUnfolded_node_c5==candidate_DNTUnfolded_node_c2
                                                                                                                                || candidate_DNTUnfolded_node_c5==candidate_DNTUnfolded_node_c
                                                                                                                                || candidate_DNTUnfolded_node_c5==candidate_DNTUnfolded_node_c3
                                                                                                                                || candidate_DNTUnfolded_node_c5==candidate_DNTUnfolded_node_c4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            candidate_DNTUnfolded_edge__edge3.flags = candidate_DNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge3;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_DNTUnfolded_node_c5;
                                                                                                                        prev__candidate_DNTUnfolded_node_c5 = candidate_DNTUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        candidate_DNTUnfolded_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        // Extend Outgoing DNTUnfolded_edge__edge17 from DNTUnfolded_node_c4 
                                                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge17 = candidate_DNTUnfolded_node_c4.outhead;
                                                                                                                        if(head_candidate_DNTUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge17 = head_candidate_DNTUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_DNTUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && (candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge0
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge6
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge9
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge1
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge13
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge10
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge11
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge12
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge2
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge7
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge16
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge14
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge15
                                                                                                                                        || candidate_DNTUnfolded_edge__edge17==candidate_DNTUnfolded_edge__edge3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_DNTUnfolded_edge__edge17;
                                                                                                                                prev__candidate_DNTUnfolded_edge__edge17 = candidate_DNTUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                candidate_DNTUnfolded_edge__edge17.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                // Implicit Target DNTUnfolded_node_n4 from DNTUnfolded_edge__edge17 
                                                                                                                                LGSPNode candidate_DNTUnfolded_node_n4 = candidate_DNTUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_N.isMyType[candidate_DNTUnfolded_node_n4.type.TypeID]) {
                                                                                                                                    candidate_DNTUnfolded_edge__edge17.flags = candidate_DNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_DNTUnfolded_node_n4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && candidate_DNTUnfolded_node_n4==candidate_DNTUnfolded_node_n2
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    candidate_DNTUnfolded_edge__edge17.flags = candidate_DNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // Extend Outgoing DNTUnfolded_edge__edge4 from DNTUnfolded_node_c5 
                                                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge4 = candidate_DNTUnfolded_node_c5.outhead;
                                                                                                                                if(head_candidate_DNTUnfolded_edge__edge4 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge4 = head_candidate_DNTUnfolded_edge__edge4;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_DNTUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                || candidate_DNTUnfolded_edge__edge4==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_DNTUnfolded_edge__edge4;
                                                                                                                                        prev__candidate_DNTUnfolded_edge__edge4 = candidate_DNTUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        candidate_DNTUnfolded_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        // Implicit Target DNTUnfolded_node_c6 from DNTUnfolded_edge__edge4 
                                                                                                                                        LGSPNode candidate_DNTUnfolded_node_c6 = candidate_DNTUnfolded_edge__edge4.target;
                                                                                                                                        if(!NodeType_C.isMyType[candidate_DNTUnfolded_node_c6.type.TypeID]) {
                                                                                                                                            candidate_DNTUnfolded_edge__edge4.flags = candidate_DNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_DNTUnfolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c1
                                                                                                                                                || candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c2
                                                                                                                                                || candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c
                                                                                                                                                || candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c3
                                                                                                                                                || candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c4
                                                                                                                                                || candidate_DNTUnfolded_node_c6==candidate_DNTUnfolded_node_c5
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            candidate_DNTUnfolded_edge__edge4.flags = candidate_DNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        // Extend Outgoing DNTUnfolded_edge__edge8 from DNTUnfolded_node_c5 
                                                                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge8 = candidate_DNTUnfolded_node_c5.outhead;
                                                                                                                                        if(head_candidate_DNTUnfolded_edge__edge8 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge8 = head_candidate_DNTUnfolded_edge__edge8;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(candidate_DNTUnfolded_edge__edge8.target != candidate_DNTUnfolded_node_c6) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_DNTUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                    && (candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                        || candidate_DNTUnfolded_edge__edge8==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_DNTUnfolded_edge__edge8;
                                                                                                                                                prev__candidate_DNTUnfolded_edge__edge8 = candidate_DNTUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                candidate_DNTUnfolded_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                // Extend Outgoing DNTUnfolded_edge__edge20 from DNTUnfolded_node_c5 
                                                                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge20 = candidate_DNTUnfolded_node_c5.outhead;
                                                                                                                                                if(head_candidate_DNTUnfolded_edge__edge20 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge20 = head_candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_DNTUnfolded_edge__edge20.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                            && (candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                                || candidate_DNTUnfolded_edge__edge20==candidate_DNTUnfolded_edge__edge8
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                        prev__candidate_DNTUnfolded_edge__edge20 = candidate_DNTUnfolded_edge__edge20.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        candidate_DNTUnfolded_edge__edge20.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        // Implicit Target DNTUnfolded_node__node8 from DNTUnfolded_edge__edge20 
                                                                                                                                                        LGSPNode candidate_DNTUnfolded_node__node8 = candidate_DNTUnfolded_edge__edge20.target;
                                                                                                                                                        if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                            candidate_DNTUnfolded_edge__edge20.flags = candidate_DNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_DNTUnfolded_node__node8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                            && (candidate_DNTUnfolded_node__node8==candidate_DNTUnfolded_node__node0
                                                                                                                                                                || candidate_DNTUnfolded_node__node8==candidate_DNTUnfolded_node__node1
                                                                                                                                                                || candidate_DNTUnfolded_node__node8==candidate_DNTUnfolded_node__node2
                                                                                                                                                                || candidate_DNTUnfolded_node__node8==candidate_DNTUnfolded_node__node5
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            candidate_DNTUnfolded_edge__edge20.flags = candidate_DNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_DNTUnfolded_node__node8;
                                                                                                                                                        prev__candidate_DNTUnfolded_node__node8 = candidate_DNTUnfolded_node__node8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        candidate_DNTUnfolded_node__node8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        // Extend Outgoing DNTUnfolded_edge__edge18 from DNTUnfolded_node_n4 
                                                                                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge18 = candidate_DNTUnfolded_node_n4.outhead;
                                                                                                                                                        if(head_candidate_DNTUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge18 = head_candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_DNTUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge8
                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge18==candidate_DNTUnfolded_edge__edge20
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                                prev__candidate_DNTUnfolded_edge__edge18 = candidate_DNTUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                candidate_DNTUnfolded_edge__edge18.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                // Implicit Target DNTUnfolded_node__node6 from DNTUnfolded_edge__edge18 
                                                                                                                                                                LGSPNode candidate_DNTUnfolded_node__node6 = candidate_DNTUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_O.isMyType[candidate_DNTUnfolded_node__node6.type.TypeID]) {
                                                                                                                                                                    candidate_DNTUnfolded_edge__edge18.flags = candidate_DNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_DNTUnfolded_node__node6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_DNTUnfolded_node__node6==candidate_DNTUnfolded_node__node3
                                                                                                                                                                        || candidate_DNTUnfolded_node__node6==candidate_DNTUnfolded_node__node4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    candidate_DNTUnfolded_edge__edge18.flags = candidate_DNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_DNTUnfolded_node__node6;
                                                                                                                                                                prev__candidate_DNTUnfolded_node__node6 = candidate_DNTUnfolded_node__node6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                candidate_DNTUnfolded_node__node6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                // Extend Outgoing DNTUnfolded_edge__edge19 from DNTUnfolded_node_n4 
                                                                                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge19 = candidate_DNTUnfolded_node_n4.outhead;
                                                                                                                                                                if(head_candidate_DNTUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge19 = head_candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_DNTUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge8
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge20
                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge19==candidate_DNTUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                        prev__candidate_DNTUnfolded_edge__edge19 = candidate_DNTUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        candidate_DNTUnfolded_edge__edge19.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        // Implicit Target DNTUnfolded_node__node7 from DNTUnfolded_edge__edge19 
                                                                                                                                                                        LGSPNode candidate_DNTUnfolded_node__node7 = candidate_DNTUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[candidate_DNTUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            candidate_DNTUnfolded_edge__edge19.flags = candidate_DNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_DNTUnfolded_node__node7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_DNTUnfolded_node__node7==candidate_DNTUnfolded_node__node3
                                                                                                                                                                                || candidate_DNTUnfolded_node__node7==candidate_DNTUnfolded_node__node4
                                                                                                                                                                                || candidate_DNTUnfolded_node__node7==candidate_DNTUnfolded_node__node6
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            candidate_DNTUnfolded_edge__edge19.flags = candidate_DNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // Extend Outgoing DNTUnfolded_edge__edge5 from DNTUnfolded_node_c6 
                                                                                                                                                                        LGSPEdge head_candidate_DNTUnfolded_edge__edge5 = candidate_DNTUnfolded_node_c6.outhead;
                                                                                                                                                                        if(head_candidate_DNTUnfolded_edge__edge5 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge candidate_DNTUnfolded_edge__edge5 = head_candidate_DNTUnfolded_edge__edge5;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(candidate_DNTUnfolded_edge__edge5.target != candidate_DNTUnfolded_node_c1) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_DNTUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                    && (candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge8
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge20
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge18
                                                                                                                                                                                        || candidate_DNTUnfolded_edge__edge5==candidate_DNTUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_DNTUnfolded_edge__edge5;
                                                                                                                                                                                prev__candidate_DNTUnfolded_edge__edge5 = candidate_DNTUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                candidate_DNTUnfolded_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                                // Extend Outgoing DNTUnfolded_edge__edge21 from DNTUnfolded_node_c6 
                                                                                                                                                                                LGSPEdge head_candidate_DNTUnfolded_edge__edge21 = candidate_DNTUnfolded_node_c6.outhead;
                                                                                                                                                                                if(head_candidate_DNTUnfolded_edge__edge21 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    LGSPEdge candidate_DNTUnfolded_edge__edge21 = head_candidate_DNTUnfolded_edge__edge21;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_DNTUnfolded_edge__edge21.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_DNTUnfolded_edge__edge21.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                            && (candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge0
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge6
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge9
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge1
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge13
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge10
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge11
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge12
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge2
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge7
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge16
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge14
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge15
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge3
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge17
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge4
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge8
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge20
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge18
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge19
                                                                                                                                                                                                || candidate_DNTUnfolded_edge__edge21==candidate_DNTUnfolded_edge__edge5
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // Implicit Target DNTUnfolded_node__node9 from DNTUnfolded_edge__edge21 
                                                                                                                                                                                        LGSPNode candidate_DNTUnfolded_node__node9 = candidate_DNTUnfolded_edge__edge21.target;
                                                                                                                                                                                        if(!NodeType_H.isMyType[candidate_DNTUnfolded_node__node9.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_DNTUnfolded_node__node9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                            && (candidate_DNTUnfolded_node__node9==candidate_DNTUnfolded_node__node0
                                                                                                                                                                                                || candidate_DNTUnfolded_node__node9==candidate_DNTUnfolded_node__node1
                                                                                                                                                                                                || candidate_DNTUnfolded_node__node9==candidate_DNTUnfolded_node__node2
                                                                                                                                                                                                || candidate_DNTUnfolded_node__node9==candidate_DNTUnfolded_node__node5
                                                                                                                                                                                                || candidate_DNTUnfolded_node__node9==candidate_DNTUnfolded_node__node8
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c1] = candidate_DNTUnfolded_node_c1;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c2] = candidate_DNTUnfolded_node_c2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c3] = candidate_DNTUnfolded_node_c3;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c4] = candidate_DNTUnfolded_node_c4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c5] = candidate_DNTUnfolded_node_c5;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c6] = candidate_DNTUnfolded_node_c6;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c] = candidate_DNTUnfolded_node_c;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node0] = candidate_DNTUnfolded_node__node0;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node1] = candidate_DNTUnfolded_node__node1;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node2] = candidate_DNTUnfolded_node__node2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@n2] = candidate_DNTUnfolded_node_n2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node3] = candidate_DNTUnfolded_node__node3;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node4] = candidate_DNTUnfolded_node__node4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node5] = candidate_DNTUnfolded_node__node5;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@n4] = candidate_DNTUnfolded_node_n4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node6] = candidate_DNTUnfolded_node__node6;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node7] = candidate_DNTUnfolded_node__node7;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node8] = candidate_DNTUnfolded_node__node8;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node9] = candidate_DNTUnfolded_node__node9;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge0] = candidate_DNTUnfolded_edge__edge0;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge1] = candidate_DNTUnfolded_edge__edge1;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge2] = candidate_DNTUnfolded_edge__edge2;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge3] = candidate_DNTUnfolded_edge__edge3;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge4] = candidate_DNTUnfolded_edge__edge4;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge5] = candidate_DNTUnfolded_edge__edge5;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge6] = candidate_DNTUnfolded_edge__edge6;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge7] = candidate_DNTUnfolded_edge__edge7;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge8] = candidate_DNTUnfolded_edge__edge8;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge9] = candidate_DNTUnfolded_edge__edge9;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge10] = candidate_DNTUnfolded_edge__edge10;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge11] = candidate_DNTUnfolded_edge__edge11;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge12] = candidate_DNTUnfolded_edge__edge12;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge13] = candidate_DNTUnfolded_edge__edge13;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge14] = candidate_DNTUnfolded_edge__edge14;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge15] = candidate_DNTUnfolded_edge__edge15;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge16] = candidate_DNTUnfolded_edge__edge16;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge17] = candidate_DNTUnfolded_edge__edge17;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge18] = candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge19] = candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge20] = candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge21] = candidate_DNTUnfolded_edge__edge21;
                                                                                                                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                        // if enough matches were found, we leave
                                                                                                                                                                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                        {
                                                                                                                                                                                            candidate_DNTUnfolded_node_c6.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge21);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c6.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge5);
                                                                                                                                                                                            candidate_DNTUnfolded_node_n4.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge19);
                                                                                                                                                                                            candidate_DNTUnfolded_node_n4.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge18);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c5.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge20);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c5.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge8);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c5.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge4);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c4.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge17);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c4.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge3);
                                                                                                                                                                                            candidate_DNTUnfolded_node_n2.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge15);
                                                                                                                                                                                            candidate_DNTUnfolded_node_n2.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge14);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c3.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge16);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c3.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge7);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c3.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge2);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge12);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge11);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge10);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c2.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge13);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c2.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge1);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c1.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge9);
                                                                                                                                                                                            candidate_DNTUnfolded_node_c1.MoveOutHeadAfter(candidate_DNTUnfolded_edge__edge6);
                                                                                                                                                                                            graph.MoveHeadAfter(candidate_DNTUnfolded_edge__edge0);
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge5.flags = candidate_DNTUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge5;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge19.flags = candidate_DNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node6.flags = candidate_DNTUnfolded_node__node6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node6;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge18.flags = candidate_DNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node8.flags = candidate_DNTUnfolded_node__node8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node8;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge20.flags = candidate_DNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge8.flags = candidate_DNTUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge8;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge4.flags = candidate_DNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge4;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge17.flags = candidate_DNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge17;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c5.flags = candidate_DNTUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c5;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge3.flags = candidate_DNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge3;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node4.flags = candidate_DNTUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node4;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge15.flags = candidate_DNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge15;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node3.flags = candidate_DNTUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node3;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge14.flags = candidate_DNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge14;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node5.flags = candidate_DNTUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node5;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge16.flags = candidate_DNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge16;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge7.flags = candidate_DNTUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge7;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c4.flags = candidate_DNTUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c4;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge2.flags = candidate_DNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge2;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node2.flags = candidate_DNTUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node2;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge12.flags = candidate_DNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge12;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node1.flags = candidate_DNTUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node1;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge11.flags = candidate_DNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge11;
                                                                                                                                                                                            candidate_DNTUnfolded_node__node0.flags = candidate_DNTUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node0;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge10.flags = candidate_DNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge10;
                                                                                                                                                                                            candidate_DNTUnfolded_node_n2.flags = candidate_DNTUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_n2;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge13.flags = candidate_DNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge13;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c3.flags = candidate_DNTUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c3;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge1.flags = candidate_DNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge1;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c.flags = candidate_DNTUnfolded_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge9.flags = candidate_DNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge9;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge6.flags = candidate_DNTUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge6;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c2.flags = candidate_DNTUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c2;
                                                                                                                                                                                            candidate_DNTUnfolded_node_c1.flags = candidate_DNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c1;
                                                                                                                                                                                            candidate_DNTUnfolded_edge__edge0.flags = candidate_DNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge0;
                                                                                                                                                                                            return matches;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_DNTUnfolded_edge__edge21 = candidate_DNTUnfolded_edge__edge21.outNext) != head_candidate_DNTUnfolded_edge__edge21 );
                                                                                                                                                                                }
                                                                                                                                                                                candidate_DNTUnfolded_edge__edge5.flags = candidate_DNTUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge5;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_DNTUnfolded_edge__edge5 = candidate_DNTUnfolded_edge__edge5.outNext) != head_candidate_DNTUnfolded_edge__edge5 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_DNTUnfolded_edge__edge19.flags = candidate_DNTUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge19;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_DNTUnfolded_edge__edge19 = candidate_DNTUnfolded_edge__edge19.outNext) != head_candidate_DNTUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                candidate_DNTUnfolded_node__node6.flags = candidate_DNTUnfolded_node__node6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node6;
                                                                                                                                                                candidate_DNTUnfolded_edge__edge18.flags = candidate_DNTUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge18;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_DNTUnfolded_edge__edge18 = candidate_DNTUnfolded_edge__edge18.outNext) != head_candidate_DNTUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        candidate_DNTUnfolded_node__node8.flags = candidate_DNTUnfolded_node__node8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node8;
                                                                                                                                                        candidate_DNTUnfolded_edge__edge20.flags = candidate_DNTUnfolded_edge__edge20.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge20;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_DNTUnfolded_edge__edge20 = candidate_DNTUnfolded_edge__edge20.outNext) != head_candidate_DNTUnfolded_edge__edge20 );
                                                                                                                                                }
                                                                                                                                                candidate_DNTUnfolded_edge__edge8.flags = candidate_DNTUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge8;
                                                                                                                                            }
                                                                                                                                            while( (candidate_DNTUnfolded_edge__edge8 = candidate_DNTUnfolded_edge__edge8.outNext) != head_candidate_DNTUnfolded_edge__edge8 );
                                                                                                                                        }
                                                                                                                                        candidate_DNTUnfolded_edge__edge4.flags = candidate_DNTUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge4;
                                                                                                                                    }
                                                                                                                                    while( (candidate_DNTUnfolded_edge__edge4 = candidate_DNTUnfolded_edge__edge4.outNext) != head_candidate_DNTUnfolded_edge__edge4 );
                                                                                                                                }
                                                                                                                                candidate_DNTUnfolded_edge__edge17.flags = candidate_DNTUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge17;
                                                                                                                            }
                                                                                                                            while( (candidate_DNTUnfolded_edge__edge17 = candidate_DNTUnfolded_edge__edge17.outNext) != head_candidate_DNTUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        candidate_DNTUnfolded_node_c5.flags = candidate_DNTUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c5;
                                                                                                                        candidate_DNTUnfolded_edge__edge3.flags = candidate_DNTUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge3;
                                                                                                                    }
                                                                                                                    while( (candidate_DNTUnfolded_edge__edge3 = candidate_DNTUnfolded_edge__edge3.outNext) != head_candidate_DNTUnfolded_edge__edge3 );
                                                                                                                }
                                                                                                                candidate_DNTUnfolded_node__node4.flags = candidate_DNTUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node4;
                                                                                                                candidate_DNTUnfolded_edge__edge15.flags = candidate_DNTUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge15;
                                                                                                            }
                                                                                                            while( (candidate_DNTUnfolded_edge__edge15 = candidate_DNTUnfolded_edge__edge15.outNext) != head_candidate_DNTUnfolded_edge__edge15 );
                                                                                                        }
                                                                                                        candidate_DNTUnfolded_node__node3.flags = candidate_DNTUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node3;
                                                                                                        candidate_DNTUnfolded_edge__edge14.flags = candidate_DNTUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge14;
                                                                                                    }
                                                                                                    while( (candidate_DNTUnfolded_edge__edge14 = candidate_DNTUnfolded_edge__edge14.outNext) != head_candidate_DNTUnfolded_edge__edge14 );
                                                                                                }
                                                                                                candidate_DNTUnfolded_node__node5.flags = candidate_DNTUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node5;
                                                                                                candidate_DNTUnfolded_edge__edge16.flags = candidate_DNTUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge16;
                                                                                            }
                                                                                            while( (candidate_DNTUnfolded_edge__edge16 = candidate_DNTUnfolded_edge__edge16.outNext) != head_candidate_DNTUnfolded_edge__edge16 );
                                                                                        }
                                                                                        candidate_DNTUnfolded_edge__edge7.flags = candidate_DNTUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge7;
                                                                                    }
                                                                                    while( (candidate_DNTUnfolded_edge__edge7 = candidate_DNTUnfolded_edge__edge7.outNext) != head_candidate_DNTUnfolded_edge__edge7 );
                                                                                }
                                                                                candidate_DNTUnfolded_node_c4.flags = candidate_DNTUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c4;
                                                                                candidate_DNTUnfolded_edge__edge2.flags = candidate_DNTUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge2;
                                                                            }
                                                                            while( (candidate_DNTUnfolded_edge__edge2 = candidate_DNTUnfolded_edge__edge2.outNext) != head_candidate_DNTUnfolded_edge__edge2 );
                                                                        }
                                                                        candidate_DNTUnfolded_node__node2.flags = candidate_DNTUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node2;
                                                                        candidate_DNTUnfolded_edge__edge12.flags = candidate_DNTUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge12;
                                                                    }
                                                                    while( (candidate_DNTUnfolded_edge__edge12 = candidate_DNTUnfolded_edge__edge12.outNext) != head_candidate_DNTUnfolded_edge__edge12 );
                                                                }
                                                                candidate_DNTUnfolded_node__node1.flags = candidate_DNTUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node1;
                                                                candidate_DNTUnfolded_edge__edge11.flags = candidate_DNTUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge11;
                                                            }
                                                            while( (candidate_DNTUnfolded_edge__edge11 = candidate_DNTUnfolded_edge__edge11.outNext) != head_candidate_DNTUnfolded_edge__edge11 );
                                                        }
                                                        candidate_DNTUnfolded_node__node0.flags = candidate_DNTUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node__node0;
                                                        candidate_DNTUnfolded_edge__edge10.flags = candidate_DNTUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge10;
                                                    }
                                                    while( (candidate_DNTUnfolded_edge__edge10 = candidate_DNTUnfolded_edge__edge10.outNext) != head_candidate_DNTUnfolded_edge__edge10 );
                                                }
                                                candidate_DNTUnfolded_node_n2.flags = candidate_DNTUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_n2;
                                                candidate_DNTUnfolded_edge__edge13.flags = candidate_DNTUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge13;
                                            }
                                            while( (candidate_DNTUnfolded_edge__edge13 = candidate_DNTUnfolded_edge__edge13.outNext) != head_candidate_DNTUnfolded_edge__edge13 );
                                        }
                                        candidate_DNTUnfolded_node_c3.flags = candidate_DNTUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c3;
                                        candidate_DNTUnfolded_edge__edge1.flags = candidate_DNTUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge1;
                                    }
                                    while( (candidate_DNTUnfolded_edge__edge1 = candidate_DNTUnfolded_edge__edge1.outNext) != head_candidate_DNTUnfolded_edge__edge1 );
                                }
                                candidate_DNTUnfolded_node_c.flags = candidate_DNTUnfolded_node_c.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c;
                                candidate_DNTUnfolded_edge__edge9.flags = candidate_DNTUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge9;
                            }
                            while( (candidate_DNTUnfolded_edge__edge9 = candidate_DNTUnfolded_edge__edge9.outNext) != head_candidate_DNTUnfolded_edge__edge9 );
                        }
                        candidate_DNTUnfolded_edge__edge6.flags = candidate_DNTUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge6;
                    }
                    while( (candidate_DNTUnfolded_edge__edge6 = candidate_DNTUnfolded_edge__edge6.outNext) != head_candidate_DNTUnfolded_edge__edge6 );
                }
                candidate_DNTUnfolded_node_c2.flags = candidate_DNTUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c2;
                candidate_DNTUnfolded_node_c1.flags = candidate_DNTUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_node_c1;
                candidate_DNTUnfolded_edge__edge0.flags = candidate_DNTUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_DNTUnfolded_edge__edge0;
            }
            return matches;
        }
    }

    public class Action_createDNT : LGSPAction
    {
        public Action_createDNT() {
            rulePattern = Rule_createDNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 0 + 0);
        }

        public override string Name { get { return "createDNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createDNT instance = new Action_createDNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            // if enough matches were found, we leave
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_TNB : LGSPAction
    {
        public Action_TNB() {
            rulePattern = Rule_TNB.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 6, 9, 0, 6 + 0);
        }

        public override string Name { get { return "TNB"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNB instance = new Action_TNB();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Lookup TNB_edge__edge0 
            int type_id_candidate_TNB_edge__edge0 = 1;
            for(LGSPEdge head_candidate_TNB_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_TNB_edge__edge0], candidate_TNB_edge__edge0 = head_candidate_TNB_edge__edge0.typeNext; candidate_TNB_edge__edge0 != head_candidate_TNB_edge__edge0; candidate_TNB_edge__edge0 = candidate_TNB_edge__edge0.typeNext)
            {
                uint prev__candidate_TNB_edge__edge0;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNB_edge__edge0 = candidate_TNB_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNB_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNB_edge__edge0 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge0) ? 1U : 0U;
                    if(prev__candidate_TNB_edge__edge0 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge0,candidate_TNB_edge__edge0);
                }
                // Implicit Source TNB_node_c1 from TNB_edge__edge0 
                LGSPNode candidate_TNB_node_c1 = candidate_TNB_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_TNB_node_c1.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge0;
                    } else { 
                        if(prev__candidate_TNB_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_TNB_node_c1;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNB_node_c1 = candidate_TNB_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNB_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNB_node_c1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNB_node_c1) ? 1U : 0U;
                    if(prev__candidate_TNB_node_c1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNB_node_c1,candidate_TNB_node_c1);
                }
                // Implicit Target TNB_node_c2 from TNB_edge__edge0 
                LGSPNode candidate_TNB_node_c2 = candidate_TNB_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_TNB_node_c2.type.TypeID]) {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c1;
                    } else { 
                        if(prev__candidate_TNB_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge0;
                    } else { 
                        if(prev__candidate_TNB_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge0);
                        }
                    }
                    continue;
                }
                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNB_node_c2))
                    && candidate_TNB_node_c2==candidate_TNB_node_c1
                    )
                {
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c1;
                    } else { 
                        if(prev__candidate_TNB_node_c1==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c1);
                        }
                    }
                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                        candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge0;
                    } else { 
                        if(prev__candidate_TNB_edge__edge0==0) {
                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge0);
                        }
                    }
                    continue;
                }
                uint prev__candidate_TNB_node_c2;
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    prev__candidate_TNB_node_c2 = candidate_TNB_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                    candidate_TNB_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                } else {
                    prev__candidate_TNB_node_c2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNB_node_c2) ? 1U : 0U;
                    if(prev__candidate_TNB_node_c2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNB_node_c2,candidate_TNB_node_c2);
                }
                // Extend Outgoing TNB_edge__edge6 from TNB_node_c1 
                LGSPEdge head_candidate_TNB_edge__edge6 = candidate_TNB_node_c1.outhead;
                if(head_candidate_TNB_edge__edge6 != null)
                {
                    LGSPEdge candidate_TNB_edge__edge6 = head_candidate_TNB_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_TNB_edge__edge6.target != candidate_TNB_node_c2) {
                            continue;
                        }
                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge6))
                            && candidate_TNB_edge__edge6==candidate_TNB_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNB_edge__edge6;
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            prev__candidate_TNB_edge__edge6 = candidate_TNB_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                            candidate_TNB_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        } else {
                            prev__candidate_TNB_edge__edge6 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge6) ? 1U : 0U;
                            if(prev__candidate_TNB_edge__edge6 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge6,candidate_TNB_edge__edge6);
                        }
                        // Extend Outgoing TNB_edge__edge1 from TNB_node_c2 
                        LGSPEdge head_candidate_TNB_edge__edge1 = candidate_TNB_node_c2.outhead;
                        if(head_candidate_TNB_edge__edge1 != null)
                        {
                            LGSPEdge candidate_TNB_edge__edge1 = head_candidate_TNB_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge1))
                                    && (candidate_TNB_edge__edge1==candidate_TNB_edge__edge0
                                        || candidate_TNB_edge__edge1==candidate_TNB_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNB_edge__edge1;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNB_edge__edge1 = candidate_TNB_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNB_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNB_edge__edge1 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge1) ? 1U : 0U;
                                    if(prev__candidate_TNB_edge__edge1 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge1,candidate_TNB_edge__edge1);
                                }
                                // Implicit Target TNB_node_c3 from TNB_edge__edge1 
                                LGSPNode candidate_TNB_node_c3 = candidate_TNB_edge__edge1.target;
                                if(!NodeType_C.isMyType[candidate_TNB_node_c3.type.TypeID]) {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge1;
                                    } else { 
                                        if(prev__candidate_TNB_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNB_node_c3))
                                    && (candidate_TNB_node_c3==candidate_TNB_node_c1
                                        || candidate_TNB_node_c3==candidate_TNB_node_c2
                                        )
                                    )
                                {
                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                        candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge1;
                                    } else { 
                                        if(prev__candidate_TNB_edge__edge1==0) {
                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge1);
                                        }
                                    }
                                    continue;
                                }
                                uint prev__candidate_TNB_node_c3;
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    prev__candidate_TNB_node_c3 = candidate_TNB_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                    candidate_TNB_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                } else {
                                    prev__candidate_TNB_node_c3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNB_node_c3) ? 1U : 0U;
                                    if(prev__candidate_TNB_node_c3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNB_node_c3,candidate_TNB_node_c3);
                                }
                                // Extend Outgoing TNB_edge__edge2 from TNB_node_c3 
                                LGSPEdge head_candidate_TNB_edge__edge2 = candidate_TNB_node_c3.outhead;
                                if(head_candidate_TNB_edge__edge2 != null)
                                {
                                    LGSPEdge candidate_TNB_edge__edge2 = head_candidate_TNB_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge2))
                                            && (candidate_TNB_edge__edge2==candidate_TNB_edge__edge0
                                                || candidate_TNB_edge__edge2==candidate_TNB_edge__edge6
                                                || candidate_TNB_edge__edge2==candidate_TNB_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_TNB_edge__edge2;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_TNB_edge__edge2 = candidate_TNB_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_TNB_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_TNB_edge__edge2 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge2) ? 1U : 0U;
                                            if(prev__candidate_TNB_edge__edge2 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge2,candidate_TNB_edge__edge2);
                                        }
                                        // Implicit Target TNB_node_c4 from TNB_edge__edge2 
                                        LGSPNode candidate_TNB_node_c4 = candidate_TNB_edge__edge2.target;
                                        if(!NodeType_C.isMyType[candidate_TNB_node_c4.type.TypeID]) {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge2;
                                            } else { 
                                                if(prev__candidate_TNB_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNB_node_c4))
                                            && (candidate_TNB_node_c4==candidate_TNB_node_c1
                                                || candidate_TNB_node_c4==candidate_TNB_node_c2
                                                || candidate_TNB_node_c4==candidate_TNB_node_c3
                                                )
                                            )
                                        {
                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge2;
                                            } else { 
                                                if(prev__candidate_TNB_edge__edge2==0) {
                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge2);
                                                }
                                            }
                                            continue;
                                        }
                                        uint prev__candidate_TNB_node_c4;
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            prev__candidate_TNB_node_c4 = candidate_TNB_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                            candidate_TNB_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        } else {
                                            prev__candidate_TNB_node_c4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNB_node_c4) ? 1U : 0U;
                                            if(prev__candidate_TNB_node_c4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNB_node_c4,candidate_TNB_node_c4);
                                        }
                                        // Extend Outgoing TNB_edge__edge7 from TNB_node_c3 
                                        LGSPEdge head_candidate_TNB_edge__edge7 = candidate_TNB_node_c3.outhead;
                                        if(head_candidate_TNB_edge__edge7 != null)
                                        {
                                            LGSPEdge candidate_TNB_edge__edge7 = head_candidate_TNB_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(candidate_TNB_edge__edge7.target != candidate_TNB_node_c4) {
                                                    continue;
                                                }
                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge7))
                                                    && (candidate_TNB_edge__edge7==candidate_TNB_edge__edge0
                                                        || candidate_TNB_edge__edge7==candidate_TNB_edge__edge6
                                                        || candidate_TNB_edge__edge7==candidate_TNB_edge__edge1
                                                        || candidate_TNB_edge__edge7==candidate_TNB_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_TNB_edge__edge7;
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    prev__candidate_TNB_edge__edge7 = candidate_TNB_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                    candidate_TNB_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                } else {
                                                    prev__candidate_TNB_edge__edge7 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge7) ? 1U : 0U;
                                                    if(prev__candidate_TNB_edge__edge7 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge7,candidate_TNB_edge__edge7);
                                                }
                                                // Extend Outgoing TNB_edge__edge3 from TNB_node_c4 
                                                LGSPEdge head_candidate_TNB_edge__edge3 = candidate_TNB_node_c4.outhead;
                                                if(head_candidate_TNB_edge__edge3 != null)
                                                {
                                                    LGSPEdge candidate_TNB_edge__edge3 = head_candidate_TNB_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge3))
                                                            && (candidate_TNB_edge__edge3==candidate_TNB_edge__edge0
                                                                || candidate_TNB_edge__edge3==candidate_TNB_edge__edge6
                                                                || candidate_TNB_edge__edge3==candidate_TNB_edge__edge1
                                                                || candidate_TNB_edge__edge3==candidate_TNB_edge__edge2
                                                                || candidate_TNB_edge__edge3==candidate_TNB_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNB_edge__edge3;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_TNB_edge__edge3 = candidate_TNB_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_TNB_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_TNB_edge__edge3 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge3) ? 1U : 0U;
                                                            if(prev__candidate_TNB_edge__edge3 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge3,candidate_TNB_edge__edge3);
                                                        }
                                                        // Implicit Target TNB_node_c5 from TNB_edge__edge3 
                                                        LGSPNode candidate_TNB_node_c5 = candidate_TNB_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[candidate_TNB_node_c5.type.TypeID]) {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_TNB_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNB_node_c5))
                                                            && (candidate_TNB_node_c5==candidate_TNB_node_c1
                                                                || candidate_TNB_node_c5==candidate_TNB_node_c2
                                                                || candidate_TNB_node_c5==candidate_TNB_node_c3
                                                                || candidate_TNB_node_c5==candidate_TNB_node_c4
                                                                )
                                                            )
                                                        {
                                                            if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge3;
                                                            } else { 
                                                                if(prev__candidate_TNB_edge__edge3==0) {
                                                                    graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge3);
                                                                }
                                                            }
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNB_node_c5;
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            prev__candidate_TNB_node_c5 = candidate_TNB_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                            candidate_TNB_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        } else {
                                                            prev__candidate_TNB_node_c5 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.ContainsKey(candidate_TNB_node_c5) ? 1U : 0U;
                                                            if(prev__candidate_TNB_node_c5 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Add(candidate_TNB_node_c5,candidate_TNB_node_c5);
                                                        }
                                                        // Extend Outgoing TNB_edge__edge4 from TNB_node_c5 
                                                        LGSPEdge head_candidate_TNB_edge__edge4 = candidate_TNB_node_c5.outhead;
                                                        if(head_candidate_TNB_edge__edge4 != null)
                                                        {
                                                            LGSPEdge candidate_TNB_edge__edge4 = head_candidate_TNB_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge4))
                                                                    && (candidate_TNB_edge__edge4==candidate_TNB_edge__edge0
                                                                        || candidate_TNB_edge__edge4==candidate_TNB_edge__edge6
                                                                        || candidate_TNB_edge__edge4==candidate_TNB_edge__edge1
                                                                        || candidate_TNB_edge__edge4==candidate_TNB_edge__edge2
                                                                        || candidate_TNB_edge__edge4==candidate_TNB_edge__edge7
                                                                        || candidate_TNB_edge__edge4==candidate_TNB_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_TNB_edge__edge4;
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    prev__candidate_TNB_edge__edge4 = candidate_TNB_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                    candidate_TNB_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                } else {
                                                                    prev__candidate_TNB_edge__edge4 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge4) ? 1U : 0U;
                                                                    if(prev__candidate_TNB_edge__edge4 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge4,candidate_TNB_edge__edge4);
                                                                }
                                                                // Implicit Target TNB_node_c6 from TNB_edge__edge4 
                                                                LGSPNode candidate_TNB_node_c6 = candidate_TNB_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[candidate_TNB_node_c6.type.TypeID]) {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_TNB_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].fst.ContainsKey(candidate_TNB_node_c6))
                                                                    && (candidate_TNB_node_c6==candidate_TNB_node_c1
                                                                        || candidate_TNB_node_c6==candidate_TNB_node_c2
                                                                        || candidate_TNB_node_c6==candidate_TNB_node_c3
                                                                        || candidate_TNB_node_c6==candidate_TNB_node_c4
                                                                        || candidate_TNB_node_c6==candidate_TNB_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                        candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge4;
                                                                    } else { 
                                                                        if(prev__candidate_TNB_edge__edge4==0) {
                                                                            graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge4);
                                                                        }
                                                                    }
                                                                    continue;
                                                                }
                                                                // Extend Outgoing TNB_edge__edge8 from TNB_node_c5 
                                                                LGSPEdge head_candidate_TNB_edge__edge8 = candidate_TNB_node_c5.outhead;
                                                                if(head_candidate_TNB_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge candidate_TNB_edge__edge8 = head_candidate_TNB_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(candidate_TNB_edge__edge8.target != candidate_TNB_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge8))
                                                                            && (candidate_TNB_edge__edge8==candidate_TNB_edge__edge0
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge6
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge1
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge2
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge7
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge3
                                                                                || candidate_TNB_edge__edge8==candidate_TNB_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNB_edge__edge8;
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            prev__candidate_TNB_edge__edge8 = candidate_TNB_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                            candidate_TNB_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        } else {
                                                                            prev__candidate_TNB_edge__edge8 = graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.ContainsKey(candidate_TNB_edge__edge8) ? 1U : 0U;
                                                                            if(prev__candidate_TNB_edge__edge8 == 0) graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Add(candidate_TNB_edge__edge8,candidate_TNB_edge__edge8);
                                                                        }
                                                                        // Extend Outgoing TNB_edge__edge5 from TNB_node_c6 
                                                                        LGSPEdge head_candidate_TNB_edge__edge5 = candidate_TNB_node_c6.outhead;
                                                                        if(head_candidate_TNB_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge candidate_TNB_edge__edge5 = head_candidate_TNB_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_TNB_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(candidate_TNB_edge__edge5.target != candidate_TNB_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if((negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL ? (candidate_TNB_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel : graph.atNegLevelMatchedElements[negLevel-(int)LGSPElemFlags.MAX_NEG_LEVEL-1].snd.ContainsKey(candidate_TNB_edge__edge5))
                                                                                    && (candidate_TNB_edge__edge5==candidate_TNB_edge__edge0
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge6
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge1
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge2
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge7
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge3
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge4
                                                                                        || candidate_TNB_edge__edge5==candidate_TNB_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                // Push subpattern matching task for _subpattern5
                                                                                PatternAction_Nitro taskFor__subpattern5 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern5.Nitro_node_anchor = candidate_TNB_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                // Push subpattern matching task for _subpattern4
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = candidate_TNB_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                // Push subpattern matching task for _subpattern3
                                                                                PatternAction_Nitro taskFor__subpattern3 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = candidate_TNB_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                // Push subpattern matching task for _subpattern2
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = candidate_TNB_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                // Push subpattern matching task for _subpattern1
                                                                                PatternAction_Nitro taskFor__subpattern1 = PatternAction_Nitro.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = candidate_TNB_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                // Push subpattern matching task for _subpattern0
                                                                                PatternAction_Hydrogen taskFor__subpattern0 = PatternAction_Hydrogen.getNewTask(graph, openTasks);
                                                                                taskFor__subpattern0.Hydrogen_node_anchor = candidate_TNB_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                uint prevGlobal__candidate_TNB_node_c1;
                                                                                prevGlobal__candidate_TNB_node_c1 = candidate_TNB_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_node_c2;
                                                                                prevGlobal__candidate_TNB_node_c2 = candidate_TNB_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_node_c3;
                                                                                prevGlobal__candidate_TNB_node_c3 = candidate_TNB_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_node_c4;
                                                                                prevGlobal__candidate_TNB_node_c4 = candidate_TNB_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_node_c5;
                                                                                prevGlobal__candidate_TNB_node_c5 = candidate_TNB_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_node_c6;
                                                                                prevGlobal__candidate_TNB_node_c6 = candidate_TNB_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_node_c6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge0;
                                                                                prevGlobal__candidate_TNB_edge__edge0 = candidate_TNB_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge1;
                                                                                prevGlobal__candidate_TNB_edge__edge1 = candidate_TNB_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge2;
                                                                                prevGlobal__candidate_TNB_edge__edge2 = candidate_TNB_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge3;
                                                                                prevGlobal__candidate_TNB_edge__edge3 = candidate_TNB_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge4;
                                                                                prevGlobal__candidate_TNB_edge__edge4 = candidate_TNB_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge5;
                                                                                prevGlobal__candidate_TNB_edge__edge5 = candidate_TNB_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge6;
                                                                                prevGlobal__candidate_TNB_edge__edge6 = candidate_TNB_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge7;
                                                                                prevGlobal__candidate_TNB_edge__edge7 = candidate_TNB_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                uint prevGlobal__candidate_TNB_edge__edge8;
                                                                                prevGlobal__candidate_TNB_edge__edge8 = candidate_TNB_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                candidate_TNB_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN;
                                                                                // Match subpatterns 
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
                                                                                // Pop subpattern matching task for _subpattern0
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern0);
                                                                                // Pop subpattern matching task for _subpattern1
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern1);
                                                                                // Pop subpattern matching task for _subpattern2
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern2);
                                                                                // Pop subpattern matching task for _subpattern3
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern3);
                                                                                // Pop subpattern matching task for _subpattern4
                                                                                openTasks.Pop();
                                                                                PatternAction_Hydrogen.releaseTask(taskFor__subpattern4);
                                                                                // Pop subpattern matching task for _subpattern5
                                                                                openTasks.Pop();
                                                                                PatternAction_Nitro.releaseTask(taskFor__subpattern5);
                                                                                // Check whether subpatterns were found 
                                                                                if(matchesList.Count>0) {
                                                                                    // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c1] = candidate_TNB_node_c1;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c2] = candidate_TNB_node_c2;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c3] = candidate_TNB_node_c3;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c4] = candidate_TNB_node_c4;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c5] = candidate_TNB_node_c5;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c6] = candidate_TNB_node_c6;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge0] = candidate_TNB_edge__edge0;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge1] = candidate_TNB_edge__edge1;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge2] = candidate_TNB_edge__edge2;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge3] = candidate_TNB_edge__edge3;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge4] = candidate_TNB_edge__edge4;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge5] = candidate_TNB_edge__edge5;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge6] = candidate_TNB_edge__edge6;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge7] = candidate_TNB_edge__edge7;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge8] = candidate_TNB_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    // if enough matches were found, we leave
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        candidate_TNB_edge__edge8.flags = candidate_TNB_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge8;
                                                                                        candidate_TNB_edge__edge7.flags = candidate_TNB_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge7;
                                                                                        candidate_TNB_edge__edge6.flags = candidate_TNB_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge6;
                                                                                        candidate_TNB_edge__edge5.flags = candidate_TNB_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge5;
                                                                                        candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge4;
                                                                                        candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge3;
                                                                                        candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge2;
                                                                                        candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge1;
                                                                                        candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge0;
                                                                                        candidate_TNB_node_c6.flags = candidate_TNB_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c6;
                                                                                        candidate_TNB_node_c5.flags = candidate_TNB_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c5;
                                                                                        candidate_TNB_node_c4.flags = candidate_TNB_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c4;
                                                                                        candidate_TNB_node_c3.flags = candidate_TNB_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c3;
                                                                                        candidate_TNB_node_c2.flags = candidate_TNB_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c2;
                                                                                        candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c1;
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge8.flags = candidate_TNB_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge8;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge8==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge8);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge4;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_node_c5.flags = candidate_TNB_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c5;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_node_c5==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c5);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge3;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge7.flags = candidate_TNB_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge7;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge7==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge7);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_node_c4.flags = candidate_TNB_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c4;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_node_c4==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c4);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge2;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_node_c3.flags = candidate_TNB_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c3;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_node_c3==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c3);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge1;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge6.flags = candidate_TNB_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge6;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge6==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge6);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_node_c2.flags = candidate_TNB_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c2;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_node_c2==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c2);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c1;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_node_c1==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c1);
                                                                                            }
                                                                                        }
                                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                                            candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge0;
                                                                                        } else { 
                                                                                            if(prev__candidate_TNB_edge__edge0==0) {
                                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge0);
                                                                                            }
                                                                                        }
                                                                                        return matches;
                                                                                    }
                                                                                    candidate_TNB_edge__edge8.flags = candidate_TNB_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge8;
                                                                                    candidate_TNB_edge__edge7.flags = candidate_TNB_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge7;
                                                                                    candidate_TNB_edge__edge6.flags = candidate_TNB_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge6;
                                                                                    candidate_TNB_edge__edge5.flags = candidate_TNB_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge5;
                                                                                    candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge4;
                                                                                    candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge3;
                                                                                    candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge2;
                                                                                    candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge1;
                                                                                    candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge0;
                                                                                    candidate_TNB_node_c6.flags = candidate_TNB_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c6;
                                                                                    candidate_TNB_node_c5.flags = candidate_TNB_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c5;
                                                                                    candidate_TNB_node_c4.flags = candidate_TNB_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c4;
                                                                                    candidate_TNB_node_c3.flags = candidate_TNB_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c3;
                                                                                    candidate_TNB_node_c2.flags = candidate_TNB_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c2;
                                                                                    candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c1;
                                                                                    continue;
                                                                                }
                                                                                candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c1;
                                                                                candidate_TNB_node_c2.flags = candidate_TNB_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c2;
                                                                                candidate_TNB_node_c3.flags = candidate_TNB_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c3;
                                                                                candidate_TNB_node_c4.flags = candidate_TNB_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c4;
                                                                                candidate_TNB_node_c5.flags = candidate_TNB_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c5;
                                                                                candidate_TNB_node_c6.flags = candidate_TNB_node_c6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_node_c6;
                                                                                candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge0;
                                                                                candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge1;
                                                                                candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge2;
                                                                                candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge3;
                                                                                candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge4;
                                                                                candidate_TNB_edge__edge5.flags = candidate_TNB_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge5;
                                                                                candidate_TNB_edge__edge6.flags = candidate_TNB_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge6;
                                                                                candidate_TNB_edge__edge7.flags = candidate_TNB_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge7;
                                                                                candidate_TNB_edge__edge8.flags = candidate_TNB_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN) | prevGlobal__candidate_TNB_edge__edge8;
                                                                            }
                                                                            while( (candidate_TNB_edge__edge5 = candidate_TNB_edge__edge5.outNext) != head_candidate_TNB_edge__edge5 );
                                                                        }
                                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                            candidate_TNB_edge__edge8.flags = candidate_TNB_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge8;
                                                                        } else { 
                                                                            if(prev__candidate_TNB_edge__edge8==0) {
                                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge8);
                                                                            }
                                                                        }
                                                                    }
                                                                    while( (candidate_TNB_edge__edge8 = candidate_TNB_edge__edge8.outNext) != head_candidate_TNB_edge__edge8 );
                                                                }
                                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                                    candidate_TNB_edge__edge4.flags = candidate_TNB_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge4;
                                                                } else { 
                                                                    if(prev__candidate_TNB_edge__edge4==0) {
                                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge4);
                                                                    }
                                                                }
                                                            }
                                                            while( (candidate_TNB_edge__edge4 = candidate_TNB_edge__edge4.outNext) != head_candidate_TNB_edge__edge4 );
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_TNB_node_c5.flags = candidate_TNB_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c5;
                                                        } else { 
                                                            if(prev__candidate_TNB_node_c5==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c5);
                                                            }
                                                        }
                                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                            candidate_TNB_edge__edge3.flags = candidate_TNB_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge3;
                                                        } else { 
                                                            if(prev__candidate_TNB_edge__edge3==0) {
                                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge3);
                                                            }
                                                        }
                                                    }
                                                    while( (candidate_TNB_edge__edge3 = candidate_TNB_edge__edge3.outNext) != head_candidate_TNB_edge__edge3 );
                                                }
                                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                                    candidate_TNB_edge__edge7.flags = candidate_TNB_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge7;
                                                } else { 
                                                    if(prev__candidate_TNB_edge__edge7==0) {
                                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge7);
                                                    }
                                                }
                                            }
                                            while( (candidate_TNB_edge__edge7 = candidate_TNB_edge__edge7.outNext) != head_candidate_TNB_edge__edge7 );
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_TNB_node_c4.flags = candidate_TNB_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c4;
                                        } else { 
                                            if(prev__candidate_TNB_node_c4==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c4);
                                            }
                                        }
                                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                            candidate_TNB_edge__edge2.flags = candidate_TNB_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge2;
                                        } else { 
                                            if(prev__candidate_TNB_edge__edge2==0) {
                                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge2);
                                            }
                                        }
                                    }
                                    while( (candidate_TNB_edge__edge2 = candidate_TNB_edge__edge2.outNext) != head_candidate_TNB_edge__edge2 );
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNB_node_c3.flags = candidate_TNB_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c3;
                                } else { 
                                    if(prev__candidate_TNB_node_c3==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c3);
                                    }
                                }
                                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                                    candidate_TNB_edge__edge1.flags = candidate_TNB_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge1;
                                } else { 
                                    if(prev__candidate_TNB_edge__edge1==0) {
                                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge1);
                                    }
                                }
                            }
                            while( (candidate_TNB_edge__edge1 = candidate_TNB_edge__edge1.outNext) != head_candidate_TNB_edge__edge1 );
                        }
                        if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                            candidate_TNB_edge__edge6.flags = candidate_TNB_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge6;
                        } else { 
                            if(prev__candidate_TNB_edge__edge6==0) {
                                graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge6);
                            }
                        }
                    }
                    while( (candidate_TNB_edge__edge6 = candidate_TNB_edge__edge6.outNext) != head_candidate_TNB_edge__edge6 );
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNB_node_c2.flags = candidate_TNB_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c2;
                } else { 
                    if(prev__candidate_TNB_node_c2==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c2);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNB_node_c1.flags = candidate_TNB_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_node_c1;
                } else { 
                    if(prev__candidate_TNB_node_c1==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].fst.Remove(candidate_TNB_node_c1);
                    }
                }
                if(negLevel <= (int) LGSPElemFlags.MAX_NEG_LEVEL) {
                    candidate_TNB_edge__edge0.flags = candidate_TNB_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNB_edge__edge0;
                } else { 
                    if(prev__candidate_TNB_edge__edge0==0) {
                        graph.atNegLevelMatchedElements[negLevel - (int) LGSPElemFlags.MAX_NEG_LEVEL - 1].snd.Remove(candidate_TNB_edge__edge0);
                    }
                }
            }
            return matches;
        }
    }

    public class Action_TNBUnfolded : LGSPAction
    {
        public Action_TNBUnfolded() {
            rulePattern = Rule_TNBUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 18, 21, 0, 0 + 0);
        }

        public override string Name { get { return "TNBUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNBUnfolded instance = new Action_TNBUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            // Lookup TNBUnfolded_edge__edge0 
            int type_id_candidate_TNBUnfolded_edge__edge0 = 1;
            for(LGSPEdge head_candidate_TNBUnfolded_edge__edge0 = graph.edgesByTypeHeads[type_id_candidate_TNBUnfolded_edge__edge0], candidate_TNBUnfolded_edge__edge0 = head_candidate_TNBUnfolded_edge__edge0.typeNext; candidate_TNBUnfolded_edge__edge0 != head_candidate_TNBUnfolded_edge__edge0; candidate_TNBUnfolded_edge__edge0 = candidate_TNBUnfolded_edge__edge0.typeNext)
            {
                uint prev__candidate_TNBUnfolded_edge__edge0;
                prev__candidate_TNBUnfolded_edge__edge0 = candidate_TNBUnfolded_edge__edge0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNBUnfolded_edge__edge0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Source TNBUnfolded_node_c1 from TNBUnfolded_edge__edge0 
                LGSPNode candidate_TNBUnfolded_node_c1 = candidate_TNBUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c1.type.TypeID]) {
                    candidate_TNBUnfolded_edge__edge0.flags = candidate_TNBUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_TNBUnfolded_node_c1;
                prev__candidate_TNBUnfolded_node_c1 = candidate_TNBUnfolded_node_c1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNBUnfolded_node_c1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Implicit Target TNBUnfolded_node_c2 from TNBUnfolded_edge__edge0 
                LGSPNode candidate_TNBUnfolded_node_c2 = candidate_TNBUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c2.type.TypeID]) {
                    candidate_TNBUnfolded_node_c1.flags = candidate_TNBUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c1;
                    candidate_TNBUnfolded_edge__edge0.flags = candidate_TNBUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge0;
                    continue;
                }
                if((candidate_TNBUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                    && candidate_TNBUnfolded_node_c2==candidate_TNBUnfolded_node_c1
                    )
                {
                    candidate_TNBUnfolded_node_c1.flags = candidate_TNBUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c1;
                    candidate_TNBUnfolded_edge__edge0.flags = candidate_TNBUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge0;
                    continue;
                }
                uint prev__candidate_TNBUnfolded_node_c2;
                prev__candidate_TNBUnfolded_node_c2 = candidate_TNBUnfolded_node_c2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                candidate_TNBUnfolded_node_c2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                // Extend Outgoing TNBUnfolded_edge__edge6 from TNBUnfolded_node_c1 
                LGSPEdge head_candidate_TNBUnfolded_edge__edge6 = candidate_TNBUnfolded_node_c1.outhead;
                if(head_candidate_TNBUnfolded_edge__edge6 != null)
                {
                    LGSPEdge candidate_TNBUnfolded_edge__edge6 = head_candidate_TNBUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(candidate_TNBUnfolded_edge__edge6.target != candidate_TNBUnfolded_node_c2) {
                            continue;
                        }
                        if((candidate_TNBUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                            && candidate_TNBUnfolded_edge__edge6==candidate_TNBUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        uint prev__candidate_TNBUnfolded_edge__edge6;
                        prev__candidate_TNBUnfolded_edge__edge6 = candidate_TNBUnfolded_edge__edge6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        candidate_TNBUnfolded_edge__edge6.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                        // Extend Outgoing TNBUnfolded_edge__edge9 from TNBUnfolded_node_c1 
                        LGSPEdge head_candidate_TNBUnfolded_edge__edge9 = candidate_TNBUnfolded_node_c1.outhead;
                        if(head_candidate_TNBUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge candidate_TNBUnfolded_edge__edge9 = head_candidate_TNBUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if((candidate_TNBUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                    && (candidate_TNBUnfolded_edge__edge9==candidate_TNBUnfolded_edge__edge0
                                        || candidate_TNBUnfolded_edge__edge9==candidate_TNBUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                uint prev__candidate_TNBUnfolded_edge__edge9;
                                prev__candidate_TNBUnfolded_edge__edge9 = candidate_TNBUnfolded_edge__edge9.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNBUnfolded_edge__edge9.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Implicit Target TNBUnfolded_node__node0 from TNBUnfolded_edge__edge9 
                                LGSPNode candidate_TNBUnfolded_node__node0 = candidate_TNBUnfolded_edge__edge9.target;
                                if(!NodeType_H.isMyType[candidate_TNBUnfolded_node__node0.type.TypeID]) {
                                    candidate_TNBUnfolded_edge__edge9.flags = candidate_TNBUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge9;
                                    continue;
                                }
                                uint prev__candidate_TNBUnfolded_node__node0;
                                prev__candidate_TNBUnfolded_node__node0 = candidate_TNBUnfolded_node__node0.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                candidate_TNBUnfolded_node__node0.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                // Extend Outgoing TNBUnfolded_edge__edge1 from TNBUnfolded_node_c2 
                                LGSPEdge head_candidate_TNBUnfolded_edge__edge1 = candidate_TNBUnfolded_node_c2.outhead;
                                if(head_candidate_TNBUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge candidate_TNBUnfolded_edge__edge1 = head_candidate_TNBUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if((candidate_TNBUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_TNBUnfolded_edge__edge1==candidate_TNBUnfolded_edge__edge0
                                                || candidate_TNBUnfolded_edge__edge1==candidate_TNBUnfolded_edge__edge6
                                                || candidate_TNBUnfolded_edge__edge1==candidate_TNBUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_TNBUnfolded_edge__edge1;
                                        prev__candidate_TNBUnfolded_edge__edge1 = candidate_TNBUnfolded_edge__edge1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_TNBUnfolded_edge__edge1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Implicit Target TNBUnfolded_node_c3 from TNBUnfolded_edge__edge1 
                                        LGSPNode candidate_TNBUnfolded_node_c3 = candidate_TNBUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c3.type.TypeID]) {
                                            candidate_TNBUnfolded_edge__edge1.flags = candidate_TNBUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge1;
                                            continue;
                                        }
                                        if((candidate_TNBUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                            && (candidate_TNBUnfolded_node_c3==candidate_TNBUnfolded_node_c1
                                                || candidate_TNBUnfolded_node_c3==candidate_TNBUnfolded_node_c2
                                                )
                                            )
                                        {
                                            candidate_TNBUnfolded_edge__edge1.flags = candidate_TNBUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge1;
                                            continue;
                                        }
                                        uint prev__candidate_TNBUnfolded_node_c3;
                                        prev__candidate_TNBUnfolded_node_c3 = candidate_TNBUnfolded_node_c3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        candidate_TNBUnfolded_node_c3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                        // Extend Outgoing TNBUnfolded_edge__edge10 from TNBUnfolded_node_c2 
                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge10 = candidate_TNBUnfolded_node_c2.outhead;
                                        if(head_candidate_TNBUnfolded_edge__edge10 != null)
                                        {
                                            LGSPEdge candidate_TNBUnfolded_edge__edge10 = head_candidate_TNBUnfolded_edge__edge10;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge10.type.TypeID]) {
                                                    continue;
                                                }
                                                if((candidate_TNBUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                    && (candidate_TNBUnfolded_edge__edge10==candidate_TNBUnfolded_edge__edge0
                                                        || candidate_TNBUnfolded_edge__edge10==candidate_TNBUnfolded_edge__edge6
                                                        || candidate_TNBUnfolded_edge__edge10==candidate_TNBUnfolded_edge__edge9
                                                        || candidate_TNBUnfolded_edge__edge10==candidate_TNBUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_TNBUnfolded_edge__edge10;
                                                prev__candidate_TNBUnfolded_edge__edge10 = candidate_TNBUnfolded_edge__edge10.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_TNBUnfolded_edge__edge10.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Implicit Target TNBUnfolded_node_n2 from TNBUnfolded_edge__edge10 
                                                LGSPNode candidate_TNBUnfolded_node_n2 = candidate_TNBUnfolded_edge__edge10.target;
                                                if(!NodeType_N.isMyType[candidate_TNBUnfolded_node_n2.type.TypeID]) {
                                                    candidate_TNBUnfolded_edge__edge10.flags = candidate_TNBUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge10;
                                                    continue;
                                                }
                                                uint prev__candidate_TNBUnfolded_node_n2;
                                                prev__candidate_TNBUnfolded_node_n2 = candidate_TNBUnfolded_node_n2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                candidate_TNBUnfolded_node_n2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                // Extend Outgoing TNBUnfolded_edge__edge2 from TNBUnfolded_node_c3 
                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge2 = candidate_TNBUnfolded_node_c3.outhead;
                                                if(head_candidate_TNBUnfolded_edge__edge2 != null)
                                                {
                                                    LGSPEdge candidate_TNBUnfolded_edge__edge2 = head_candidate_TNBUnfolded_edge__edge2;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge2.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if((candidate_TNBUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                            && (candidate_TNBUnfolded_edge__edge2==candidate_TNBUnfolded_edge__edge0
                                                                || candidate_TNBUnfolded_edge__edge2==candidate_TNBUnfolded_edge__edge6
                                                                || candidate_TNBUnfolded_edge__edge2==candidate_TNBUnfolded_edge__edge9
                                                                || candidate_TNBUnfolded_edge__edge2==candidate_TNBUnfolded_edge__edge1
                                                                || candidate_TNBUnfolded_edge__edge2==candidate_TNBUnfolded_edge__edge10
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNBUnfolded_edge__edge2;
                                                        prev__candidate_TNBUnfolded_edge__edge2 = candidate_TNBUnfolded_edge__edge2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_TNBUnfolded_edge__edge2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Implicit Target TNBUnfolded_node_c4 from TNBUnfolded_edge__edge2 
                                                        LGSPNode candidate_TNBUnfolded_node_c4 = candidate_TNBUnfolded_edge__edge2.target;
                                                        if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c4.type.TypeID]) {
                                                            candidate_TNBUnfolded_edge__edge2.flags = candidate_TNBUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge2;
                                                            continue;
                                                        }
                                                        if((candidate_TNBUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                            && (candidate_TNBUnfolded_node_c4==candidate_TNBUnfolded_node_c1
                                                                || candidate_TNBUnfolded_node_c4==candidate_TNBUnfolded_node_c2
                                                                || candidate_TNBUnfolded_node_c4==candidate_TNBUnfolded_node_c3
                                                                )
                                                            )
                                                        {
                                                            candidate_TNBUnfolded_edge__edge2.flags = candidate_TNBUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge2;
                                                            continue;
                                                        }
                                                        uint prev__candidate_TNBUnfolded_node_c4;
                                                        prev__candidate_TNBUnfolded_node_c4 = candidate_TNBUnfolded_node_c4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        candidate_TNBUnfolded_node_c4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                        // Extend Outgoing TNBUnfolded_edge__edge7 from TNBUnfolded_node_c3 
                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge7 = candidate_TNBUnfolded_node_c3.outhead;
                                                        if(head_candidate_TNBUnfolded_edge__edge7 != null)
                                                        {
                                                            LGSPEdge candidate_TNBUnfolded_edge__edge7 = head_candidate_TNBUnfolded_edge__edge7;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge7.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(candidate_TNBUnfolded_edge__edge7.target != candidate_TNBUnfolded_node_c4) {
                                                                    continue;
                                                                }
                                                                if((candidate_TNBUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                    && (candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge0
                                                                        || candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge6
                                                                        || candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge9
                                                                        || candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge1
                                                                        || candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge10
                                                                        || candidate_TNBUnfolded_edge__edge7==candidate_TNBUnfolded_edge__edge2
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_TNBUnfolded_edge__edge7;
                                                                prev__candidate_TNBUnfolded_edge__edge7 = candidate_TNBUnfolded_edge__edge7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                candidate_TNBUnfolded_edge__edge7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                // Extend Outgoing TNBUnfolded_edge__edge13 from TNBUnfolded_node_c3 
                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge13 = candidate_TNBUnfolded_node_c3.outhead;
                                                                if(head_candidate_TNBUnfolded_edge__edge13 != null)
                                                                {
                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge13 = head_candidate_TNBUnfolded_edge__edge13;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge13.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_TNBUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && (candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge0
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge6
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge9
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge1
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge10
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge2
                                                                                || candidate_TNBUnfolded_edge__edge13==candidate_TNBUnfolded_edge__edge7
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNBUnfolded_edge__edge13;
                                                                        prev__candidate_TNBUnfolded_edge__edge13 = candidate_TNBUnfolded_edge__edge13.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_TNBUnfolded_edge__edge13.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Implicit Target TNBUnfolded_node__node3 from TNBUnfolded_edge__edge13 
                                                                        LGSPNode candidate_TNBUnfolded_node__node3 = candidate_TNBUnfolded_edge__edge13.target;
                                                                        if(!NodeType_H.isMyType[candidate_TNBUnfolded_node__node3.type.TypeID]) {
                                                                            candidate_TNBUnfolded_edge__edge13.flags = candidate_TNBUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge13;
                                                                            continue;
                                                                        }
                                                                        if((candidate_TNBUnfolded_node__node3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                            && candidate_TNBUnfolded_node__node3==candidate_TNBUnfolded_node__node0
                                                                            )
                                                                        {
                                                                            candidate_TNBUnfolded_edge__edge13.flags = candidate_TNBUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge13;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_TNBUnfolded_node__node3;
                                                                        prev__candidate_TNBUnfolded_node__node3 = candidate_TNBUnfolded_node__node3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        candidate_TNBUnfolded_node__node3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                        // Extend Outgoing TNBUnfolded_edge__edge11 from TNBUnfolded_node_n2 
                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge11 = candidate_TNBUnfolded_node_n2.outhead;
                                                                        if(head_candidate_TNBUnfolded_edge__edge11 != null)
                                                                        {
                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge11 = head_candidate_TNBUnfolded_edge__edge11;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge11.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_TNBUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                    && (candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge0
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge6
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge9
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge1
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge10
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge2
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge7
                                                                                        || candidate_TNBUnfolded_edge__edge11==candidate_TNBUnfolded_edge__edge13
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_TNBUnfolded_edge__edge11;
                                                                                prev__candidate_TNBUnfolded_edge__edge11 = candidate_TNBUnfolded_edge__edge11.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_TNBUnfolded_edge__edge11.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Implicit Target TNBUnfolded_node__node1 from TNBUnfolded_edge__edge11 
                                                                                LGSPNode candidate_TNBUnfolded_node__node1 = candidate_TNBUnfolded_edge__edge11.target;
                                                                                if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node1.type.TypeID]) {
                                                                                    candidate_TNBUnfolded_edge__edge11.flags = candidate_TNBUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge11;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_TNBUnfolded_node__node1;
                                                                                prev__candidate_TNBUnfolded_node__node1 = candidate_TNBUnfolded_node__node1.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                candidate_TNBUnfolded_node__node1.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                // Extend Outgoing TNBUnfolded_edge__edge12 from TNBUnfolded_node_n2 
                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge12 = candidate_TNBUnfolded_node_n2.outhead;
                                                                                if(head_candidate_TNBUnfolded_edge__edge12 != null)
                                                                                {
                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge12 = head_candidate_TNBUnfolded_edge__edge12;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge12.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_TNBUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                            && (candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge0
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge6
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge9
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge1
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge10
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge2
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge7
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge13
                                                                                                || candidate_TNBUnfolded_edge__edge12==candidate_TNBUnfolded_edge__edge11
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_TNBUnfolded_edge__edge12;
                                                                                        prev__candidate_TNBUnfolded_edge__edge12 = candidate_TNBUnfolded_edge__edge12.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        candidate_TNBUnfolded_edge__edge12.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        // Implicit Target TNBUnfolded_node__node2 from TNBUnfolded_edge__edge12 
                                                                                        LGSPNode candidate_TNBUnfolded_node__node2 = candidate_TNBUnfolded_edge__edge12.target;
                                                                                        if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node2.type.TypeID]) {
                                                                                            candidate_TNBUnfolded_edge__edge12.flags = candidate_TNBUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge12;
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_TNBUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                            && candidate_TNBUnfolded_node__node2==candidate_TNBUnfolded_node__node1
                                                                                            )
                                                                                        {
                                                                                            candidate_TNBUnfolded_edge__edge12.flags = candidate_TNBUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge12;
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_TNBUnfolded_node__node2;
                                                                                        prev__candidate_TNBUnfolded_node__node2 = candidate_TNBUnfolded_node__node2.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        candidate_TNBUnfolded_node__node2.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                        // Extend Outgoing TNBUnfolded_edge__edge3 from TNBUnfolded_node_c4 
                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge3 = candidate_TNBUnfolded_node_c4.outhead;
                                                                                        if(head_candidate_TNBUnfolded_edge__edge3 != null)
                                                                                        {
                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge3 = head_candidate_TNBUnfolded_edge__edge3;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge3.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_TNBUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge0
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge6
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge9
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge1
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge10
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge2
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge7
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge13
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge11
                                                                                                        || candidate_TNBUnfolded_edge__edge3==candidate_TNBUnfolded_edge__edge12
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_TNBUnfolded_edge__edge3;
                                                                                                prev__candidate_TNBUnfolded_edge__edge3 = candidate_TNBUnfolded_edge__edge3.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_TNBUnfolded_edge__edge3.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Implicit Target TNBUnfolded_node_c5 from TNBUnfolded_edge__edge3 
                                                                                                LGSPNode candidate_TNBUnfolded_node_c5 = candidate_TNBUnfolded_edge__edge3.target;
                                                                                                if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c5.type.TypeID]) {
                                                                                                    candidate_TNBUnfolded_edge__edge3.flags = candidate_TNBUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge3;
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_TNBUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                    && (candidate_TNBUnfolded_node_c5==candidate_TNBUnfolded_node_c1
                                                                                                        || candidate_TNBUnfolded_node_c5==candidate_TNBUnfolded_node_c2
                                                                                                        || candidate_TNBUnfolded_node_c5==candidate_TNBUnfolded_node_c3
                                                                                                        || candidate_TNBUnfolded_node_c5==candidate_TNBUnfolded_node_c4
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    candidate_TNBUnfolded_edge__edge3.flags = candidate_TNBUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge3;
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_TNBUnfolded_node_c5;
                                                                                                prev__candidate_TNBUnfolded_node_c5 = candidate_TNBUnfolded_node_c5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                candidate_TNBUnfolded_node_c5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                // Extend Outgoing TNBUnfolded_edge__edge14 from TNBUnfolded_node_c4 
                                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge14 = candidate_TNBUnfolded_node_c4.outhead;
                                                                                                if(head_candidate_TNBUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge14 = head_candidate_TNBUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_TNBUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                            && (candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge0
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge6
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge9
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge1
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge10
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge2
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge7
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge13
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge11
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge12
                                                                                                                || candidate_TNBUnfolded_edge__edge14==candidate_TNBUnfolded_edge__edge3
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_TNBUnfolded_edge__edge14;
                                                                                                        prev__candidate_TNBUnfolded_edge__edge14 = candidate_TNBUnfolded_edge__edge14.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_TNBUnfolded_edge__edge14.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Implicit Target TNBUnfolded_node_n4 from TNBUnfolded_edge__edge14 
                                                                                                        LGSPNode candidate_TNBUnfolded_node_n4 = candidate_TNBUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_N.isMyType[candidate_TNBUnfolded_node_n4.type.TypeID]) {
                                                                                                            candidate_TNBUnfolded_edge__edge14.flags = candidate_TNBUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge14;
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_TNBUnfolded_node_n4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                            && candidate_TNBUnfolded_node_n4==candidate_TNBUnfolded_node_n2
                                                                                                            )
                                                                                                        {
                                                                                                            candidate_TNBUnfolded_edge__edge14.flags = candidate_TNBUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge14;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_TNBUnfolded_node_n4;
                                                                                                        prev__candidate_TNBUnfolded_node_n4 = candidate_TNBUnfolded_node_n4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        candidate_TNBUnfolded_node_n4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                        // Extend Outgoing TNBUnfolded_edge__edge4 from TNBUnfolded_node_c5 
                                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge4 = candidate_TNBUnfolded_node_c5.outhead;
                                                                                                        if(head_candidate_TNBUnfolded_edge__edge4 != null)
                                                                                                        {
                                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge4 = head_candidate_TNBUnfolded_edge__edge4;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_TNBUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && (candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge0
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge6
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge9
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge1
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge10
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge2
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge7
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge13
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge11
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge12
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge3
                                                                                                                        || candidate_TNBUnfolded_edge__edge4==candidate_TNBUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_TNBUnfolded_edge__edge4;
                                                                                                                prev__candidate_TNBUnfolded_edge__edge4 = candidate_TNBUnfolded_edge__edge4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                candidate_TNBUnfolded_edge__edge4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                // Implicit Target TNBUnfolded_node_c6 from TNBUnfolded_edge__edge4 
                                                                                                                LGSPNode candidate_TNBUnfolded_node_c6 = candidate_TNBUnfolded_edge__edge4.target;
                                                                                                                if(!NodeType_C.isMyType[candidate_TNBUnfolded_node_c6.type.TypeID]) {
                                                                                                                    candidate_TNBUnfolded_edge__edge4.flags = candidate_TNBUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge4;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_TNBUnfolded_node_c6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                    && (candidate_TNBUnfolded_node_c6==candidate_TNBUnfolded_node_c1
                                                                                                                        || candidate_TNBUnfolded_node_c6==candidate_TNBUnfolded_node_c2
                                                                                                                        || candidate_TNBUnfolded_node_c6==candidate_TNBUnfolded_node_c3
                                                                                                                        || candidate_TNBUnfolded_node_c6==candidate_TNBUnfolded_node_c4
                                                                                                                        || candidate_TNBUnfolded_node_c6==candidate_TNBUnfolded_node_c5
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    candidate_TNBUnfolded_edge__edge4.flags = candidate_TNBUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge4;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // Extend Outgoing TNBUnfolded_edge__edge8 from TNBUnfolded_node_c5 
                                                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge8 = candidate_TNBUnfolded_node_c5.outhead;
                                                                                                                if(head_candidate_TNBUnfolded_edge__edge8 != null)
                                                                                                                {
                                                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge8 = head_candidate_TNBUnfolded_edge__edge8;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(candidate_TNBUnfolded_edge__edge8.target != candidate_TNBUnfolded_node_c6) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_TNBUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                            && (candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge0
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge6
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge9
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge1
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge10
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge2
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge7
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge13
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge11
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge12
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge3
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge14
                                                                                                                                || candidate_TNBUnfolded_edge__edge8==candidate_TNBUnfolded_edge__edge4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_TNBUnfolded_edge__edge8;
                                                                                                                        prev__candidate_TNBUnfolded_edge__edge8 = candidate_TNBUnfolded_edge__edge8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        candidate_TNBUnfolded_edge__edge8.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                        // Extend Outgoing TNBUnfolded_edge__edge17 from TNBUnfolded_node_c5 
                                                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge17 = candidate_TNBUnfolded_node_c5.outhead;
                                                                                                                        if(head_candidate_TNBUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge17 = head_candidate_TNBUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_TNBUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && (candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge0
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge6
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge9
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge1
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge10
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge2
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge7
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge13
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge11
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge12
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge3
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge14
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge4
                                                                                                                                        || candidate_TNBUnfolded_edge__edge17==candidate_TNBUnfolded_edge__edge8
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_TNBUnfolded_edge__edge17;
                                                                                                                                prev__candidate_TNBUnfolded_edge__edge17 = candidate_TNBUnfolded_edge__edge17.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                candidate_TNBUnfolded_edge__edge17.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                // Implicit Target TNBUnfolded_node__node6 from TNBUnfolded_edge__edge17 
                                                                                                                                LGSPNode candidate_TNBUnfolded_node__node6 = candidate_TNBUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_H.isMyType[candidate_TNBUnfolded_node__node6.type.TypeID]) {
                                                                                                                                    candidate_TNBUnfolded_edge__edge17.flags = candidate_TNBUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_TNBUnfolded_node__node6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                    && (candidate_TNBUnfolded_node__node6==candidate_TNBUnfolded_node__node0
                                                                                                                                        || candidate_TNBUnfolded_node__node6==candidate_TNBUnfolded_node__node3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    candidate_TNBUnfolded_edge__edge17.flags = candidate_TNBUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge17;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // Extend Outgoing TNBUnfolded_edge__edge15 from TNBUnfolded_node_n4 
                                                                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge15 = candidate_TNBUnfolded_node_n4.outhead;
                                                                                                                                if(head_candidate_TNBUnfolded_edge__edge15 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge15 = head_candidate_TNBUnfolded_edge__edge15;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_TNBUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                || candidate_TNBUnfolded_edge__edge15==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_TNBUnfolded_edge__edge15;
                                                                                                                                        prev__candidate_TNBUnfolded_edge__edge15 = candidate_TNBUnfolded_edge__edge15.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        candidate_TNBUnfolded_edge__edge15.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        // Implicit Target TNBUnfolded_node__node4 from TNBUnfolded_edge__edge15 
                                                                                                                                        LGSPNode candidate_TNBUnfolded_node__node4 = candidate_TNBUnfolded_edge__edge15.target;
                                                                                                                                        if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node4.type.TypeID]) {
                                                                                                                                            candidate_TNBUnfolded_edge__edge15.flags = candidate_TNBUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge15;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_TNBUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                            && (candidate_TNBUnfolded_node__node4==candidate_TNBUnfolded_node__node1
                                                                                                                                                || candidate_TNBUnfolded_node__node4==candidate_TNBUnfolded_node__node2
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            candidate_TNBUnfolded_edge__edge15.flags = candidate_TNBUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge15;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_TNBUnfolded_node__node4;
                                                                                                                                        prev__candidate_TNBUnfolded_node__node4 = candidate_TNBUnfolded_node__node4.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        candidate_TNBUnfolded_node__node4.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                        // Extend Outgoing TNBUnfolded_edge__edge16 from TNBUnfolded_node_n4 
                                                                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge16 = candidate_TNBUnfolded_node_n4.outhead;
                                                                                                                                        if(head_candidate_TNBUnfolded_edge__edge16 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge16 = head_candidate_TNBUnfolded_edge__edge16;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge16.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_TNBUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                    && (candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                        || candidate_TNBUnfolded_edge__edge16==candidate_TNBUnfolded_edge__edge15
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_TNBUnfolded_edge__edge16;
                                                                                                                                                prev__candidate_TNBUnfolded_edge__edge16 = candidate_TNBUnfolded_edge__edge16.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                candidate_TNBUnfolded_edge__edge16.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                // Implicit Target TNBUnfolded_node__node5 from TNBUnfolded_edge__edge16 
                                                                                                                                                LGSPNode candidate_TNBUnfolded_node__node5 = candidate_TNBUnfolded_edge__edge16.target;
                                                                                                                                                if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node5.type.TypeID]) {
                                                                                                                                                    candidate_TNBUnfolded_edge__edge16.flags = candidate_TNBUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge16;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_TNBUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                    && (candidate_TNBUnfolded_node__node5==candidate_TNBUnfolded_node__node1
                                                                                                                                                        || candidate_TNBUnfolded_node__node5==candidate_TNBUnfolded_node__node2
                                                                                                                                                        || candidate_TNBUnfolded_node__node5==candidate_TNBUnfolded_node__node4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    candidate_TNBUnfolded_edge__edge16.flags = candidate_TNBUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge16;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_TNBUnfolded_node__node5;
                                                                                                                                                prev__candidate_TNBUnfolded_node__node5 = candidate_TNBUnfolded_node__node5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                candidate_TNBUnfolded_node__node5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                // Extend Outgoing TNBUnfolded_edge__edge5 from TNBUnfolded_node_c6 
                                                                                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge5 = candidate_TNBUnfolded_node_c6.outhead;
                                                                                                                                                if(head_candidate_TNBUnfolded_edge__edge5 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge5 = head_candidate_TNBUnfolded_edge__edge5;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(candidate_TNBUnfolded_edge__edge5.target != candidate_TNBUnfolded_node_c1) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_TNBUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                            && (candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge15
                                                                                                                                                                || candidate_TNBUnfolded_edge__edge5==candidate_TNBUnfolded_edge__edge16
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_TNBUnfolded_edge__edge5;
                                                                                                                                                        prev__candidate_TNBUnfolded_edge__edge5 = candidate_TNBUnfolded_edge__edge5.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        candidate_TNBUnfolded_edge__edge5.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                        // Extend Outgoing TNBUnfolded_edge__edge18 from TNBUnfolded_node_c6 
                                                                                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge18 = candidate_TNBUnfolded_node_c6.outhead;
                                                                                                                                                        if(head_candidate_TNBUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge18 = head_candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_TNBUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge15
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge16
                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge18==candidate_TNBUnfolded_edge__edge5
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                                prev__candidate_TNBUnfolded_edge__edge18 = candidate_TNBUnfolded_edge__edge18.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                candidate_TNBUnfolded_edge__edge18.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                // Implicit Target TNBUnfolded_node_n6 from TNBUnfolded_edge__edge18 
                                                                                                                                                                LGSPNode candidate_TNBUnfolded_node_n6 = candidate_TNBUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_N.isMyType[candidate_TNBUnfolded_node_n6.type.TypeID]) {
                                                                                                                                                                    candidate_TNBUnfolded_edge__edge18.flags = candidate_TNBUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_TNBUnfolded_node_n6.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                    && (candidate_TNBUnfolded_node_n6==candidate_TNBUnfolded_node_n2
                                                                                                                                                                        || candidate_TNBUnfolded_node_n6==candidate_TNBUnfolded_node_n4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    candidate_TNBUnfolded_edge__edge18.flags = candidate_TNBUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                // Extend Outgoing TNBUnfolded_edge__edge19 from TNBUnfolded_node_n6 
                                                                                                                                                                LGSPEdge head_candidate_TNBUnfolded_edge__edge19 = candidate_TNBUnfolded_node_n6.outhead;
                                                                                                                                                                if(head_candidate_TNBUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge candidate_TNBUnfolded_edge__edge19 = head_candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_TNBUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge15
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge16
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge5
                                                                                                                                                                                || candidate_TNBUnfolded_edge__edge19==candidate_TNBUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                        prev__candidate_TNBUnfolded_edge__edge19 = candidate_TNBUnfolded_edge__edge19.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        candidate_TNBUnfolded_edge__edge19.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        // Implicit Target TNBUnfolded_node__node7 from TNBUnfolded_edge__edge19 
                                                                                                                                                                        LGSPNode candidate_TNBUnfolded_node__node7 = candidate_TNBUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            candidate_TNBUnfolded_edge__edge19.flags = candidate_TNBUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_TNBUnfolded_node__node7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                            && (candidate_TNBUnfolded_node__node7==candidate_TNBUnfolded_node__node1
                                                                                                                                                                                || candidate_TNBUnfolded_node__node7==candidate_TNBUnfolded_node__node2
                                                                                                                                                                                || candidate_TNBUnfolded_node__node7==candidate_TNBUnfolded_node__node4
                                                                                                                                                                                || candidate_TNBUnfolded_node__node7==candidate_TNBUnfolded_node__node5
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            candidate_TNBUnfolded_edge__edge19.flags = candidate_TNBUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_TNBUnfolded_node__node7;
                                                                                                                                                                        prev__candidate_TNBUnfolded_node__node7 = candidate_TNBUnfolded_node__node7.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        candidate_TNBUnfolded_node__node7.flags |= (uint) LGSPElemFlags.IS_MATCHED << negLevel;
                                                                                                                                                                        // Extend Outgoing TNBUnfolded_edge__edge20 from TNBUnfolded_node_n6 
                                                                                                                                                                        LGSPEdge head_candidate_TNBUnfolded_edge__edge20 = candidate_TNBUnfolded_node_n6.outhead;
                                                                                                                                                                        if(head_candidate_TNBUnfolded_edge__edge20 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge candidate_TNBUnfolded_edge__edge20 = head_candidate_TNBUnfolded_edge__edge20;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[candidate_TNBUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_TNBUnfolded_edge__edge20.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                    && (candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge0
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge6
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge9
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge1
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge10
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge2
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge7
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge13
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge11
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge12
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge3
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge14
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge4
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge8
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge17
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge15
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge16
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge5
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge18
                                                                                                                                                                                        || candidate_TNBUnfolded_edge__edge20==candidate_TNBUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // Implicit Target TNBUnfolded_node__node8 from TNBUnfolded_edge__edge20 
                                                                                                                                                                                LGSPNode candidate_TNBUnfolded_node__node8 = candidate_TNBUnfolded_edge__edge20.target;
                                                                                                                                                                                if(!NodeType_O.isMyType[candidate_TNBUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_TNBUnfolded_node__node8.flags & (uint) LGSPElemFlags.IS_MATCHED << negLevel) == (uint) LGSPElemFlags.IS_MATCHED << negLevel
                                                                                                                                                                                    && (candidate_TNBUnfolded_node__node8==candidate_TNBUnfolded_node__node1
                                                                                                                                                                                        || candidate_TNBUnfolded_node__node8==candidate_TNBUnfolded_node__node2
                                                                                                                                                                                        || candidate_TNBUnfolded_node__node8==candidate_TNBUnfolded_node__node4
                                                                                                                                                                                        || candidate_TNBUnfolded_node__node8==candidate_TNBUnfolded_node__node5
                                                                                                                                                                                        || candidate_TNBUnfolded_node__node8==candidate_TNBUnfolded_node__node7
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c1] = candidate_TNBUnfolded_node_c1;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c2] = candidate_TNBUnfolded_node_c2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c3] = candidate_TNBUnfolded_node_c3;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c4] = candidate_TNBUnfolded_node_c4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c5] = candidate_TNBUnfolded_node_c5;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c6] = candidate_TNBUnfolded_node_c6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node0] = candidate_TNBUnfolded_node__node0;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n2] = candidate_TNBUnfolded_node_n2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node1] = candidate_TNBUnfolded_node__node1;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node2] = candidate_TNBUnfolded_node__node2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node3] = candidate_TNBUnfolded_node__node3;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n4] = candidate_TNBUnfolded_node_n4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node4] = candidate_TNBUnfolded_node__node4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node5] = candidate_TNBUnfolded_node__node5;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node6] = candidate_TNBUnfolded_node__node6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n6] = candidate_TNBUnfolded_node_n6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node7] = candidate_TNBUnfolded_node__node7;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node8] = candidate_TNBUnfolded_node__node8;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge0] = candidate_TNBUnfolded_edge__edge0;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge1] = candidate_TNBUnfolded_edge__edge1;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge2] = candidate_TNBUnfolded_edge__edge2;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge3] = candidate_TNBUnfolded_edge__edge3;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge4] = candidate_TNBUnfolded_edge__edge4;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge5] = candidate_TNBUnfolded_edge__edge5;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge6] = candidate_TNBUnfolded_edge__edge6;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge7] = candidate_TNBUnfolded_edge__edge7;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge8] = candidate_TNBUnfolded_edge__edge8;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge9] = candidate_TNBUnfolded_edge__edge9;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge10] = candidate_TNBUnfolded_edge__edge10;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge11] = candidate_TNBUnfolded_edge__edge11;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge12] = candidate_TNBUnfolded_edge__edge12;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge13] = candidate_TNBUnfolded_edge__edge13;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge14] = candidate_TNBUnfolded_edge__edge14;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge15] = candidate_TNBUnfolded_edge__edge15;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge16] = candidate_TNBUnfolded_edge__edge16;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge17] = candidate_TNBUnfolded_edge__edge17;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge18] = candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge19] = candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge20] = candidate_TNBUnfolded_edge__edge20;
                                                                                                                                                                                matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                // if enough matches were found, we leave
                                                                                                                                                                                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                {
                                                                                                                                                                                    candidate_TNBUnfolded_node_n6.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge20);
                                                                                                                                                                                    candidate_TNBUnfolded_node_n6.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge19);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c6.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge18);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c6.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge5);
                                                                                                                                                                                    candidate_TNBUnfolded_node_n4.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge16);
                                                                                                                                                                                    candidate_TNBUnfolded_node_n4.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge15);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c5.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge17);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c5.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge8);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c5.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge4);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c4.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge14);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c4.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge3);
                                                                                                                                                                                    candidate_TNBUnfolded_node_n2.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge12);
                                                                                                                                                                                    candidate_TNBUnfolded_node_n2.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge11);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c3.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge13);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c3.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge7);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c3.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge2);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c2.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge10);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c2.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge1);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c1.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge9);
                                                                                                                                                                                    candidate_TNBUnfolded_node_c1.MoveOutHeadAfter(candidate_TNBUnfolded_edge__edge6);
                                                                                                                                                                                    graph.MoveHeadAfter(candidate_TNBUnfolded_edge__edge0);
                                                                                                                                                                                    candidate_TNBUnfolded_node__node7.flags = candidate_TNBUnfolded_node__node7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node7;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge19.flags = candidate_TNBUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge18.flags = candidate_TNBUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge5.flags = candidate_TNBUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge5;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node5.flags = candidate_TNBUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node5;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge16.flags = candidate_TNBUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge16;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node4.flags = candidate_TNBUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node4;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge15.flags = candidate_TNBUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge15;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge17.flags = candidate_TNBUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge17;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge8.flags = candidate_TNBUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge8;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge4.flags = candidate_TNBUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge4;
                                                                                                                                                                                    candidate_TNBUnfolded_node_n4.flags = candidate_TNBUnfolded_node_n4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_n4;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge14.flags = candidate_TNBUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge14;
                                                                                                                                                                                    candidate_TNBUnfolded_node_c5.flags = candidate_TNBUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c5;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge3.flags = candidate_TNBUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge3;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node2.flags = candidate_TNBUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node2;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge12.flags = candidate_TNBUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge12;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node1.flags = candidate_TNBUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node1;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge11.flags = candidate_TNBUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge11;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node3.flags = candidate_TNBUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node3;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge13.flags = candidate_TNBUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge13;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge7.flags = candidate_TNBUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge7;
                                                                                                                                                                                    candidate_TNBUnfolded_node_c4.flags = candidate_TNBUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c4;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge2.flags = candidate_TNBUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge2;
                                                                                                                                                                                    candidate_TNBUnfolded_node_n2.flags = candidate_TNBUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_n2;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge10.flags = candidate_TNBUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge10;
                                                                                                                                                                                    candidate_TNBUnfolded_node_c3.flags = candidate_TNBUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c3;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge1.flags = candidate_TNBUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge1;
                                                                                                                                                                                    candidate_TNBUnfolded_node__node0.flags = candidate_TNBUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node0;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge9.flags = candidate_TNBUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge9;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge6.flags = candidate_TNBUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge6;
                                                                                                                                                                                    candidate_TNBUnfolded_node_c2.flags = candidate_TNBUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c2;
                                                                                                                                                                                    candidate_TNBUnfolded_node_c1.flags = candidate_TNBUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c1;
                                                                                                                                                                                    candidate_TNBUnfolded_edge__edge0.flags = candidate_TNBUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge0;
                                                                                                                                                                                    return matches;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_TNBUnfolded_edge__edge20 = candidate_TNBUnfolded_edge__edge20.outNext) != head_candidate_TNBUnfolded_edge__edge20 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_TNBUnfolded_node__node7.flags = candidate_TNBUnfolded_node__node7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node7;
                                                                                                                                                                        candidate_TNBUnfolded_edge__edge19.flags = candidate_TNBUnfolded_edge__edge19.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge19;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_TNBUnfolded_edge__edge19 = candidate_TNBUnfolded_edge__edge19.outNext) != head_candidate_TNBUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                candidate_TNBUnfolded_edge__edge18.flags = candidate_TNBUnfolded_edge__edge18.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge18;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_TNBUnfolded_edge__edge18 = candidate_TNBUnfolded_edge__edge18.outNext) != head_candidate_TNBUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        candidate_TNBUnfolded_edge__edge5.flags = candidate_TNBUnfolded_edge__edge5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge5;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_TNBUnfolded_edge__edge5 = candidate_TNBUnfolded_edge__edge5.outNext) != head_candidate_TNBUnfolded_edge__edge5 );
                                                                                                                                                }
                                                                                                                                                candidate_TNBUnfolded_node__node5.flags = candidate_TNBUnfolded_node__node5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node5;
                                                                                                                                                candidate_TNBUnfolded_edge__edge16.flags = candidate_TNBUnfolded_edge__edge16.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge16;
                                                                                                                                            }
                                                                                                                                            while( (candidate_TNBUnfolded_edge__edge16 = candidate_TNBUnfolded_edge__edge16.outNext) != head_candidate_TNBUnfolded_edge__edge16 );
                                                                                                                                        }
                                                                                                                                        candidate_TNBUnfolded_node__node4.flags = candidate_TNBUnfolded_node__node4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node4;
                                                                                                                                        candidate_TNBUnfolded_edge__edge15.flags = candidate_TNBUnfolded_edge__edge15.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge15;
                                                                                                                                    }
                                                                                                                                    while( (candidate_TNBUnfolded_edge__edge15 = candidate_TNBUnfolded_edge__edge15.outNext) != head_candidate_TNBUnfolded_edge__edge15 );
                                                                                                                                }
                                                                                                                                candidate_TNBUnfolded_edge__edge17.flags = candidate_TNBUnfolded_edge__edge17.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge17;
                                                                                                                            }
                                                                                                                            while( (candidate_TNBUnfolded_edge__edge17 = candidate_TNBUnfolded_edge__edge17.outNext) != head_candidate_TNBUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        candidate_TNBUnfolded_edge__edge8.flags = candidate_TNBUnfolded_edge__edge8.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge8;
                                                                                                                    }
                                                                                                                    while( (candidate_TNBUnfolded_edge__edge8 = candidate_TNBUnfolded_edge__edge8.outNext) != head_candidate_TNBUnfolded_edge__edge8 );
                                                                                                                }
                                                                                                                candidate_TNBUnfolded_edge__edge4.flags = candidate_TNBUnfolded_edge__edge4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge4;
                                                                                                            }
                                                                                                            while( (candidate_TNBUnfolded_edge__edge4 = candidate_TNBUnfolded_edge__edge4.outNext) != head_candidate_TNBUnfolded_edge__edge4 );
                                                                                                        }
                                                                                                        candidate_TNBUnfolded_node_n4.flags = candidate_TNBUnfolded_node_n4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_n4;
                                                                                                        candidate_TNBUnfolded_edge__edge14.flags = candidate_TNBUnfolded_edge__edge14.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge14;
                                                                                                    }
                                                                                                    while( (candidate_TNBUnfolded_edge__edge14 = candidate_TNBUnfolded_edge__edge14.outNext) != head_candidate_TNBUnfolded_edge__edge14 );
                                                                                                }
                                                                                                candidate_TNBUnfolded_node_c5.flags = candidate_TNBUnfolded_node_c5.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c5;
                                                                                                candidate_TNBUnfolded_edge__edge3.flags = candidate_TNBUnfolded_edge__edge3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge3;
                                                                                            }
                                                                                            while( (candidate_TNBUnfolded_edge__edge3 = candidate_TNBUnfolded_edge__edge3.outNext) != head_candidate_TNBUnfolded_edge__edge3 );
                                                                                        }
                                                                                        candidate_TNBUnfolded_node__node2.flags = candidate_TNBUnfolded_node__node2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node2;
                                                                                        candidate_TNBUnfolded_edge__edge12.flags = candidate_TNBUnfolded_edge__edge12.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge12;
                                                                                    }
                                                                                    while( (candidate_TNBUnfolded_edge__edge12 = candidate_TNBUnfolded_edge__edge12.outNext) != head_candidate_TNBUnfolded_edge__edge12 );
                                                                                }
                                                                                candidate_TNBUnfolded_node__node1.flags = candidate_TNBUnfolded_node__node1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node1;
                                                                                candidate_TNBUnfolded_edge__edge11.flags = candidate_TNBUnfolded_edge__edge11.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge11;
                                                                            }
                                                                            while( (candidate_TNBUnfolded_edge__edge11 = candidate_TNBUnfolded_edge__edge11.outNext) != head_candidate_TNBUnfolded_edge__edge11 );
                                                                        }
                                                                        candidate_TNBUnfolded_node__node3.flags = candidate_TNBUnfolded_node__node3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node3;
                                                                        candidate_TNBUnfolded_edge__edge13.flags = candidate_TNBUnfolded_edge__edge13.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge13;
                                                                    }
                                                                    while( (candidate_TNBUnfolded_edge__edge13 = candidate_TNBUnfolded_edge__edge13.outNext) != head_candidate_TNBUnfolded_edge__edge13 );
                                                                }
                                                                candidate_TNBUnfolded_edge__edge7.flags = candidate_TNBUnfolded_edge__edge7.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge7;
                                                            }
                                                            while( (candidate_TNBUnfolded_edge__edge7 = candidate_TNBUnfolded_edge__edge7.outNext) != head_candidate_TNBUnfolded_edge__edge7 );
                                                        }
                                                        candidate_TNBUnfolded_node_c4.flags = candidate_TNBUnfolded_node_c4.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c4;
                                                        candidate_TNBUnfolded_edge__edge2.flags = candidate_TNBUnfolded_edge__edge2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge2;
                                                    }
                                                    while( (candidate_TNBUnfolded_edge__edge2 = candidate_TNBUnfolded_edge__edge2.outNext) != head_candidate_TNBUnfolded_edge__edge2 );
                                                }
                                                candidate_TNBUnfolded_node_n2.flags = candidate_TNBUnfolded_node_n2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_n2;
                                                candidate_TNBUnfolded_edge__edge10.flags = candidate_TNBUnfolded_edge__edge10.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge10;
                                            }
                                            while( (candidate_TNBUnfolded_edge__edge10 = candidate_TNBUnfolded_edge__edge10.outNext) != head_candidate_TNBUnfolded_edge__edge10 );
                                        }
                                        candidate_TNBUnfolded_node_c3.flags = candidate_TNBUnfolded_node_c3.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c3;
                                        candidate_TNBUnfolded_edge__edge1.flags = candidate_TNBUnfolded_edge__edge1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge1;
                                    }
                                    while( (candidate_TNBUnfolded_edge__edge1 = candidate_TNBUnfolded_edge__edge1.outNext) != head_candidate_TNBUnfolded_edge__edge1 );
                                }
                                candidate_TNBUnfolded_node__node0.flags = candidate_TNBUnfolded_node__node0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node__node0;
                                candidate_TNBUnfolded_edge__edge9.flags = candidate_TNBUnfolded_edge__edge9.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge9;
                            }
                            while( (candidate_TNBUnfolded_edge__edge9 = candidate_TNBUnfolded_edge__edge9.outNext) != head_candidate_TNBUnfolded_edge__edge9 );
                        }
                        candidate_TNBUnfolded_edge__edge6.flags = candidate_TNBUnfolded_edge__edge6.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge6;
                    }
                    while( (candidate_TNBUnfolded_edge__edge6 = candidate_TNBUnfolded_edge__edge6.outNext) != head_candidate_TNBUnfolded_edge__edge6 );
                }
                candidate_TNBUnfolded_node_c2.flags = candidate_TNBUnfolded_node_c2.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c2;
                candidate_TNBUnfolded_node_c1.flags = candidate_TNBUnfolded_node_c1.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_node_c1;
                candidate_TNBUnfolded_edge__edge0.flags = candidate_TNBUnfolded_edge__edge0.flags & ~((uint) LGSPElemFlags.IS_MATCHED << negLevel) | prev__candidate_TNBUnfolded_edge__edge0;
            }
            return matches;
        }
    }

    public class Action_createTNB : LGSPAction
    {
        public Action_createTNB() {
            rulePattern = Rule_createTNB.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 0 + 0);
        }

        public override string Name { get { return "createTNB"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createTNB instance = new Action_createTNB();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            // if enough matches were found, we leave
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_keepBenzolRingPattern : LGSPAction
    {
        public Action_keepBenzolRingPattern() {
            rulePattern = Rule_keepBenzolRingPattern.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 1 + 0);
        }

        public override string Name { get { return "keepBenzolRingPattern"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_keepBenzolRingPattern instance = new Action_keepBenzolRingPattern();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Push subpattern matching task for br
            PatternAction_BenzolRing taskFor_br = PatternAction_BenzolRing.getNewTask(graph, openTasks);
            openTasks.Push(taskFor_br);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for br
            openTasks.Pop();
            PatternAction_BenzolRing.releaseTask(taskFor_br);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                    match.patternGraph = rulePattern.patternGraph;
                    match.EmbeddedGraphs[(int)Rule_keepBenzolRingPattern.keepBenzolRingPattern_SubNums.@br] = currentFoundPartialMatch.Pop();
                    matches.matchesList.PositionWasFilledFixIt();
                }
                matchesList.Clear();
                // if enough matches were found, we leave
                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                {
                    return matches;
                }
                return matches;
            }
            return matches;
        }
    }

    public class Action_createBenzolRingPattern : LGSPAction
    {
        public Action_createBenzolRingPattern() {
            rulePattern = Rule_createBenzolRingPattern.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 0 + 0);
        }

        public override string Name { get { return "createBenzolRingPattern"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createBenzolRingPattern instance = new Action_createBenzolRingPattern();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            // if enough matches were found, we leave
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_deleteBenzolRingPattern : LGSPAction
    {
        public Action_deleteBenzolRingPattern() {
            rulePattern = Rule_deleteBenzolRingPattern.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 1 + 0);
        }

        public override string Name { get { return "deleteBenzolRingPattern"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_deleteBenzolRingPattern instance = new Action_deleteBenzolRingPattern();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Push subpattern matching task for _subpattern0
            PatternAction_BenzolRing taskFor__subpattern0 = PatternAction_BenzolRing.getNewTask(graph, openTasks);
            openTasks.Push(taskFor__subpattern0);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for _subpattern0
            openTasks.Pop();
            PatternAction_BenzolRing.releaseTask(taskFor__subpattern0);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                    match.patternGraph = rulePattern.patternGraph;
                    match.EmbeddedGraphs[(int)Rule_deleteBenzolRingPattern.deleteBenzolRingPattern_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    matches.matchesList.PositionWasFilledFixIt();
                }
                matchesList.Clear();
                // if enough matches were found, we leave
                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                {
                    return matches;
                }
                return matches;
            }
            return matches;
        }
    }

    public class Action_deleteInModifyBenzolRingPattern : LGSPAction
    {
        public Action_deleteInModifyBenzolRingPattern() {
            rulePattern = Rule_deleteInModifyBenzolRingPattern.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch;
            matches = new LGSPMatches(this, 0, 0, 0, 1 + 0);
        }

        public override string Name { get { return "deleteInModifyBenzolRingPattern"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_deleteInModifyBenzolRingPattern instance = new Action_deleteInModifyBenzolRingPattern();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, object[] parameters)
        {
            matches.matchesList.Clear();
            int negLevel = 0;
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            // Push subpattern matching task for br
            PatternAction_BenzolRing taskFor_br = PatternAction_BenzolRing.getNewTask(graph, openTasks);
            openTasks.Push(taskFor_br);
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, negLevel);
            // Pop subpattern matching task for br
            openTasks.Pop();
            PatternAction_BenzolRing.releaseTask(taskFor_br);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object, becoming a complete match object and save it
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                    match.patternGraph = rulePattern.patternGraph;
                    match.EmbeddedGraphs[(int)Rule_deleteInModifyBenzolRingPattern.deleteInModifyBenzolRingPattern_SubNums.@br] = currentFoundPartialMatch.Pop();
                    matches.matchesList.PositionWasFilledFixIt();
                }
                matchesList.Clear();
                // if enough matches were found, we leave
                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                {
                    return matches;
                }
                return matches;
            }
            return matches;
        }
    }


    public class TNTActions : LGSPActions
    {
        public TNTActions(LGSPGraph lgspgraph, String modelAsmName, String actionsAsmName)
            : base(lgspgraph, modelAsmName, actionsAsmName)
        {
            InitActions();
        }

        public TNTActions(LGSPGraph lgspgraph)
            : base(lgspgraph)
        {
            InitActions();
        }

        private void InitActions()
        {
            actions.Add("BenzolRing", (LGSPAction) Action_BenzolRing.Instance);
            actions.Add("TNTTotallyFolded", (LGSPAction) Action_TNTTotallyFolded.Instance);
            actions.Add("TNTChain", (LGSPAction) Action_TNTChain.Instance);
            actions.Add("ToluolCore", (LGSPAction) Action_ToluolCore.Instance);
            actions.Add("ToluolCoreNotC6Nitro", (LGSPAction) Action_ToluolCoreNotC6Nitro.Instance);
            actions.Add("Toluol", (LGSPAction) Action_Toluol.Instance);
            actions.Add("TNT", (LGSPAction) Action_TNT.Instance);
            actions.Add("TNTUnfolded", (LGSPAction) Action_TNTUnfolded.Instance);
            actions.Add("createTNT", (LGSPAction) Action_createTNT.Instance);
            actions.Add("DNT", (LGSPAction) Action_DNT.Instance);
            actions.Add("DNTUnfolded", (LGSPAction) Action_DNTUnfolded.Instance);
            actions.Add("createDNT", (LGSPAction) Action_createDNT.Instance);
            actions.Add("TNB", (LGSPAction) Action_TNB.Instance);
            actions.Add("TNBUnfolded", (LGSPAction) Action_TNBUnfolded.Instance);
            actions.Add("createTNB", (LGSPAction) Action_createTNB.Instance);
            actions.Add("keepBenzolRingPattern", (LGSPAction) Action_keepBenzolRingPattern.Instance);
            actions.Add("createBenzolRingPattern", (LGSPAction) Action_createBenzolRingPattern.Instance);
            actions.Add("deleteBenzolRingPattern", (LGSPAction) Action_deleteBenzolRingPattern.Instance);
            actions.Add("deleteInModifyBenzolRingPattern", (LGSPAction) Action_deleteInModifyBenzolRingPattern.Instance);
        }

        public override String Name { get { return "TNTActions"; } }
        public override String ModelMD5Hash { get { return "6589f1c2ac770b020a3debe9eff7e74d"; } }
    }
}