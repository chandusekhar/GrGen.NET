using System;
using System.Collections.Generic;
using System.Text;
using de.unika.ipd.grGen.libGr;
using de.unika.ipd.grGen.lgsp;
using de.unika.ipd.grGen.Model_TNT;

namespace de.unika.ipd.grGen.Action_TNT
{
	public class Pattern_BenzolRing : LGSPRulePattern
	{
		private static Pattern_BenzolRing instance = null;
		public static Pattern_BenzolRing Instance { get { if (instance==null) instance = new Pattern_BenzolRing(); return instance; } }

		public static NodeType[] BenzolRing_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRing_node_c6_AllowedTypes = null;
		public static bool[] BenzolRing_node_c1_IsAllowedType = null;
		public static bool[] BenzolRing_node_c2_IsAllowedType = null;
		public static bool[] BenzolRing_node_c3_IsAllowedType = null;
		public static bool[] BenzolRing_node_c4_IsAllowedType = null;
		public static bool[] BenzolRing_node_c5_IsAllowedType = null;
		public static bool[] BenzolRing_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRing_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRing_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRing_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRing_edge__edge8_IsAllowedType = null;
		public enum BenzolRing_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRing_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRing_SubNums { };
		public enum BenzolRing_AltNums { };

#if INITIAL_WARMUP
		public Pattern_BenzolRing()
#else
		private Pattern_BenzolRing()
#endif
		{
			name = "BenzolRing";
			isSubpattern = true;

			PatternGraph BenzolRing;
			PatternNode BenzolRing_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c1", "c1", BenzolRing_node_c1_AllowedTypes, BenzolRing_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c2", "c2", BenzolRing_node_c2_AllowedTypes, BenzolRing_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c3", "c3", BenzolRing_node_c3_AllowedTypes, BenzolRing_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c4", "c4", BenzolRing_node_c4_AllowedTypes, BenzolRing_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c5", "c5", BenzolRing_node_c5_AllowedTypes, BenzolRing_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRing_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRing_node_c6", "c6", BenzolRing_node_c6_AllowedTypes, BenzolRing_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge0 = new PatternEdge(BenzolRing_node_c1, BenzolRing_node_c2, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge0", "_edge0", BenzolRing_edge__edge0_AllowedTypes, BenzolRing_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge1 = new PatternEdge(BenzolRing_node_c2, BenzolRing_node_c3, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge1", "_edge1", BenzolRing_edge__edge1_AllowedTypes, BenzolRing_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge2 = new PatternEdge(BenzolRing_node_c3, BenzolRing_node_c4, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge2", "_edge2", BenzolRing_edge__edge2_AllowedTypes, BenzolRing_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge3 = new PatternEdge(BenzolRing_node_c4, BenzolRing_node_c5, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge3", "_edge3", BenzolRing_edge__edge3_AllowedTypes, BenzolRing_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge4 = new PatternEdge(BenzolRing_node_c5, BenzolRing_node_c6, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge4", "_edge4", BenzolRing_edge__edge4_AllowedTypes, BenzolRing_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge5 = new PatternEdge(BenzolRing_node_c6, BenzolRing_node_c1, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge5", "_edge5", BenzolRing_edge__edge5_AllowedTypes, BenzolRing_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge6 = new PatternEdge(BenzolRing_node_c1, BenzolRing_node_c2, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge6", "_edge6", BenzolRing_edge__edge6_AllowedTypes, BenzolRing_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge7 = new PatternEdge(BenzolRing_node_c3, BenzolRing_node_c4, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge7", "_edge7", BenzolRing_edge__edge7_AllowedTypes, BenzolRing_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRing_edge__edge8 = new PatternEdge(BenzolRing_node_c5, BenzolRing_node_c6, (int) EdgeTypes.@Edge, "BenzolRing_edge__edge8", "_edge8", BenzolRing_edge__edge8_AllowedTypes, BenzolRing_edge__edge8_IsAllowedType, 5.5F, -1);
			BenzolRing = new PatternGraph(
				"BenzolRing",
				"",
				new PatternNode[] { BenzolRing_node_c1, BenzolRing_node_c2, BenzolRing_node_c3, BenzolRing_node_c4, BenzolRing_node_c5, BenzolRing_node_c6 }, 
				new PatternEdge[] { BenzolRing_edge__edge0, BenzolRing_edge__edge1, BenzolRing_edge__edge2, BenzolRing_edge__edge3, BenzolRing_edge__edge4, BenzolRing_edge__edge5, BenzolRing_edge__edge6, BenzolRing_edge__edge7, BenzolRing_edge__edge8 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			BenzolRing_node_c1.PointOfDefinition = BenzolRing;
			BenzolRing_node_c2.PointOfDefinition = BenzolRing;
			BenzolRing_node_c3.PointOfDefinition = BenzolRing;
			BenzolRing_node_c4.PointOfDefinition = BenzolRing;
			BenzolRing_node_c5.PointOfDefinition = BenzolRing;
			BenzolRing_node_c6.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge0.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge1.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge2.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge3.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge4.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge5.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge6.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge7.PointOfDefinition = BenzolRing;
			BenzolRing_edge__edge8.PointOfDefinition = BenzolRing;

			patternGraph = BenzolRing;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_BenzolRingC123456Exposed : LGSPRulePattern
	{
		private static Pattern_BenzolRingC123456Exposed instance = null;
		public static Pattern_BenzolRingC123456Exposed Instance { get { if (instance==null) instance = new Pattern_BenzolRingC123456Exposed(); return instance; } }

		public static NodeType[] BenzolRingC123456Exposed_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRingC123456Exposed_node_c6_AllowedTypes = null;
		public static bool[] BenzolRingC123456Exposed_node_c1_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c2_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c3_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c4_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c5_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRingC123456Exposed_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRingC123456Exposed_edge__edge8_IsAllowedType = null;
		public enum BenzolRingC123456Exposed_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRingC123456Exposed_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRingC123456Exposed_SubNums { };
		public enum BenzolRingC123456Exposed_AltNums { };

#if INITIAL_WARMUP
		public Pattern_BenzolRingC123456Exposed()
#else
		private Pattern_BenzolRingC123456Exposed()
#endif
		{
			name = "BenzolRingC123456Exposed";
			isSubpattern = true;

			PatternGraph BenzolRingC123456Exposed;
			PatternNode BenzolRingC123456Exposed_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c1", "c1", BenzolRingC123456Exposed_node_c1_AllowedTypes, BenzolRingC123456Exposed_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode BenzolRingC123456Exposed_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c2", "c2", BenzolRingC123456Exposed_node_c2_AllowedTypes, BenzolRingC123456Exposed_node_c2_IsAllowedType, 5.5F, 1);
			PatternNode BenzolRingC123456Exposed_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c3", "c3", BenzolRingC123456Exposed_node_c3_AllowedTypes, BenzolRingC123456Exposed_node_c3_IsAllowedType, 5.5F, 2);
			PatternNode BenzolRingC123456Exposed_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c4", "c4", BenzolRingC123456Exposed_node_c4_AllowedTypes, BenzolRingC123456Exposed_node_c4_IsAllowedType, 5.5F, 3);
			PatternNode BenzolRingC123456Exposed_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c5", "c5", BenzolRingC123456Exposed_node_c5_AllowedTypes, BenzolRingC123456Exposed_node_c5_IsAllowedType, 5.5F, 4);
			PatternNode BenzolRingC123456Exposed_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRingC123456Exposed_node_c6", "c6", BenzolRingC123456Exposed_node_c6_AllowedTypes, BenzolRingC123456Exposed_node_c6_IsAllowedType, 5.5F, 5);
			PatternEdge BenzolRingC123456Exposed_edge__edge0 = new PatternEdge(BenzolRingC123456Exposed_node_c1, BenzolRingC123456Exposed_node_c2, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge0", "_edge0", BenzolRingC123456Exposed_edge__edge0_AllowedTypes, BenzolRingC123456Exposed_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge1 = new PatternEdge(BenzolRingC123456Exposed_node_c2, BenzolRingC123456Exposed_node_c3, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge1", "_edge1", BenzolRingC123456Exposed_edge__edge1_AllowedTypes, BenzolRingC123456Exposed_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge2 = new PatternEdge(BenzolRingC123456Exposed_node_c3, BenzolRingC123456Exposed_node_c4, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge2", "_edge2", BenzolRingC123456Exposed_edge__edge2_AllowedTypes, BenzolRingC123456Exposed_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge3 = new PatternEdge(BenzolRingC123456Exposed_node_c4, BenzolRingC123456Exposed_node_c5, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge3", "_edge3", BenzolRingC123456Exposed_edge__edge3_AllowedTypes, BenzolRingC123456Exposed_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge4 = new PatternEdge(BenzolRingC123456Exposed_node_c5, BenzolRingC123456Exposed_node_c6, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge4", "_edge4", BenzolRingC123456Exposed_edge__edge4_AllowedTypes, BenzolRingC123456Exposed_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge5 = new PatternEdge(BenzolRingC123456Exposed_node_c6, BenzolRingC123456Exposed_node_c1, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge5", "_edge5", BenzolRingC123456Exposed_edge__edge5_AllowedTypes, BenzolRingC123456Exposed_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge6 = new PatternEdge(BenzolRingC123456Exposed_node_c1, BenzolRingC123456Exposed_node_c2, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge6", "_edge6", BenzolRingC123456Exposed_edge__edge6_AllowedTypes, BenzolRingC123456Exposed_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge7 = new PatternEdge(BenzolRingC123456Exposed_node_c3, BenzolRingC123456Exposed_node_c4, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge7", "_edge7", BenzolRingC123456Exposed_edge__edge7_AllowedTypes, BenzolRingC123456Exposed_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC123456Exposed_edge__edge8 = new PatternEdge(BenzolRingC123456Exposed_node_c5, BenzolRingC123456Exposed_node_c6, (int) EdgeTypes.@Edge, "BenzolRingC123456Exposed_edge__edge8", "_edge8", BenzolRingC123456Exposed_edge__edge8_AllowedTypes, BenzolRingC123456Exposed_edge__edge8_IsAllowedType, 5.5F, -1);
			BenzolRingC123456Exposed = new PatternGraph(
				"BenzolRingC123456Exposed",
				"",
				new PatternNode[] { BenzolRingC123456Exposed_node_c1, BenzolRingC123456Exposed_node_c2, BenzolRingC123456Exposed_node_c3, BenzolRingC123456Exposed_node_c4, BenzolRingC123456Exposed_node_c5, BenzolRingC123456Exposed_node_c6 }, 
				new PatternEdge[] { BenzolRingC123456Exposed_edge__edge0, BenzolRingC123456Exposed_edge__edge1, BenzolRingC123456Exposed_edge__edge2, BenzolRingC123456Exposed_edge__edge3, BenzolRingC123456Exposed_edge__edge4, BenzolRingC123456Exposed_edge__edge5, BenzolRingC123456Exposed_edge__edge6, BenzolRingC123456Exposed_edge__edge7, BenzolRingC123456Exposed_edge__edge8 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			BenzolRingC123456Exposed_node_c1.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c2.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c3.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c4.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c5.PointOfDefinition = null;
			BenzolRingC123456Exposed_node_c6.PointOfDefinition = null;
			BenzolRingC123456Exposed_edge__edge0.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge1.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge2.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge3.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge4.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge5.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge6.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge7.PointOfDefinition = BenzolRingC123456Exposed;
			BenzolRingC123456Exposed_edge__edge8.PointOfDefinition = BenzolRingC123456Exposed;

			patternGraph = BenzolRingC123456Exposed;

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "BenzolRingC123456Exposed_node_c1", "BenzolRingC123456Exposed_node_c2", "BenzolRingC123456Exposed_node_c3", "BenzolRingC123456Exposed_node_c4", "BenzolRingC123456Exposed_node_c5", "BenzolRingC123456Exposed_node_c6", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_BenzolRingC1Exposed : LGSPRulePattern
	{
		private static Pattern_BenzolRingC1Exposed instance = null;
		public static Pattern_BenzolRingC1Exposed Instance { get { if (instance==null) instance = new Pattern_BenzolRingC1Exposed(); return instance; } }

		public static NodeType[] BenzolRingC1Exposed_node_c1_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c2_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c3_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c4_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c5_AllowedTypes = null;
		public static NodeType[] BenzolRingC1Exposed_node_c6_AllowedTypes = null;
		public static bool[] BenzolRingC1Exposed_node_c1_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c2_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c3_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c4_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c5_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_node_c6_IsAllowedType = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge0_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge1_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge2_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge3_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge4_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge5_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge6_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge7_AllowedTypes = null;
		public static EdgeType[] BenzolRingC1Exposed_edge__edge8_AllowedTypes = null;
		public static bool[] BenzolRingC1Exposed_edge__edge0_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge1_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge2_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge3_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge4_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge5_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge6_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge7_IsAllowedType = null;
		public static bool[] BenzolRingC1Exposed_edge__edge8_IsAllowedType = null;
		public enum BenzolRingC1Exposed_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum BenzolRingC1Exposed_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum BenzolRingC1Exposed_SubNums { };
		public enum BenzolRingC1Exposed_AltNums { };

#if INITIAL_WARMUP
		public Pattern_BenzolRingC1Exposed()
#else
		private Pattern_BenzolRingC1Exposed()
#endif
		{
			name = "BenzolRingC1Exposed";
			isSubpattern = true;

			PatternGraph BenzolRingC1Exposed;
			PatternNode BenzolRingC1Exposed_node_c1 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c1", "c1", BenzolRingC1Exposed_node_c1_AllowedTypes, BenzolRingC1Exposed_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode BenzolRingC1Exposed_node_c2 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c2", "c2", BenzolRingC1Exposed_node_c2_AllowedTypes, BenzolRingC1Exposed_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c3 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c3", "c3", BenzolRingC1Exposed_node_c3_AllowedTypes, BenzolRingC1Exposed_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c4 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c4", "c4", BenzolRingC1Exposed_node_c4_AllowedTypes, BenzolRingC1Exposed_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c5 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c5", "c5", BenzolRingC1Exposed_node_c5_AllowedTypes, BenzolRingC1Exposed_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode BenzolRingC1Exposed_node_c6 = new PatternNode((int) NodeTypes.@C, "BenzolRingC1Exposed_node_c6", "c6", BenzolRingC1Exposed_node_c6_AllowedTypes, BenzolRingC1Exposed_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge0 = new PatternEdge(BenzolRingC1Exposed_node_c1, BenzolRingC1Exposed_node_c2, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge0", "_edge0", BenzolRingC1Exposed_edge__edge0_AllowedTypes, BenzolRingC1Exposed_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge1 = new PatternEdge(BenzolRingC1Exposed_node_c2, BenzolRingC1Exposed_node_c3, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge1", "_edge1", BenzolRingC1Exposed_edge__edge1_AllowedTypes, BenzolRingC1Exposed_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge2 = new PatternEdge(BenzolRingC1Exposed_node_c3, BenzolRingC1Exposed_node_c4, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge2", "_edge2", BenzolRingC1Exposed_edge__edge2_AllowedTypes, BenzolRingC1Exposed_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge3 = new PatternEdge(BenzolRingC1Exposed_node_c4, BenzolRingC1Exposed_node_c5, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge3", "_edge3", BenzolRingC1Exposed_edge__edge3_AllowedTypes, BenzolRingC1Exposed_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge4 = new PatternEdge(BenzolRingC1Exposed_node_c5, BenzolRingC1Exposed_node_c6, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge4", "_edge4", BenzolRingC1Exposed_edge__edge4_AllowedTypes, BenzolRingC1Exposed_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge5 = new PatternEdge(BenzolRingC1Exposed_node_c6, BenzolRingC1Exposed_node_c1, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge5", "_edge5", BenzolRingC1Exposed_edge__edge5_AllowedTypes, BenzolRingC1Exposed_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge6 = new PatternEdge(BenzolRingC1Exposed_node_c1, BenzolRingC1Exposed_node_c2, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge6", "_edge6", BenzolRingC1Exposed_edge__edge6_AllowedTypes, BenzolRingC1Exposed_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge7 = new PatternEdge(BenzolRingC1Exposed_node_c3, BenzolRingC1Exposed_node_c4, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge7", "_edge7", BenzolRingC1Exposed_edge__edge7_AllowedTypes, BenzolRingC1Exposed_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge BenzolRingC1Exposed_edge__edge8 = new PatternEdge(BenzolRingC1Exposed_node_c5, BenzolRingC1Exposed_node_c6, (int) EdgeTypes.@Edge, "BenzolRingC1Exposed_edge__edge8", "_edge8", BenzolRingC1Exposed_edge__edge8_AllowedTypes, BenzolRingC1Exposed_edge__edge8_IsAllowedType, 5.5F, -1);
			BenzolRingC1Exposed = new PatternGraph(
				"BenzolRingC1Exposed",
				"",
				new PatternNode[] { BenzolRingC1Exposed_node_c1, BenzolRingC1Exposed_node_c2, BenzolRingC1Exposed_node_c3, BenzolRingC1Exposed_node_c4, BenzolRingC1Exposed_node_c5, BenzolRingC1Exposed_node_c6 }, 
				new PatternEdge[] { BenzolRingC1Exposed_edge__edge0, BenzolRingC1Exposed_edge__edge1, BenzolRingC1Exposed_edge__edge2, BenzolRingC1Exposed_edge__edge3, BenzolRingC1Exposed_edge__edge4, BenzolRingC1Exposed_edge__edge5, BenzolRingC1Exposed_edge__edge6, BenzolRingC1Exposed_edge__edge7, BenzolRingC1Exposed_edge__edge8 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			BenzolRingC1Exposed_node_c1.PointOfDefinition = null;
			BenzolRingC1Exposed_node_c2.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c3.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c4.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c5.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_node_c6.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge0.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge1.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge2.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge3.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge4.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge5.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge6.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge7.PointOfDefinition = BenzolRingC1Exposed;
			BenzolRingC1Exposed_edge__edge8.PointOfDefinition = BenzolRingC1Exposed;

			patternGraph = BenzolRingC1Exposed;

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "BenzolRingC1Exposed_node_c1", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_Hydrogen : LGSPRulePattern
	{
		private static Pattern_Hydrogen instance = null;
		public static Pattern_Hydrogen Instance { get { if (instance==null) instance = new Pattern_Hydrogen(); return instance; } }

		public static NodeType[] Hydrogen_node_anchor_AllowedTypes = null;
		public static NodeType[] Hydrogen_node__node0_AllowedTypes = null;
		public static bool[] Hydrogen_node_anchor_IsAllowedType = null;
		public static bool[] Hydrogen_node__node0_IsAllowedType = null;
		public static EdgeType[] Hydrogen_edge__edge0_AllowedTypes = null;
		public static bool[] Hydrogen_edge__edge0_IsAllowedType = null;
		public enum Hydrogen_NodeNums { @anchor, @_node0, };
		public enum Hydrogen_EdgeNums { @_edge0, };
		public enum Hydrogen_SubNums { };
		public enum Hydrogen_AltNums { };

#if INITIAL_WARMUP
		public Pattern_Hydrogen()
#else
		private Pattern_Hydrogen()
#endif
		{
			name = "Hydrogen";
			isSubpattern = true;

			PatternGraph Hydrogen;
			PatternNode Hydrogen_node_anchor = new PatternNode((int) NodeTypes.@C, "Hydrogen_node_anchor", "anchor", Hydrogen_node_anchor_AllowedTypes, Hydrogen_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Hydrogen_node__node0 = new PatternNode((int) NodeTypes.@H, "Hydrogen_node__node0", "_node0", Hydrogen_node__node0_AllowedTypes, Hydrogen_node__node0_IsAllowedType, 5.5F, -1);
			PatternEdge Hydrogen_edge__edge0 = new PatternEdge(Hydrogen_node_anchor, Hydrogen_node__node0, (int) EdgeTypes.@Edge, "Hydrogen_edge__edge0", "_edge0", Hydrogen_edge__edge0_AllowedTypes, Hydrogen_edge__edge0_IsAllowedType, 5.5F, -1);
			Hydrogen = new PatternGraph(
				"Hydrogen",
				"",
				new PatternNode[] { Hydrogen_node_anchor, Hydrogen_node__node0 }, 
				new PatternEdge[] { Hydrogen_edge__edge0 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[1, 1] {
					{ true, },
				},
				new bool[] {
					false, false, },
				new bool[] {
					false, },
				new bool[] {
					true, true, },
				new bool[] {
					true, }
			);
			Hydrogen_node_anchor.PointOfDefinition = null;
			Hydrogen_node__node0.PointOfDefinition = Hydrogen;
			Hydrogen_edge__edge0.PointOfDefinition = Hydrogen;

			patternGraph = Hydrogen;

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Hydrogen_node_anchor", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_Hydroxyl : LGSPRulePattern
	{
		private static Pattern_Hydroxyl instance = null;
		public static Pattern_Hydroxyl Instance { get { if (instance==null) instance = new Pattern_Hydroxyl(); return instance; } }

		public static NodeType[] Hydroxyl_node_anchor_AllowedTypes = null;
		public static NodeType[] Hydroxyl_node__node0_AllowedTypes = null;
		public static NodeType[] Hydroxyl_node__node1_AllowedTypes = null;
		public static bool[] Hydroxyl_node_anchor_IsAllowedType = null;
		public static bool[] Hydroxyl_node__node0_IsAllowedType = null;
		public static bool[] Hydroxyl_node__node1_IsAllowedType = null;
		public static EdgeType[] Hydroxyl_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Hydroxyl_edge__edge1_AllowedTypes = null;
		public static bool[] Hydroxyl_edge__edge0_IsAllowedType = null;
		public static bool[] Hydroxyl_edge__edge1_IsAllowedType = null;
		public enum Hydroxyl_NodeNums { @anchor, @_node0, @_node1, };
		public enum Hydroxyl_EdgeNums { @_edge0, @_edge1, };
		public enum Hydroxyl_SubNums { };
		public enum Hydroxyl_AltNums { };

#if INITIAL_WARMUP
		public Pattern_Hydroxyl()
#else
		private Pattern_Hydroxyl()
#endif
		{
			name = "Hydroxyl";
			isSubpattern = true;

			PatternGraph Hydroxyl;
			PatternNode Hydroxyl_node_anchor = new PatternNode((int) NodeTypes.@C, "Hydroxyl_node_anchor", "anchor", Hydroxyl_node_anchor_AllowedTypes, Hydroxyl_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Hydroxyl_node__node0 = new PatternNode((int) NodeTypes.@O, "Hydroxyl_node__node0", "_node0", Hydroxyl_node__node0_AllowedTypes, Hydroxyl_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Hydroxyl_node__node1 = new PatternNode((int) NodeTypes.@H, "Hydroxyl_node__node1", "_node1", Hydroxyl_node__node1_AllowedTypes, Hydroxyl_node__node1_IsAllowedType, 5.5F, -1);
			PatternEdge Hydroxyl_edge__edge0 = new PatternEdge(Hydroxyl_node_anchor, Hydroxyl_node__node0, (int) EdgeTypes.@Edge, "Hydroxyl_edge__edge0", "_edge0", Hydroxyl_edge__edge0_AllowedTypes, Hydroxyl_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Hydroxyl_edge__edge1 = new PatternEdge(Hydroxyl_node__node0, Hydroxyl_node__node1, (int) EdgeTypes.@Edge, "Hydroxyl_edge__edge1", "_edge1", Hydroxyl_edge__edge1_AllowedTypes, Hydroxyl_edge__edge1_IsAllowedType, 5.5F, -1);
			Hydroxyl = new PatternGraph(
				"Hydroxyl",
				"",
				new PatternNode[] { Hydroxyl_node_anchor, Hydroxyl_node__node0, Hydroxyl_node__node1 }, 
				new PatternEdge[] { Hydroxyl_edge__edge0, Hydroxyl_edge__edge1 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[] {
					false, false, false, },
				new bool[] {
					false, false, },
				new bool[] {
					true, true, true, },
				new bool[] {
					true, true, }
			);
			Hydroxyl_node_anchor.PointOfDefinition = null;
			Hydroxyl_node__node0.PointOfDefinition = Hydroxyl;
			Hydroxyl_node__node1.PointOfDefinition = Hydroxyl;
			Hydroxyl_edge__edge0.PointOfDefinition = Hydroxyl;
			Hydroxyl_edge__edge1.PointOfDefinition = Hydroxyl;

			patternGraph = Hydroxyl;

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Hydroxyl_node_anchor", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_Methyl : LGSPRulePattern
	{
		private static Pattern_Methyl instance = null;
		public static Pattern_Methyl Instance { get { if (instance==null) instance = new Pattern_Methyl(); return instance; } }

		public static NodeType[] Methyl_node_anchor_AllowedTypes = null;
		public static NodeType[] Methyl_node_c_AllowedTypes = null;
		public static NodeType[] Methyl_node__node0_AllowedTypes = null;
		public static NodeType[] Methyl_node__node1_AllowedTypes = null;
		public static NodeType[] Methyl_node__node2_AllowedTypes = null;
		public static bool[] Methyl_node_anchor_IsAllowedType = null;
		public static bool[] Methyl_node_c_IsAllowedType = null;
		public static bool[] Methyl_node__node0_IsAllowedType = null;
		public static bool[] Methyl_node__node1_IsAllowedType = null;
		public static bool[] Methyl_node__node2_IsAllowedType = null;
		public static EdgeType[] Methyl_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge1_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge2_AllowedTypes = null;
		public static EdgeType[] Methyl_edge__edge3_AllowedTypes = null;
		public static bool[] Methyl_edge__edge0_IsAllowedType = null;
		public static bool[] Methyl_edge__edge1_IsAllowedType = null;
		public static bool[] Methyl_edge__edge2_IsAllowedType = null;
		public static bool[] Methyl_edge__edge3_IsAllowedType = null;
		public enum Methyl_NodeNums { @anchor, @c, @_node0, @_node1, @_node2, };
		public enum Methyl_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, };
		public enum Methyl_SubNums { };
		public enum Methyl_AltNums { };

#if INITIAL_WARMUP
		public Pattern_Methyl()
#else
		private Pattern_Methyl()
#endif
		{
			name = "Methyl";
			isSubpattern = true;

			PatternGraph Methyl;
			PatternNode Methyl_node_anchor = new PatternNode((int) NodeTypes.@C, "Methyl_node_anchor", "anchor", Methyl_node_anchor_AllowedTypes, Methyl_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Methyl_node_c = new PatternNode((int) NodeTypes.@C, "Methyl_node_c", "c", Methyl_node_c_AllowedTypes, Methyl_node_c_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node0 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node0", "_node0", Methyl_node__node0_AllowedTypes, Methyl_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node1 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node1", "_node1", Methyl_node__node1_AllowedTypes, Methyl_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode Methyl_node__node2 = new PatternNode((int) NodeTypes.@H, "Methyl_node__node2", "_node2", Methyl_node__node2_AllowedTypes, Methyl_node__node2_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge0 = new PatternEdge(Methyl_node_anchor, Methyl_node_c, (int) EdgeTypes.@Edge, "Methyl_edge__edge0", "_edge0", Methyl_edge__edge0_AllowedTypes, Methyl_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge1 = new PatternEdge(Methyl_node_c, Methyl_node__node0, (int) EdgeTypes.@Edge, "Methyl_edge__edge1", "_edge1", Methyl_edge__edge1_AllowedTypes, Methyl_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge2 = new PatternEdge(Methyl_node_c, Methyl_node__node1, (int) EdgeTypes.@Edge, "Methyl_edge__edge2", "_edge2", Methyl_edge__edge2_AllowedTypes, Methyl_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge Methyl_edge__edge3 = new PatternEdge(Methyl_node_c, Methyl_node__node2, (int) EdgeTypes.@Edge, "Methyl_edge__edge3", "_edge3", Methyl_edge__edge3_AllowedTypes, Methyl_edge__edge3_IsAllowedType, 5.5F, -1);
			Methyl = new PatternGraph(
				"Methyl",
				"",
				new PatternNode[] { Methyl_node_anchor, Methyl_node_c, Methyl_node__node0, Methyl_node__node1, Methyl_node__node2 }, 
				new PatternEdge[] { Methyl_edge__edge0, Methyl_edge__edge1, Methyl_edge__edge2, Methyl_edge__edge3 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[5, 5] {
					{ true, false, false, false, false, },
					{ false, true, false, false, false, },
					{ false, false, true, false, false, },
					{ false, false, false, true, false, },
					{ false, false, false, false, true, },
				},
				new bool[4, 4] {
					{ true, false, false, false, },
					{ false, true, false, false, },
					{ false, false, true, false, },
					{ false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, },
				new bool[] {
					false, false, false, false, },
				new bool[] {
					true, true, true, true, true, },
				new bool[] {
					true, true, true, true, }
			);
			Methyl_node_anchor.PointOfDefinition = null;
			Methyl_node_c.PointOfDefinition = Methyl;
			Methyl_node__node0.PointOfDefinition = Methyl;
			Methyl_node__node1.PointOfDefinition = Methyl;
			Methyl_node__node2.PointOfDefinition = Methyl;
			Methyl_edge__edge0.PointOfDefinition = Methyl;
			Methyl_edge__edge1.PointOfDefinition = Methyl;
			Methyl_edge__edge2.PointOfDefinition = Methyl;
			Methyl_edge__edge3.PointOfDefinition = Methyl;

			patternGraph = Methyl;

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Methyl_node_anchor", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_Nitro : LGSPRulePattern
	{
		private static Pattern_Nitro instance = null;
		public static Pattern_Nitro Instance { get { if (instance==null) instance = new Pattern_Nitro(); return instance; } }

		public static NodeType[] Nitro_node_anchor_AllowedTypes = null;
		public static NodeType[] Nitro_node_n_AllowedTypes = null;
		public static NodeType[] Nitro_node__node0_AllowedTypes = null;
		public static NodeType[] Nitro_node__node1_AllowedTypes = null;
		public static bool[] Nitro_node_anchor_IsAllowedType = null;
		public static bool[] Nitro_node_n_IsAllowedType = null;
		public static bool[] Nitro_node__node0_IsAllowedType = null;
		public static bool[] Nitro_node__node1_IsAllowedType = null;
		public static EdgeType[] Nitro_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Nitro_edge__edge1_AllowedTypes = null;
		public static EdgeType[] Nitro_edge__edge2_AllowedTypes = null;
		public static bool[] Nitro_edge__edge0_IsAllowedType = null;
		public static bool[] Nitro_edge__edge1_IsAllowedType = null;
		public static bool[] Nitro_edge__edge2_IsAllowedType = null;
		public enum Nitro_NodeNums { @anchor, @n, @_node0, @_node1, };
		public enum Nitro_EdgeNums { @_edge0, @_edge1, @_edge2, };
		public enum Nitro_SubNums { };
		public enum Nitro_AltNums { };

#if INITIAL_WARMUP
		public Pattern_Nitro()
#else
		private Pattern_Nitro()
#endif
		{
			name = "Nitro";
			isSubpattern = true;

			PatternGraph Nitro;
			PatternNode Nitro_node_anchor = new PatternNode((int) NodeTypes.@C, "Nitro_node_anchor", "anchor", Nitro_node_anchor_AllowedTypes, Nitro_node_anchor_IsAllowedType, 5.5F, 0);
			PatternNode Nitro_node_n = new PatternNode((int) NodeTypes.@N, "Nitro_node_n", "n", Nitro_node_n_AllowedTypes, Nitro_node_n_IsAllowedType, 5.5F, -1);
			PatternNode Nitro_node__node0 = new PatternNode((int) NodeTypes.@O, "Nitro_node__node0", "_node0", Nitro_node__node0_AllowedTypes, Nitro_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode Nitro_node__node1 = new PatternNode((int) NodeTypes.@O, "Nitro_node__node1", "_node1", Nitro_node__node1_AllowedTypes, Nitro_node__node1_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge0 = new PatternEdge(Nitro_node_anchor, Nitro_node_n, (int) EdgeTypes.@Edge, "Nitro_edge__edge0", "_edge0", Nitro_edge__edge0_AllowedTypes, Nitro_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge1 = new PatternEdge(Nitro_node_n, Nitro_node__node0, (int) EdgeTypes.@Edge, "Nitro_edge__edge1", "_edge1", Nitro_edge__edge1_AllowedTypes, Nitro_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge Nitro_edge__edge2 = new PatternEdge(Nitro_node_n, Nitro_node__node1, (int) EdgeTypes.@Edge, "Nitro_edge__edge2", "_edge2", Nitro_edge__edge2_AllowedTypes, Nitro_edge__edge2_IsAllowedType, 5.5F, -1);
			Nitro = new PatternGraph(
				"Nitro",
				"",
				new PatternNode[] { Nitro_node_anchor, Nitro_node_n, Nitro_node__node0, Nitro_node__node1 }, 
				new PatternEdge[] { Nitro_edge__edge0, Nitro_edge__edge1, Nitro_edge__edge2 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[4, 4] {
					{ true, false, false, false, },
					{ false, true, false, false, },
					{ false, false, true, false, },
					{ false, false, false, true, },
				},
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				new bool[] {
					false, false, false, false, },
				new bool[] {
					false, false, false, },
				new bool[] {
					true, true, true, true, },
				new bool[] {
					true, true, true, }
			);
			Nitro_node_anchor.PointOfDefinition = null;
			Nitro_node_n.PointOfDefinition = Nitro;
			Nitro_node__node0.PointOfDefinition = Nitro;
			Nitro_node__node1.PointOfDefinition = Nitro;
			Nitro_edge__edge0.PointOfDefinition = Nitro;
			Nitro_edge__edge1.PointOfDefinition = Nitro;
			Nitro_edge__edge2.PointOfDefinition = Nitro;

			patternGraph = Nitro;

			inputs = new GrGenType[] { NodeType_C.typeVar, };
			inputNames = new string[] { "Nitro_node_anchor", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_Oxygen : LGSPRulePattern
	{
		private static Pattern_Oxygen instance = null;
		public static Pattern_Oxygen Instance { get { if (instance==null) instance = new Pattern_Oxygen(); return instance; } }

		public static NodeType[] Oxygen_node_o1_AllowedTypes = null;
		public static NodeType[] Oxygen_node_o2_AllowedTypes = null;
		public static bool[] Oxygen_node_o1_IsAllowedType = null;
		public static bool[] Oxygen_node_o2_IsAllowedType = null;
		public static EdgeType[] Oxygen_edge__edge0_AllowedTypes = null;
		public static EdgeType[] Oxygen_edge__edge1_AllowedTypes = null;
		public static bool[] Oxygen_edge__edge0_IsAllowedType = null;
		public static bool[] Oxygen_edge__edge1_IsAllowedType = null;
		public enum Oxygen_NodeNums { @o1, @o2, };
		public enum Oxygen_EdgeNums { @_edge0, @_edge1, };
		public enum Oxygen_SubNums { };
		public enum Oxygen_AltNums { };

#if INITIAL_WARMUP
		public Pattern_Oxygen()
#else
		private Pattern_Oxygen()
#endif
		{
			name = "Oxygen";
			isSubpattern = true;

			PatternGraph Oxygen;
			PatternNode Oxygen_node_o1 = new PatternNode((int) NodeTypes.@O, "Oxygen_node_o1", "o1", Oxygen_node_o1_AllowedTypes, Oxygen_node_o1_IsAllowedType, 5.5F, -1);
			PatternNode Oxygen_node_o2 = new PatternNode((int) NodeTypes.@O, "Oxygen_node_o2", "o2", Oxygen_node_o2_AllowedTypes, Oxygen_node_o2_IsAllowedType, 5.5F, -1);
			PatternEdge Oxygen_edge__edge0 = new PatternEdge(Oxygen_node_o1, Oxygen_node_o2, (int) EdgeTypes.@Edge, "Oxygen_edge__edge0", "_edge0", Oxygen_edge__edge0_AllowedTypes, Oxygen_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge Oxygen_edge__edge1 = new PatternEdge(Oxygen_node_o2, Oxygen_node_o1, (int) EdgeTypes.@Edge, "Oxygen_edge__edge1", "_edge1", Oxygen_edge__edge1_AllowedTypes, Oxygen_edge__edge1_IsAllowedType, 5.5F, -1);
			Oxygen = new PatternGraph(
				"Oxygen",
				"",
				new PatternNode[] { Oxygen_node_o1, Oxygen_node_o2 }, 
				new PatternEdge[] { Oxygen_edge__edge0, Oxygen_edge__edge1 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[2, 2] {
					{ true, false, },
					{ false, true, },
				},
				new bool[] {
					false, false, },
				new bool[] {
					false, false, },
				new bool[] {
					true, true, },
				new bool[] {
					true, true, }
			);
			Oxygen_node_o1.PointOfDefinition = Oxygen;
			Oxygen_node_o2.PointOfDefinition = Oxygen;
			Oxygen_edge__edge0.PointOfDefinition = Oxygen;
			Oxygen_edge__edge1.PointOfDefinition = Oxygen;

			patternGraph = Oxygen;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_ToluolCoreThenTriNitro : LGSPRulePattern
	{
		private static Pattern_ToluolCoreThenTriNitro instance = null;
		public static Pattern_ToluolCoreThenTriNitro Instance { get { if (instance==null) instance = new Pattern_ToluolCoreThenTriNitro(); return instance; } }

		public static NodeType[] ToluolCoreThenTriNitro_node_c1_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c2_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c3_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c4_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c5_AllowedTypes = null;
		public static NodeType[] ToluolCoreThenTriNitro_node_c6_AllowedTypes = null;
		public static bool[] ToluolCoreThenTriNitro_node_c1_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c2_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c3_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c4_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c5_IsAllowedType = null;
		public static bool[] ToluolCoreThenTriNitro_node_c6_IsAllowedType = null;
		public enum ToluolCoreThenTriNitro_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum ToluolCoreThenTriNitro_EdgeNums { };
		public enum ToluolCoreThenTriNitro_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, };
		public enum ToluolCoreThenTriNitro_AltNums { };

#if INITIAL_WARMUP
		public Pattern_ToluolCoreThenTriNitro()
#else
		private Pattern_ToluolCoreThenTriNitro()
#endif
		{
			name = "ToluolCoreThenTriNitro";
			isSubpattern = true;

			PatternGraph ToluolCoreThenTriNitro;
			PatternNode ToluolCoreThenTriNitro_node_c1 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c1", "c1", ToluolCoreThenTriNitro_node_c1_AllowedTypes, ToluolCoreThenTriNitro_node_c1_IsAllowedType, 5.5F, 0);
			PatternNode ToluolCoreThenTriNitro_node_c2 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c2", "c2", ToluolCoreThenTriNitro_node_c2_AllowedTypes, ToluolCoreThenTriNitro_node_c2_IsAllowedType, 5.5F, 1);
			PatternNode ToluolCoreThenTriNitro_node_c3 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c3", "c3", ToluolCoreThenTriNitro_node_c3_AllowedTypes, ToluolCoreThenTriNitro_node_c3_IsAllowedType, 5.5F, 2);
			PatternNode ToluolCoreThenTriNitro_node_c4 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c4", "c4", ToluolCoreThenTriNitro_node_c4_AllowedTypes, ToluolCoreThenTriNitro_node_c4_IsAllowedType, 5.5F, 3);
			PatternNode ToluolCoreThenTriNitro_node_c5 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c5", "c5", ToluolCoreThenTriNitro_node_c5_AllowedTypes, ToluolCoreThenTriNitro_node_c5_IsAllowedType, 5.5F, 4);
			PatternNode ToluolCoreThenTriNitro_node_c6 = new PatternNode((int) NodeTypes.@C, "ToluolCoreThenTriNitro_node_c6", "c6", ToluolCoreThenTriNitro_node_c6_AllowedTypes, ToluolCoreThenTriNitro_node_c6_IsAllowedType, 5.5F, 5);
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c1 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Hydrogen.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c3 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c5 });
			PatternGraphEmbedding ToluolCoreThenTriNitro__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_TriNitro.Instance, new PatternElement[] { ToluolCoreThenTriNitro_node_c2, ToluolCoreThenTriNitro_node_c4, ToluolCoreThenTriNitro_node_c6 });
			ToluolCoreThenTriNitro = new PatternGraph(
				"ToluolCoreThenTriNitro",
				"",
				new PatternNode[] { ToluolCoreThenTriNitro_node_c1, ToluolCoreThenTriNitro_node_c2, ToluolCoreThenTriNitro_node_c3, ToluolCoreThenTriNitro_node_c4, ToluolCoreThenTriNitro_node_c5, ToluolCoreThenTriNitro_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { ToluolCoreThenTriNitro__subpattern0, ToluolCoreThenTriNitro__subpattern1, ToluolCoreThenTriNitro__subpattern2, ToluolCoreThenTriNitro__subpattern3 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {},
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {}
			);
			ToluolCoreThenTriNitro_node_c1.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c2.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c3.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c4.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c5.PointOfDefinition = null;
			ToluolCoreThenTriNitro_node_c6.PointOfDefinition = null;
			ToluolCoreThenTriNitro__subpattern0.PointOfDefinition = ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern1.PointOfDefinition = ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern2.PointOfDefinition = ToluolCoreThenTriNitro;
			ToluolCoreThenTriNitro__subpattern3.PointOfDefinition = ToluolCoreThenTriNitro;

			patternGraph = ToluolCoreThenTriNitro;

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "ToluolCoreThenTriNitro_node_c1", "ToluolCoreThenTriNitro_node_c2", "ToluolCoreThenTriNitro_node_c3", "ToluolCoreThenTriNitro_node_c4", "ToluolCoreThenTriNitro_node_c5", "ToluolCoreThenTriNitro_node_c6", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Pattern_TriNitro : LGSPRulePattern
	{
		private static Pattern_TriNitro instance = null;
		public static Pattern_TriNitro Instance { get { if (instance==null) instance = new Pattern_TriNitro(); return instance; } }

		public static NodeType[] TriNitro_node_c2_AllowedTypes = null;
		public static NodeType[] TriNitro_node_c4_AllowedTypes = null;
		public static NodeType[] TriNitro_node_c6_AllowedTypes = null;
		public static bool[] TriNitro_node_c2_IsAllowedType = null;
		public static bool[] TriNitro_node_c4_IsAllowedType = null;
		public static bool[] TriNitro_node_c6_IsAllowedType = null;
		public enum TriNitro_NodeNums { @c2, @c4, @c6, };
		public enum TriNitro_EdgeNums { };
		public enum TriNitro_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, };
		public enum TriNitro_AltNums { };

#if INITIAL_WARMUP
		public Pattern_TriNitro()
#else
		private Pattern_TriNitro()
#endif
		{
			name = "TriNitro";
			isSubpattern = true;

			PatternGraph TriNitro;
			PatternNode TriNitro_node_c2 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c2", "c2", TriNitro_node_c2_AllowedTypes, TriNitro_node_c2_IsAllowedType, 5.5F, 0);
			PatternNode TriNitro_node_c4 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c4", "c4", TriNitro_node_c4_AllowedTypes, TriNitro_node_c4_IsAllowedType, 5.5F, 1);
			PatternNode TriNitro_node_c6 = new PatternNode((int) NodeTypes.@C, "TriNitro_node_c6", "c6", TriNitro_node_c6_AllowedTypes, TriNitro_node_c6_IsAllowedType, 5.5F, 2);
			PatternGraphEmbedding TriNitro__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c2 });
			PatternGraphEmbedding TriNitro__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c4 });
			PatternGraphEmbedding TriNitro__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Nitro.Instance, new PatternElement[] { TriNitro_node_c6 });
			TriNitro = new PatternGraph(
				"TriNitro",
				"",
				new PatternNode[] { TriNitro_node_c2, TriNitro_node_c4, TriNitro_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { TriNitro__subpattern0, TriNitro__subpattern1, TriNitro__subpattern2 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[3, 3] {
					{ true, false, false, },
					{ false, true, false, },
					{ false, false, true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, false, false, },
				new bool[] {},
				new bool[] {
					true, true, true, },
				new bool[] {}
			);
			TriNitro_node_c2.PointOfDefinition = null;
			TriNitro_node_c4.PointOfDefinition = null;
			TriNitro_node_c6.PointOfDefinition = null;
			TriNitro__subpattern0.PointOfDefinition = TriNitro;
			TriNitro__subpattern1.PointOfDefinition = TriNitro;
			TriNitro__subpattern2.PointOfDefinition = TriNitro;

			patternGraph = TriNitro;

			inputs = new GrGenType[] { NodeType_C.typeVar, NodeType_C.typeVar, NodeType_C.typeVar, };
			inputNames = new string[] { "TriNitro_node_c2", "TriNitro_node_c4", "TriNitro_node_c6", };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // currently empty
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_BenzolRing : LGSPRulePattern
	{
		private static Rule_BenzolRing instance = null;
		public static Rule_BenzolRing Instance { get { if (instance==null) instance = new Rule_BenzolRing(); return instance; } }

		public enum BenzolRing_NodeNums { };
		public enum BenzolRing_EdgeNums { };
		public enum BenzolRing_SubNums { @_subpattern0, };
		public enum BenzolRing_AltNums { };

#if INITIAL_WARMUP
		public Rule_BenzolRing()
#else
		private Rule_BenzolRing()
#endif
		{
			name = "BenzolRing";
			isSubpattern = false;

			PatternGraph BenzolRing;
			PatternGraphEmbedding BenzolRing__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRing.Instance, new PatternElement[] {  });
			BenzolRing = new PatternGraph(
				"BenzolRing",
				"",
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { BenzolRing__subpattern0 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				new bool[] {},
				new bool[] {},
				new bool[] {},
				new bool[] {}
			);
			BenzolRing__subpattern0.PointOfDefinition = BenzolRing;

			patternGraph = BenzolRing;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_DNT : LGSPRulePattern
	{
		private static Rule_DNT instance = null;
		public static Rule_DNT Instance { get { if (instance==null) instance = new Rule_DNT(); return instance; } }

		public static NodeType[] DNT_node_c1_AllowedTypes = null;
		public static NodeType[] DNT_node_c2_AllowedTypes = null;
		public static NodeType[] DNT_node_c3_AllowedTypes = null;
		public static NodeType[] DNT_node_c4_AllowedTypes = null;
		public static NodeType[] DNT_node_c5_AllowedTypes = null;
		public static NodeType[] DNT_node_c6_AllowedTypes = null;
		public static bool[] DNT_node_c1_IsAllowedType = null;
		public static bool[] DNT_node_c2_IsAllowedType = null;
		public static bool[] DNT_node_c3_IsAllowedType = null;
		public static bool[] DNT_node_c4_IsAllowedType = null;
		public static bool[] DNT_node_c5_IsAllowedType = null;
		public static bool[] DNT_node_c6_IsAllowedType = null;
		public static EdgeType[] DNT_edge__edge0_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge1_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge2_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge3_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge4_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge5_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge6_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge7_AllowedTypes = null;
		public static EdgeType[] DNT_edge__edge8_AllowedTypes = null;
		public static bool[] DNT_edge__edge0_IsAllowedType = null;
		public static bool[] DNT_edge__edge1_IsAllowedType = null;
		public static bool[] DNT_edge__edge2_IsAllowedType = null;
		public static bool[] DNT_edge__edge3_IsAllowedType = null;
		public static bool[] DNT_edge__edge4_IsAllowedType = null;
		public static bool[] DNT_edge__edge5_IsAllowedType = null;
		public static bool[] DNT_edge__edge6_IsAllowedType = null;
		public static bool[] DNT_edge__edge7_IsAllowedType = null;
		public static bool[] DNT_edge__edge8_IsAllowedType = null;
		public enum DNT_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum DNT_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum DNT_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum DNT_AltNums { };

#if INITIAL_WARMUP
		public Rule_DNT()
#else
		private Rule_DNT()
#endif
		{
			name = "DNT";
			isSubpattern = false;

			PatternGraph DNT;
			PatternNode DNT_node_c1 = new PatternNode((int) NodeTypes.@C, "DNT_node_c1", "c1", DNT_node_c1_AllowedTypes, DNT_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c2 = new PatternNode((int) NodeTypes.@C, "DNT_node_c2", "c2", DNT_node_c2_AllowedTypes, DNT_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c3 = new PatternNode((int) NodeTypes.@C, "DNT_node_c3", "c3", DNT_node_c3_AllowedTypes, DNT_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c4 = new PatternNode((int) NodeTypes.@C, "DNT_node_c4", "c4", DNT_node_c4_AllowedTypes, DNT_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c5 = new PatternNode((int) NodeTypes.@C, "DNT_node_c5", "c5", DNT_node_c5_AllowedTypes, DNT_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode DNT_node_c6 = new PatternNode((int) NodeTypes.@C, "DNT_node_c6", "c6", DNT_node_c6_AllowedTypes, DNT_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge0 = new PatternEdge(DNT_node_c1, DNT_node_c2, (int) EdgeTypes.@Edge, "DNT_edge__edge0", "_edge0", DNT_edge__edge0_AllowedTypes, DNT_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge1 = new PatternEdge(DNT_node_c2, DNT_node_c3, (int) EdgeTypes.@Edge, "DNT_edge__edge1", "_edge1", DNT_edge__edge1_AllowedTypes, DNT_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge2 = new PatternEdge(DNT_node_c3, DNT_node_c4, (int) EdgeTypes.@Edge, "DNT_edge__edge2", "_edge2", DNT_edge__edge2_AllowedTypes, DNT_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge3 = new PatternEdge(DNT_node_c4, DNT_node_c5, (int) EdgeTypes.@Edge, "DNT_edge__edge3", "_edge3", DNT_edge__edge3_AllowedTypes, DNT_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge4 = new PatternEdge(DNT_node_c5, DNT_node_c6, (int) EdgeTypes.@Edge, "DNT_edge__edge4", "_edge4", DNT_edge__edge4_AllowedTypes, DNT_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge5 = new PatternEdge(DNT_node_c6, DNT_node_c1, (int) EdgeTypes.@Edge, "DNT_edge__edge5", "_edge5", DNT_edge__edge5_AllowedTypes, DNT_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge6 = new PatternEdge(DNT_node_c1, DNT_node_c2, (int) EdgeTypes.@Edge, "DNT_edge__edge6", "_edge6", DNT_edge__edge6_AllowedTypes, DNT_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge7 = new PatternEdge(DNT_node_c3, DNT_node_c4, (int) EdgeTypes.@Edge, "DNT_edge__edge7", "_edge7", DNT_edge__edge7_AllowedTypes, DNT_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge DNT_edge__edge8 = new PatternEdge(DNT_node_c5, DNT_node_c6, (int) EdgeTypes.@Edge, "DNT_edge__edge8", "_edge8", DNT_edge__edge8_AllowedTypes, DNT_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding DNT__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { DNT_node_c1 });
			PatternGraphEmbedding DNT__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { DNT_node_c2 });
			PatternGraphEmbedding DNT__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c3 });
			PatternGraphEmbedding DNT__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { DNT_node_c4 });
			PatternGraphEmbedding DNT__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c5 });
			PatternGraphEmbedding DNT__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { DNT_node_c6 });
			DNT = new PatternGraph(
				"DNT",
				"",
				new PatternNode[] { DNT_node_c1, DNT_node_c2, DNT_node_c3, DNT_node_c4, DNT_node_c5, DNT_node_c6 }, 
				new PatternEdge[] { DNT_edge__edge0, DNT_edge__edge1, DNT_edge__edge2, DNT_edge__edge3, DNT_edge__edge4, DNT_edge__edge5, DNT_edge__edge6, DNT_edge__edge7, DNT_edge__edge8 }, 
				new PatternGraphEmbedding[] { DNT__subpattern0, DNT__subpattern1, DNT__subpattern2, DNT__subpattern3, DNT__subpattern4, DNT__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			DNT_node_c1.PointOfDefinition = DNT;
			DNT_node_c2.PointOfDefinition = DNT;
			DNT_node_c3.PointOfDefinition = DNT;
			DNT_node_c4.PointOfDefinition = DNT;
			DNT_node_c5.PointOfDefinition = DNT;
			DNT_node_c6.PointOfDefinition = DNT;
			DNT_edge__edge0.PointOfDefinition = DNT;
			DNT_edge__edge1.PointOfDefinition = DNT;
			DNT_edge__edge2.PointOfDefinition = DNT;
			DNT_edge__edge3.PointOfDefinition = DNT;
			DNT_edge__edge4.PointOfDefinition = DNT;
			DNT_edge__edge5.PointOfDefinition = DNT;
			DNT_edge__edge6.PointOfDefinition = DNT;
			DNT_edge__edge7.PointOfDefinition = DNT;
			DNT_edge__edge8.PointOfDefinition = DNT;
			DNT__subpattern0.PointOfDefinition = DNT;
			DNT__subpattern1.PointOfDefinition = DNT;
			DNT__subpattern2.PointOfDefinition = DNT;
			DNT__subpattern3.PointOfDefinition = DNT;
			DNT__subpattern4.PointOfDefinition = DNT;
			DNT__subpattern5.PointOfDefinition = DNT;

			patternGraph = DNT;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_DNTUnfolded : LGSPRulePattern
	{
		private static Rule_DNTUnfolded instance = null;
		public static Rule_DNTUnfolded Instance { get { if (instance==null) instance = new Rule_DNTUnfolded(); return instance; } }

		public static NodeType[] DNTUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_c_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node8_AllowedTypes = null;
		public static NodeType[] DNTUnfolded_node__node9_AllowedTypes = null;
		public static bool[] DNTUnfolded_node_c1_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c3_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c5_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c6_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_c_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node0_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node1_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_n2_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node3_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node5_IsAllowedType = null;
		public static bool[] DNTUnfolded_node_n4_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node6_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node7_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node8_IsAllowedType = null;
		public static bool[] DNTUnfolded_node__node9_IsAllowedType = null;
		public static EdgeType[] DNTUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge20_AllowedTypes = null;
		public static EdgeType[] DNTUnfolded_edge__edge21_AllowedTypes = null;
		public static bool[] DNTUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge20_IsAllowedType = null;
		public static bool[] DNTUnfolded_edge__edge21_IsAllowedType = null;
		public enum DNTUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @c, @_node0, @_node1, @_node2, @n2, @_node3, @_node4, @_node5, @n4, @_node6, @_node7, @_node8, @_node9, };
		public enum DNTUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, @_edge21, };
		public enum DNTUnfolded_SubNums { };
		public enum DNTUnfolded_AltNums { };

#if INITIAL_WARMUP
		public Rule_DNTUnfolded()
#else
		private Rule_DNTUnfolded()
#endif
		{
			name = "DNTUnfolded";
			isSubpattern = false;

			PatternGraph DNTUnfolded;
			PatternNode DNTUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c1", "c1", DNTUnfolded_node_c1_AllowedTypes, DNTUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c2", "c2", DNTUnfolded_node_c2_AllowedTypes, DNTUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c3", "c3", DNTUnfolded_node_c3_AllowedTypes, DNTUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c4", "c4", DNTUnfolded_node_c4_AllowedTypes, DNTUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c5", "c5", DNTUnfolded_node_c5_AllowedTypes, DNTUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c6", "c6", DNTUnfolded_node_c6_AllowedTypes, DNTUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_c = new PatternNode((int) NodeTypes.@C, "DNTUnfolded_node_c", "c", DNTUnfolded_node_c_AllowedTypes, DNTUnfolded_node_c_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node0", "_node0", DNTUnfolded_node__node0_AllowedTypes, DNTUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node1 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node1", "_node1", DNTUnfolded_node__node1_AllowedTypes, DNTUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node2 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node2", "_node2", DNTUnfolded_node__node2_AllowedTypes, DNTUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "DNTUnfolded_node_n2", "n2", DNTUnfolded_node_n2_AllowedTypes, DNTUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node3 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node3", "_node3", DNTUnfolded_node__node3_AllowedTypes, DNTUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node4", "_node4", DNTUnfolded_node__node4_AllowedTypes, DNTUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node5 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node5", "_node5", DNTUnfolded_node__node5_AllowedTypes, DNTUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "DNTUnfolded_node_n4", "n4", DNTUnfolded_node_n4_AllowedTypes, DNTUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node6 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node6", "_node6", DNTUnfolded_node__node6_AllowedTypes, DNTUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "DNTUnfolded_node__node7", "_node7", DNTUnfolded_node__node7_AllowedTypes, DNTUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node8 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node8", "_node8", DNTUnfolded_node__node8_AllowedTypes, DNTUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternNode DNTUnfolded_node__node9 = new PatternNode((int) NodeTypes.@H, "DNTUnfolded_node__node9", "_node9", DNTUnfolded_node__node9_AllowedTypes, DNTUnfolded_node__node9_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge0 = new PatternEdge(DNTUnfolded_node_c1, DNTUnfolded_node_c2, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge0", "_edge0", DNTUnfolded_edge__edge0_AllowedTypes, DNTUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge1 = new PatternEdge(DNTUnfolded_node_c2, DNTUnfolded_node_c3, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge1", "_edge1", DNTUnfolded_edge__edge1_AllowedTypes, DNTUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge2 = new PatternEdge(DNTUnfolded_node_c3, DNTUnfolded_node_c4, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge2", "_edge2", DNTUnfolded_edge__edge2_AllowedTypes, DNTUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge3 = new PatternEdge(DNTUnfolded_node_c4, DNTUnfolded_node_c5, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge3", "_edge3", DNTUnfolded_edge__edge3_AllowedTypes, DNTUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge4 = new PatternEdge(DNTUnfolded_node_c5, DNTUnfolded_node_c6, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge4", "_edge4", DNTUnfolded_edge__edge4_AllowedTypes, DNTUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge5 = new PatternEdge(DNTUnfolded_node_c6, DNTUnfolded_node_c1, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge5", "_edge5", DNTUnfolded_edge__edge5_AllowedTypes, DNTUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge6 = new PatternEdge(DNTUnfolded_node_c1, DNTUnfolded_node_c2, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge6", "_edge6", DNTUnfolded_edge__edge6_AllowedTypes, DNTUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge7 = new PatternEdge(DNTUnfolded_node_c3, DNTUnfolded_node_c4, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge7", "_edge7", DNTUnfolded_edge__edge7_AllowedTypes, DNTUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge8 = new PatternEdge(DNTUnfolded_node_c5, DNTUnfolded_node_c6, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge8", "_edge8", DNTUnfolded_edge__edge8_AllowedTypes, DNTUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge9 = new PatternEdge(DNTUnfolded_node_c1, DNTUnfolded_node_c, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge9", "_edge9", DNTUnfolded_edge__edge9_AllowedTypes, DNTUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge10 = new PatternEdge(DNTUnfolded_node_c, DNTUnfolded_node__node0, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge10", "_edge10", DNTUnfolded_edge__edge10_AllowedTypes, DNTUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge11 = new PatternEdge(DNTUnfolded_node_c, DNTUnfolded_node__node1, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge11", "_edge11", DNTUnfolded_edge__edge11_AllowedTypes, DNTUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge12 = new PatternEdge(DNTUnfolded_node_c, DNTUnfolded_node__node2, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge12", "_edge12", DNTUnfolded_edge__edge12_AllowedTypes, DNTUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge13 = new PatternEdge(DNTUnfolded_node_c2, DNTUnfolded_node_n2, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge13", "_edge13", DNTUnfolded_edge__edge13_AllowedTypes, DNTUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge14 = new PatternEdge(DNTUnfolded_node_n2, DNTUnfolded_node__node3, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge14", "_edge14", DNTUnfolded_edge__edge14_AllowedTypes, DNTUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge15 = new PatternEdge(DNTUnfolded_node_n2, DNTUnfolded_node__node4, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge15", "_edge15", DNTUnfolded_edge__edge15_AllowedTypes, DNTUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge16 = new PatternEdge(DNTUnfolded_node_c3, DNTUnfolded_node__node5, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge16", "_edge16", DNTUnfolded_edge__edge16_AllowedTypes, DNTUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge17 = new PatternEdge(DNTUnfolded_node_c4, DNTUnfolded_node_n4, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge17", "_edge17", DNTUnfolded_edge__edge17_AllowedTypes, DNTUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge18 = new PatternEdge(DNTUnfolded_node_n4, DNTUnfolded_node__node6, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge18", "_edge18", DNTUnfolded_edge__edge18_AllowedTypes, DNTUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge19 = new PatternEdge(DNTUnfolded_node_n4, DNTUnfolded_node__node7, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge19", "_edge19", DNTUnfolded_edge__edge19_AllowedTypes, DNTUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge20 = new PatternEdge(DNTUnfolded_node_c5, DNTUnfolded_node__node8, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge20", "_edge20", DNTUnfolded_edge__edge20_AllowedTypes, DNTUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			PatternEdge DNTUnfolded_edge__edge21 = new PatternEdge(DNTUnfolded_node_c6, DNTUnfolded_node__node9, (int) EdgeTypes.@Edge, "DNTUnfolded_edge__edge21", "_edge21", DNTUnfolded_edge__edge21_AllowedTypes, DNTUnfolded_edge__edge21_IsAllowedType, 5.5F, -1);
			DNTUnfolded = new PatternGraph(
				"DNTUnfolded",
				"",
				new PatternNode[] { DNTUnfolded_node_c1, DNTUnfolded_node_c2, DNTUnfolded_node_c3, DNTUnfolded_node_c4, DNTUnfolded_node_c5, DNTUnfolded_node_c6, DNTUnfolded_node_c, DNTUnfolded_node__node0, DNTUnfolded_node__node1, DNTUnfolded_node__node2, DNTUnfolded_node_n2, DNTUnfolded_node__node3, DNTUnfolded_node__node4, DNTUnfolded_node__node5, DNTUnfolded_node_n4, DNTUnfolded_node__node6, DNTUnfolded_node__node7, DNTUnfolded_node__node8, DNTUnfolded_node__node9 }, 
				new PatternEdge[] { DNTUnfolded_edge__edge0, DNTUnfolded_edge__edge1, DNTUnfolded_edge__edge2, DNTUnfolded_edge__edge3, DNTUnfolded_edge__edge4, DNTUnfolded_edge__edge5, DNTUnfolded_edge__edge6, DNTUnfolded_edge__edge7, DNTUnfolded_edge__edge8, DNTUnfolded_edge__edge9, DNTUnfolded_edge__edge10, DNTUnfolded_edge__edge11, DNTUnfolded_edge__edge12, DNTUnfolded_edge__edge13, DNTUnfolded_edge__edge14, DNTUnfolded_edge__edge15, DNTUnfolded_edge__edge16, DNTUnfolded_edge__edge17, DNTUnfolded_edge__edge18, DNTUnfolded_edge__edge19, DNTUnfolded_edge__edge20, DNTUnfolded_edge__edge21 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[19, 19] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[22, 22] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, }
			);
			DNTUnfolded_node_c1.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c2.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c3.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c4.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c5.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c6.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_c.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node0.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node1.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node2.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_n2.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node3.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node4.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node5.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node_n4.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node6.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node7.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node8.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_node__node9.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge0.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge1.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge2.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge3.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge4.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge5.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge6.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge7.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge8.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge9.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge10.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge11.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge12.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge13.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge14.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge15.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge16.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge17.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge18.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge19.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge20.PointOfDefinition = DNTUnfolded;
			DNTUnfolded_edge__edge21.PointOfDefinition = DNTUnfolded;

			patternGraph = DNTUnfolded;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNB : LGSPRulePattern
	{
		private static Rule_TNB instance = null;
		public static Rule_TNB Instance { get { if (instance==null) instance = new Rule_TNB(); return instance; } }

		public static NodeType[] TNB_node_c1_AllowedTypes = null;
		public static NodeType[] TNB_node_c2_AllowedTypes = null;
		public static NodeType[] TNB_node_c3_AllowedTypes = null;
		public static NodeType[] TNB_node_c4_AllowedTypes = null;
		public static NodeType[] TNB_node_c5_AllowedTypes = null;
		public static NodeType[] TNB_node_c6_AllowedTypes = null;
		public static bool[] TNB_node_c1_IsAllowedType = null;
		public static bool[] TNB_node_c2_IsAllowedType = null;
		public static bool[] TNB_node_c3_IsAllowedType = null;
		public static bool[] TNB_node_c4_IsAllowedType = null;
		public static bool[] TNB_node_c5_IsAllowedType = null;
		public static bool[] TNB_node_c6_IsAllowedType = null;
		public static EdgeType[] TNB_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNB_edge__edge8_AllowedTypes = null;
		public static bool[] TNB_edge__edge0_IsAllowedType = null;
		public static bool[] TNB_edge__edge1_IsAllowedType = null;
		public static bool[] TNB_edge__edge2_IsAllowedType = null;
		public static bool[] TNB_edge__edge3_IsAllowedType = null;
		public static bool[] TNB_edge__edge4_IsAllowedType = null;
		public static bool[] TNB_edge__edge5_IsAllowedType = null;
		public static bool[] TNB_edge__edge6_IsAllowedType = null;
		public static bool[] TNB_edge__edge7_IsAllowedType = null;
		public static bool[] TNB_edge__edge8_IsAllowedType = null;
		public enum TNB_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNB_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum TNB_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum TNB_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNB()
#else
		private Rule_TNB()
#endif
		{
			name = "TNB";
			isSubpattern = false;

			PatternGraph TNB;
			PatternNode TNB_node_c1 = new PatternNode((int) NodeTypes.@C, "TNB_node_c1", "c1", TNB_node_c1_AllowedTypes, TNB_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c2 = new PatternNode((int) NodeTypes.@C, "TNB_node_c2", "c2", TNB_node_c2_AllowedTypes, TNB_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c3 = new PatternNode((int) NodeTypes.@C, "TNB_node_c3", "c3", TNB_node_c3_AllowedTypes, TNB_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c4 = new PatternNode((int) NodeTypes.@C, "TNB_node_c4", "c4", TNB_node_c4_AllowedTypes, TNB_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c5 = new PatternNode((int) NodeTypes.@C, "TNB_node_c5", "c5", TNB_node_c5_AllowedTypes, TNB_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNB_node_c6 = new PatternNode((int) NodeTypes.@C, "TNB_node_c6", "c6", TNB_node_c6_AllowedTypes, TNB_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge0 = new PatternEdge(TNB_node_c1, TNB_node_c2, (int) EdgeTypes.@Edge, "TNB_edge__edge0", "_edge0", TNB_edge__edge0_AllowedTypes, TNB_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge1 = new PatternEdge(TNB_node_c2, TNB_node_c3, (int) EdgeTypes.@Edge, "TNB_edge__edge1", "_edge1", TNB_edge__edge1_AllowedTypes, TNB_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge2 = new PatternEdge(TNB_node_c3, TNB_node_c4, (int) EdgeTypes.@Edge, "TNB_edge__edge2", "_edge2", TNB_edge__edge2_AllowedTypes, TNB_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge3 = new PatternEdge(TNB_node_c4, TNB_node_c5, (int) EdgeTypes.@Edge, "TNB_edge__edge3", "_edge3", TNB_edge__edge3_AllowedTypes, TNB_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge4 = new PatternEdge(TNB_node_c5, TNB_node_c6, (int) EdgeTypes.@Edge, "TNB_edge__edge4", "_edge4", TNB_edge__edge4_AllowedTypes, TNB_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge5 = new PatternEdge(TNB_node_c6, TNB_node_c1, (int) EdgeTypes.@Edge, "TNB_edge__edge5", "_edge5", TNB_edge__edge5_AllowedTypes, TNB_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge6 = new PatternEdge(TNB_node_c1, TNB_node_c2, (int) EdgeTypes.@Edge, "TNB_edge__edge6", "_edge6", TNB_edge__edge6_AllowedTypes, TNB_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge7 = new PatternEdge(TNB_node_c3, TNB_node_c4, (int) EdgeTypes.@Edge, "TNB_edge__edge7", "_edge7", TNB_edge__edge7_AllowedTypes, TNB_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNB_edge__edge8 = new PatternEdge(TNB_node_c5, TNB_node_c6, (int) EdgeTypes.@Edge, "TNB_edge__edge8", "_edge8", TNB_edge__edge8_AllowedTypes, TNB_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNB__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c1 });
			PatternGraphEmbedding TNB__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c2 });
			PatternGraphEmbedding TNB__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c3 });
			PatternGraphEmbedding TNB__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c4 });
			PatternGraphEmbedding TNB__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { TNB_node_c5 });
			PatternGraphEmbedding TNB__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Nitro.Instance, new PatternElement[] { TNB_node_c6 });
			TNB = new PatternGraph(
				"TNB",
				"",
				new PatternNode[] { TNB_node_c1, TNB_node_c2, TNB_node_c3, TNB_node_c4, TNB_node_c5, TNB_node_c6 }, 
				new PatternEdge[] { TNB_edge__edge0, TNB_edge__edge1, TNB_edge__edge2, TNB_edge__edge3, TNB_edge__edge4, TNB_edge__edge5, TNB_edge__edge6, TNB_edge__edge7, TNB_edge__edge8 }, 
				new PatternGraphEmbedding[] { TNB__subpattern0, TNB__subpattern1, TNB__subpattern2, TNB__subpattern3, TNB__subpattern4, TNB__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			TNB_node_c1.PointOfDefinition = TNB;
			TNB_node_c2.PointOfDefinition = TNB;
			TNB_node_c3.PointOfDefinition = TNB;
			TNB_node_c4.PointOfDefinition = TNB;
			TNB_node_c5.PointOfDefinition = TNB;
			TNB_node_c6.PointOfDefinition = TNB;
			TNB_edge__edge0.PointOfDefinition = TNB;
			TNB_edge__edge1.PointOfDefinition = TNB;
			TNB_edge__edge2.PointOfDefinition = TNB;
			TNB_edge__edge3.PointOfDefinition = TNB;
			TNB_edge__edge4.PointOfDefinition = TNB;
			TNB_edge__edge5.PointOfDefinition = TNB;
			TNB_edge__edge6.PointOfDefinition = TNB;
			TNB_edge__edge7.PointOfDefinition = TNB;
			TNB_edge__edge8.PointOfDefinition = TNB;
			TNB__subpattern0.PointOfDefinition = TNB;
			TNB__subpattern1.PointOfDefinition = TNB;
			TNB__subpattern2.PointOfDefinition = TNB;
			TNB__subpattern3.PointOfDefinition = TNB;
			TNB__subpattern4.PointOfDefinition = TNB;
			TNB__subpattern5.PointOfDefinition = TNB;

			patternGraph = TNB;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNBUnfolded : LGSPRulePattern
	{
		private static Rule_TNBUnfolded instance = null;
		public static Rule_TNBUnfolded Instance { get { if (instance==null) instance = new Rule_TNBUnfolded(); return instance; } }

		public static NodeType[] TNBUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node_n6_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] TNBUnfolded_node__node8_AllowedTypes = null;
		public static bool[] TNBUnfolded_node_c1_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c3_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c5_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_c6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node0_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node1_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node2_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node3_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node4_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node5_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node_n6_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node7_IsAllowedType = null;
		public static bool[] TNBUnfolded_node__node8_IsAllowedType = null;
		public static EdgeType[] TNBUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] TNBUnfolded_edge__edge20_AllowedTypes = null;
		public static bool[] TNBUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] TNBUnfolded_edge__edge20_IsAllowedType = null;
		public enum TNBUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @_node0, @n2, @_node1, @_node2, @_node3, @n4, @_node4, @_node5, @_node6, @n6, @_node7, @_node8, };
		public enum TNBUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, };
		public enum TNBUnfolded_SubNums { };
		public enum TNBUnfolded_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNBUnfolded()
#else
		private Rule_TNBUnfolded()
#endif
		{
			name = "TNBUnfolded";
			isSubpattern = false;

			PatternGraph TNBUnfolded;
			PatternNode TNBUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c1", "c1", TNBUnfolded_node_c1_AllowedTypes, TNBUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c2", "c2", TNBUnfolded_node_c2_AllowedTypes, TNBUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c3", "c3", TNBUnfolded_node_c3_AllowedTypes, TNBUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c4", "c4", TNBUnfolded_node_c4_AllowedTypes, TNBUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c5", "c5", TNBUnfolded_node_c5_AllowedTypes, TNBUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNBUnfolded_node_c6", "c6", TNBUnfolded_node_c6_AllowedTypes, TNBUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node0", "_node0", TNBUnfolded_node__node0_AllowedTypes, TNBUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n2", "n2", TNBUnfolded_node_n2_AllowedTypes, TNBUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node1 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node1", "_node1", TNBUnfolded_node__node1_AllowedTypes, TNBUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node2 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node2", "_node2", TNBUnfolded_node__node2_AllowedTypes, TNBUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node3 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node3", "_node3", TNBUnfolded_node__node3_AllowedTypes, TNBUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n4", "n4", TNBUnfolded_node_n4_AllowedTypes, TNBUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node4", "_node4", TNBUnfolded_node__node4_AllowedTypes, TNBUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node5 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node5", "_node5", TNBUnfolded_node__node5_AllowedTypes, TNBUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node6 = new PatternNode((int) NodeTypes.@H, "TNBUnfolded_node__node6", "_node6", TNBUnfolded_node__node6_AllowedTypes, TNBUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node_n6 = new PatternNode((int) NodeTypes.@N, "TNBUnfolded_node_n6", "n6", TNBUnfolded_node_n6_AllowedTypes, TNBUnfolded_node_n6_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node7", "_node7", TNBUnfolded_node__node7_AllowedTypes, TNBUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode TNBUnfolded_node__node8 = new PatternNode((int) NodeTypes.@O, "TNBUnfolded_node__node8", "_node8", TNBUnfolded_node__node8_AllowedTypes, TNBUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge0 = new PatternEdge(TNBUnfolded_node_c1, TNBUnfolded_node_c2, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge0", "_edge0", TNBUnfolded_edge__edge0_AllowedTypes, TNBUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge1 = new PatternEdge(TNBUnfolded_node_c2, TNBUnfolded_node_c3, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge1", "_edge1", TNBUnfolded_edge__edge1_AllowedTypes, TNBUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge2 = new PatternEdge(TNBUnfolded_node_c3, TNBUnfolded_node_c4, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge2", "_edge2", TNBUnfolded_edge__edge2_AllowedTypes, TNBUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge3 = new PatternEdge(TNBUnfolded_node_c4, TNBUnfolded_node_c5, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge3", "_edge3", TNBUnfolded_edge__edge3_AllowedTypes, TNBUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge4 = new PatternEdge(TNBUnfolded_node_c5, TNBUnfolded_node_c6, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge4", "_edge4", TNBUnfolded_edge__edge4_AllowedTypes, TNBUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge5 = new PatternEdge(TNBUnfolded_node_c6, TNBUnfolded_node_c1, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge5", "_edge5", TNBUnfolded_edge__edge5_AllowedTypes, TNBUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge6 = new PatternEdge(TNBUnfolded_node_c1, TNBUnfolded_node_c2, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge6", "_edge6", TNBUnfolded_edge__edge6_AllowedTypes, TNBUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge7 = new PatternEdge(TNBUnfolded_node_c3, TNBUnfolded_node_c4, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge7", "_edge7", TNBUnfolded_edge__edge7_AllowedTypes, TNBUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge8 = new PatternEdge(TNBUnfolded_node_c5, TNBUnfolded_node_c6, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge8", "_edge8", TNBUnfolded_edge__edge8_AllowedTypes, TNBUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge9 = new PatternEdge(TNBUnfolded_node_c1, TNBUnfolded_node__node0, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge9", "_edge9", TNBUnfolded_edge__edge9_AllowedTypes, TNBUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge10 = new PatternEdge(TNBUnfolded_node_c2, TNBUnfolded_node_n2, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge10", "_edge10", TNBUnfolded_edge__edge10_AllowedTypes, TNBUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge11 = new PatternEdge(TNBUnfolded_node_n2, TNBUnfolded_node__node1, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge11", "_edge11", TNBUnfolded_edge__edge11_AllowedTypes, TNBUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge12 = new PatternEdge(TNBUnfolded_node_n2, TNBUnfolded_node__node2, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge12", "_edge12", TNBUnfolded_edge__edge12_AllowedTypes, TNBUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge13 = new PatternEdge(TNBUnfolded_node_c3, TNBUnfolded_node__node3, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge13", "_edge13", TNBUnfolded_edge__edge13_AllowedTypes, TNBUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge14 = new PatternEdge(TNBUnfolded_node_c4, TNBUnfolded_node_n4, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge14", "_edge14", TNBUnfolded_edge__edge14_AllowedTypes, TNBUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge15 = new PatternEdge(TNBUnfolded_node_n4, TNBUnfolded_node__node4, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge15", "_edge15", TNBUnfolded_edge__edge15_AllowedTypes, TNBUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge16 = new PatternEdge(TNBUnfolded_node_n4, TNBUnfolded_node__node5, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge16", "_edge16", TNBUnfolded_edge__edge16_AllowedTypes, TNBUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge17 = new PatternEdge(TNBUnfolded_node_c5, TNBUnfolded_node__node6, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge17", "_edge17", TNBUnfolded_edge__edge17_AllowedTypes, TNBUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge18 = new PatternEdge(TNBUnfolded_node_c6, TNBUnfolded_node_n6, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge18", "_edge18", TNBUnfolded_edge__edge18_AllowedTypes, TNBUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge19 = new PatternEdge(TNBUnfolded_node_n6, TNBUnfolded_node__node7, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge19", "_edge19", TNBUnfolded_edge__edge19_AllowedTypes, TNBUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge TNBUnfolded_edge__edge20 = new PatternEdge(TNBUnfolded_node_n6, TNBUnfolded_node__node8, (int) EdgeTypes.@Edge, "TNBUnfolded_edge__edge20", "_edge20", TNBUnfolded_edge__edge20_AllowedTypes, TNBUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			TNBUnfolded = new PatternGraph(
				"TNBUnfolded",
				"",
				new PatternNode[] { TNBUnfolded_node_c1, TNBUnfolded_node_c2, TNBUnfolded_node_c3, TNBUnfolded_node_c4, TNBUnfolded_node_c5, TNBUnfolded_node_c6, TNBUnfolded_node__node0, TNBUnfolded_node_n2, TNBUnfolded_node__node1, TNBUnfolded_node__node2, TNBUnfolded_node__node3, TNBUnfolded_node_n4, TNBUnfolded_node__node4, TNBUnfolded_node__node5, TNBUnfolded_node__node6, TNBUnfolded_node_n6, TNBUnfolded_node__node7, TNBUnfolded_node__node8 }, 
				new PatternEdge[] { TNBUnfolded_edge__edge0, TNBUnfolded_edge__edge1, TNBUnfolded_edge__edge2, TNBUnfolded_edge__edge3, TNBUnfolded_edge__edge4, TNBUnfolded_edge__edge5, TNBUnfolded_edge__edge6, TNBUnfolded_edge__edge7, TNBUnfolded_edge__edge8, TNBUnfolded_edge__edge9, TNBUnfolded_edge__edge10, TNBUnfolded_edge__edge11, TNBUnfolded_edge__edge12, TNBUnfolded_edge__edge13, TNBUnfolded_edge__edge14, TNBUnfolded_edge__edge15, TNBUnfolded_edge__edge16, TNBUnfolded_edge__edge17, TNBUnfolded_edge__edge18, TNBUnfolded_edge__edge19, TNBUnfolded_edge__edge20 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[18, 18] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[21, 21] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, }
			);
			TNBUnfolded_node_c1.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_c2.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_c3.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_c4.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_c5.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_c6.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node0.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_n2.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node1.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node2.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node3.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_n4.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node4.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node5.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node6.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node_n6.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node7.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_node__node8.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge0.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge1.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge2.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge3.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge4.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge5.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge6.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge7.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge8.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge9.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge10.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge11.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge12.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge13.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge14.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge15.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge16.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge17.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge18.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge19.PointOfDefinition = TNBUnfolded;
			TNBUnfolded_edge__edge20.PointOfDefinition = TNBUnfolded;

			patternGraph = TNBUnfolded;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNT : LGSPRulePattern
	{
		private static Rule_TNT instance = null;
		public static Rule_TNT Instance { get { if (instance==null) instance = new Rule_TNT(); return instance; } }

		public static NodeType[] TNT_node_c1_AllowedTypes = null;
		public static NodeType[] TNT_node_c2_AllowedTypes = null;
		public static NodeType[] TNT_node_c3_AllowedTypes = null;
		public static NodeType[] TNT_node_c4_AllowedTypes = null;
		public static NodeType[] TNT_node_c5_AllowedTypes = null;
		public static NodeType[] TNT_node_c6_AllowedTypes = null;
		public static bool[] TNT_node_c1_IsAllowedType = null;
		public static bool[] TNT_node_c2_IsAllowedType = null;
		public static bool[] TNT_node_c3_IsAllowedType = null;
		public static bool[] TNT_node_c4_IsAllowedType = null;
		public static bool[] TNT_node_c5_IsAllowedType = null;
		public static bool[] TNT_node_c6_IsAllowedType = null;
		public static EdgeType[] TNT_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNT_edge__edge8_AllowedTypes = null;
		public static bool[] TNT_edge__edge0_IsAllowedType = null;
		public static bool[] TNT_edge__edge1_IsAllowedType = null;
		public static bool[] TNT_edge__edge2_IsAllowedType = null;
		public static bool[] TNT_edge__edge3_IsAllowedType = null;
		public static bool[] TNT_edge__edge4_IsAllowedType = null;
		public static bool[] TNT_edge__edge5_IsAllowedType = null;
		public static bool[] TNT_edge__edge6_IsAllowedType = null;
		public static bool[] TNT_edge__edge7_IsAllowedType = null;
		public static bool[] TNT_edge__edge8_IsAllowedType = null;
		public enum TNT_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNT_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, };
		public enum TNT_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, };
		public enum TNT_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNT()
#else
		private Rule_TNT()
#endif
		{
			name = "TNT";
			isSubpattern = false;

			PatternGraph TNT;
			PatternNode TNT_node_c1 = new PatternNode((int) NodeTypes.@C, "TNT_node_c1", "c1", TNT_node_c1_AllowedTypes, TNT_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c2 = new PatternNode((int) NodeTypes.@C, "TNT_node_c2", "c2", TNT_node_c2_AllowedTypes, TNT_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c3 = new PatternNode((int) NodeTypes.@C, "TNT_node_c3", "c3", TNT_node_c3_AllowedTypes, TNT_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c4 = new PatternNode((int) NodeTypes.@C, "TNT_node_c4", "c4", TNT_node_c4_AllowedTypes, TNT_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c5 = new PatternNode((int) NodeTypes.@C, "TNT_node_c5", "c5", TNT_node_c5_AllowedTypes, TNT_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNT_node_c6 = new PatternNode((int) NodeTypes.@C, "TNT_node_c6", "c6", TNT_node_c6_AllowedTypes, TNT_node_c6_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge0 = new PatternEdge(TNT_node_c1, TNT_node_c2, (int) EdgeTypes.@Edge, "TNT_edge__edge0", "_edge0", TNT_edge__edge0_AllowedTypes, TNT_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge1 = new PatternEdge(TNT_node_c2, TNT_node_c3, (int) EdgeTypes.@Edge, "TNT_edge__edge1", "_edge1", TNT_edge__edge1_AllowedTypes, TNT_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge2 = new PatternEdge(TNT_node_c3, TNT_node_c4, (int) EdgeTypes.@Edge, "TNT_edge__edge2", "_edge2", TNT_edge__edge2_AllowedTypes, TNT_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge3 = new PatternEdge(TNT_node_c4, TNT_node_c5, (int) EdgeTypes.@Edge, "TNT_edge__edge3", "_edge3", TNT_edge__edge3_AllowedTypes, TNT_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge4 = new PatternEdge(TNT_node_c5, TNT_node_c6, (int) EdgeTypes.@Edge, "TNT_edge__edge4", "_edge4", TNT_edge__edge4_AllowedTypes, TNT_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge5 = new PatternEdge(TNT_node_c6, TNT_node_c1, (int) EdgeTypes.@Edge, "TNT_edge__edge5", "_edge5", TNT_edge__edge5_AllowedTypes, TNT_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge6 = new PatternEdge(TNT_node_c1, TNT_node_c2, (int) EdgeTypes.@Edge, "TNT_edge__edge6", "_edge6", TNT_edge__edge6_AllowedTypes, TNT_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge7 = new PatternEdge(TNT_node_c3, TNT_node_c4, (int) EdgeTypes.@Edge, "TNT_edge__edge7", "_edge7", TNT_edge__edge7_AllowedTypes, TNT_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNT_edge__edge8 = new PatternEdge(TNT_node_c5, TNT_node_c6, (int) EdgeTypes.@Edge, "TNT_edge__edge8", "_edge8", TNT_edge__edge8_AllowedTypes, TNT_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNT__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_Methyl.Instance, new PatternElement[] { TNT_node_c1 });
			PatternGraphEmbedding TNT__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c2 });
			PatternGraphEmbedding TNT__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { TNT_node_c3 });
			PatternGraphEmbedding TNT__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c4 });
			PatternGraphEmbedding TNT__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { TNT_node_c5 });
			PatternGraphEmbedding TNT__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Nitro.Instance, new PatternElement[] { TNT_node_c6 });
			TNT = new PatternGraph(
				"TNT",
				"",
				new PatternNode[] { TNT_node_c1, TNT_node_c2, TNT_node_c3, TNT_node_c4, TNT_node_c5, TNT_node_c6 }, 
				new PatternEdge[] { TNT_edge__edge0, TNT_edge__edge1, TNT_edge__edge2, TNT_edge__edge3, TNT_edge__edge4, TNT_edge__edge5, TNT_edge__edge6, TNT_edge__edge7, TNT_edge__edge8 }, 
				new PatternGraphEmbedding[] { TNT__subpattern0, TNT__subpattern1, TNT__subpattern2, TNT__subpattern3, TNT__subpattern4, TNT__subpattern5 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[9, 9] {
					{ true, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, }
			);
			TNT_node_c1.PointOfDefinition = TNT;
			TNT_node_c2.PointOfDefinition = TNT;
			TNT_node_c3.PointOfDefinition = TNT;
			TNT_node_c4.PointOfDefinition = TNT;
			TNT_node_c5.PointOfDefinition = TNT;
			TNT_node_c6.PointOfDefinition = TNT;
			TNT_edge__edge0.PointOfDefinition = TNT;
			TNT_edge__edge1.PointOfDefinition = TNT;
			TNT_edge__edge2.PointOfDefinition = TNT;
			TNT_edge__edge3.PointOfDefinition = TNT;
			TNT_edge__edge4.PointOfDefinition = TNT;
			TNT_edge__edge5.PointOfDefinition = TNT;
			TNT_edge__edge6.PointOfDefinition = TNT;
			TNT_edge__edge7.PointOfDefinition = TNT;
			TNT_edge__edge8.PointOfDefinition = TNT;
			TNT__subpattern0.PointOfDefinition = TNT;
			TNT__subpattern1.PointOfDefinition = TNT;
			TNT__subpattern2.PointOfDefinition = TNT;
			TNT__subpattern3.PointOfDefinition = TNT;
			TNT__subpattern4.PointOfDefinition = TNT;
			TNT__subpattern5.PointOfDefinition = TNT;

			patternGraph = TNT;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNTChain : LGSPRulePattern
	{
		private static Rule_TNTChain instance = null;
		public static Rule_TNTChain Instance { get { if (instance==null) instance = new Rule_TNTChain(); return instance; } }

		public static NodeType[] TNTChain_node_c1_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c2_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c3_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c4_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c5_AllowedTypes = null;
		public static NodeType[] TNTChain_node_c6_AllowedTypes = null;
		public static bool[] TNTChain_node_c1_IsAllowedType = null;
		public static bool[] TNTChain_node_c2_IsAllowedType = null;
		public static bool[] TNTChain_node_c3_IsAllowedType = null;
		public static bool[] TNTChain_node_c4_IsAllowedType = null;
		public static bool[] TNTChain_node_c5_IsAllowedType = null;
		public static bool[] TNTChain_node_c6_IsAllowedType = null;
		public enum TNTChain_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNTChain_EdgeNums { };
		public enum TNTChain_SubNums { @_subpattern0, @_subpattern1, };
		public enum TNTChain_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNTChain()
#else
		private Rule_TNTChain()
#endif
		{
			name = "TNTChain";
			isSubpattern = false;

			PatternGraph TNTChain;
			PatternNode TNTChain_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c1", "c1", TNTChain_node_c1_AllowedTypes, TNTChain_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c2", "c2", TNTChain_node_c2_AllowedTypes, TNTChain_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c3", "c3", TNTChain_node_c3_AllowedTypes, TNTChain_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c4", "c4", TNTChain_node_c4_AllowedTypes, TNTChain_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c5", "c5", TNTChain_node_c5_AllowedTypes, TNTChain_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTChain_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTChain_node_c6", "c6", TNTChain_node_c6_AllowedTypes, TNTChain_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNTChain__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 });
			PatternGraphEmbedding TNTChain__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_ToluolCoreThenTriNitro.Instance, new PatternElement[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 });
			TNTChain = new PatternGraph(
				"TNTChain",
				"",
				new PatternNode[] { TNTChain_node_c1, TNTChain_node_c2, TNTChain_node_c3, TNTChain_node_c4, TNTChain_node_c5, TNTChain_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { TNTChain__subpattern0, TNTChain__subpattern1 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {},
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {}
			);
			TNTChain_node_c1.PointOfDefinition = TNTChain;
			TNTChain_node_c2.PointOfDefinition = TNTChain;
			TNTChain_node_c3.PointOfDefinition = TNTChain;
			TNTChain_node_c4.PointOfDefinition = TNTChain;
			TNTChain_node_c5.PointOfDefinition = TNTChain;
			TNTChain_node_c6.PointOfDefinition = TNTChain;
			TNTChain__subpattern0.PointOfDefinition = TNTChain;
			TNTChain__subpattern1.PointOfDefinition = TNTChain;

			patternGraph = TNTChain;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNTTotallyFolded : LGSPRulePattern
	{
		private static Rule_TNTTotallyFolded instance = null;
		public static Rule_TNTTotallyFolded Instance { get { if (instance==null) instance = new Rule_TNTTotallyFolded(); return instance; } }

		public static NodeType[] TNTTotallyFolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNTTotallyFolded_node_c6_AllowedTypes = null;
		public static bool[] TNTTotallyFolded_node_c1_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c2_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c3_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c4_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c5_IsAllowedType = null;
		public static bool[] TNTTotallyFolded_node_c6_IsAllowedType = null;
		public enum TNTTotallyFolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum TNTTotallyFolded_EdgeNums { };
		public enum TNTTotallyFolded_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, @_subpattern6, };
		public enum TNTTotallyFolded_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNTTotallyFolded()
#else
		private Rule_TNTTotallyFolded()
#endif
		{
			name = "TNTTotallyFolded";
			isSubpattern = false;

			PatternGraph TNTTotallyFolded;
			PatternNode TNTTotallyFolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c1", "c1", TNTTotallyFolded_node_c1_AllowedTypes, TNTTotallyFolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c2", "c2", TNTTotallyFolded_node_c2_AllowedTypes, TNTTotallyFolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c3", "c3", TNTTotallyFolded_node_c3_AllowedTypes, TNTTotallyFolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c4", "c4", TNTTotallyFolded_node_c4_AllowedTypes, TNTTotallyFolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c5", "c5", TNTTotallyFolded_node_c5_AllowedTypes, TNTTotallyFolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTTotallyFolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTTotallyFolded_node_c6", "c6", TNTTotallyFolded_node_c6_AllowedTypes, TNTTotallyFolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding TNTTotallyFolded__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { TNTTotallyFolded_node_c1, TNTTotallyFolded_node_c2, TNTTotallyFolded_node_c3, TNTTotallyFolded_node_c4, TNTTotallyFolded_node_c5, TNTTotallyFolded_node_c6 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { TNTTotallyFolded_node_c1 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c2 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Hydrogen.Instance, new PatternElement[] { TNTTotallyFolded_node_c3 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c4 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { TNTTotallyFolded_node_c5 });
			PatternGraphEmbedding TNTTotallyFolded__subpattern6 = new PatternGraphEmbedding("_subpattern6", Pattern_Nitro.Instance, new PatternElement[] { TNTTotallyFolded_node_c6 });
			TNTTotallyFolded = new PatternGraph(
				"TNTTotallyFolded",
				"",
				new PatternNode[] { TNTTotallyFolded_node_c1, TNTTotallyFolded_node_c2, TNTTotallyFolded_node_c3, TNTTotallyFolded_node_c4, TNTTotallyFolded_node_c5, TNTTotallyFolded_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { TNTTotallyFolded__subpattern0, TNTTotallyFolded__subpattern1, TNTTotallyFolded__subpattern2, TNTTotallyFolded__subpattern3, TNTTotallyFolded__subpattern4, TNTTotallyFolded__subpattern5, TNTTotallyFolded__subpattern6 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {},
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {}
			);
			TNTTotallyFolded_node_c1.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded_node_c2.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded_node_c3.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded_node_c4.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded_node_c5.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded_node_c6.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern0.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern1.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern2.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern3.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern4.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern5.PointOfDefinition = TNTTotallyFolded;
			TNTTotallyFolded__subpattern6.PointOfDefinition = TNTTotallyFolded;

			patternGraph = TNTTotallyFolded;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_TNTUnfolded : LGSPRulePattern
	{
		private static Rule_TNTUnfolded instance = null;
		public static Rule_TNTUnfolded Instance { get { if (instance==null) instance = new Rule_TNTUnfolded(); return instance; } }

		public static NodeType[] TNTUnfolded_node_c1_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c3_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c5_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_c_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node0_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node1_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n2_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node3_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node5_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n4_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node7_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node8_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node_n6_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node9_AllowedTypes = null;
		public static NodeType[] TNTUnfolded_node__node10_AllowedTypes = null;
		public static bool[] TNTUnfolded_node_c1_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c3_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c5_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_c_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node0_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node1_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n2_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node3_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node5_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n4_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node7_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node8_IsAllowedType = null;
		public static bool[] TNTUnfolded_node_n6_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node9_IsAllowedType = null;
		public static bool[] TNTUnfolded_node__node10_IsAllowedType = null;
		public static EdgeType[] TNTUnfolded_edge__edge0_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge1_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge2_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge3_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge4_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge5_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge6_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge7_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge8_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge9_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge10_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge11_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge12_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge13_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge14_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge15_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge16_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge17_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge18_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge19_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge20_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge21_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge22_AllowedTypes = null;
		public static EdgeType[] TNTUnfolded_edge__edge23_AllowedTypes = null;
		public static bool[] TNTUnfolded_edge__edge0_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge1_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge2_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge3_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge4_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge5_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge6_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge7_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge8_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge9_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge10_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge11_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge12_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge13_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge14_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge15_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge16_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge17_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge18_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge19_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge20_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge21_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge22_IsAllowedType = null;
		public static bool[] TNTUnfolded_edge__edge23_IsAllowedType = null;
		public enum TNTUnfolded_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, @c, @_node0, @_node1, @_node2, @n2, @_node3, @_node4, @_node5, @n4, @_node6, @_node7, @_node8, @n6, @_node9, @_node10, };
		public enum TNTUnfolded_EdgeNums { @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, @_edge12, @_edge13, @_edge14, @_edge15, @_edge16, @_edge17, @_edge18, @_edge19, @_edge20, @_edge21, @_edge22, @_edge23, };
		public enum TNTUnfolded_SubNums { };
		public enum TNTUnfolded_AltNums { };

#if INITIAL_WARMUP
		public Rule_TNTUnfolded()
#else
		private Rule_TNTUnfolded()
#endif
		{
			name = "TNTUnfolded";
			isSubpattern = false;

			PatternGraph TNTUnfolded;
			PatternNode TNTUnfolded_node_c1 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c1", "c1", TNTUnfolded_node_c1_AllowedTypes, TNTUnfolded_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c2 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c2", "c2", TNTUnfolded_node_c2_AllowedTypes, TNTUnfolded_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c3 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c3", "c3", TNTUnfolded_node_c3_AllowedTypes, TNTUnfolded_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c4 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c4", "c4", TNTUnfolded_node_c4_AllowedTypes, TNTUnfolded_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c5 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c5", "c5", TNTUnfolded_node_c5_AllowedTypes, TNTUnfolded_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c6 = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c6", "c6", TNTUnfolded_node_c6_AllowedTypes, TNTUnfolded_node_c6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_c = new PatternNode((int) NodeTypes.@C, "TNTUnfolded_node_c", "c", TNTUnfolded_node_c_AllowedTypes, TNTUnfolded_node_c_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node0 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node0", "_node0", TNTUnfolded_node__node0_AllowedTypes, TNTUnfolded_node__node0_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node1 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node1", "_node1", TNTUnfolded_node__node1_AllowedTypes, TNTUnfolded_node__node1_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node2 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node2", "_node2", TNTUnfolded_node__node2_AllowedTypes, TNTUnfolded_node__node2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n2 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n2", "n2", TNTUnfolded_node_n2_AllowedTypes, TNTUnfolded_node_n2_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node3 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node3", "_node3", TNTUnfolded_node__node3_AllowedTypes, TNTUnfolded_node__node3_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node4 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node4", "_node4", TNTUnfolded_node__node4_AllowedTypes, TNTUnfolded_node__node4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node5 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node5", "_node5", TNTUnfolded_node__node5_AllowedTypes, TNTUnfolded_node__node5_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n4 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n4", "n4", TNTUnfolded_node_n4_AllowedTypes, TNTUnfolded_node_n4_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node6 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node6", "_node6", TNTUnfolded_node__node6_AllowedTypes, TNTUnfolded_node__node6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node7 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node7", "_node7", TNTUnfolded_node__node7_AllowedTypes, TNTUnfolded_node__node7_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node8 = new PatternNode((int) NodeTypes.@H, "TNTUnfolded_node__node8", "_node8", TNTUnfolded_node__node8_AllowedTypes, TNTUnfolded_node__node8_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node_n6 = new PatternNode((int) NodeTypes.@N, "TNTUnfolded_node_n6", "n6", TNTUnfolded_node_n6_AllowedTypes, TNTUnfolded_node_n6_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node9 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node9", "_node9", TNTUnfolded_node__node9_AllowedTypes, TNTUnfolded_node__node9_IsAllowedType, 5.5F, -1);
			PatternNode TNTUnfolded_node__node10 = new PatternNode((int) NodeTypes.@O, "TNTUnfolded_node__node10", "_node10", TNTUnfolded_node__node10_AllowedTypes, TNTUnfolded_node__node10_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge0 = new PatternEdge(TNTUnfolded_node_c1, TNTUnfolded_node_c2, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge0", "_edge0", TNTUnfolded_edge__edge0_AllowedTypes, TNTUnfolded_edge__edge0_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge1 = new PatternEdge(TNTUnfolded_node_c2, TNTUnfolded_node_c3, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge1", "_edge1", TNTUnfolded_edge__edge1_AllowedTypes, TNTUnfolded_edge__edge1_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge2 = new PatternEdge(TNTUnfolded_node_c3, TNTUnfolded_node_c4, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge2", "_edge2", TNTUnfolded_edge__edge2_AllowedTypes, TNTUnfolded_edge__edge2_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge3 = new PatternEdge(TNTUnfolded_node_c4, TNTUnfolded_node_c5, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge3", "_edge3", TNTUnfolded_edge__edge3_AllowedTypes, TNTUnfolded_edge__edge3_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge4 = new PatternEdge(TNTUnfolded_node_c5, TNTUnfolded_node_c6, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge4", "_edge4", TNTUnfolded_edge__edge4_AllowedTypes, TNTUnfolded_edge__edge4_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge5 = new PatternEdge(TNTUnfolded_node_c6, TNTUnfolded_node_c1, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge5", "_edge5", TNTUnfolded_edge__edge5_AllowedTypes, TNTUnfolded_edge__edge5_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge6 = new PatternEdge(TNTUnfolded_node_c1, TNTUnfolded_node_c2, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge6", "_edge6", TNTUnfolded_edge__edge6_AllowedTypes, TNTUnfolded_edge__edge6_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge7 = new PatternEdge(TNTUnfolded_node_c3, TNTUnfolded_node_c4, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge7", "_edge7", TNTUnfolded_edge__edge7_AllowedTypes, TNTUnfolded_edge__edge7_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge8 = new PatternEdge(TNTUnfolded_node_c5, TNTUnfolded_node_c6, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge8", "_edge8", TNTUnfolded_edge__edge8_AllowedTypes, TNTUnfolded_edge__edge8_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge9 = new PatternEdge(TNTUnfolded_node_c1, TNTUnfolded_node_c, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge9", "_edge9", TNTUnfolded_edge__edge9_AllowedTypes, TNTUnfolded_edge__edge9_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge10 = new PatternEdge(TNTUnfolded_node_c, TNTUnfolded_node__node0, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge10", "_edge10", TNTUnfolded_edge__edge10_AllowedTypes, TNTUnfolded_edge__edge10_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge11 = new PatternEdge(TNTUnfolded_node_c, TNTUnfolded_node__node1, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge11", "_edge11", TNTUnfolded_edge__edge11_AllowedTypes, TNTUnfolded_edge__edge11_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge12 = new PatternEdge(TNTUnfolded_node_c, TNTUnfolded_node__node2, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge12", "_edge12", TNTUnfolded_edge__edge12_AllowedTypes, TNTUnfolded_edge__edge12_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge13 = new PatternEdge(TNTUnfolded_node_c2, TNTUnfolded_node_n2, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge13", "_edge13", TNTUnfolded_edge__edge13_AllowedTypes, TNTUnfolded_edge__edge13_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge14 = new PatternEdge(TNTUnfolded_node_n2, TNTUnfolded_node__node3, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge14", "_edge14", TNTUnfolded_edge__edge14_AllowedTypes, TNTUnfolded_edge__edge14_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge15 = new PatternEdge(TNTUnfolded_node_n2, TNTUnfolded_node__node4, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge15", "_edge15", TNTUnfolded_edge__edge15_AllowedTypes, TNTUnfolded_edge__edge15_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge16 = new PatternEdge(TNTUnfolded_node_c3, TNTUnfolded_node__node5, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge16", "_edge16", TNTUnfolded_edge__edge16_AllowedTypes, TNTUnfolded_edge__edge16_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge17 = new PatternEdge(TNTUnfolded_node_c4, TNTUnfolded_node_n4, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge17", "_edge17", TNTUnfolded_edge__edge17_AllowedTypes, TNTUnfolded_edge__edge17_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge18 = new PatternEdge(TNTUnfolded_node_n4, TNTUnfolded_node__node6, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge18", "_edge18", TNTUnfolded_edge__edge18_AllowedTypes, TNTUnfolded_edge__edge18_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge19 = new PatternEdge(TNTUnfolded_node_n4, TNTUnfolded_node__node7, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge19", "_edge19", TNTUnfolded_edge__edge19_AllowedTypes, TNTUnfolded_edge__edge19_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge20 = new PatternEdge(TNTUnfolded_node_c5, TNTUnfolded_node__node8, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge20", "_edge20", TNTUnfolded_edge__edge20_AllowedTypes, TNTUnfolded_edge__edge20_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge21 = new PatternEdge(TNTUnfolded_node_c6, TNTUnfolded_node_n6, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge21", "_edge21", TNTUnfolded_edge__edge21_AllowedTypes, TNTUnfolded_edge__edge21_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge22 = new PatternEdge(TNTUnfolded_node_n6, TNTUnfolded_node__node9, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge22", "_edge22", TNTUnfolded_edge__edge22_AllowedTypes, TNTUnfolded_edge__edge22_IsAllowedType, 5.5F, -1);
			PatternEdge TNTUnfolded_edge__edge23 = new PatternEdge(TNTUnfolded_node_n6, TNTUnfolded_node__node10, (int) EdgeTypes.@Edge, "TNTUnfolded_edge__edge23", "_edge23", TNTUnfolded_edge__edge23_AllowedTypes, TNTUnfolded_edge__edge23_IsAllowedType, 5.5F, -1);
			TNTUnfolded = new PatternGraph(
				"TNTUnfolded",
				"",
				new PatternNode[] { TNTUnfolded_node_c1, TNTUnfolded_node_c2, TNTUnfolded_node_c3, TNTUnfolded_node_c4, TNTUnfolded_node_c5, TNTUnfolded_node_c6, TNTUnfolded_node_c, TNTUnfolded_node__node0, TNTUnfolded_node__node1, TNTUnfolded_node__node2, TNTUnfolded_node_n2, TNTUnfolded_node__node3, TNTUnfolded_node__node4, TNTUnfolded_node__node5, TNTUnfolded_node_n4, TNTUnfolded_node__node6, TNTUnfolded_node__node7, TNTUnfolded_node__node8, TNTUnfolded_node_n6, TNTUnfolded_node__node9, TNTUnfolded_node__node10 }, 
				new PatternEdge[] { TNTUnfolded_edge__edge0, TNTUnfolded_edge__edge1, TNTUnfolded_edge__edge2, TNTUnfolded_edge__edge3, TNTUnfolded_edge__edge4, TNTUnfolded_edge__edge5, TNTUnfolded_edge__edge6, TNTUnfolded_edge__edge7, TNTUnfolded_edge__edge8, TNTUnfolded_edge__edge9, TNTUnfolded_edge__edge10, TNTUnfolded_edge__edge11, TNTUnfolded_edge__edge12, TNTUnfolded_edge__edge13, TNTUnfolded_edge__edge14, TNTUnfolded_edge__edge15, TNTUnfolded_edge__edge16, TNTUnfolded_edge__edge17, TNTUnfolded_edge__edge18, TNTUnfolded_edge__edge19, TNTUnfolded_edge__edge20, TNTUnfolded_edge__edge21, TNTUnfolded_edge__edge22, TNTUnfolded_edge__edge23 }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[21, 21] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[24, 24] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, },
				new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, }
			);
			TNTUnfolded_node_c1.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c2.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c3.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c4.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c5.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c6.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_c.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node0.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node1.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node2.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_n2.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node3.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node4.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node5.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_n4.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node6.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node7.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node8.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node_n6.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node9.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_node__node10.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge0.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge1.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge2.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge3.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge4.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge5.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge6.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge7.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge8.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge9.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge10.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge11.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge12.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge13.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge14.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge15.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge16.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge17.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge18.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge19.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge20.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge21.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge22.PointOfDefinition = TNTUnfolded;
			TNTUnfolded_edge__edge23.PointOfDefinition = TNTUnfolded;

			patternGraph = TNTUnfolded;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_Toluol : LGSPRulePattern
	{
		private static Rule_Toluol instance = null;
		public static Rule_Toluol Instance { get { if (instance==null) instance = new Rule_Toluol(); return instance; } }

		public static NodeType[] Toluol_node_c1_AllowedTypes = null;
		public static NodeType[] Toluol_node_c2_AllowedTypes = null;
		public static NodeType[] Toluol_node_c3_AllowedTypes = null;
		public static NodeType[] Toluol_node_c4_AllowedTypes = null;
		public static NodeType[] Toluol_node_c5_AllowedTypes = null;
		public static NodeType[] Toluol_node_c6_AllowedTypes = null;
		public static bool[] Toluol_node_c1_IsAllowedType = null;
		public static bool[] Toluol_node_c2_IsAllowedType = null;
		public static bool[] Toluol_node_c3_IsAllowedType = null;
		public static bool[] Toluol_node_c4_IsAllowedType = null;
		public static bool[] Toluol_node_c5_IsAllowedType = null;
		public static bool[] Toluol_node_c6_IsAllowedType = null;
		public enum Toluol_NodeNums { @c1, @c2, @c3, @c4, @c5, @c6, };
		public enum Toluol_EdgeNums { };
		public enum Toluol_SubNums { @_subpattern0, @_subpattern1, @_subpattern2, @_subpattern3, @_subpattern4, @_subpattern5, @_subpattern6, };
		public enum Toluol_AltNums { };

#if INITIAL_WARMUP
		public Rule_Toluol()
#else
		private Rule_Toluol()
#endif
		{
			name = "Toluol";
			isSubpattern = false;

			PatternGraph Toluol;
			PatternNode Toluol_node_c1 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c1", "c1", Toluol_node_c1_AllowedTypes, Toluol_node_c1_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c2 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c2", "c2", Toluol_node_c2_AllowedTypes, Toluol_node_c2_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c3 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c3", "c3", Toluol_node_c3_AllowedTypes, Toluol_node_c3_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c4 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c4", "c4", Toluol_node_c4_AllowedTypes, Toluol_node_c4_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c5 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c5", "c5", Toluol_node_c5_AllowedTypes, Toluol_node_c5_IsAllowedType, 5.5F, -1);
			PatternNode Toluol_node_c6 = new PatternNode((int) NodeTypes.@C, "Toluol_node_c6", "c6", Toluol_node_c6_AllowedTypes, Toluol_node_c6_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding Toluol__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC123456Exposed.Instance, new PatternElement[] { Toluol_node_c1, Toluol_node_c2, Toluol_node_c3, Toluol_node_c4, Toluol_node_c5, Toluol_node_c6 });
			PatternGraphEmbedding Toluol__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { Toluol_node_c1 });
			PatternGraphEmbedding Toluol__subpattern2 = new PatternGraphEmbedding("_subpattern2", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c2 });
			PatternGraphEmbedding Toluol__subpattern3 = new PatternGraphEmbedding("_subpattern3", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c3 });
			PatternGraphEmbedding Toluol__subpattern4 = new PatternGraphEmbedding("_subpattern4", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c4 });
			PatternGraphEmbedding Toluol__subpattern5 = new PatternGraphEmbedding("_subpattern5", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c5 });
			PatternGraphEmbedding Toluol__subpattern6 = new PatternGraphEmbedding("_subpattern6", Pattern_Hydrogen.Instance, new PatternElement[] { Toluol_node_c6 });
			Toluol = new PatternGraph(
				"Toluol",
				"",
				new PatternNode[] { Toluol_node_c1, Toluol_node_c2, Toluol_node_c3, Toluol_node_c4, Toluol_node_c5, Toluol_node_c6 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { Toluol__subpattern0, Toluol__subpattern1, Toluol__subpattern2, Toluol__subpattern3, Toluol__subpattern4, Toluol__subpattern5, Toluol__subpattern6 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[6, 6] {
					{ true, false, false, false, false, false, },
					{ false, true, false, false, false, false, },
					{ false, false, true, false, false, false, },
					{ false, false, false, true, false, false, },
					{ false, false, false, false, true, false, },
					{ false, false, false, false, false, true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, false, false, false, false, false, },
				new bool[] {},
				new bool[] {
					true, true, true, true, true, true, },
				new bool[] {}
			);
			Toluol_node_c1.PointOfDefinition = Toluol;
			Toluol_node_c2.PointOfDefinition = Toluol;
			Toluol_node_c3.PointOfDefinition = Toluol;
			Toluol_node_c4.PointOfDefinition = Toluol;
			Toluol_node_c5.PointOfDefinition = Toluol;
			Toluol_node_c6.PointOfDefinition = Toluol;
			Toluol__subpattern0.PointOfDefinition = Toluol;
			Toluol__subpattern1.PointOfDefinition = Toluol;
			Toluol__subpattern2.PointOfDefinition = Toluol;
			Toluol__subpattern3.PointOfDefinition = Toluol;
			Toluol__subpattern4.PointOfDefinition = Toluol;
			Toluol__subpattern5.PointOfDefinition = Toluol;
			Toluol__subpattern6.PointOfDefinition = Toluol;

			patternGraph = Toluol;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_ToluolCore : LGSPRulePattern
	{
		private static Rule_ToluolCore instance = null;
		public static Rule_ToluolCore Instance { get { if (instance==null) instance = new Rule_ToluolCore(); return instance; } }

		public static NodeType[] ToluolCore_node_c1_AllowedTypes = null;
		public static bool[] ToluolCore_node_c1_IsAllowedType = null;
		public enum ToluolCore_NodeNums { @c1, };
		public enum ToluolCore_EdgeNums { };
		public enum ToluolCore_SubNums { @_subpattern0, @_subpattern1, };
		public enum ToluolCore_AltNums { };

#if INITIAL_WARMUP
		public Rule_ToluolCore()
#else
		private Rule_ToluolCore()
#endif
		{
			name = "ToluolCore";
			isSubpattern = false;

			PatternGraph ToluolCore;
			PatternNode ToluolCore_node_c1 = new PatternNode((int) NodeTypes.@C, "ToluolCore_node_c1", "c1", ToluolCore_node_c1_AllowedTypes, ToluolCore_node_c1_IsAllowedType, 5.5F, -1);
			PatternGraphEmbedding ToluolCore__subpattern0 = new PatternGraphEmbedding("_subpattern0", Pattern_BenzolRingC1Exposed.Instance, new PatternElement[] { ToluolCore_node_c1 });
			PatternGraphEmbedding ToluolCore__subpattern1 = new PatternGraphEmbedding("_subpattern1", Pattern_Methyl.Instance, new PatternElement[] { ToluolCore_node_c1 });
			ToluolCore = new PatternGraph(
				"ToluolCore",
				"",
				new PatternNode[] { ToluolCore_node_c1 }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] { ToluolCore__subpattern0, ToluolCore__subpattern1 }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[1, 1] {
					{ true, },
				},
				new bool[0, 0] ,
				new bool[] {
					false, },
				new bool[] {},
				new bool[] {
					true, },
				new bool[] {}
			);
			ToluolCore_node_c1.PointOfDefinition = ToluolCore;
			ToluolCore__subpattern0.PointOfDefinition = ToluolCore;
			ToluolCore__subpattern1.PointOfDefinition = ToluolCore;

			patternGraph = ToluolCore;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{  // test does not have modifications
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] {};
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] {};
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_createDNT : LGSPRulePattern
	{
		private static Rule_createDNT instance = null;
		public static Rule_createDNT Instance { get { if (instance==null) instance = new Rule_createDNT(); return instance; } }

		public enum createDNT_NodeNums { };
		public enum createDNT_EdgeNums { };
		public enum createDNT_SubNums { };
		public enum createDNT_AltNums { };

#if INITIAL_WARMUP
		public Rule_createDNT()
#else
		private Rule_createDNT()
#endif
		{
			name = "createDNT";
			isSubpattern = false;

			PatternGraph createDNT;
			createDNT = new PatternGraph(
				"createDNT",
				"",
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				new bool[] {},
				new bool[] {},
				new bool[] {},
				new bool[] {}
			);

			patternGraph = createDNT;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{
			Node_O node__node3 = Node_O.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_H node__node8 = Node_H.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_H node__node1 = Node_H.CreateNode(graph);
			Node_H node__node5 = Node_H.CreateNode(graph);
			Node_C node_c = Node_C.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_H node__node2 = Node_H.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_O node__node6 = Node_O.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Node_H node__node9 = Node_H.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_c5, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n2, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_c, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_c, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n4, node__node7);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_c3, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_n2, node__node3);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c, node__node0);
			Edge_Edge edge__edge21 = Edge_Edge.CreateEdge(graph, node_c6, node__node9);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node_c);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_n4, node__node6);
			return EmptyReturnElements;
		}

		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{
			Node_O node__node3 = Node_O.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_H node__node8 = Node_H.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_H node__node1 = Node_H.CreateNode(graph);
			Node_H node__node5 = Node_H.CreateNode(graph);
			Node_C node_c = Node_C.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_H node__node2 = Node_H.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_O node__node6 = Node_O.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Node_H node__node9 = Node_H.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_c5, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n2, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_c, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_c, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n4, node__node7);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_c3, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_n2, node__node3);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c, node__node0);
			Edge_Edge edge__edge21 = Edge_Edge.CreateEdge(graph, node_c6, node__node9);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node_c);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_n4, node__node6);
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] { "_node3", "_node0", "c6", "_node4", "n2", "_node8", "c3", "_node1", "_node5", "c", "_node7", "c2", "c4", "_node2", "c5", "n4", "_node6", "c1", "_node9" };
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] { "_edge20", "_edge3", "_edge15", "_edge0", "_edge6", "_edge11", "_edge12", "_edge4", "_edge19", "_edge16", "_edge5", "_edge7", "_edge1", "_edge13", "_edge17", "_edge14", "_edge8", "_edge10", "_edge21", "_edge2", "_edge9", "_edge18" };
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_createTNB : LGSPRulePattern
	{
		private static Rule_createTNB instance = null;
		public static Rule_createTNB Instance { get { if (instance==null) instance = new Rule_createTNB(); return instance; } }

		public enum createTNB_NodeNums { };
		public enum createTNB_EdgeNums { };
		public enum createTNB_SubNums { };
		public enum createTNB_AltNums { };

#if INITIAL_WARMUP
		public Rule_createTNB()
#else
		private Rule_createTNB()
#endif
		{
			name = "createTNB";
			isSubpattern = false;

			PatternGraph createTNB;
			createTNB = new PatternGraph(
				"createTNB",
				"",
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				new bool[] {},
				new bool[] {},
				new bool[] {},
				new bool[] {}
			);

			patternGraph = createTNB;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{
			Node_H node__node3 = Node_H.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_O node__node8 = Node_O.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_O node__node1 = Node_O.CreateNode(graph);
			Node_O node__node5 = Node_O.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_O node__node2 = Node_O.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n6 = Node_N.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_H node__node6 = Node_H.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_n6, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n4, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_n2, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_n2, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n6, node__node7);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_n4, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c3, node__node3);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c5, node__node6);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node__node0);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_c6, node_n6);
			return EmptyReturnElements;
		}

		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{
			Node_H node__node3 = Node_H.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_O node__node8 = Node_O.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_O node__node1 = Node_O.CreateNode(graph);
			Node_O node__node5 = Node_O.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_O node__node2 = Node_O.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n6 = Node_N.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_H node__node6 = Node_H.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_n6, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n4, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_n2, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_n2, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n6, node__node7);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_n4, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c3, node__node3);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c5, node__node6);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node__node0);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_c6, node_n6);
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] { "_node3", "_node0", "c6", "_node4", "n2", "_node8", "c3", "_node1", "_node5", "_node7", "c2", "c4", "_node2", "c5", "n6", "n4", "_node6", "c1" };
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] { "_edge20", "_edge3", "_edge15", "_edge0", "_edge6", "_edge11", "_edge12", "_edge4", "_edge19", "_edge16", "_edge5", "_edge7", "_edge1", "_edge13", "_edge17", "_edge14", "_edge8", "_edge10", "_edge2", "_edge9", "_edge18" };
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}

	public class Rule_createTNT : LGSPRulePattern
	{
		private static Rule_createTNT instance = null;
		public static Rule_createTNT Instance { get { if (instance==null) instance = new Rule_createTNT(); return instance; } }

		public enum createTNT_NodeNums { };
		public enum createTNT_EdgeNums { };
		public enum createTNT_SubNums { };
		public enum createTNT_AltNums { };

#if INITIAL_WARMUP
		public Rule_createTNT()
#else
		private Rule_createTNT()
#endif
		{
			name = "createTNT";
			isSubpattern = false;

			PatternGraph createTNT;
			createTNT = new PatternGraph(
				"createTNT",
				"",
				new PatternNode[] {  }, 
				new PatternEdge[] {  }, 
				new PatternGraphEmbedding[] {  }, 
				new Alternative[] {  }, 
				new PatternGraph[] {  }, 
				new Condition[] {  }, 
				new bool[0, 0] ,
				new bool[0, 0] ,
				new bool[] {},
				new bool[] {},
				new bool[] {},
				new bool[] {}
			);

			patternGraph = createTNT;

			inputs = new GrGenType[] { };
			inputNames = new string[] { };
			outputs = new GrGenType[] { };
			outputNames = new string[] { };
		}


		public override IGraphElement[] Modify(LGSPGraph graph, LGSPMatch match)
		{
			Node_O node__node3 = Node_O.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_H node__node8 = Node_H.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_H node__node1 = Node_H.CreateNode(graph);
			Node_O node__node10 = Node_O.CreateNode(graph);
			Node_H node__node5 = Node_H.CreateNode(graph);
			Node_C node_c = Node_C.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_H node__node2 = Node_H.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n6 = Node_N.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_O node__node6 = Node_O.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Node_O node__node9 = Node_O.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_c5, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n2, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge23 = Edge_Edge.CreateEdge(graph, node_n6, node__node10);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_c3, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c, node__node0);
			Edge_Edge edge__edge21 = Edge_Edge.CreateEdge(graph, node_c6, node_n6);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_n4, node__node6);
			Edge_Edge edge__edge22 = Edge_Edge.CreateEdge(graph, node_n6, node__node9);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_c, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_c, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n4, node__node7);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_n2, node__node3);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node_c);
			return EmptyReturnElements;
		}

		public override IGraphElement[] ModifyNoReuse(LGSPGraph graph, LGSPMatch match)
		{
			Node_O node__node3 = Node_O.CreateNode(graph);
			Node_H node__node0 = Node_H.CreateNode(graph);
			Node_C node_c6 = Node_C.CreateNode(graph);
			Node_O node__node4 = Node_O.CreateNode(graph);
			Node_N node_n2 = Node_N.CreateNode(graph);
			Node_H node__node8 = Node_H.CreateNode(graph);
			Node_C node_c3 = Node_C.CreateNode(graph);
			Node_H node__node1 = Node_H.CreateNode(graph);
			Node_O node__node10 = Node_O.CreateNode(graph);
			Node_H node__node5 = Node_H.CreateNode(graph);
			Node_C node_c = Node_C.CreateNode(graph);
			Node_O node__node7 = Node_O.CreateNode(graph);
			Node_C node_c2 = Node_C.CreateNode(graph);
			Node_C node_c4 = Node_C.CreateNode(graph);
			Node_H node__node2 = Node_H.CreateNode(graph);
			Node_C node_c5 = Node_C.CreateNode(graph);
			Node_N node_n6 = Node_N.CreateNode(graph);
			Node_N node_n4 = Node_N.CreateNode(graph);
			Node_O node__node6 = Node_O.CreateNode(graph);
			Node_C node_c1 = Node_C.CreateNode(graph);
			Node_O node__node9 = Node_O.CreateNode(graph);
			Edge_Edge edge__edge20 = Edge_Edge.CreateEdge(graph, node_c5, node__node8);
			Edge_Edge edge__edge3 = Edge_Edge.CreateEdge(graph, node_c4, node_c5);
			Edge_Edge edge__edge15 = Edge_Edge.CreateEdge(graph, node_n2, node__node4);
			Edge_Edge edge__edge0 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge6 = Edge_Edge.CreateEdge(graph, node_c1, node_c2);
			Edge_Edge edge__edge23 = Edge_Edge.CreateEdge(graph, node_n6, node__node10);
			Edge_Edge edge__edge16 = Edge_Edge.CreateEdge(graph, node_c3, node__node5);
			Edge_Edge edge__edge5 = Edge_Edge.CreateEdge(graph, node_c6, node_c1);
			Edge_Edge edge__edge13 = Edge_Edge.CreateEdge(graph, node_c2, node_n2);
			Edge_Edge edge__edge8 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge10 = Edge_Edge.CreateEdge(graph, node_c, node__node0);
			Edge_Edge edge__edge21 = Edge_Edge.CreateEdge(graph, node_c6, node_n6);
			Edge_Edge edge__edge18 = Edge_Edge.CreateEdge(graph, node_n4, node__node6);
			Edge_Edge edge__edge22 = Edge_Edge.CreateEdge(graph, node_n6, node__node9);
			Edge_Edge edge__edge11 = Edge_Edge.CreateEdge(graph, node_c, node__node1);
			Edge_Edge edge__edge12 = Edge_Edge.CreateEdge(graph, node_c, node__node2);
			Edge_Edge edge__edge4 = Edge_Edge.CreateEdge(graph, node_c5, node_c6);
			Edge_Edge edge__edge19 = Edge_Edge.CreateEdge(graph, node_n4, node__node7);
			Edge_Edge edge__edge7 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge1 = Edge_Edge.CreateEdge(graph, node_c2, node_c3);
			Edge_Edge edge__edge17 = Edge_Edge.CreateEdge(graph, node_c4, node_n4);
			Edge_Edge edge__edge14 = Edge_Edge.CreateEdge(graph, node_n2, node__node3);
			Edge_Edge edge__edge2 = Edge_Edge.CreateEdge(graph, node_c3, node_c4);
			Edge_Edge edge__edge9 = Edge_Edge.CreateEdge(graph, node_c1, node_c);
			return EmptyReturnElements;
		}
		private static String[] addedNodeNames = new String[] { "_node3", "_node0", "c6", "_node4", "n2", "_node8", "c3", "_node1", "_node10", "_node5", "c", "_node7", "c2", "c4", "_node2", "c5", "n6", "n4", "_node6", "c1", "_node9" };
		public override String[] AddedNodeNames { get { return addedNodeNames; } }
		private static String[] addedEdgeNames = new String[] { "_edge20", "_edge3", "_edge15", "_edge0", "_edge6", "_edge23", "_edge16", "_edge5", "_edge13", "_edge8", "_edge10", "_edge21", "_edge18", "_edge22", "_edge11", "_edge12", "_edge4", "_edge19", "_edge7", "_edge1", "_edge17", "_edge14", "_edge2", "_edge9" };
		public override String[] AddedEdgeNames { get { return addedEdgeNames; } }
	}


    public class PatternAction_BenzolRing : LGSPSubpatternAction
    {
        public PatternAction_BenzolRing(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRing.Instance.patternGraph;
        }

        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            int edge_type_id_BenzolRing_edge__edge0 = 1;
            for(LGSPEdge edge_head_BenzolRing_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_BenzolRing_edge__edge0], edge_cur_BenzolRing_edge__edge0 = edge_head_BenzolRing_edge__edge0.typeNext; edge_cur_BenzolRing_edge__edge0 != edge_head_BenzolRing_edge__edge0; edge_cur_BenzolRing_edge__edge0 = edge_cur_BenzolRing_edge__edge0.typeNext)
            {
                if(edge_cur_BenzolRing_edge__edge0.isMatchedByEnclosingPattern)
                {
                    continue;
                }
                bool edge_cur_BenzolRing_edge__edge0_prevIsMatched = edge_cur_BenzolRing_edge__edge0.isMatched;
                edge_cur_BenzolRing_edge__edge0.isMatched = true;
                LGSPNode node_cur_BenzolRing_node_c1 = edge_cur_BenzolRing_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c1.type.TypeID]) {
                    edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_BenzolRing_node_c1.isMatchedByEnclosingPattern)
                {
                    edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_BenzolRing_node_c1_prevIsMatched = node_cur_BenzolRing_node_c1.isMatched;
                node_cur_BenzolRing_node_c1.isMatched = true;
                LGSPNode node_cur_BenzolRing_node_c2 = edge_cur_BenzolRing_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c2.type.TypeID]) {
                    node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                    edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_BenzolRing_node_c2.isMatched
                    && node_cur_BenzolRing_node_c2==node_cur_BenzolRing_node_c1
                    )
                {
                    node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                    edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_BenzolRing_node_c2.isMatchedByEnclosingPattern)
                {
                    node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                    edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_BenzolRing_node_c2_prevIsMatched = node_cur_BenzolRing_node_c2.isMatched;
                node_cur_BenzolRing_node_c2.isMatched = true;
                LGSPEdge edge_head_BenzolRing_edge__edge6 = node_cur_BenzolRing_node_c1.outhead;
                if(edge_head_BenzolRing_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_BenzolRing_edge__edge6 = edge_head_BenzolRing_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_BenzolRing_edge__edge6.target != node_cur_BenzolRing_node_c2) {
                            continue;
                        }
                        if(edge_cur_BenzolRing_edge__edge6.isMatched
                            && edge_cur_BenzolRing_edge__edge6==edge_cur_BenzolRing_edge__edge0
                            )
                        {
                            continue;
                        }
                        if(edge_cur_BenzolRing_edge__edge6.isMatchedByEnclosingPattern)
                        {
                            continue;
                        }
                        bool edge_cur_BenzolRing_edge__edge6_prevIsMatched = edge_cur_BenzolRing_edge__edge6.isMatched;
                        edge_cur_BenzolRing_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_BenzolRing_edge__edge1 = node_cur_BenzolRing_node_c2.outhead;
                        if(edge_head_BenzolRing_edge__edge1 != null)
                        {
                            LGSPEdge edge_cur_BenzolRing_edge__edge1 = edge_head_BenzolRing_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_BenzolRing_edge__edge1.isMatched
                                    && (edge_cur_BenzolRing_edge__edge1==edge_cur_BenzolRing_edge__edge0
                                        || edge_cur_BenzolRing_edge__edge1==edge_cur_BenzolRing_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                if(edge_cur_BenzolRing_edge__edge1.isMatchedByEnclosingPattern)
                                {
                                    continue;
                                }
                                bool edge_cur_BenzolRing_edge__edge1_prevIsMatched = edge_cur_BenzolRing_edge__edge1.isMatched;
                                edge_cur_BenzolRing_edge__edge1.isMatched = true;
                                LGSPNode node_cur_BenzolRing_node_c3 = edge_cur_BenzolRing_edge__edge1.target;
                                if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c3.type.TypeID]) {
                                    edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_BenzolRing_node_c3.isMatched
                                    && (node_cur_BenzolRing_node_c3==node_cur_BenzolRing_node_c1
                                        || node_cur_BenzolRing_node_c3==node_cur_BenzolRing_node_c2
                                        )
                                    )
                                {
                                    edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_BenzolRing_node_c3.isMatchedByEnclosingPattern)
                                {
                                    edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_BenzolRing_node_c3_prevIsMatched = node_cur_BenzolRing_node_c3.isMatched;
                                node_cur_BenzolRing_node_c3.isMatched = true;
                                LGSPEdge edge_head_BenzolRing_edge__edge2 = node_cur_BenzolRing_node_c3.outhead;
                                if(edge_head_BenzolRing_edge__edge2 != null)
                                {
                                    LGSPEdge edge_cur_BenzolRing_edge__edge2 = edge_head_BenzolRing_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_BenzolRing_edge__edge2.isMatched
                                            && (edge_cur_BenzolRing_edge__edge2==edge_cur_BenzolRing_edge__edge0
                                                || edge_cur_BenzolRing_edge__edge2==edge_cur_BenzolRing_edge__edge6
                                                || edge_cur_BenzolRing_edge__edge2==edge_cur_BenzolRing_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        if(edge_cur_BenzolRing_edge__edge2.isMatchedByEnclosingPattern)
                                        {
                                            continue;
                                        }
                                        bool edge_cur_BenzolRing_edge__edge2_prevIsMatched = edge_cur_BenzolRing_edge__edge2.isMatched;
                                        edge_cur_BenzolRing_edge__edge2.isMatched = true;
                                        LGSPNode node_cur_BenzolRing_node_c4 = edge_cur_BenzolRing_edge__edge2.target;
                                        if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c4.type.TypeID]) {
                                            edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_BenzolRing_node_c4.isMatched
                                            && (node_cur_BenzolRing_node_c4==node_cur_BenzolRing_node_c1
                                                || node_cur_BenzolRing_node_c4==node_cur_BenzolRing_node_c2
                                                || node_cur_BenzolRing_node_c4==node_cur_BenzolRing_node_c3
                                                )
                                            )
                                        {
                                            edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_BenzolRing_node_c4.isMatchedByEnclosingPattern)
                                        {
                                            edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_BenzolRing_node_c4_prevIsMatched = node_cur_BenzolRing_node_c4.isMatched;
                                        node_cur_BenzolRing_node_c4.isMatched = true;
                                        LGSPEdge edge_head_BenzolRing_edge__edge7 = node_cur_BenzolRing_node_c3.outhead;
                                        if(edge_head_BenzolRing_edge__edge7 != null)
                                        {
                                            LGSPEdge edge_cur_BenzolRing_edge__edge7 = edge_head_BenzolRing_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_BenzolRing_edge__edge7.target != node_cur_BenzolRing_node_c4) {
                                                    continue;
                                                }
                                                if(edge_cur_BenzolRing_edge__edge7.isMatched
                                                    && (edge_cur_BenzolRing_edge__edge7==edge_cur_BenzolRing_edge__edge0
                                                        || edge_cur_BenzolRing_edge__edge7==edge_cur_BenzolRing_edge__edge6
                                                        || edge_cur_BenzolRing_edge__edge7==edge_cur_BenzolRing_edge__edge1
                                                        || edge_cur_BenzolRing_edge__edge7==edge_cur_BenzolRing_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                if(edge_cur_BenzolRing_edge__edge7.isMatchedByEnclosingPattern)
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_BenzolRing_edge__edge7_prevIsMatched = edge_cur_BenzolRing_edge__edge7.isMatched;
                                                edge_cur_BenzolRing_edge__edge7.isMatched = true;
                                                LGSPEdge edge_head_BenzolRing_edge__edge3 = node_cur_BenzolRing_node_c4.outhead;
                                                if(edge_head_BenzolRing_edge__edge3 != null)
                                                {
                                                    LGSPEdge edge_cur_BenzolRing_edge__edge3 = edge_head_BenzolRing_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_BenzolRing_edge__edge3.isMatched
                                                            && (edge_cur_BenzolRing_edge__edge3==edge_cur_BenzolRing_edge__edge0
                                                                || edge_cur_BenzolRing_edge__edge3==edge_cur_BenzolRing_edge__edge6
                                                                || edge_cur_BenzolRing_edge__edge3==edge_cur_BenzolRing_edge__edge1
                                                                || edge_cur_BenzolRing_edge__edge3==edge_cur_BenzolRing_edge__edge2
                                                                || edge_cur_BenzolRing_edge__edge3==edge_cur_BenzolRing_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        if(edge_cur_BenzolRing_edge__edge3.isMatchedByEnclosingPattern)
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_BenzolRing_edge__edge3_prevIsMatched = edge_cur_BenzolRing_edge__edge3.isMatched;
                                                        edge_cur_BenzolRing_edge__edge3.isMatched = true;
                                                        LGSPNode node_cur_BenzolRing_node_c5 = edge_cur_BenzolRing_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c5.type.TypeID]) {
                                                            edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_BenzolRing_node_c5.isMatched
                                                            && (node_cur_BenzolRing_node_c5==node_cur_BenzolRing_node_c1
                                                                || node_cur_BenzolRing_node_c5==node_cur_BenzolRing_node_c2
                                                                || node_cur_BenzolRing_node_c5==node_cur_BenzolRing_node_c3
                                                                || node_cur_BenzolRing_node_c5==node_cur_BenzolRing_node_c4
                                                                )
                                                            )
                                                        {
                                                            edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_BenzolRing_node_c5.isMatchedByEnclosingPattern)
                                                        {
                                                            edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_BenzolRing_node_c5_prevIsMatched = node_cur_BenzolRing_node_c5.isMatched;
                                                        node_cur_BenzolRing_node_c5.isMatched = true;
                                                        LGSPEdge edge_head_BenzolRing_edge__edge4 = node_cur_BenzolRing_node_c5.outhead;
                                                        if(edge_head_BenzolRing_edge__edge4 != null)
                                                        {
                                                            LGSPEdge edge_cur_BenzolRing_edge__edge4 = edge_head_BenzolRing_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_BenzolRing_edge__edge4.isMatched
                                                                    && (edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge0
                                                                        || edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge6
                                                                        || edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge1
                                                                        || edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge2
                                                                        || edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge7
                                                                        || edge_cur_BenzolRing_edge__edge4==edge_cur_BenzolRing_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                if(edge_cur_BenzolRing_edge__edge4.isMatchedByEnclosingPattern)
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_BenzolRing_edge__edge4_prevIsMatched = edge_cur_BenzolRing_edge__edge4.isMatched;
                                                                edge_cur_BenzolRing_edge__edge4.isMatched = true;
                                                                LGSPNode node_cur_BenzolRing_node_c6 = edge_cur_BenzolRing_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[node_cur_BenzolRing_node_c6.type.TypeID]) {
                                                                    edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_BenzolRing_node_c6.isMatched
                                                                    && (node_cur_BenzolRing_node_c6==node_cur_BenzolRing_node_c1
                                                                        || node_cur_BenzolRing_node_c6==node_cur_BenzolRing_node_c2
                                                                        || node_cur_BenzolRing_node_c6==node_cur_BenzolRing_node_c3
                                                                        || node_cur_BenzolRing_node_c6==node_cur_BenzolRing_node_c4
                                                                        || node_cur_BenzolRing_node_c6==node_cur_BenzolRing_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_BenzolRing_node_c6.isMatchedByEnclosingPattern)
                                                                {
                                                                    edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                LGSPEdge edge_head_BenzolRing_edge__edge8 = node_cur_BenzolRing_node_c5.outhead;
                                                                if(edge_head_BenzolRing_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge edge_cur_BenzolRing_edge__edge8 = edge_head_BenzolRing_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_BenzolRing_edge__edge8.target != node_cur_BenzolRing_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_BenzolRing_edge__edge8.isMatched
                                                                            && (edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge0
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge6
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge1
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge2
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge7
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge3
                                                                                || edge_cur_BenzolRing_edge__edge8==edge_cur_BenzolRing_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_BenzolRing_edge__edge8.isMatchedByEnclosingPattern)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_BenzolRing_edge__edge8_prevIsMatched = edge_cur_BenzolRing_edge__edge8.isMatched;
                                                                        edge_cur_BenzolRing_edge__edge8.isMatched = true;
                                                                        LGSPEdge edge_head_BenzolRing_edge__edge5 = node_cur_BenzolRing_node_c6.outhead;
                                                                        if(edge_head_BenzolRing_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_BenzolRing_edge__edge5 = edge_head_BenzolRing_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_BenzolRing_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_BenzolRing_edge__edge5.target != node_cur_BenzolRing_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_BenzolRing_edge__edge5.isMatched
                                                                                    && (edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge0
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge6
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge1
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge2
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge7
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge3
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge4
                                                                                        || edge_cur_BenzolRing_edge__edge5==edge_cur_BenzolRing_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_BenzolRing_edge__edge5.isMatchedByEnclosingPattern)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if(openTasks.Count==0)
                                                                                {
                                                                                    Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                    foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                    LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                    match.patternGraph = patternGraph;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c1] = node_cur_BenzolRing_node_c1;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c2] = node_cur_BenzolRing_node_c2;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c3] = node_cur_BenzolRing_node_c3;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c4] = node_cur_BenzolRing_node_c4;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c5] = node_cur_BenzolRing_node_c5;
                                                                                    match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c6] = node_cur_BenzolRing_node_c6;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge0] = edge_cur_BenzolRing_edge__edge0;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge1] = edge_cur_BenzolRing_edge__edge1;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge2] = edge_cur_BenzolRing_edge__edge2;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge3] = edge_cur_BenzolRing_edge__edge3;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge4] = edge_cur_BenzolRing_edge__edge4;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge5] = edge_cur_BenzolRing_edge__edge5;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge6] = edge_cur_BenzolRing_edge__edge6;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge7] = edge_cur_BenzolRing_edge__edge7;
                                                                                    match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge8] = edge_cur_BenzolRing_edge__edge8;
                                                                                    currentFoundPartialMatch.Push(match);
                                                                                    if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                    {
                                                                                        edge_cur_BenzolRing_edge__edge8.isMatched = edge_cur_BenzolRing_edge__edge8_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c5.isMatched = node_cur_BenzolRing_node_c5_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge7.isMatched = edge_cur_BenzolRing_edge__edge7_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c4.isMatched = node_cur_BenzolRing_node_c4_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c3.isMatched = node_cur_BenzolRing_node_c3_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge6.isMatched = edge_cur_BenzolRing_edge__edge6_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c2.isMatched = node_cur_BenzolRing_node_c2_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                                                                                        openTasks.Push(this);
                                                                                        return;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                                node_cur_BenzolRing_node_c1.isMatchedByEnclosingPattern = true;
                                                                                node_cur_BenzolRing_node_c2.isMatchedByEnclosingPattern = true;
                                                                                node_cur_BenzolRing_node_c3.isMatchedByEnclosingPattern = true;
                                                                                node_cur_BenzolRing_node_c4.isMatchedByEnclosingPattern = true;
                                                                                node_cur_BenzolRing_node_c5.isMatchedByEnclosingPattern = true;
                                                                                node_cur_BenzolRing_node_c6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_BenzolRing_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                if(matchesList.Count>0) {
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c1] = node_cur_BenzolRing_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c2] = node_cur_BenzolRing_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c3] = node_cur_BenzolRing_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c4] = node_cur_BenzolRing_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c5] = node_cur_BenzolRing_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRing.BenzolRing_NodeNums.@c6] = node_cur_BenzolRing_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge0] = edge_cur_BenzolRing_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge1] = edge_cur_BenzolRing_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge2] = edge_cur_BenzolRing_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge3] = edge_cur_BenzolRing_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge4] = edge_cur_BenzolRing_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge5] = edge_cur_BenzolRing_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge6] = edge_cur_BenzolRing_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge7] = edge_cur_BenzolRing_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRing.BenzolRing_EdgeNums.@_edge8] = edge_cur_BenzolRing_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                    }
                                                                                    if(matchesList==foundPartialMatches) {
                                                                                        matchesList = new List<Stack<LGSPMatch>>();
                                                                                    } else {
                                                                                        foreach(Stack<LGSPMatch> match in matchesList)
                                                                                        {
                                                                                            foundPartialMatches.Add(match);
                                                                                        }
                                                                                        matchesList.Clear();
                                                                                    }
                                                                                    if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                    {
                                                                                        edge_cur_BenzolRing_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRing_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRing_edge__edge8.isMatched = edge_cur_BenzolRing_edge__edge8_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c5.isMatched = node_cur_BenzolRing_node_c5_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge7.isMatched = edge_cur_BenzolRing_edge__edge7_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c4.isMatched = node_cur_BenzolRing_node_c4_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c3.isMatched = node_cur_BenzolRing_node_c3_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge6.isMatched = edge_cur_BenzolRing_edge__edge6_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c2.isMatched = node_cur_BenzolRing_node_c2_prevIsMatched;
                                                                                        node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                                                                                        edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
                                                                                        openTasks.Push(this);
                                                                                        return;
                                                                                    }
                                                                                    edge_cur_BenzolRing_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRing_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRing_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    continue;
                                                                                }
                                                                                node_cur_BenzolRing_node_c1.isMatchedByEnclosingPattern = false;
                                                                                node_cur_BenzolRing_node_c2.isMatchedByEnclosingPattern = false;
                                                                                node_cur_BenzolRing_node_c3.isMatchedByEnclosingPattern = false;
                                                                                node_cur_BenzolRing_node_c4.isMatchedByEnclosingPattern = false;
                                                                                node_cur_BenzolRing_node_c5.isMatchedByEnclosingPattern = false;
                                                                                node_cur_BenzolRing_node_c6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_BenzolRing_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                            }
                                                                            while( (edge_cur_BenzolRing_edge__edge5 = edge_cur_BenzolRing_edge__edge5.outNext) != edge_head_BenzolRing_edge__edge5 );
                                                                        }
                                                                        edge_cur_BenzolRing_edge__edge8.isMatched = edge_cur_BenzolRing_edge__edge8_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_BenzolRing_edge__edge8 = edge_cur_BenzolRing_edge__edge8.outNext) != edge_head_BenzolRing_edge__edge8 );
                                                                }
                                                                edge_cur_BenzolRing_edge__edge4.isMatched = edge_cur_BenzolRing_edge__edge4_prevIsMatched;
                                                            }
                                                            while( (edge_cur_BenzolRing_edge__edge4 = edge_cur_BenzolRing_edge__edge4.outNext) != edge_head_BenzolRing_edge__edge4 );
                                                        }
                                                        node_cur_BenzolRing_node_c5.isMatched = node_cur_BenzolRing_node_c5_prevIsMatched;
                                                        edge_cur_BenzolRing_edge__edge3.isMatched = edge_cur_BenzolRing_edge__edge3_prevIsMatched;
                                                    }
                                                    while( (edge_cur_BenzolRing_edge__edge3 = edge_cur_BenzolRing_edge__edge3.outNext) != edge_head_BenzolRing_edge__edge3 );
                                                }
                                                edge_cur_BenzolRing_edge__edge7.isMatched = edge_cur_BenzolRing_edge__edge7_prevIsMatched;
                                            }
                                            while( (edge_cur_BenzolRing_edge__edge7 = edge_cur_BenzolRing_edge__edge7.outNext) != edge_head_BenzolRing_edge__edge7 );
                                        }
                                        node_cur_BenzolRing_node_c4.isMatched = node_cur_BenzolRing_node_c4_prevIsMatched;
                                        edge_cur_BenzolRing_edge__edge2.isMatched = edge_cur_BenzolRing_edge__edge2_prevIsMatched;
                                    }
                                    while( (edge_cur_BenzolRing_edge__edge2 = edge_cur_BenzolRing_edge__edge2.outNext) != edge_head_BenzolRing_edge__edge2 );
                                }
                                node_cur_BenzolRing_node_c3.isMatched = node_cur_BenzolRing_node_c3_prevIsMatched;
                                edge_cur_BenzolRing_edge__edge1.isMatched = edge_cur_BenzolRing_edge__edge1_prevIsMatched;
                            }
                            while( (edge_cur_BenzolRing_edge__edge1 = edge_cur_BenzolRing_edge__edge1.outNext) != edge_head_BenzolRing_edge__edge1 );
                        }
                        edge_cur_BenzolRing_edge__edge6.isMatched = edge_cur_BenzolRing_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_BenzolRing_edge__edge6 = edge_cur_BenzolRing_edge__edge6.outNext) != edge_head_BenzolRing_edge__edge6 );
                }
                node_cur_BenzolRing_node_c2.isMatched = node_cur_BenzolRing_node_c2_prevIsMatched;
                node_cur_BenzolRing_node_c1.isMatched = node_cur_BenzolRing_node_c1_prevIsMatched;
                edge_cur_BenzolRing_edge__edge0.isMatched = edge_cur_BenzolRing_edge__edge0_prevIsMatched;
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_BenzolRingC123456Exposed : LGSPSubpatternAction
    {
        public PatternAction_BenzolRingC123456Exposed(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRingC123456Exposed.Instance.patternGraph;
        }

        public LGSPNode BenzolRingC123456Exposed_node_c1;
        public LGSPNode BenzolRingC123456Exposed_node_c2;
        public LGSPNode BenzolRingC123456Exposed_node_c3;
        public LGSPNode BenzolRingC123456Exposed_node_c4;
        public LGSPNode BenzolRingC123456Exposed_node_c5;
        public LGSPNode BenzolRingC123456Exposed_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c1 = BenzolRingC123456Exposed_node_c1;
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c2 = BenzolRingC123456Exposed_node_c2;
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c3 = BenzolRingC123456Exposed_node_c3;
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c4 = BenzolRingC123456Exposed_node_c4;
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c5 = BenzolRingC123456Exposed_node_c5;
            LGSPNode node_cur_BenzolRingC123456Exposed_node_c6 = BenzolRingC123456Exposed_node_c6;
            LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge0 = node_cur_BenzolRingC123456Exposed_node_c1.outhead;
            if(edge_head_BenzolRingC123456Exposed_edge__edge0 != null)
            {
                LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge0 = edge_head_BenzolRingC123456Exposed_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_BenzolRingC123456Exposed_edge__edge0.target != node_cur_BenzolRingC123456Exposed_node_c2) {
                        continue;
                    }
                    if(edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    bool edge_cur_BenzolRingC123456Exposed_edge__edge0_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatched;
                    edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatched = true;
                    LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge6 = node_cur_BenzolRingC123456Exposed_node_c1.outhead;
                    if(edge_head_BenzolRingC123456Exposed_edge__edge6 != null)
                    {
                        LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge6 = edge_head_BenzolRingC123456Exposed_edge__edge6;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge6.type.TypeID]) {
                                continue;
                            }
                            if(edge_cur_BenzolRingC123456Exposed_edge__edge6.target != node_cur_BenzolRingC123456Exposed_node_c2) {
                                continue;
                            }
                            if(edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched
                                && edge_cur_BenzolRingC123456Exposed_edge__edge6==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                )
                            {
                                continue;
                            }
                            if(edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            bool edge_cur_BenzolRingC123456Exposed_edge__edge6_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched;
                            edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched = true;
                            LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge1 = node_cur_BenzolRingC123456Exposed_node_c2.outhead;
                            if(edge_head_BenzolRingC123456Exposed_edge__edge1 != null)
                            {
                                LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge1 = edge_head_BenzolRingC123456Exposed_edge__edge1;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge1.type.TypeID]) {
                                        continue;
                                    }
                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge1.target != node_cur_BenzolRingC123456Exposed_node_c3) {
                                        continue;
                                    }
                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched
                                        && (edge_cur_BenzolRingC123456Exposed_edge__edge1==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                            || edge_cur_BenzolRingC123456Exposed_edge__edge1==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatchedByEnclosingPattern)
                                    {
                                        continue;
                                    }
                                    bool edge_cur_BenzolRingC123456Exposed_edge__edge1_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched;
                                    edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched = true;
                                    LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge2 = node_cur_BenzolRingC123456Exposed_node_c3.outhead;
                                    if(edge_head_BenzolRingC123456Exposed_edge__edge2 != null)
                                    {
                                        LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge2 = edge_head_BenzolRingC123456Exposed_edge__edge2;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge2.type.TypeID]) {
                                                continue;
                                            }
                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge2.target != node_cur_BenzolRingC123456Exposed_node_c4) {
                                                continue;
                                            }
                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched
                                                && (edge_cur_BenzolRingC123456Exposed_edge__edge2==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge2==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge2==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatchedByEnclosingPattern)
                                            {
                                                continue;
                                            }
                                            bool edge_cur_BenzolRingC123456Exposed_edge__edge2_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched;
                                            edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched = true;
                                            LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge7 = node_cur_BenzolRingC123456Exposed_node_c3.outhead;
                                            if(edge_head_BenzolRingC123456Exposed_edge__edge7 != null)
                                            {
                                                LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge7 = edge_head_BenzolRingC123456Exposed_edge__edge7;
                                                do
                                                {
                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge7.type.TypeID]) {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge7.target != node_cur_BenzolRingC123456Exposed_node_c4) {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched
                                                        && (edge_cur_BenzolRingC123456Exposed_edge__edge7==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge7==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge7==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge7==edge_cur_BenzolRingC123456Exposed_edge__edge2
                                                            )
                                                        )
                                                    {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatchedByEnclosingPattern)
                                                    {
                                                        continue;
                                                    }
                                                    bool edge_cur_BenzolRingC123456Exposed_edge__edge7_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched;
                                                    edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched = true;
                                                    LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge3 = node_cur_BenzolRingC123456Exposed_node_c4.outhead;
                                                    if(edge_head_BenzolRingC123456Exposed_edge__edge3 != null)
                                                    {
                                                        LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge3 = edge_head_BenzolRingC123456Exposed_edge__edge3;
                                                        do
                                                        {
                                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge3.type.TypeID]) {
                                                                continue;
                                                            }
                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge3.target != node_cur_BenzolRingC123456Exposed_node_c5) {
                                                                continue;
                                                            }
                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched
                                                                && (edge_cur_BenzolRingC123456Exposed_edge__edge3==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge3==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge3==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge3==edge_cur_BenzolRingC123456Exposed_edge__edge2
                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge3==edge_cur_BenzolRingC123456Exposed_edge__edge7
                                                                    )
                                                                )
                                                            {
                                                                continue;
                                                            }
                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatchedByEnclosingPattern)
                                                            {
                                                                continue;
                                                            }
                                                            bool edge_cur_BenzolRingC123456Exposed_edge__edge3_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched;
                                                            edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched = true;
                                                            LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge4 = node_cur_BenzolRingC123456Exposed_node_c5.outhead;
                                                            if(edge_head_BenzolRingC123456Exposed_edge__edge4 != null)
                                                            {
                                                                LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge4 = edge_head_BenzolRingC123456Exposed_edge__edge4;
                                                                do
                                                                {
                                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge4.type.TypeID]) {
                                                                        continue;
                                                                    }
                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge4.target != node_cur_BenzolRingC123456Exposed_node_c6) {
                                                                        continue;
                                                                    }
                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched
                                                                        && (edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge2
                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge7
                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge4==edge_cur_BenzolRingC123456Exposed_edge__edge3
                                                                            )
                                                                        )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatchedByEnclosingPattern)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    bool edge_cur_BenzolRingC123456Exposed_edge__edge4_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched;
                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched = true;
                                                                    LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge8 = node_cur_BenzolRingC123456Exposed_node_c5.outhead;
                                                                    if(edge_head_BenzolRingC123456Exposed_edge__edge8 != null)
                                                                    {
                                                                        LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge8 = edge_head_BenzolRingC123456Exposed_edge__edge8;
                                                                        do
                                                                        {
                                                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge8.type.TypeID]) {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge8.target != node_cur_BenzolRingC123456Exposed_node_c6) {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched
                                                                                && (edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge2
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge7
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge3
                                                                                    || edge_cur_BenzolRingC123456Exposed_edge__edge8==edge_cur_BenzolRingC123456Exposed_edge__edge4
                                                                                    )
                                                                                )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatchedByEnclosingPattern)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            bool edge_cur_BenzolRingC123456Exposed_edge__edge8_prevIsMatched = edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched;
                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched = true;
                                                                            LGSPEdge edge_head_BenzolRingC123456Exposed_edge__edge5 = node_cur_BenzolRingC123456Exposed_node_c6.outhead;
                                                                            if(edge_head_BenzolRingC123456Exposed_edge__edge5 != null)
                                                                            {
                                                                                LGSPEdge edge_cur_BenzolRingC123456Exposed_edge__edge5 = edge_head_BenzolRingC123456Exposed_edge__edge5;
                                                                                do
                                                                                {
                                                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC123456Exposed_edge__edge5.type.TypeID]) {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge5.target != node_cur_BenzolRingC123456Exposed_node_c1) {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatched
                                                                                        && (edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge0
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge6
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge1
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge2
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge7
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge3
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge4
                                                                                            || edge_cur_BenzolRingC123456Exposed_edge__edge5==edge_cur_BenzolRingC123456Exposed_edge__edge8
                                                                                            )
                                                                                        )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatchedByEnclosingPattern)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if(openTasks.Count==0)
                                                                                    {
                                                                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c1] = node_cur_BenzolRingC123456Exposed_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c2] = node_cur_BenzolRingC123456Exposed_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c3] = node_cur_BenzolRingC123456Exposed_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c4] = node_cur_BenzolRingC123456Exposed_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c5] = node_cur_BenzolRingC123456Exposed_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c6] = node_cur_BenzolRingC123456Exposed_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge0] = edge_cur_BenzolRingC123456Exposed_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge1] = edge_cur_BenzolRingC123456Exposed_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge2] = edge_cur_BenzolRingC123456Exposed_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge3] = edge_cur_BenzolRingC123456Exposed_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge4] = edge_cur_BenzolRingC123456Exposed_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge5] = edge_cur_BenzolRingC123456Exposed_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge6] = edge_cur_BenzolRingC123456Exposed_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge7] = edge_cur_BenzolRingC123456Exposed_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge8] = edge_cur_BenzolRingC123456Exposed_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge8_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge4_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge7_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge2_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge1_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge6_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge0_prevIsMatched;
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                    node_cur_BenzolRingC123456Exposed_node_c1.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c2.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c3.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c4.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c5.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c6.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                    if(matchesList.Count>0) {
                                                                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                        {
                                                                                            LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                            match.patternGraph = patternGraph;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c1] = node_cur_BenzolRingC123456Exposed_node_c1;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c2] = node_cur_BenzolRingC123456Exposed_node_c2;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c3] = node_cur_BenzolRingC123456Exposed_node_c3;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c4] = node_cur_BenzolRingC123456Exposed_node_c4;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c5] = node_cur_BenzolRingC123456Exposed_node_c5;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_NodeNums.@c6] = node_cur_BenzolRingC123456Exposed_node_c6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge0] = edge_cur_BenzolRingC123456Exposed_edge__edge0;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge1] = edge_cur_BenzolRingC123456Exposed_edge__edge1;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge2] = edge_cur_BenzolRingC123456Exposed_edge__edge2;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge3] = edge_cur_BenzolRingC123456Exposed_edge__edge3;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge4] = edge_cur_BenzolRingC123456Exposed_edge__edge4;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge5] = edge_cur_BenzolRingC123456Exposed_edge__edge5;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge6] = edge_cur_BenzolRingC123456Exposed_edge__edge6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge7] = edge_cur_BenzolRingC123456Exposed_edge__edge7;
                                                                                            match.Edges[(int)Pattern_BenzolRingC123456Exposed.BenzolRingC123456Exposed_EdgeNums.@_edge8] = edge_cur_BenzolRingC123456Exposed_edge__edge8;
                                                                                            currentFoundPartialMatch.Push(match);
                                                                                        }
                                                                                        if(matchesList==foundPartialMatches) {
                                                                                            matchesList = new List<Stack<LGSPMatch>>();
                                                                                        } else {
                                                                                            foreach(Stack<LGSPMatch> match in matchesList)
                                                                                            {
                                                                                                foundPartialMatches.Add(match);
                                                                                            }
                                                                                            matchesList.Clear();
                                                                                        }
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC123456Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge8_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge4_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge7_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge2_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge1_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge6_prevIsMatched;
                                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge0_prevIsMatched;
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC123456Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        continue;
                                                                                    }
                                                                                    node_cur_BenzolRingC123456Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC123456Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                }
                                                                                while( (edge_cur_BenzolRingC123456Exposed_edge__edge5 = edge_cur_BenzolRingC123456Exposed_edge__edge5.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge5 );
                                                                            }
                                                                            edge_cur_BenzolRingC123456Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge8_prevIsMatched;
                                                                        }
                                                                        while( (edge_cur_BenzolRingC123456Exposed_edge__edge8 = edge_cur_BenzolRingC123456Exposed_edge__edge8.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge8 );
                                                                    }
                                                                    edge_cur_BenzolRingC123456Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge4_prevIsMatched;
                                                                }
                                                                while( (edge_cur_BenzolRingC123456Exposed_edge__edge4 = edge_cur_BenzolRingC123456Exposed_edge__edge4.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge4 );
                                                            }
                                                            edge_cur_BenzolRingC123456Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge3_prevIsMatched;
                                                        }
                                                        while( (edge_cur_BenzolRingC123456Exposed_edge__edge3 = edge_cur_BenzolRingC123456Exposed_edge__edge3.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge3 );
                                                    }
                                                    edge_cur_BenzolRingC123456Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge7_prevIsMatched;
                                                }
                                                while( (edge_cur_BenzolRingC123456Exposed_edge__edge7 = edge_cur_BenzolRingC123456Exposed_edge__edge7.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge7 );
                                            }
                                            edge_cur_BenzolRingC123456Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge2_prevIsMatched;
                                        }
                                        while( (edge_cur_BenzolRingC123456Exposed_edge__edge2 = edge_cur_BenzolRingC123456Exposed_edge__edge2.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge2 );
                                    }
                                    edge_cur_BenzolRingC123456Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge1_prevIsMatched;
                                }
                                while( (edge_cur_BenzolRingC123456Exposed_edge__edge1 = edge_cur_BenzolRingC123456Exposed_edge__edge1.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge1 );
                            }
                            edge_cur_BenzolRingC123456Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge6_prevIsMatched;
                        }
                        while( (edge_cur_BenzolRingC123456Exposed_edge__edge6 = edge_cur_BenzolRingC123456Exposed_edge__edge6.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge6 );
                    }
                    edge_cur_BenzolRingC123456Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC123456Exposed_edge__edge0_prevIsMatched;
                }
                while( (edge_cur_BenzolRingC123456Exposed_edge__edge0 = edge_cur_BenzolRingC123456Exposed_edge__edge0.outNext) != edge_head_BenzolRingC123456Exposed_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_BenzolRingC1Exposed : LGSPSubpatternAction
    {
        public PatternAction_BenzolRingC1Exposed(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_BenzolRingC1Exposed.Instance.patternGraph;
        }

        public LGSPNode BenzolRingC1Exposed_node_c1;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_BenzolRingC1Exposed_node_c1 = BenzolRingC1Exposed_node_c1;
            LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge0 = node_cur_BenzolRingC1Exposed_node_c1.outhead;
            if(edge_head_BenzolRingC1Exposed_edge__edge0 != null)
            {
                LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge0 = edge_head_BenzolRingC1Exposed_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_BenzolRingC1Exposed_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    bool edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched;
                    edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = true;
                    LGSPNode node_cur_BenzolRingC1Exposed_node_c2 = edge_cur_BenzolRingC1Exposed_edge__edge0.target;
                    if(!NodeType_C.isMyType[node_cur_BenzolRingC1Exposed_node_c2.type.TypeID]) {
                        edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_BenzolRingC1Exposed_node_c2.isMatched
                        && node_cur_BenzolRingC1Exposed_node_c2==node_cur_BenzolRingC1Exposed_node_c1
                        )
                    {
                        edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_BenzolRingC1Exposed_node_c2.isMatchedByEnclosingPattern)
                    {
                        edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                        continue;
                    }
                    bool node_cur_BenzolRingC1Exposed_node_c2_prevIsMatched = node_cur_BenzolRingC1Exposed_node_c2.isMatched;
                    node_cur_BenzolRingC1Exposed_node_c2.isMatched = true;
                    LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge6 = node_cur_BenzolRingC1Exposed_node_c1.outhead;
                    if(edge_head_BenzolRingC1Exposed_edge__edge6 != null)
                    {
                        LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge6 = edge_head_BenzolRingC1Exposed_edge__edge6;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge6.type.TypeID]) {
                                continue;
                            }
                            if(edge_cur_BenzolRingC1Exposed_edge__edge6.target != node_cur_BenzolRingC1Exposed_node_c2) {
                                continue;
                            }
                            if(edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched
                                && edge_cur_BenzolRingC1Exposed_edge__edge6==edge_cur_BenzolRingC1Exposed_edge__edge0
                                )
                            {
                                continue;
                            }
                            if(edge_cur_BenzolRingC1Exposed_edge__edge6.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            bool edge_cur_BenzolRingC1Exposed_edge__edge6_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched;
                            edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched = true;
                            LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge1 = node_cur_BenzolRingC1Exposed_node_c2.outhead;
                            if(edge_head_BenzolRingC1Exposed_edge__edge1 != null)
                            {
                                LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge1 = edge_head_BenzolRingC1Exposed_edge__edge1;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge1.type.TypeID]) {
                                        continue;
                                    }
                                    if(edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched
                                        && (edge_cur_BenzolRingC1Exposed_edge__edge1==edge_cur_BenzolRingC1Exposed_edge__edge0
                                            || edge_cur_BenzolRingC1Exposed_edge__edge1==edge_cur_BenzolRingC1Exposed_edge__edge6
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if(edge_cur_BenzolRingC1Exposed_edge__edge1.isMatchedByEnclosingPattern)
                                    {
                                        continue;
                                    }
                                    bool edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched;
                                    edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = true;
                                    LGSPNode node_cur_BenzolRingC1Exposed_node_c3 = edge_cur_BenzolRingC1Exposed_edge__edge1.target;
                                    if(!NodeType_C.isMyType[node_cur_BenzolRingC1Exposed_node_c3.type.TypeID]) {
                                        edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                        continue;
                                    }
                                    if(node_cur_BenzolRingC1Exposed_node_c3.isMatched
                                        && (node_cur_BenzolRingC1Exposed_node_c3==node_cur_BenzolRingC1Exposed_node_c1
                                            || node_cur_BenzolRingC1Exposed_node_c3==node_cur_BenzolRingC1Exposed_node_c2
                                            )
                                        )
                                    {
                                        edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                        continue;
                                    }
                                    if(node_cur_BenzolRingC1Exposed_node_c3.isMatchedByEnclosingPattern)
                                    {
                                        edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                        continue;
                                    }
                                    bool node_cur_BenzolRingC1Exposed_node_c3_prevIsMatched = node_cur_BenzolRingC1Exposed_node_c3.isMatched;
                                    node_cur_BenzolRingC1Exposed_node_c3.isMatched = true;
                                    LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge2 = node_cur_BenzolRingC1Exposed_node_c3.outhead;
                                    if(edge_head_BenzolRingC1Exposed_edge__edge2 != null)
                                    {
                                        LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge2 = edge_head_BenzolRingC1Exposed_edge__edge2;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge2.type.TypeID]) {
                                                continue;
                                            }
                                            if(edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched
                                                && (edge_cur_BenzolRingC1Exposed_edge__edge2==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                    || edge_cur_BenzolRingC1Exposed_edge__edge2==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                    || edge_cur_BenzolRingC1Exposed_edge__edge2==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if(edge_cur_BenzolRingC1Exposed_edge__edge2.isMatchedByEnclosingPattern)
                                            {
                                                continue;
                                            }
                                            bool edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched;
                                            edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = true;
                                            LGSPNode node_cur_BenzolRingC1Exposed_node_c4 = edge_cur_BenzolRingC1Exposed_edge__edge2.target;
                                            if(!NodeType_C.isMyType[node_cur_BenzolRingC1Exposed_node_c4.type.TypeID]) {
                                                edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                                continue;
                                            }
                                            if(node_cur_BenzolRingC1Exposed_node_c4.isMatched
                                                && (node_cur_BenzolRingC1Exposed_node_c4==node_cur_BenzolRingC1Exposed_node_c1
                                                    || node_cur_BenzolRingC1Exposed_node_c4==node_cur_BenzolRingC1Exposed_node_c2
                                                    || node_cur_BenzolRingC1Exposed_node_c4==node_cur_BenzolRingC1Exposed_node_c3
                                                    )
                                                )
                                            {
                                                edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                                continue;
                                            }
                                            if(node_cur_BenzolRingC1Exposed_node_c4.isMatchedByEnclosingPattern)
                                            {
                                                edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                                continue;
                                            }
                                            bool node_cur_BenzolRingC1Exposed_node_c4_prevIsMatched = node_cur_BenzolRingC1Exposed_node_c4.isMatched;
                                            node_cur_BenzolRingC1Exposed_node_c4.isMatched = true;
                                            LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge7 = node_cur_BenzolRingC1Exposed_node_c3.outhead;
                                            if(edge_head_BenzolRingC1Exposed_edge__edge7 != null)
                                            {
                                                LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge7 = edge_head_BenzolRingC1Exposed_edge__edge7;
                                                do
                                                {
                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge7.type.TypeID]) {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge7.target != node_cur_BenzolRingC1Exposed_node_c4) {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched
                                                        && (edge_cur_BenzolRingC1Exposed_edge__edge7==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                            || edge_cur_BenzolRingC1Exposed_edge__edge7==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                            || edge_cur_BenzolRingC1Exposed_edge__edge7==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                            || edge_cur_BenzolRingC1Exposed_edge__edge7==edge_cur_BenzolRingC1Exposed_edge__edge2
                                                            )
                                                        )
                                                    {
                                                        continue;
                                                    }
                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge7.isMatchedByEnclosingPattern)
                                                    {
                                                        continue;
                                                    }
                                                    bool edge_cur_BenzolRingC1Exposed_edge__edge7_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched;
                                                    edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched = true;
                                                    LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge3 = node_cur_BenzolRingC1Exposed_node_c4.outhead;
                                                    if(edge_head_BenzolRingC1Exposed_edge__edge3 != null)
                                                    {
                                                        LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge3 = edge_head_BenzolRingC1Exposed_edge__edge3;
                                                        do
                                                        {
                                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge3.type.TypeID]) {
                                                                continue;
                                                            }
                                                            if(edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched
                                                                && (edge_cur_BenzolRingC1Exposed_edge__edge3==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge3==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge3==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge3==edge_cur_BenzolRingC1Exposed_edge__edge2
                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge3==edge_cur_BenzolRingC1Exposed_edge__edge7
                                                                    )
                                                                )
                                                            {
                                                                continue;
                                                            }
                                                            if(edge_cur_BenzolRingC1Exposed_edge__edge3.isMatchedByEnclosingPattern)
                                                            {
                                                                continue;
                                                            }
                                                            bool edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched;
                                                            edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = true;
                                                            LGSPNode node_cur_BenzolRingC1Exposed_node_c5 = edge_cur_BenzolRingC1Exposed_edge__edge3.target;
                                                            if(!NodeType_C.isMyType[node_cur_BenzolRingC1Exposed_node_c5.type.TypeID]) {
                                                                edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                                continue;
                                                            }
                                                            if(node_cur_BenzolRingC1Exposed_node_c5.isMatched
                                                                && (node_cur_BenzolRingC1Exposed_node_c5==node_cur_BenzolRingC1Exposed_node_c1
                                                                    || node_cur_BenzolRingC1Exposed_node_c5==node_cur_BenzolRingC1Exposed_node_c2
                                                                    || node_cur_BenzolRingC1Exposed_node_c5==node_cur_BenzolRingC1Exposed_node_c3
                                                                    || node_cur_BenzolRingC1Exposed_node_c5==node_cur_BenzolRingC1Exposed_node_c4
                                                                    )
                                                                )
                                                            {
                                                                edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                                continue;
                                                            }
                                                            if(node_cur_BenzolRingC1Exposed_node_c5.isMatchedByEnclosingPattern)
                                                            {
                                                                edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                                continue;
                                                            }
                                                            bool node_cur_BenzolRingC1Exposed_node_c5_prevIsMatched = node_cur_BenzolRingC1Exposed_node_c5.isMatched;
                                                            node_cur_BenzolRingC1Exposed_node_c5.isMatched = true;
                                                            LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge4 = node_cur_BenzolRingC1Exposed_node_c5.outhead;
                                                            if(edge_head_BenzolRingC1Exposed_edge__edge4 != null)
                                                            {
                                                                LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge4 = edge_head_BenzolRingC1Exposed_edge__edge4;
                                                                do
                                                                {
                                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge4.type.TypeID]) {
                                                                        continue;
                                                                    }
                                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched
                                                                        && (edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge2
                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge7
                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge4==edge_cur_BenzolRingC1Exposed_edge__edge3
                                                                            )
                                                                        )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge4.isMatchedByEnclosingPattern)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    bool edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched;
                                                                    edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = true;
                                                                    LGSPNode node_cur_BenzolRingC1Exposed_node_c6 = edge_cur_BenzolRingC1Exposed_edge__edge4.target;
                                                                    if(!NodeType_C.isMyType[node_cur_BenzolRingC1Exposed_node_c6.type.TypeID]) {
                                                                        edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                        continue;
                                                                    }
                                                                    if(node_cur_BenzolRingC1Exposed_node_c6.isMatched
                                                                        && (node_cur_BenzolRingC1Exposed_node_c6==node_cur_BenzolRingC1Exposed_node_c1
                                                                            || node_cur_BenzolRingC1Exposed_node_c6==node_cur_BenzolRingC1Exposed_node_c2
                                                                            || node_cur_BenzolRingC1Exposed_node_c6==node_cur_BenzolRingC1Exposed_node_c3
                                                                            || node_cur_BenzolRingC1Exposed_node_c6==node_cur_BenzolRingC1Exposed_node_c4
                                                                            || node_cur_BenzolRingC1Exposed_node_c6==node_cur_BenzolRingC1Exposed_node_c5
                                                                            )
                                                                        )
                                                                    {
                                                                        edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                        continue;
                                                                    }
                                                                    if(node_cur_BenzolRingC1Exposed_node_c6.isMatchedByEnclosingPattern)
                                                                    {
                                                                        edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                        continue;
                                                                    }
                                                                    LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge8 = node_cur_BenzolRingC1Exposed_node_c5.outhead;
                                                                    if(edge_head_BenzolRingC1Exposed_edge__edge8 != null)
                                                                    {
                                                                        LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge8 = edge_head_BenzolRingC1Exposed_edge__edge8;
                                                                        do
                                                                        {
                                                                            if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge8.type.TypeID]) {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC1Exposed_edge__edge8.target != node_cur_BenzolRingC1Exposed_node_c6) {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched
                                                                                && (edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge2
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge7
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge3
                                                                                    || edge_cur_BenzolRingC1Exposed_edge__edge8==edge_cur_BenzolRingC1Exposed_edge__edge4
                                                                                    )
                                                                                )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if(edge_cur_BenzolRingC1Exposed_edge__edge8.isMatchedByEnclosingPattern)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            bool edge_cur_BenzolRingC1Exposed_edge__edge8_prevIsMatched = edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched;
                                                                            edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched = true;
                                                                            LGSPEdge edge_head_BenzolRingC1Exposed_edge__edge5 = node_cur_BenzolRingC1Exposed_node_c6.outhead;
                                                                            if(edge_head_BenzolRingC1Exposed_edge__edge5 != null)
                                                                            {
                                                                                LGSPEdge edge_cur_BenzolRingC1Exposed_edge__edge5 = edge_head_BenzolRingC1Exposed_edge__edge5;
                                                                                do
                                                                                {
                                                                                    if(!EdgeType_Edge.isMyType[edge_cur_BenzolRingC1Exposed_edge__edge5.type.TypeID]) {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge5.target != node_cur_BenzolRingC1Exposed_node_c1) {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge5.isMatched
                                                                                        && (edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge0
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge6
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge1
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge2
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge7
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge3
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge4
                                                                                            || edge_cur_BenzolRingC1Exposed_edge__edge5==edge_cur_BenzolRingC1Exposed_edge__edge8
                                                                                            )
                                                                                        )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if(edge_cur_BenzolRingC1Exposed_edge__edge5.isMatchedByEnclosingPattern)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if(openTasks.Count==0)
                                                                                    {
                                                                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                                                                        LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                        match.patternGraph = patternGraph;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c1] = node_cur_BenzolRingC1Exposed_node_c1;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c2] = node_cur_BenzolRingC1Exposed_node_c2;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c3] = node_cur_BenzolRingC1Exposed_node_c3;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c4] = node_cur_BenzolRingC1Exposed_node_c4;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c5] = node_cur_BenzolRingC1Exposed_node_c5;
                                                                                        match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c6] = node_cur_BenzolRingC1Exposed_node_c6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge0] = edge_cur_BenzolRingC1Exposed_edge__edge0;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge1] = edge_cur_BenzolRingC1Exposed_edge__edge1;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge2] = edge_cur_BenzolRingC1Exposed_edge__edge2;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge3] = edge_cur_BenzolRingC1Exposed_edge__edge3;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge4] = edge_cur_BenzolRingC1Exposed_edge__edge4;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge5] = edge_cur_BenzolRingC1Exposed_edge__edge5;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge6] = edge_cur_BenzolRingC1Exposed_edge__edge6;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge7] = edge_cur_BenzolRingC1Exposed_edge__edge7;
                                                                                        match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge8] = edge_cur_BenzolRingC1Exposed_edge__edge8;
                                                                                        currentFoundPartialMatch.Push(match);
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge8_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c5.isMatched = node_cur_BenzolRingC1Exposed_node_c5_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge7_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c4.isMatched = node_cur_BenzolRingC1Exposed_node_c4_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c3.isMatched = node_cur_BenzolRingC1Exposed_node_c3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge6_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c2.isMatched = node_cur_BenzolRingC1Exposed_node_c2_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                    node_cur_BenzolRingC1Exposed_node_c1.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC1Exposed_node_c2.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC1Exposed_node_c3.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC1Exposed_node_c4.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC1Exposed_node_c5.isMatchedByEnclosingPattern = true;
                                                                                    node_cur_BenzolRingC1Exposed_node_c6.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                    if(matchesList.Count>0) {
                                                                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                        {
                                                                                            LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[9], new LGSPMatch[0]);
                                                                                            match.patternGraph = patternGraph;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c1] = node_cur_BenzolRingC1Exposed_node_c1;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c2] = node_cur_BenzolRingC1Exposed_node_c2;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c3] = node_cur_BenzolRingC1Exposed_node_c3;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c4] = node_cur_BenzolRingC1Exposed_node_c4;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c5] = node_cur_BenzolRingC1Exposed_node_c5;
                                                                                            match.Nodes[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_NodeNums.@c6] = node_cur_BenzolRingC1Exposed_node_c6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge0] = edge_cur_BenzolRingC1Exposed_edge__edge0;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge1] = edge_cur_BenzolRingC1Exposed_edge__edge1;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge2] = edge_cur_BenzolRingC1Exposed_edge__edge2;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge3] = edge_cur_BenzolRingC1Exposed_edge__edge3;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge4] = edge_cur_BenzolRingC1Exposed_edge__edge4;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge5] = edge_cur_BenzolRingC1Exposed_edge__edge5;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge6] = edge_cur_BenzolRingC1Exposed_edge__edge6;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge7] = edge_cur_BenzolRingC1Exposed_edge__edge7;
                                                                                            match.Edges[(int)Pattern_BenzolRingC1Exposed.BenzolRingC1Exposed_EdgeNums.@_edge8] = edge_cur_BenzolRingC1Exposed_edge__edge8;
                                                                                            currentFoundPartialMatch.Push(match);
                                                                                        }
                                                                                        if(matchesList==foundPartialMatches) {
                                                                                            matchesList = new List<Stack<LGSPMatch>>();
                                                                                        } else {
                                                                                            foreach(Stack<LGSPMatch> match in matchesList)
                                                                                            {
                                                                                                foundPartialMatches.Add(match);
                                                                                            }
                                                                                            matchesList.Clear();
                                                                                        }
                                                                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                                                        {
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                            node_cur_BenzolRingC1Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge8_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c5.isMatched = node_cur_BenzolRingC1Exposed_node_c5_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge7_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c4.isMatched = node_cur_BenzolRingC1Exposed_node_c4_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c3.isMatched = node_cur_BenzolRingC1Exposed_node_c3_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge6_prevIsMatched;
                                                                                            node_cur_BenzolRingC1Exposed_node_c2.isMatched = node_cur_BenzolRingC1Exposed_node_c2_prevIsMatched;
                                                                                            edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                                                                                            openTasks.Push(this);
                                                                                            return;
                                                                                        }
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_BenzolRingC1Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_BenzolRingC1Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        continue;
                                                                                    }
                                                                                    node_cur_BenzolRingC1Exposed_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC1Exposed_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC1Exposed_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC1Exposed_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC1Exposed_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_BenzolRingC1Exposed_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_BenzolRingC1Exposed_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                }
                                                                                while( (edge_cur_BenzolRingC1Exposed_edge__edge5 = edge_cur_BenzolRingC1Exposed_edge__edge5.outNext) != edge_head_BenzolRingC1Exposed_edge__edge5 );
                                                                            }
                                                                            edge_cur_BenzolRingC1Exposed_edge__edge8.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge8_prevIsMatched;
                                                                        }
                                                                        while( (edge_cur_BenzolRingC1Exposed_edge__edge8 = edge_cur_BenzolRingC1Exposed_edge__edge8.outNext) != edge_head_BenzolRingC1Exposed_edge__edge8 );
                                                                    }
                                                                    edge_cur_BenzolRingC1Exposed_edge__edge4.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge4_prevIsMatched;
                                                                }
                                                                while( (edge_cur_BenzolRingC1Exposed_edge__edge4 = edge_cur_BenzolRingC1Exposed_edge__edge4.outNext) != edge_head_BenzolRingC1Exposed_edge__edge4 );
                                                            }
                                                            node_cur_BenzolRingC1Exposed_node_c5.isMatched = node_cur_BenzolRingC1Exposed_node_c5_prevIsMatched;
                                                            edge_cur_BenzolRingC1Exposed_edge__edge3.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge3_prevIsMatched;
                                                        }
                                                        while( (edge_cur_BenzolRingC1Exposed_edge__edge3 = edge_cur_BenzolRingC1Exposed_edge__edge3.outNext) != edge_head_BenzolRingC1Exposed_edge__edge3 );
                                                    }
                                                    edge_cur_BenzolRingC1Exposed_edge__edge7.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge7_prevIsMatched;
                                                }
                                                while( (edge_cur_BenzolRingC1Exposed_edge__edge7 = edge_cur_BenzolRingC1Exposed_edge__edge7.outNext) != edge_head_BenzolRingC1Exposed_edge__edge7 );
                                            }
                                            node_cur_BenzolRingC1Exposed_node_c4.isMatched = node_cur_BenzolRingC1Exposed_node_c4_prevIsMatched;
                                            edge_cur_BenzolRingC1Exposed_edge__edge2.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge2_prevIsMatched;
                                        }
                                        while( (edge_cur_BenzolRingC1Exposed_edge__edge2 = edge_cur_BenzolRingC1Exposed_edge__edge2.outNext) != edge_head_BenzolRingC1Exposed_edge__edge2 );
                                    }
                                    node_cur_BenzolRingC1Exposed_node_c3.isMatched = node_cur_BenzolRingC1Exposed_node_c3_prevIsMatched;
                                    edge_cur_BenzolRingC1Exposed_edge__edge1.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge1_prevIsMatched;
                                }
                                while( (edge_cur_BenzolRingC1Exposed_edge__edge1 = edge_cur_BenzolRingC1Exposed_edge__edge1.outNext) != edge_head_BenzolRingC1Exposed_edge__edge1 );
                            }
                            edge_cur_BenzolRingC1Exposed_edge__edge6.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge6_prevIsMatched;
                        }
                        while( (edge_cur_BenzolRingC1Exposed_edge__edge6 = edge_cur_BenzolRingC1Exposed_edge__edge6.outNext) != edge_head_BenzolRingC1Exposed_edge__edge6 );
                    }
                    node_cur_BenzolRingC1Exposed_node_c2.isMatched = node_cur_BenzolRingC1Exposed_node_c2_prevIsMatched;
                    edge_cur_BenzolRingC1Exposed_edge__edge0.isMatched = edge_cur_BenzolRingC1Exposed_edge__edge0_prevIsMatched;
                }
                while( (edge_cur_BenzolRingC1Exposed_edge__edge0 = edge_cur_BenzolRingC1Exposed_edge__edge0.outNext) != edge_head_BenzolRingC1Exposed_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Hydrogen : LGSPSubpatternAction
    {
        public PatternAction_Hydrogen(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Hydrogen.Instance.patternGraph;
        }

        public LGSPNode Hydrogen_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_Hydrogen_node_anchor = Hydrogen_node_anchor;
            LGSPEdge edge_head_Hydrogen_edge__edge0 = node_cur_Hydrogen_node_anchor.outhead;
            if(edge_head_Hydrogen_edge__edge0 != null)
            {
                LGSPEdge edge_cur_Hydrogen_edge__edge0 = edge_head_Hydrogen_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_Hydrogen_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_Hydrogen_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    LGSPNode node_cur_Hydrogen_node__node0 = edge_cur_Hydrogen_edge__edge0.target;
                    if(!NodeType_H.isMyType[node_cur_Hydrogen_node__node0.type.TypeID]) {
                        continue;
                    }
                    if(node_cur_Hydrogen_node__node0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    if(openTasks.Count==0)
                    {
                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                        foundPartialMatches.Add(currentFoundPartialMatch);
                        LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[1], new LGSPMatch[0]);
                        match.patternGraph = patternGraph;
                        match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@anchor] = node_cur_Hydrogen_node_anchor;
                        match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@_node0] = node_cur_Hydrogen_node__node0;
                        match.Edges[(int)Pattern_Hydrogen.Hydrogen_EdgeNums.@_edge0] = edge_cur_Hydrogen_edge__edge0;
                        currentFoundPartialMatch.Push(match);
                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                        {
                            openTasks.Push(this);
                            return;
                        }
                        continue;
                    }
                    node_cur_Hydrogen_node_anchor.isMatchedByEnclosingPattern = true;
                    node_cur_Hydrogen_node__node0.isMatchedByEnclosingPattern = true;
                    edge_cur_Hydrogen_edge__edge0.isMatchedByEnclosingPattern = true;
                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                    if(matchesList.Count>0) {
                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                        {
                            LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[1], new LGSPMatch[0]);
                            match.patternGraph = patternGraph;
                            match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@anchor] = node_cur_Hydrogen_node_anchor;
                            match.Nodes[(int)Pattern_Hydrogen.Hydrogen_NodeNums.@_node0] = node_cur_Hydrogen_node__node0;
                            match.Edges[(int)Pattern_Hydrogen.Hydrogen_EdgeNums.@_edge0] = edge_cur_Hydrogen_edge__edge0;
                            currentFoundPartialMatch.Push(match);
                        }
                        if(matchesList==foundPartialMatches) {
                            matchesList = new List<Stack<LGSPMatch>>();
                        } else {
                            foreach(Stack<LGSPMatch> match in matchesList)
                            {
                                foundPartialMatches.Add(match);
                            }
                            matchesList.Clear();
                        }
                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                        {
                            edge_cur_Hydrogen_edge__edge0.isMatchedByEnclosingPattern = false;
                            node_cur_Hydrogen_node__node0.isMatchedByEnclosingPattern = false;
                            node_cur_Hydrogen_node_anchor.isMatchedByEnclosingPattern = false;
                            openTasks.Push(this);
                            return;
                        }
                        edge_cur_Hydrogen_edge__edge0.isMatchedByEnclosingPattern = false;
                        node_cur_Hydrogen_node__node0.isMatchedByEnclosingPattern = false;
                        node_cur_Hydrogen_node_anchor.isMatchedByEnclosingPattern = false;
                        continue;
                    }
                    node_cur_Hydrogen_node_anchor.isMatchedByEnclosingPattern = false;
                    node_cur_Hydrogen_node__node0.isMatchedByEnclosingPattern = false;
                    edge_cur_Hydrogen_edge__edge0.isMatchedByEnclosingPattern = false;
                }
                while( (edge_cur_Hydrogen_edge__edge0 = edge_cur_Hydrogen_edge__edge0.outNext) != edge_head_Hydrogen_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Hydroxyl : LGSPSubpatternAction
    {
        public PatternAction_Hydroxyl(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Hydroxyl.Instance.patternGraph;
        }

        public LGSPNode Hydroxyl_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_Hydroxyl_node_anchor = Hydroxyl_node_anchor;
            LGSPEdge edge_head_Hydroxyl_edge__edge0 = node_cur_Hydroxyl_node_anchor.outhead;
            if(edge_head_Hydroxyl_edge__edge0 != null)
            {
                LGSPEdge edge_cur_Hydroxyl_edge__edge0 = edge_head_Hydroxyl_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_Hydroxyl_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_Hydroxyl_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    bool edge_cur_Hydroxyl_edge__edge0_prevIsMatched = edge_cur_Hydroxyl_edge__edge0.isMatched;
                    edge_cur_Hydroxyl_edge__edge0.isMatched = true;
                    LGSPNode node_cur_Hydroxyl_node__node0 = edge_cur_Hydroxyl_edge__edge0.target;
                    if(!NodeType_O.isMyType[node_cur_Hydroxyl_node__node0.type.TypeID]) {
                        edge_cur_Hydroxyl_edge__edge0.isMatched = edge_cur_Hydroxyl_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_Hydroxyl_node__node0.isMatchedByEnclosingPattern)
                    {
                        edge_cur_Hydroxyl_edge__edge0.isMatched = edge_cur_Hydroxyl_edge__edge0_prevIsMatched;
                        continue;
                    }
                    LGSPEdge edge_head_Hydroxyl_edge__edge1 = node_cur_Hydroxyl_node__node0.outhead;
                    if(edge_head_Hydroxyl_edge__edge1 != null)
                    {
                        LGSPEdge edge_cur_Hydroxyl_edge__edge1 = edge_head_Hydroxyl_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[edge_cur_Hydroxyl_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if(edge_cur_Hydroxyl_edge__edge1.isMatched
                                && edge_cur_Hydroxyl_edge__edge1==edge_cur_Hydroxyl_edge__edge0
                                )
                            {
                                continue;
                            }
                            if(edge_cur_Hydroxyl_edge__edge1.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            LGSPNode node_cur_Hydroxyl_node__node1 = edge_cur_Hydroxyl_edge__edge1.target;
                            if(!NodeType_H.isMyType[node_cur_Hydroxyl_node__node1.type.TypeID]) {
                                continue;
                            }
                            if(node_cur_Hydroxyl_node__node1.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            if(openTasks.Count==0)
                            {
                                Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                foundPartialMatches.Add(currentFoundPartialMatch);
                                LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[2], new LGSPMatch[0]);
                                match.patternGraph = patternGraph;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@anchor] = node_cur_Hydroxyl_node_anchor;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node0] = node_cur_Hydroxyl_node__node0;
                                match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node1] = node_cur_Hydroxyl_node__node1;
                                match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge0] = edge_cur_Hydroxyl_edge__edge0;
                                match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge1] = edge_cur_Hydroxyl_edge__edge1;
                                currentFoundPartialMatch.Push(match);
                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                {
                                    edge_cur_Hydroxyl_edge__edge0.isMatched = edge_cur_Hydroxyl_edge__edge0_prevIsMatched;
                                    openTasks.Push(this);
                                    return;
                                }
                                continue;
                            }
                            node_cur_Hydroxyl_node_anchor.isMatchedByEnclosingPattern = true;
                            node_cur_Hydroxyl_node__node0.isMatchedByEnclosingPattern = true;
                            node_cur_Hydroxyl_node__node1.isMatchedByEnclosingPattern = true;
                            edge_cur_Hydroxyl_edge__edge0.isMatchedByEnclosingPattern = true;
                            edge_cur_Hydroxyl_edge__edge1.isMatchedByEnclosingPattern = true;
                            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                            if(matchesList.Count>0) {
                                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                {
                                    LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[2], new LGSPMatch[0]);
                                    match.patternGraph = patternGraph;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@anchor] = node_cur_Hydroxyl_node_anchor;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node0] = node_cur_Hydroxyl_node__node0;
                                    match.Nodes[(int)Pattern_Hydroxyl.Hydroxyl_NodeNums.@_node1] = node_cur_Hydroxyl_node__node1;
                                    match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge0] = edge_cur_Hydroxyl_edge__edge0;
                                    match.Edges[(int)Pattern_Hydroxyl.Hydroxyl_EdgeNums.@_edge1] = edge_cur_Hydroxyl_edge__edge1;
                                    currentFoundPartialMatch.Push(match);
                                }
                                if(matchesList==foundPartialMatches) {
                                    matchesList = new List<Stack<LGSPMatch>>();
                                } else {
                                    foreach(Stack<LGSPMatch> match in matchesList)
                                    {
                                        foundPartialMatches.Add(match);
                                    }
                                    matchesList.Clear();
                                }
                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                {
                                    edge_cur_Hydroxyl_edge__edge1.isMatchedByEnclosingPattern = false;
                                    edge_cur_Hydroxyl_edge__edge0.isMatchedByEnclosingPattern = false;
                                    node_cur_Hydroxyl_node__node1.isMatchedByEnclosingPattern = false;
                                    node_cur_Hydroxyl_node__node0.isMatchedByEnclosingPattern = false;
                                    node_cur_Hydroxyl_node_anchor.isMatchedByEnclosingPattern = false;
                                    edge_cur_Hydroxyl_edge__edge0.isMatched = edge_cur_Hydroxyl_edge__edge0_prevIsMatched;
                                    openTasks.Push(this);
                                    return;
                                }
                                edge_cur_Hydroxyl_edge__edge1.isMatchedByEnclosingPattern = false;
                                edge_cur_Hydroxyl_edge__edge0.isMatchedByEnclosingPattern = false;
                                node_cur_Hydroxyl_node__node1.isMatchedByEnclosingPattern = false;
                                node_cur_Hydroxyl_node__node0.isMatchedByEnclosingPattern = false;
                                node_cur_Hydroxyl_node_anchor.isMatchedByEnclosingPattern = false;
                                continue;
                            }
                            node_cur_Hydroxyl_node_anchor.isMatchedByEnclosingPattern = false;
                            node_cur_Hydroxyl_node__node0.isMatchedByEnclosingPattern = false;
                            node_cur_Hydroxyl_node__node1.isMatchedByEnclosingPattern = false;
                            edge_cur_Hydroxyl_edge__edge0.isMatchedByEnclosingPattern = false;
                            edge_cur_Hydroxyl_edge__edge1.isMatchedByEnclosingPattern = false;
                        }
                        while( (edge_cur_Hydroxyl_edge__edge1 = edge_cur_Hydroxyl_edge__edge1.outNext) != edge_head_Hydroxyl_edge__edge1 );
                    }
                    edge_cur_Hydroxyl_edge__edge0.isMatched = edge_cur_Hydroxyl_edge__edge0_prevIsMatched;
                }
                while( (edge_cur_Hydroxyl_edge__edge0 = edge_cur_Hydroxyl_edge__edge0.outNext) != edge_head_Hydroxyl_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Methyl : LGSPSubpatternAction
    {
        public PatternAction_Methyl(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Methyl.Instance.patternGraph;
        }

        public LGSPNode Methyl_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_Methyl_node_anchor = Methyl_node_anchor;
            LGSPEdge edge_head_Methyl_edge__edge0 = node_cur_Methyl_node_anchor.outhead;
            if(edge_head_Methyl_edge__edge0 != null)
            {
                LGSPEdge edge_cur_Methyl_edge__edge0 = edge_head_Methyl_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_Methyl_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_Methyl_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    bool edge_cur_Methyl_edge__edge0_prevIsMatched = edge_cur_Methyl_edge__edge0.isMatched;
                    edge_cur_Methyl_edge__edge0.isMatched = true;
                    LGSPNode node_cur_Methyl_node_c = edge_cur_Methyl_edge__edge0.target;
                    if(!NodeType_C.isMyType[node_cur_Methyl_node_c.type.TypeID]) {
                        edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_Methyl_node_c.isMatched
                        && node_cur_Methyl_node_c==node_cur_Methyl_node_anchor
                        )
                    {
                        edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_Methyl_node_c.isMatchedByEnclosingPattern)
                    {
                        edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                        continue;
                    }
                    LGSPEdge edge_head_Methyl_edge__edge1 = node_cur_Methyl_node_c.outhead;
                    if(edge_head_Methyl_edge__edge1 != null)
                    {
                        LGSPEdge edge_cur_Methyl_edge__edge1 = edge_head_Methyl_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[edge_cur_Methyl_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if(edge_cur_Methyl_edge__edge1.isMatched
                                && edge_cur_Methyl_edge__edge1==edge_cur_Methyl_edge__edge0
                                )
                            {
                                continue;
                            }
                            if(edge_cur_Methyl_edge__edge1.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            bool edge_cur_Methyl_edge__edge1_prevIsMatched = edge_cur_Methyl_edge__edge1.isMatched;
                            edge_cur_Methyl_edge__edge1.isMatched = true;
                            LGSPNode node_cur_Methyl_node__node0 = edge_cur_Methyl_edge__edge1.target;
                            if(!NodeType_H.isMyType[node_cur_Methyl_node__node0.type.TypeID]) {
                                edge_cur_Methyl_edge__edge1.isMatched = edge_cur_Methyl_edge__edge1_prevIsMatched;
                                continue;
                            }
                            if(node_cur_Methyl_node__node0.isMatchedByEnclosingPattern)
                            {
                                edge_cur_Methyl_edge__edge1.isMatched = edge_cur_Methyl_edge__edge1_prevIsMatched;
                                continue;
                            }
                            bool node_cur_Methyl_node__node0_prevIsMatched = node_cur_Methyl_node__node0.isMatched;
                            node_cur_Methyl_node__node0.isMatched = true;
                            LGSPEdge edge_head_Methyl_edge__edge2 = node_cur_Methyl_node_c.outhead;
                            if(edge_head_Methyl_edge__edge2 != null)
                            {
                                LGSPEdge edge_cur_Methyl_edge__edge2 = edge_head_Methyl_edge__edge2;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[edge_cur_Methyl_edge__edge2.type.TypeID]) {
                                        continue;
                                    }
                                    if(edge_cur_Methyl_edge__edge2.isMatched
                                        && (edge_cur_Methyl_edge__edge2==edge_cur_Methyl_edge__edge0
                                            || edge_cur_Methyl_edge__edge2==edge_cur_Methyl_edge__edge1
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if(edge_cur_Methyl_edge__edge2.isMatchedByEnclosingPattern)
                                    {
                                        continue;
                                    }
                                    bool edge_cur_Methyl_edge__edge2_prevIsMatched = edge_cur_Methyl_edge__edge2.isMatched;
                                    edge_cur_Methyl_edge__edge2.isMatched = true;
                                    LGSPNode node_cur_Methyl_node__node1 = edge_cur_Methyl_edge__edge2.target;
                                    if(!NodeType_H.isMyType[node_cur_Methyl_node__node1.type.TypeID]) {
                                        edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                        continue;
                                    }
                                    if(node_cur_Methyl_node__node1.isMatched
                                        && node_cur_Methyl_node__node1==node_cur_Methyl_node__node0
                                        )
                                    {
                                        edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                        continue;
                                    }
                                    if(node_cur_Methyl_node__node1.isMatchedByEnclosingPattern)
                                    {
                                        edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                        continue;
                                    }
                                    bool node_cur_Methyl_node__node1_prevIsMatched = node_cur_Methyl_node__node1.isMatched;
                                    node_cur_Methyl_node__node1.isMatched = true;
                                    LGSPEdge edge_head_Methyl_edge__edge3 = node_cur_Methyl_node_c.outhead;
                                    if(edge_head_Methyl_edge__edge3 != null)
                                    {
                                        LGSPEdge edge_cur_Methyl_edge__edge3 = edge_head_Methyl_edge__edge3;
                                        do
                                        {
                                            if(!EdgeType_Edge.isMyType[edge_cur_Methyl_edge__edge3.type.TypeID]) {
                                                continue;
                                            }
                                            if(edge_cur_Methyl_edge__edge3.isMatched
                                                && (edge_cur_Methyl_edge__edge3==edge_cur_Methyl_edge__edge0
                                                    || edge_cur_Methyl_edge__edge3==edge_cur_Methyl_edge__edge1
                                                    || edge_cur_Methyl_edge__edge3==edge_cur_Methyl_edge__edge2
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if(edge_cur_Methyl_edge__edge3.isMatchedByEnclosingPattern)
                                            {
                                                continue;
                                            }
                                            LGSPNode node_cur_Methyl_node__node2 = edge_cur_Methyl_edge__edge3.target;
                                            if(!NodeType_H.isMyType[node_cur_Methyl_node__node2.type.TypeID]) {
                                                continue;
                                            }
                                            if(node_cur_Methyl_node__node2.isMatched
                                                && (node_cur_Methyl_node__node2==node_cur_Methyl_node__node0
                                                    || node_cur_Methyl_node__node2==node_cur_Methyl_node__node1
                                                    )
                                                )
                                            {
                                                continue;
                                            }
                                            if(node_cur_Methyl_node__node2.isMatchedByEnclosingPattern)
                                            {
                                                continue;
                                            }
                                            if(openTasks.Count==0)
                                            {
                                                Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                                foundPartialMatches.Add(currentFoundPartialMatch);
                                                LGSPMatch match = new LGSPMatch(new LGSPNode[5], new LGSPEdge[4], new LGSPMatch[0]);
                                                match.patternGraph = patternGraph;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@anchor] = node_cur_Methyl_node_anchor;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@c] = node_cur_Methyl_node_c;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node0] = node_cur_Methyl_node__node0;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node1] = node_cur_Methyl_node__node1;
                                                match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node2] = node_cur_Methyl_node__node2;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge0] = edge_cur_Methyl_edge__edge0;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge1] = edge_cur_Methyl_edge__edge1;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge2] = edge_cur_Methyl_edge__edge2;
                                                match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge3] = edge_cur_Methyl_edge__edge3;
                                                currentFoundPartialMatch.Push(match);
                                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                {
                                                    node_cur_Methyl_node__node1.isMatched = node_cur_Methyl_node__node1_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                                    node_cur_Methyl_node__node0.isMatched = node_cur_Methyl_node__node0_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge1.isMatched = edge_cur_Methyl_edge__edge1_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                                                    openTasks.Push(this);
                                                    return;
                                                }
                                                continue;
                                            }
                                            node_cur_Methyl_node_anchor.isMatchedByEnclosingPattern = true;
                                            node_cur_Methyl_node_c.isMatchedByEnclosingPattern = true;
                                            node_cur_Methyl_node__node0.isMatchedByEnclosingPattern = true;
                                            node_cur_Methyl_node__node1.isMatchedByEnclosingPattern = true;
                                            node_cur_Methyl_node__node2.isMatchedByEnclosingPattern = true;
                                            edge_cur_Methyl_edge__edge0.isMatchedByEnclosingPattern = true;
                                            edge_cur_Methyl_edge__edge1.isMatchedByEnclosingPattern = true;
                                            edge_cur_Methyl_edge__edge2.isMatchedByEnclosingPattern = true;
                                            edge_cur_Methyl_edge__edge3.isMatchedByEnclosingPattern = true;
                                            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                            if(matchesList.Count>0) {
                                                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                {
                                                    LGSPMatch match = new LGSPMatch(new LGSPNode[5], new LGSPEdge[4], new LGSPMatch[0]);
                                                    match.patternGraph = patternGraph;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@anchor] = node_cur_Methyl_node_anchor;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@c] = node_cur_Methyl_node_c;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node0] = node_cur_Methyl_node__node0;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node1] = node_cur_Methyl_node__node1;
                                                    match.Nodes[(int)Pattern_Methyl.Methyl_NodeNums.@_node2] = node_cur_Methyl_node__node2;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge0] = edge_cur_Methyl_edge__edge0;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge1] = edge_cur_Methyl_edge__edge1;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge2] = edge_cur_Methyl_edge__edge2;
                                                    match.Edges[(int)Pattern_Methyl.Methyl_EdgeNums.@_edge3] = edge_cur_Methyl_edge__edge3;
                                                    currentFoundPartialMatch.Push(match);
                                                }
                                                if(matchesList==foundPartialMatches) {
                                                    matchesList = new List<Stack<LGSPMatch>>();
                                                } else {
                                                    foreach(Stack<LGSPMatch> match in matchesList)
                                                    {
                                                        foundPartialMatches.Add(match);
                                                    }
                                                    matchesList.Clear();
                                                }
                                                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                                {
                                                    edge_cur_Methyl_edge__edge3.isMatchedByEnclosingPattern = false;
                                                    edge_cur_Methyl_edge__edge2.isMatchedByEnclosingPattern = false;
                                                    edge_cur_Methyl_edge__edge1.isMatchedByEnclosingPattern = false;
                                                    edge_cur_Methyl_edge__edge0.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node__node2.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node__node1.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node__node0.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node_c.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node_anchor.isMatchedByEnclosingPattern = false;
                                                    node_cur_Methyl_node__node1.isMatched = node_cur_Methyl_node__node1_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                                    node_cur_Methyl_node__node0.isMatched = node_cur_Methyl_node__node0_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge1.isMatched = edge_cur_Methyl_edge__edge1_prevIsMatched;
                                                    edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                                                    openTasks.Push(this);
                                                    return;
                                                }
                                                edge_cur_Methyl_edge__edge3.isMatchedByEnclosingPattern = false;
                                                edge_cur_Methyl_edge__edge2.isMatchedByEnclosingPattern = false;
                                                edge_cur_Methyl_edge__edge1.isMatchedByEnclosingPattern = false;
                                                edge_cur_Methyl_edge__edge0.isMatchedByEnclosingPattern = false;
                                                node_cur_Methyl_node__node2.isMatchedByEnclosingPattern = false;
                                                node_cur_Methyl_node__node1.isMatchedByEnclosingPattern = false;
                                                node_cur_Methyl_node__node0.isMatchedByEnclosingPattern = false;
                                                node_cur_Methyl_node_c.isMatchedByEnclosingPattern = false;
                                                node_cur_Methyl_node_anchor.isMatchedByEnclosingPattern = false;
                                                continue;
                                            }
                                            node_cur_Methyl_node_anchor.isMatchedByEnclosingPattern = false;
                                            node_cur_Methyl_node_c.isMatchedByEnclosingPattern = false;
                                            node_cur_Methyl_node__node0.isMatchedByEnclosingPattern = false;
                                            node_cur_Methyl_node__node1.isMatchedByEnclosingPattern = false;
                                            node_cur_Methyl_node__node2.isMatchedByEnclosingPattern = false;
                                            edge_cur_Methyl_edge__edge0.isMatchedByEnclosingPattern = false;
                                            edge_cur_Methyl_edge__edge1.isMatchedByEnclosingPattern = false;
                                            edge_cur_Methyl_edge__edge2.isMatchedByEnclosingPattern = false;
                                            edge_cur_Methyl_edge__edge3.isMatchedByEnclosingPattern = false;
                                        }
                                        while( (edge_cur_Methyl_edge__edge3 = edge_cur_Methyl_edge__edge3.outNext) != edge_head_Methyl_edge__edge3 );
                                    }
                                    node_cur_Methyl_node__node1.isMatched = node_cur_Methyl_node__node1_prevIsMatched;
                                    edge_cur_Methyl_edge__edge2.isMatched = edge_cur_Methyl_edge__edge2_prevIsMatched;
                                }
                                while( (edge_cur_Methyl_edge__edge2 = edge_cur_Methyl_edge__edge2.outNext) != edge_head_Methyl_edge__edge2 );
                            }
                            node_cur_Methyl_node__node0.isMatched = node_cur_Methyl_node__node0_prevIsMatched;
                            edge_cur_Methyl_edge__edge1.isMatched = edge_cur_Methyl_edge__edge1_prevIsMatched;
                        }
                        while( (edge_cur_Methyl_edge__edge1 = edge_cur_Methyl_edge__edge1.outNext) != edge_head_Methyl_edge__edge1 );
                    }
                    edge_cur_Methyl_edge__edge0.isMatched = edge_cur_Methyl_edge__edge0_prevIsMatched;
                }
                while( (edge_cur_Methyl_edge__edge0 = edge_cur_Methyl_edge__edge0.outNext) != edge_head_Methyl_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Nitro : LGSPSubpatternAction
    {
        public PatternAction_Nitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Nitro.Instance.patternGraph;
        }

        public LGSPNode Nitro_node_anchor;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_Nitro_node_anchor = Nitro_node_anchor;
            LGSPEdge edge_head_Nitro_edge__edge0 = node_cur_Nitro_node_anchor.outhead;
            if(edge_head_Nitro_edge__edge0 != null)
            {
                LGSPEdge edge_cur_Nitro_edge__edge0 = edge_head_Nitro_edge__edge0;
                do
                {
                    if(!EdgeType_Edge.isMyType[edge_cur_Nitro_edge__edge0.type.TypeID]) {
                        continue;
                    }
                    if(edge_cur_Nitro_edge__edge0.isMatchedByEnclosingPattern)
                    {
                        continue;
                    }
                    bool edge_cur_Nitro_edge__edge0_prevIsMatched = edge_cur_Nitro_edge__edge0.isMatched;
                    edge_cur_Nitro_edge__edge0.isMatched = true;
                    LGSPNode node_cur_Nitro_node_n = edge_cur_Nitro_edge__edge0.target;
                    if(!NodeType_N.isMyType[node_cur_Nitro_node_n.type.TypeID]) {
                        edge_cur_Nitro_edge__edge0.isMatched = edge_cur_Nitro_edge__edge0_prevIsMatched;
                        continue;
                    }
                    if(node_cur_Nitro_node_n.isMatchedByEnclosingPattern)
                    {
                        edge_cur_Nitro_edge__edge0.isMatched = edge_cur_Nitro_edge__edge0_prevIsMatched;
                        continue;
                    }
                    LGSPEdge edge_head_Nitro_edge__edge1 = node_cur_Nitro_node_n.outhead;
                    if(edge_head_Nitro_edge__edge1 != null)
                    {
                        LGSPEdge edge_cur_Nitro_edge__edge1 = edge_head_Nitro_edge__edge1;
                        do
                        {
                            if(!EdgeType_Edge.isMyType[edge_cur_Nitro_edge__edge1.type.TypeID]) {
                                continue;
                            }
                            if(edge_cur_Nitro_edge__edge1.isMatched
                                && edge_cur_Nitro_edge__edge1==edge_cur_Nitro_edge__edge0
                                )
                            {
                                continue;
                            }
                            if(edge_cur_Nitro_edge__edge1.isMatchedByEnclosingPattern)
                            {
                                continue;
                            }
                            bool edge_cur_Nitro_edge__edge1_prevIsMatched = edge_cur_Nitro_edge__edge1.isMatched;
                            edge_cur_Nitro_edge__edge1.isMatched = true;
                            LGSPNode node_cur_Nitro_node__node0 = edge_cur_Nitro_edge__edge1.target;
                            if(!NodeType_O.isMyType[node_cur_Nitro_node__node0.type.TypeID]) {
                                edge_cur_Nitro_edge__edge1.isMatched = edge_cur_Nitro_edge__edge1_prevIsMatched;
                                continue;
                            }
                            if(node_cur_Nitro_node__node0.isMatchedByEnclosingPattern)
                            {
                                edge_cur_Nitro_edge__edge1.isMatched = edge_cur_Nitro_edge__edge1_prevIsMatched;
                                continue;
                            }
                            bool node_cur_Nitro_node__node0_prevIsMatched = node_cur_Nitro_node__node0.isMatched;
                            node_cur_Nitro_node__node0.isMatched = true;
                            LGSPEdge edge_head_Nitro_edge__edge2 = node_cur_Nitro_node_n.outhead;
                            if(edge_head_Nitro_edge__edge2 != null)
                            {
                                LGSPEdge edge_cur_Nitro_edge__edge2 = edge_head_Nitro_edge__edge2;
                                do
                                {
                                    if(!EdgeType_Edge.isMyType[edge_cur_Nitro_edge__edge2.type.TypeID]) {
                                        continue;
                                    }
                                    if(edge_cur_Nitro_edge__edge2.isMatched
                                        && (edge_cur_Nitro_edge__edge2==edge_cur_Nitro_edge__edge0
                                            || edge_cur_Nitro_edge__edge2==edge_cur_Nitro_edge__edge1
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    if(edge_cur_Nitro_edge__edge2.isMatchedByEnclosingPattern)
                                    {
                                        continue;
                                    }
                                    LGSPNode node_cur_Nitro_node__node1 = edge_cur_Nitro_edge__edge2.target;
                                    if(!NodeType_O.isMyType[node_cur_Nitro_node__node1.type.TypeID]) {
                                        continue;
                                    }
                                    if(node_cur_Nitro_node__node1.isMatched
                                        && node_cur_Nitro_node__node1==node_cur_Nitro_node__node0
                                        )
                                    {
                                        continue;
                                    }
                                    if(node_cur_Nitro_node__node1.isMatchedByEnclosingPattern)
                                    {
                                        continue;
                                    }
                                    if(openTasks.Count==0)
                                    {
                                        Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                                        foundPartialMatches.Add(currentFoundPartialMatch);
                                        LGSPMatch match = new LGSPMatch(new LGSPNode[4], new LGSPEdge[3], new LGSPMatch[0]);
                                        match.patternGraph = patternGraph;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@anchor] = node_cur_Nitro_node_anchor;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@n] = node_cur_Nitro_node_n;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node0] = node_cur_Nitro_node__node0;
                                        match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node1] = node_cur_Nitro_node__node1;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge0] = edge_cur_Nitro_edge__edge0;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge1] = edge_cur_Nitro_edge__edge1;
                                        match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge2] = edge_cur_Nitro_edge__edge2;
                                        currentFoundPartialMatch.Push(match);
                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                        {
                                            node_cur_Nitro_node__node0.isMatched = node_cur_Nitro_node__node0_prevIsMatched;
                                            edge_cur_Nitro_edge__edge1.isMatched = edge_cur_Nitro_edge__edge1_prevIsMatched;
                                            edge_cur_Nitro_edge__edge0.isMatched = edge_cur_Nitro_edge__edge0_prevIsMatched;
                                            openTasks.Push(this);
                                            return;
                                        }
                                        continue;
                                    }
                                    node_cur_Nitro_node_anchor.isMatchedByEnclosingPattern = true;
                                    node_cur_Nitro_node_n.isMatchedByEnclosingPattern = true;
                                    node_cur_Nitro_node__node0.isMatchedByEnclosingPattern = true;
                                    node_cur_Nitro_node__node1.isMatchedByEnclosingPattern = true;
                                    edge_cur_Nitro_edge__edge0.isMatchedByEnclosingPattern = true;
                                    edge_cur_Nitro_edge__edge1.isMatchedByEnclosingPattern = true;
                                    edge_cur_Nitro_edge__edge2.isMatchedByEnclosingPattern = true;
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                    if(matchesList.Count>0) {
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = new LGSPMatch(new LGSPNode[4], new LGSPEdge[3], new LGSPMatch[0]);
                                            match.patternGraph = patternGraph;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@anchor] = node_cur_Nitro_node_anchor;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@n] = node_cur_Nitro_node_n;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node0] = node_cur_Nitro_node__node0;
                                            match.Nodes[(int)Pattern_Nitro.Nitro_NodeNums.@_node1] = node_cur_Nitro_node__node1;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge0] = edge_cur_Nitro_edge__edge0;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge1] = edge_cur_Nitro_edge__edge1;
                                            match.Edges[(int)Pattern_Nitro.Nitro_EdgeNums.@_edge2] = edge_cur_Nitro_edge__edge2;
                                            currentFoundPartialMatch.Push(match);
                                        }
                                        if(matchesList==foundPartialMatches) {
                                            matchesList = new List<Stack<LGSPMatch>>();
                                        } else {
                                            foreach(Stack<LGSPMatch> match in matchesList)
                                            {
                                                foundPartialMatches.Add(match);
                                            }
                                            matchesList.Clear();
                                        }
                                        if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                                        {
                                            edge_cur_Nitro_edge__edge2.isMatchedByEnclosingPattern = false;
                                            edge_cur_Nitro_edge__edge1.isMatchedByEnclosingPattern = false;
                                            edge_cur_Nitro_edge__edge0.isMatchedByEnclosingPattern = false;
                                            node_cur_Nitro_node__node1.isMatchedByEnclosingPattern = false;
                                            node_cur_Nitro_node__node0.isMatchedByEnclosingPattern = false;
                                            node_cur_Nitro_node_n.isMatchedByEnclosingPattern = false;
                                            node_cur_Nitro_node_anchor.isMatchedByEnclosingPattern = false;
                                            node_cur_Nitro_node__node0.isMatched = node_cur_Nitro_node__node0_prevIsMatched;
                                            edge_cur_Nitro_edge__edge1.isMatched = edge_cur_Nitro_edge__edge1_prevIsMatched;
                                            edge_cur_Nitro_edge__edge0.isMatched = edge_cur_Nitro_edge__edge0_prevIsMatched;
                                            openTasks.Push(this);
                                            return;
                                        }
                                        edge_cur_Nitro_edge__edge2.isMatchedByEnclosingPattern = false;
                                        edge_cur_Nitro_edge__edge1.isMatchedByEnclosingPattern = false;
                                        edge_cur_Nitro_edge__edge0.isMatchedByEnclosingPattern = false;
                                        node_cur_Nitro_node__node1.isMatchedByEnclosingPattern = false;
                                        node_cur_Nitro_node__node0.isMatchedByEnclosingPattern = false;
                                        node_cur_Nitro_node_n.isMatchedByEnclosingPattern = false;
                                        node_cur_Nitro_node_anchor.isMatchedByEnclosingPattern = false;
                                        continue;
                                    }
                                    node_cur_Nitro_node_anchor.isMatchedByEnclosingPattern = false;
                                    node_cur_Nitro_node_n.isMatchedByEnclosingPattern = false;
                                    node_cur_Nitro_node__node0.isMatchedByEnclosingPattern = false;
                                    node_cur_Nitro_node__node1.isMatchedByEnclosingPattern = false;
                                    edge_cur_Nitro_edge__edge0.isMatchedByEnclosingPattern = false;
                                    edge_cur_Nitro_edge__edge1.isMatchedByEnclosingPattern = false;
                                    edge_cur_Nitro_edge__edge2.isMatchedByEnclosingPattern = false;
                                }
                                while( (edge_cur_Nitro_edge__edge2 = edge_cur_Nitro_edge__edge2.outNext) != edge_head_Nitro_edge__edge2 );
                            }
                            node_cur_Nitro_node__node0.isMatched = node_cur_Nitro_node__node0_prevIsMatched;
                            edge_cur_Nitro_edge__edge1.isMatched = edge_cur_Nitro_edge__edge1_prevIsMatched;
                        }
                        while( (edge_cur_Nitro_edge__edge1 = edge_cur_Nitro_edge__edge1.outNext) != edge_head_Nitro_edge__edge1 );
                    }
                    edge_cur_Nitro_edge__edge0.isMatched = edge_cur_Nitro_edge__edge0_prevIsMatched;
                }
                while( (edge_cur_Nitro_edge__edge0 = edge_cur_Nitro_edge__edge0.outNext) != edge_head_Nitro_edge__edge0 );
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_Oxygen : LGSPSubpatternAction
    {
        public PatternAction_Oxygen(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_Oxygen.Instance.patternGraph;
        }

        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            int edge_type_id_Oxygen_edge__edge0 = 1;
            for(LGSPEdge edge_head_Oxygen_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_Oxygen_edge__edge0], edge_cur_Oxygen_edge__edge0 = edge_head_Oxygen_edge__edge0.typeNext; edge_cur_Oxygen_edge__edge0 != edge_head_Oxygen_edge__edge0; edge_cur_Oxygen_edge__edge0 = edge_cur_Oxygen_edge__edge0.typeNext)
            {
                if(edge_cur_Oxygen_edge__edge0.isMatchedByEnclosingPattern)
                {
                    continue;
                }
                bool edge_cur_Oxygen_edge__edge0_prevIsMatched = edge_cur_Oxygen_edge__edge0.isMatched;
                edge_cur_Oxygen_edge__edge0.isMatched = true;
                LGSPNode node_cur_Oxygen_node_o1 = edge_cur_Oxygen_edge__edge0.source;
                if(!NodeType_O.isMyType[node_cur_Oxygen_node_o1.type.TypeID]) {
                    edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_Oxygen_node_o1.isMatchedByEnclosingPattern)
                {
                    edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_Oxygen_node_o1_prevIsMatched = node_cur_Oxygen_node_o1.isMatched;
                node_cur_Oxygen_node_o1.isMatched = true;
                LGSPNode node_cur_Oxygen_node_o2 = edge_cur_Oxygen_edge__edge0.target;
                if(!NodeType_O.isMyType[node_cur_Oxygen_node_o2.type.TypeID]) {
                    node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                    edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_Oxygen_node_o2.isMatched
                    && node_cur_Oxygen_node_o2==node_cur_Oxygen_node_o1
                    )
                {
                    node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                    edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_Oxygen_node_o2.isMatchedByEnclosingPattern)
                {
                    node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                    edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                    continue;
                }
                LGSPEdge edge_head_Oxygen_edge__edge1 = node_cur_Oxygen_node_o2.outhead;
                if(edge_head_Oxygen_edge__edge1 != null)
                {
                    LGSPEdge edge_cur_Oxygen_edge__edge1 = edge_head_Oxygen_edge__edge1;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_Oxygen_edge__edge1.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_Oxygen_edge__edge1.target != node_cur_Oxygen_node_o1) {
                            continue;
                        }
                        if(edge_cur_Oxygen_edge__edge1.isMatched
                            && edge_cur_Oxygen_edge__edge1==edge_cur_Oxygen_edge__edge0
                            )
                        {
                            continue;
                        }
                        if(edge_cur_Oxygen_edge__edge1.isMatchedByEnclosingPattern)
                        {
                            continue;
                        }
                        if(openTasks.Count==0)
                        {
                            Stack<LGSPMatch> currentFoundPartialMatch = new Stack<LGSPMatch>();
                            foundPartialMatches.Add(currentFoundPartialMatch);
                            LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[2], new LGSPMatch[0]);
                            match.patternGraph = patternGraph;
                            match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o1] = node_cur_Oxygen_node_o1;
                            match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o2] = node_cur_Oxygen_node_o2;
                            match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge0] = edge_cur_Oxygen_edge__edge0;
                            match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge1] = edge_cur_Oxygen_edge__edge1;
                            currentFoundPartialMatch.Push(match);
                            if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                            {
                                node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                                edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                                openTasks.Push(this);
                                return;
                            }
                            continue;
                        }
                        node_cur_Oxygen_node_o1.isMatchedByEnclosingPattern = true;
                        node_cur_Oxygen_node_o2.isMatchedByEnclosingPattern = true;
                        edge_cur_Oxygen_edge__edge0.isMatchedByEnclosingPattern = true;
                        edge_cur_Oxygen_edge__edge1.isMatchedByEnclosingPattern = true;
                        openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                        if(matchesList.Count>0) {
                            foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                            {
                                LGSPMatch match = new LGSPMatch(new LGSPNode[2], new LGSPEdge[2], new LGSPMatch[0]);
                                match.patternGraph = patternGraph;
                                match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o1] = node_cur_Oxygen_node_o1;
                                match.Nodes[(int)Pattern_Oxygen.Oxygen_NodeNums.@o2] = node_cur_Oxygen_node_o2;
                                match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge0] = edge_cur_Oxygen_edge__edge0;
                                match.Edges[(int)Pattern_Oxygen.Oxygen_EdgeNums.@_edge1] = edge_cur_Oxygen_edge__edge1;
                                currentFoundPartialMatch.Push(match);
                            }
                            if(matchesList==foundPartialMatches) {
                                matchesList = new List<Stack<LGSPMatch>>();
                            } else {
                                foreach(Stack<LGSPMatch> match in matchesList)
                                {
                                    foundPartialMatches.Add(match);
                                }
                                matchesList.Clear();
                            }
                            if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                            {
                                edge_cur_Oxygen_edge__edge1.isMatchedByEnclosingPattern = false;
                                edge_cur_Oxygen_edge__edge0.isMatchedByEnclosingPattern = false;
                                node_cur_Oxygen_node_o2.isMatchedByEnclosingPattern = false;
                                node_cur_Oxygen_node_o1.isMatchedByEnclosingPattern = false;
                                node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                                edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
                                openTasks.Push(this);
                                return;
                            }
                            edge_cur_Oxygen_edge__edge1.isMatchedByEnclosingPattern = false;
                            edge_cur_Oxygen_edge__edge0.isMatchedByEnclosingPattern = false;
                            node_cur_Oxygen_node_o2.isMatchedByEnclosingPattern = false;
                            node_cur_Oxygen_node_o1.isMatchedByEnclosingPattern = false;
                            continue;
                        }
                        node_cur_Oxygen_node_o1.isMatchedByEnclosingPattern = false;
                        node_cur_Oxygen_node_o2.isMatchedByEnclosingPattern = false;
                        edge_cur_Oxygen_edge__edge0.isMatchedByEnclosingPattern = false;
                        edge_cur_Oxygen_edge__edge1.isMatchedByEnclosingPattern = false;
                    }
                    while( (edge_cur_Oxygen_edge__edge1 = edge_cur_Oxygen_edge__edge1.outNext) != edge_head_Oxygen_edge__edge1 );
                }
                node_cur_Oxygen_node_o1.isMatched = node_cur_Oxygen_node_o1_prevIsMatched;
                edge_cur_Oxygen_edge__edge0.isMatched = edge_cur_Oxygen_edge__edge0_prevIsMatched;
            }
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_ToluolCoreThenTriNitro : LGSPSubpatternAction
    {
        public PatternAction_ToluolCoreThenTriNitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_ToluolCoreThenTriNitro.Instance.patternGraph;
        }

        public LGSPNode ToluolCoreThenTriNitro_node_c1;
        public LGSPNode ToluolCoreThenTriNitro_node_c2;
        public LGSPNode ToluolCoreThenTriNitro_node_c3;
        public LGSPNode ToluolCoreThenTriNitro_node_c4;
        public LGSPNode ToluolCoreThenTriNitro_node_c5;
        public LGSPNode ToluolCoreThenTriNitro_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c1 = ToluolCoreThenTriNitro_node_c1;
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c2 = ToluolCoreThenTriNitro_node_c2;
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c3 = ToluolCoreThenTriNitro_node_c3;
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c4 = ToluolCoreThenTriNitro_node_c4;
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c5 = ToluolCoreThenTriNitro_node_c5;
            LGSPNode node_cur_ToluolCoreThenTriNitro_node_c6 = ToluolCoreThenTriNitro_node_c6;
            PatternAction_TriNitro taskFor__subpattern3 = new PatternAction_TriNitro(graph, openTasks);
            taskFor__subpattern3.TriNitro_node_c2 = node_cur_ToluolCoreThenTriNitro_node_c2;
            taskFor__subpattern3.TriNitro_node_c4 = node_cur_ToluolCoreThenTriNitro_node_c4;
            taskFor__subpattern3.TriNitro_node_c6 = node_cur_ToluolCoreThenTriNitro_node_c6;
            openTasks.Push(taskFor__subpattern3);
            PatternAction_Hydrogen taskFor__subpattern2 = new PatternAction_Hydrogen(graph, openTasks);
            taskFor__subpattern2.Hydrogen_node_anchor = node_cur_ToluolCoreThenTriNitro_node_c5;
            openTasks.Push(taskFor__subpattern2);
            PatternAction_Hydrogen taskFor__subpattern1 = new PatternAction_Hydrogen(graph, openTasks);
            taskFor__subpattern1.Hydrogen_node_anchor = node_cur_ToluolCoreThenTriNitro_node_c3;
            openTasks.Push(taskFor__subpattern1);
            PatternAction_Methyl taskFor__subpattern0 = new PatternAction_Methyl(graph, openTasks);
            taskFor__subpattern0.Methyl_node_anchor = node_cur_ToluolCoreThenTriNitro_node_c1;
            openTasks.Push(taskFor__subpattern0);
            node_cur_ToluolCoreThenTriNitro_node_c1.isMatchedByEnclosingPattern = true;
            node_cur_ToluolCoreThenTriNitro_node_c2.isMatchedByEnclosingPattern = true;
            node_cur_ToluolCoreThenTriNitro_node_c3.isMatchedByEnclosingPattern = true;
            node_cur_ToluolCoreThenTriNitro_node_c4.isMatchedByEnclosingPattern = true;
            node_cur_ToluolCoreThenTriNitro_node_c5.isMatchedByEnclosingPattern = true;
            node_cur_ToluolCoreThenTriNitro_node_c6.isMatchedByEnclosingPattern = true;
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
            openTasks.Pop();
            openTasks.Pop();
            openTasks.Pop();
            openTasks.Pop();
            if(matchesList.Count>0) {
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = new LGSPMatch(new LGSPNode[6], new LGSPEdge[0], new LGSPMatch[4]);
                    match.patternGraph = patternGraph;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c1] = node_cur_ToluolCoreThenTriNitro_node_c1;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c2] = node_cur_ToluolCoreThenTriNitro_node_c2;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c3] = node_cur_ToluolCoreThenTriNitro_node_c3;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c4] = node_cur_ToluolCoreThenTriNitro_node_c4;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c5] = node_cur_ToluolCoreThenTriNitro_node_c5;
                    match.Nodes[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_NodeNums.@c6] = node_cur_ToluolCoreThenTriNitro_node_c6;
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_ToluolCoreThenTriNitro.ToluolCoreThenTriNitro_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                    currentFoundPartialMatch.Push(match);
                }
                if(matchesList==foundPartialMatches) {
                    matchesList = new List<Stack<LGSPMatch>>();
                } else {
                    foreach(Stack<LGSPMatch> match in matchesList)
                    {
                        foundPartialMatches.Add(match);
                    }
                    matchesList.Clear();
                }
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    node_cur_ToluolCoreThenTriNitro_node_c6.isMatchedByEnclosingPattern = false;
                    node_cur_ToluolCoreThenTriNitro_node_c5.isMatchedByEnclosingPattern = false;
                    node_cur_ToluolCoreThenTriNitro_node_c4.isMatchedByEnclosingPattern = false;
                    node_cur_ToluolCoreThenTriNitro_node_c3.isMatchedByEnclosingPattern = false;
                    node_cur_ToluolCoreThenTriNitro_node_c2.isMatchedByEnclosingPattern = false;
                    node_cur_ToluolCoreThenTriNitro_node_c1.isMatchedByEnclosingPattern = false;
                    openTasks.Push(this);
                    return;
                }
                node_cur_ToluolCoreThenTriNitro_node_c6.isMatchedByEnclosingPattern = false;
                node_cur_ToluolCoreThenTriNitro_node_c5.isMatchedByEnclosingPattern = false;
                node_cur_ToluolCoreThenTriNitro_node_c4.isMatchedByEnclosingPattern = false;
                node_cur_ToluolCoreThenTriNitro_node_c3.isMatchedByEnclosingPattern = false;
                node_cur_ToluolCoreThenTriNitro_node_c2.isMatchedByEnclosingPattern = false;
                node_cur_ToluolCoreThenTriNitro_node_c1.isMatchedByEnclosingPattern = false;
                openTasks.Push(this);
                return;
            }
            node_cur_ToluolCoreThenTriNitro_node_c1.isMatchedByEnclosingPattern = false;
            node_cur_ToluolCoreThenTriNitro_node_c2.isMatchedByEnclosingPattern = false;
            node_cur_ToluolCoreThenTriNitro_node_c3.isMatchedByEnclosingPattern = false;
            node_cur_ToluolCoreThenTriNitro_node_c4.isMatchedByEnclosingPattern = false;
            node_cur_ToluolCoreThenTriNitro_node_c5.isMatchedByEnclosingPattern = false;
            node_cur_ToluolCoreThenTriNitro_node_c6.isMatchedByEnclosingPattern = false;
            openTasks.Push(this);
            return;
        }
    }

    public class PatternAction_TriNitro : LGSPSubpatternAction
    {
        public PatternAction_TriNitro(LGSPGraph graph_, Stack<LGSPSubpatternAction> openTasks_) {
            graph = graph_; openTasks = openTasks_;
            patternGraph = Pattern_TriNitro.Instance.patternGraph;
        }

        public LGSPNode TriNitro_node_c2;
        public LGSPNode TriNitro_node_c4;
        public LGSPNode TriNitro_node_c6;
        
        public override void myMatch(List<Stack<LGSPMatch>> foundPartialMatches, int maxMatches)
        {
            openTasks.Pop();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            LGSPNode node_cur_TriNitro_node_c2 = TriNitro_node_c2;
            LGSPNode node_cur_TriNitro_node_c4 = TriNitro_node_c4;
            LGSPNode node_cur_TriNitro_node_c6 = TriNitro_node_c6;
            PatternAction_Nitro taskFor__subpattern2 = new PatternAction_Nitro(graph, openTasks);
            taskFor__subpattern2.Nitro_node_anchor = node_cur_TriNitro_node_c6;
            openTasks.Push(taskFor__subpattern2);
            PatternAction_Nitro taskFor__subpattern1 = new PatternAction_Nitro(graph, openTasks);
            taskFor__subpattern1.Nitro_node_anchor = node_cur_TriNitro_node_c4;
            openTasks.Push(taskFor__subpattern1);
            PatternAction_Nitro taskFor__subpattern0 = new PatternAction_Nitro(graph, openTasks);
            taskFor__subpattern0.Nitro_node_anchor = node_cur_TriNitro_node_c2;
            openTasks.Push(taskFor__subpattern0);
            node_cur_TriNitro_node_c2.isMatchedByEnclosingPattern = true;
            node_cur_TriNitro_node_c4.isMatchedByEnclosingPattern = true;
            node_cur_TriNitro_node_c6.isMatchedByEnclosingPattern = true;
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
            openTasks.Pop();
            openTasks.Pop();
            openTasks.Pop();
            if(matchesList.Count>0) {
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = new LGSPMatch(new LGSPNode[3], new LGSPEdge[0], new LGSPMatch[3]);
                    match.patternGraph = patternGraph;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c2] = node_cur_TriNitro_node_c2;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c4] = node_cur_TriNitro_node_c4;
                    match.Nodes[(int)Pattern_TriNitro.TriNitro_NodeNums.@c6] = node_cur_TriNitro_node_c6;
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                    match.EmbeddedGraphs[(int)Pattern_TriNitro.TriNitro_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                    currentFoundPartialMatch.Push(match);
                }
                if(matchesList==foundPartialMatches) {
                    matchesList = new List<Stack<LGSPMatch>>();
                } else {
                    foreach(Stack<LGSPMatch> match in matchesList)
                    {
                        foundPartialMatches.Add(match);
                    }
                    matchesList.Clear();
                }
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    node_cur_TriNitro_node_c6.isMatchedByEnclosingPattern = false;
                    node_cur_TriNitro_node_c4.isMatchedByEnclosingPattern = false;
                    node_cur_TriNitro_node_c2.isMatchedByEnclosingPattern = false;
                    openTasks.Push(this);
                    return;
                }
                node_cur_TriNitro_node_c6.isMatchedByEnclosingPattern = false;
                node_cur_TriNitro_node_c4.isMatchedByEnclosingPattern = false;
                node_cur_TriNitro_node_c2.isMatchedByEnclosingPattern = false;
                openTasks.Push(this);
                return;
            }
            node_cur_TriNitro_node_c2.isMatchedByEnclosingPattern = false;
            node_cur_TriNitro_node_c4.isMatchedByEnclosingPattern = false;
            node_cur_TriNitro_node_c6.isMatchedByEnclosingPattern = false;
            openTasks.Push(this);
            return;
        }
    }

    public class Action_BenzolRing : LGSPAction
    {
        public Action_BenzolRing() {
            rulePattern = Rule_BenzolRing.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 0, 0, 1);
        }

        public override string Name { get { return "BenzolRing"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_BenzolRing instance = new Action_BenzolRing();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            PatternAction_BenzolRing taskFor__subpattern0 = new PatternAction_BenzolRing(graph, openTasks);
            openTasks.Push(taskFor__subpattern0);
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
            openTasks.Pop();
            if(matchesList.Count>0) {
                foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                {
                    LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                    match.patternGraph = rulePattern.patternGraph;
                    match.EmbeddedGraphs[(int)Rule_BenzolRing.BenzolRing_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                    matches.matchesList.PositionWasFilledFixIt();
                }
                matchesList.Clear();
                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                {
                    return matches;
                }
                return matches;
            }
            return matches;
        }
    }

    public class Action_DNT : LGSPAction
    {
        public Action_DNT() {
            rulePattern = Rule_DNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 9, 6);
        }

        public override string Name { get { return "DNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_DNT instance = new Action_DNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int edge_type_id_DNT_edge__edge0 = 1;
            for(LGSPEdge edge_head_DNT_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_DNT_edge__edge0], edge_cur_DNT_edge__edge0 = edge_head_DNT_edge__edge0.typeNext; edge_cur_DNT_edge__edge0 != edge_head_DNT_edge__edge0; edge_cur_DNT_edge__edge0 = edge_cur_DNT_edge__edge0.typeNext)
            {
                bool edge_cur_DNT_edge__edge0_prevIsMatched = edge_cur_DNT_edge__edge0.isMatched;
                edge_cur_DNT_edge__edge0.isMatched = true;
                LGSPNode node_cur_DNT_node_c1 = edge_cur_DNT_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_DNT_node_c1.type.TypeID]) {
                    edge_cur_DNT_edge__edge0.isMatched = edge_cur_DNT_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_DNT_node_c1_prevIsMatched = node_cur_DNT_node_c1.isMatched;
                node_cur_DNT_node_c1.isMatched = true;
                LGSPNode node_cur_DNT_node_c2 = edge_cur_DNT_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_DNT_node_c2.type.TypeID]) {
                    node_cur_DNT_node_c1.isMatched = node_cur_DNT_node_c1_prevIsMatched;
                    edge_cur_DNT_edge__edge0.isMatched = edge_cur_DNT_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_DNT_node_c2.isMatched
                    && node_cur_DNT_node_c2==node_cur_DNT_node_c1
                    )
                {
                    node_cur_DNT_node_c1.isMatched = node_cur_DNT_node_c1_prevIsMatched;
                    edge_cur_DNT_edge__edge0.isMatched = edge_cur_DNT_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_DNT_node_c2_prevIsMatched = node_cur_DNT_node_c2.isMatched;
                node_cur_DNT_node_c2.isMatched = true;
                LGSPEdge edge_head_DNT_edge__edge6 = node_cur_DNT_node_c1.outhead;
                if(edge_head_DNT_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_DNT_edge__edge6 = edge_head_DNT_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_DNT_edge__edge6.target != node_cur_DNT_node_c2) {
                            continue;
                        }
                        if(edge_cur_DNT_edge__edge6.isMatched
                            && edge_cur_DNT_edge__edge6==edge_cur_DNT_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_DNT_edge__edge6_prevIsMatched = edge_cur_DNT_edge__edge6.isMatched;
                        edge_cur_DNT_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_DNT_edge__edge1 = node_cur_DNT_node_c2.outhead;
                        if(edge_head_DNT_edge__edge1 != null)
                        {
                            LGSPEdge edge_cur_DNT_edge__edge1 = edge_head_DNT_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_DNT_edge__edge1.isMatched
                                    && (edge_cur_DNT_edge__edge1==edge_cur_DNT_edge__edge0
                                        || edge_cur_DNT_edge__edge1==edge_cur_DNT_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_DNT_edge__edge1_prevIsMatched = edge_cur_DNT_edge__edge1.isMatched;
                                edge_cur_DNT_edge__edge1.isMatched = true;
                                LGSPNode node_cur_DNT_node_c3 = edge_cur_DNT_edge__edge1.target;
                                if(!NodeType_C.isMyType[node_cur_DNT_node_c3.type.TypeID]) {
                                    edge_cur_DNT_edge__edge1.isMatched = edge_cur_DNT_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_DNT_node_c3.isMatched
                                    && (node_cur_DNT_node_c3==node_cur_DNT_node_c1
                                        || node_cur_DNT_node_c3==node_cur_DNT_node_c2
                                        )
                                    )
                                {
                                    edge_cur_DNT_edge__edge1.isMatched = edge_cur_DNT_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_DNT_node_c3_prevIsMatched = node_cur_DNT_node_c3.isMatched;
                                node_cur_DNT_node_c3.isMatched = true;
                                LGSPEdge edge_head_DNT_edge__edge2 = node_cur_DNT_node_c3.outhead;
                                if(edge_head_DNT_edge__edge2 != null)
                                {
                                    LGSPEdge edge_cur_DNT_edge__edge2 = edge_head_DNT_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_DNT_edge__edge2.isMatched
                                            && (edge_cur_DNT_edge__edge2==edge_cur_DNT_edge__edge0
                                                || edge_cur_DNT_edge__edge2==edge_cur_DNT_edge__edge6
                                                || edge_cur_DNT_edge__edge2==edge_cur_DNT_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_DNT_edge__edge2_prevIsMatched = edge_cur_DNT_edge__edge2.isMatched;
                                        edge_cur_DNT_edge__edge2.isMatched = true;
                                        LGSPNode node_cur_DNT_node_c4 = edge_cur_DNT_edge__edge2.target;
                                        if(!NodeType_C.isMyType[node_cur_DNT_node_c4.type.TypeID]) {
                                            edge_cur_DNT_edge__edge2.isMatched = edge_cur_DNT_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_DNT_node_c4.isMatched
                                            && (node_cur_DNT_node_c4==node_cur_DNT_node_c1
                                                || node_cur_DNT_node_c4==node_cur_DNT_node_c2
                                                || node_cur_DNT_node_c4==node_cur_DNT_node_c3
                                                )
                                            )
                                        {
                                            edge_cur_DNT_edge__edge2.isMatched = edge_cur_DNT_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_DNT_node_c4_prevIsMatched = node_cur_DNT_node_c4.isMatched;
                                        node_cur_DNT_node_c4.isMatched = true;
                                        LGSPEdge edge_head_DNT_edge__edge7 = node_cur_DNT_node_c3.outhead;
                                        if(edge_head_DNT_edge__edge7 != null)
                                        {
                                            LGSPEdge edge_cur_DNT_edge__edge7 = edge_head_DNT_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_DNT_edge__edge7.target != node_cur_DNT_node_c4) {
                                                    continue;
                                                }
                                                if(edge_cur_DNT_edge__edge7.isMatched
                                                    && (edge_cur_DNT_edge__edge7==edge_cur_DNT_edge__edge0
                                                        || edge_cur_DNT_edge__edge7==edge_cur_DNT_edge__edge6
                                                        || edge_cur_DNT_edge__edge7==edge_cur_DNT_edge__edge1
                                                        || edge_cur_DNT_edge__edge7==edge_cur_DNT_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_DNT_edge__edge7_prevIsMatched = edge_cur_DNT_edge__edge7.isMatched;
                                                edge_cur_DNT_edge__edge7.isMatched = true;
                                                LGSPEdge edge_head_DNT_edge__edge3 = node_cur_DNT_node_c4.outhead;
                                                if(edge_head_DNT_edge__edge3 != null)
                                                {
                                                    LGSPEdge edge_cur_DNT_edge__edge3 = edge_head_DNT_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_DNT_edge__edge3.isMatched
                                                            && (edge_cur_DNT_edge__edge3==edge_cur_DNT_edge__edge0
                                                                || edge_cur_DNT_edge__edge3==edge_cur_DNT_edge__edge6
                                                                || edge_cur_DNT_edge__edge3==edge_cur_DNT_edge__edge1
                                                                || edge_cur_DNT_edge__edge3==edge_cur_DNT_edge__edge2
                                                                || edge_cur_DNT_edge__edge3==edge_cur_DNT_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_DNT_edge__edge3_prevIsMatched = edge_cur_DNT_edge__edge3.isMatched;
                                                        edge_cur_DNT_edge__edge3.isMatched = true;
                                                        LGSPNode node_cur_DNT_node_c5 = edge_cur_DNT_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[node_cur_DNT_node_c5.type.TypeID]) {
                                                            edge_cur_DNT_edge__edge3.isMatched = edge_cur_DNT_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_DNT_node_c5.isMatched
                                                            && (node_cur_DNT_node_c5==node_cur_DNT_node_c1
                                                                || node_cur_DNT_node_c5==node_cur_DNT_node_c2
                                                                || node_cur_DNT_node_c5==node_cur_DNT_node_c3
                                                                || node_cur_DNT_node_c5==node_cur_DNT_node_c4
                                                                )
                                                            )
                                                        {
                                                            edge_cur_DNT_edge__edge3.isMatched = edge_cur_DNT_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_DNT_node_c5_prevIsMatched = node_cur_DNT_node_c5.isMatched;
                                                        node_cur_DNT_node_c5.isMatched = true;
                                                        LGSPEdge edge_head_DNT_edge__edge4 = node_cur_DNT_node_c5.outhead;
                                                        if(edge_head_DNT_edge__edge4 != null)
                                                        {
                                                            LGSPEdge edge_cur_DNT_edge__edge4 = edge_head_DNT_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_DNT_edge__edge4.isMatched
                                                                    && (edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge0
                                                                        || edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge6
                                                                        || edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge1
                                                                        || edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge2
                                                                        || edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge7
                                                                        || edge_cur_DNT_edge__edge4==edge_cur_DNT_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_DNT_edge__edge4_prevIsMatched = edge_cur_DNT_edge__edge4.isMatched;
                                                                edge_cur_DNT_edge__edge4.isMatched = true;
                                                                LGSPNode node_cur_DNT_node_c6 = edge_cur_DNT_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[node_cur_DNT_node_c6.type.TypeID]) {
                                                                    edge_cur_DNT_edge__edge4.isMatched = edge_cur_DNT_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_DNT_node_c6.isMatched
                                                                    && (node_cur_DNT_node_c6==node_cur_DNT_node_c1
                                                                        || node_cur_DNT_node_c6==node_cur_DNT_node_c2
                                                                        || node_cur_DNT_node_c6==node_cur_DNT_node_c3
                                                                        || node_cur_DNT_node_c6==node_cur_DNT_node_c4
                                                                        || node_cur_DNT_node_c6==node_cur_DNT_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    edge_cur_DNT_edge__edge4.isMatched = edge_cur_DNT_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                LGSPEdge edge_head_DNT_edge__edge8 = node_cur_DNT_node_c5.outhead;
                                                                if(edge_head_DNT_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge edge_cur_DNT_edge__edge8 = edge_head_DNT_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_DNT_edge__edge8.target != node_cur_DNT_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_DNT_edge__edge8.isMatched
                                                                            && (edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge0
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge6
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge1
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge2
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge7
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge3
                                                                                || edge_cur_DNT_edge__edge8==edge_cur_DNT_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_DNT_edge__edge8_prevIsMatched = edge_cur_DNT_edge__edge8.isMatched;
                                                                        edge_cur_DNT_edge__edge8.isMatched = true;
                                                                        LGSPEdge edge_head_DNT_edge__edge5 = node_cur_DNT_node_c6.outhead;
                                                                        if(edge_head_DNT_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_DNT_edge__edge5 = edge_head_DNT_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNT_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_DNT_edge__edge5.target != node_cur_DNT_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_DNT_edge__edge5.isMatched
                                                                                    && (edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge0
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge6
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge1
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge2
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge7
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge3
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge4
                                                                                        || edge_cur_DNT_edge__edge5==edge_cur_DNT_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                PatternAction_Hydrogen taskFor__subpattern5 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern5.Hydrogen_node_anchor = node_cur_DNT_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = node_cur_DNT_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                PatternAction_Nitro taskFor__subpattern3 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = node_cur_DNT_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = node_cur_DNT_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                PatternAction_Nitro taskFor__subpattern1 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = node_cur_DNT_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                PatternAction_Methyl taskFor__subpattern0 = new PatternAction_Methyl(graph, openTasks);
                                                                                taskFor__subpattern0.Methyl_node_anchor = node_cur_DNT_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                node_cur_DNT_node_c1.isMatchedByEnclosingPattern = true;
                                                                                node_cur_DNT_node_c2.isMatchedByEnclosingPattern = true;
                                                                                node_cur_DNT_node_c3.isMatchedByEnclosingPattern = true;
                                                                                node_cur_DNT_node_c4.isMatchedByEnclosingPattern = true;
                                                                                node_cur_DNT_node_c5.isMatchedByEnclosingPattern = true;
                                                                                node_cur_DNT_node_c6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_DNT_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                if(matchesList.Count>0) {
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c1] = node_cur_DNT_node_c1;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c2] = node_cur_DNT_node_c2;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c3] = node_cur_DNT_node_c3;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c4] = node_cur_DNT_node_c4;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c5] = node_cur_DNT_node_c5;
                                                                                        match.Nodes[(int)Rule_DNT.DNT_NodeNums.@c6] = node_cur_DNT_node_c6;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge0] = edge_cur_DNT_edge__edge0;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge1] = edge_cur_DNT_edge__edge1;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge2] = edge_cur_DNT_edge__edge2;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge3] = edge_cur_DNT_edge__edge3;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge4] = edge_cur_DNT_edge__edge4;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge5] = edge_cur_DNT_edge__edge5;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge6] = edge_cur_DNT_edge__edge6;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge7] = edge_cur_DNT_edge__edge7;
                                                                                        match.Edges[(int)Rule_DNT.DNT_EdgeNums.@_edge8] = edge_cur_DNT_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_DNT.DNT_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        edge_cur_DNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_DNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_DNT_edge__edge8.isMatched = edge_cur_DNT_edge__edge8_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge4.isMatched = edge_cur_DNT_edge__edge4_prevIsMatched;
                                                                                        node_cur_DNT_node_c5.isMatched = node_cur_DNT_node_c5_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge3.isMatched = edge_cur_DNT_edge__edge3_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge7.isMatched = edge_cur_DNT_edge__edge7_prevIsMatched;
                                                                                        node_cur_DNT_node_c4.isMatched = node_cur_DNT_node_c4_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge2.isMatched = edge_cur_DNT_edge__edge2_prevIsMatched;
                                                                                        node_cur_DNT_node_c3.isMatched = node_cur_DNT_node_c3_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge1.isMatched = edge_cur_DNT_edge__edge1_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge6.isMatched = edge_cur_DNT_edge__edge6_prevIsMatched;
                                                                                        node_cur_DNT_node_c2.isMatched = node_cur_DNT_node_c2_prevIsMatched;
                                                                                        node_cur_DNT_node_c1.isMatched = node_cur_DNT_node_c1_prevIsMatched;
                                                                                        edge_cur_DNT_edge__edge0.isMatched = edge_cur_DNT_edge__edge0_prevIsMatched;
                                                                                        return matches;
                                                                                    }
                                                                                    edge_cur_DNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_DNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_DNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    continue;
                                                                                }
                                                                                node_cur_DNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                node_cur_DNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                node_cur_DNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                node_cur_DNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                node_cur_DNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                node_cur_DNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_DNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                            }
                                                                            while( (edge_cur_DNT_edge__edge5 = edge_cur_DNT_edge__edge5.outNext) != edge_head_DNT_edge__edge5 );
                                                                        }
                                                                        edge_cur_DNT_edge__edge8.isMatched = edge_cur_DNT_edge__edge8_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_DNT_edge__edge8 = edge_cur_DNT_edge__edge8.outNext) != edge_head_DNT_edge__edge8 );
                                                                }
                                                                edge_cur_DNT_edge__edge4.isMatched = edge_cur_DNT_edge__edge4_prevIsMatched;
                                                            }
                                                            while( (edge_cur_DNT_edge__edge4 = edge_cur_DNT_edge__edge4.outNext) != edge_head_DNT_edge__edge4 );
                                                        }
                                                        node_cur_DNT_node_c5.isMatched = node_cur_DNT_node_c5_prevIsMatched;
                                                        edge_cur_DNT_edge__edge3.isMatched = edge_cur_DNT_edge__edge3_prevIsMatched;
                                                    }
                                                    while( (edge_cur_DNT_edge__edge3 = edge_cur_DNT_edge__edge3.outNext) != edge_head_DNT_edge__edge3 );
                                                }
                                                edge_cur_DNT_edge__edge7.isMatched = edge_cur_DNT_edge__edge7_prevIsMatched;
                                            }
                                            while( (edge_cur_DNT_edge__edge7 = edge_cur_DNT_edge__edge7.outNext) != edge_head_DNT_edge__edge7 );
                                        }
                                        node_cur_DNT_node_c4.isMatched = node_cur_DNT_node_c4_prevIsMatched;
                                        edge_cur_DNT_edge__edge2.isMatched = edge_cur_DNT_edge__edge2_prevIsMatched;
                                    }
                                    while( (edge_cur_DNT_edge__edge2 = edge_cur_DNT_edge__edge2.outNext) != edge_head_DNT_edge__edge2 );
                                }
                                node_cur_DNT_node_c3.isMatched = node_cur_DNT_node_c3_prevIsMatched;
                                edge_cur_DNT_edge__edge1.isMatched = edge_cur_DNT_edge__edge1_prevIsMatched;
                            }
                            while( (edge_cur_DNT_edge__edge1 = edge_cur_DNT_edge__edge1.outNext) != edge_head_DNT_edge__edge1 );
                        }
                        edge_cur_DNT_edge__edge6.isMatched = edge_cur_DNT_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_DNT_edge__edge6 = edge_cur_DNT_edge__edge6.outNext) != edge_head_DNT_edge__edge6 );
                }
                node_cur_DNT_node_c2.isMatched = node_cur_DNT_node_c2_prevIsMatched;
                node_cur_DNT_node_c1.isMatched = node_cur_DNT_node_c1_prevIsMatched;
                edge_cur_DNT_edge__edge0.isMatched = edge_cur_DNT_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_DNTUnfolded : LGSPAction
    {
        public Action_DNTUnfolded() {
            rulePattern = Rule_DNTUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 19, 22, 0);
        }

        public override string Name { get { return "DNTUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_DNTUnfolded instance = new Action_DNTUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            int edge_type_id_DNTUnfolded_edge__edge0 = 1;
            for(LGSPEdge edge_head_DNTUnfolded_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_DNTUnfolded_edge__edge0], edge_cur_DNTUnfolded_edge__edge0 = edge_head_DNTUnfolded_edge__edge0.typeNext; edge_cur_DNTUnfolded_edge__edge0 != edge_head_DNTUnfolded_edge__edge0; edge_cur_DNTUnfolded_edge__edge0 = edge_cur_DNTUnfolded_edge__edge0.typeNext)
            {
                bool edge_cur_DNTUnfolded_edge__edge0_prevIsMatched = edge_cur_DNTUnfolded_edge__edge0.isMatched;
                edge_cur_DNTUnfolded_edge__edge0.isMatched = true;
                LGSPNode node_cur_DNTUnfolded_node_c1 = edge_cur_DNTUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c1.type.TypeID]) {
                    edge_cur_DNTUnfolded_edge__edge0.isMatched = edge_cur_DNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_DNTUnfolded_node_c1_prevIsMatched = node_cur_DNTUnfolded_node_c1.isMatched;
                node_cur_DNTUnfolded_node_c1.isMatched = true;
                LGSPNode node_cur_DNTUnfolded_node_c2 = edge_cur_DNTUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c2.type.TypeID]) {
                    node_cur_DNTUnfolded_node_c1.isMatched = node_cur_DNTUnfolded_node_c1_prevIsMatched;
                    edge_cur_DNTUnfolded_edge__edge0.isMatched = edge_cur_DNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_DNTUnfolded_node_c2.isMatched
                    && node_cur_DNTUnfolded_node_c2==node_cur_DNTUnfolded_node_c1
                    )
                {
                    node_cur_DNTUnfolded_node_c1.isMatched = node_cur_DNTUnfolded_node_c1_prevIsMatched;
                    edge_cur_DNTUnfolded_edge__edge0.isMatched = edge_cur_DNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_DNTUnfolded_node_c2_prevIsMatched = node_cur_DNTUnfolded_node_c2.isMatched;
                node_cur_DNTUnfolded_node_c2.isMatched = true;
                LGSPEdge edge_head_DNTUnfolded_edge__edge6 = node_cur_DNTUnfolded_node_c1.outhead;
                if(edge_head_DNTUnfolded_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_DNTUnfolded_edge__edge6 = edge_head_DNTUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_DNTUnfolded_edge__edge6.target != node_cur_DNTUnfolded_node_c2) {
                            continue;
                        }
                        if(edge_cur_DNTUnfolded_edge__edge6.isMatched
                            && edge_cur_DNTUnfolded_edge__edge6==edge_cur_DNTUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_DNTUnfolded_edge__edge6_prevIsMatched = edge_cur_DNTUnfolded_edge__edge6.isMatched;
                        edge_cur_DNTUnfolded_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_DNTUnfolded_edge__edge9 = node_cur_DNTUnfolded_node_c1.outhead;
                        if(edge_head_DNTUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge edge_cur_DNTUnfolded_edge__edge9 = edge_head_DNTUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_DNTUnfolded_edge__edge9.isMatched
                                    && (edge_cur_DNTUnfolded_edge__edge9==edge_cur_DNTUnfolded_edge__edge0
                                        || edge_cur_DNTUnfolded_edge__edge9==edge_cur_DNTUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_DNTUnfolded_edge__edge9_prevIsMatched = edge_cur_DNTUnfolded_edge__edge9.isMatched;
                                edge_cur_DNTUnfolded_edge__edge9.isMatched = true;
                                LGSPNode node_cur_DNTUnfolded_node_c = edge_cur_DNTUnfolded_edge__edge9.target;
                                if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c.type.TypeID]) {
                                    edge_cur_DNTUnfolded_edge__edge9.isMatched = edge_cur_DNTUnfolded_edge__edge9_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_DNTUnfolded_node_c.isMatched
                                    && (node_cur_DNTUnfolded_node_c==node_cur_DNTUnfolded_node_c1
                                        || node_cur_DNTUnfolded_node_c==node_cur_DNTUnfolded_node_c2
                                        )
                                    )
                                {
                                    edge_cur_DNTUnfolded_edge__edge9.isMatched = edge_cur_DNTUnfolded_edge__edge9_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_DNTUnfolded_node_c_prevIsMatched = node_cur_DNTUnfolded_node_c.isMatched;
                                node_cur_DNTUnfolded_node_c.isMatched = true;
                                LGSPEdge edge_head_DNTUnfolded_edge__edge1 = node_cur_DNTUnfolded_node_c2.outhead;
                                if(edge_head_DNTUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge1 = edge_head_DNTUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_DNTUnfolded_edge__edge1.isMatched
                                            && (edge_cur_DNTUnfolded_edge__edge1==edge_cur_DNTUnfolded_edge__edge0
                                                || edge_cur_DNTUnfolded_edge__edge1==edge_cur_DNTUnfolded_edge__edge6
                                                || edge_cur_DNTUnfolded_edge__edge1==edge_cur_DNTUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_DNTUnfolded_edge__edge1_prevIsMatched = edge_cur_DNTUnfolded_edge__edge1.isMatched;
                                        edge_cur_DNTUnfolded_edge__edge1.isMatched = true;
                                        LGSPNode node_cur_DNTUnfolded_node_c3 = edge_cur_DNTUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c3.type.TypeID]) {
                                            edge_cur_DNTUnfolded_edge__edge1.isMatched = edge_cur_DNTUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_DNTUnfolded_node_c3.isMatched
                                            && (node_cur_DNTUnfolded_node_c3==node_cur_DNTUnfolded_node_c1
                                                || node_cur_DNTUnfolded_node_c3==node_cur_DNTUnfolded_node_c2
                                                || node_cur_DNTUnfolded_node_c3==node_cur_DNTUnfolded_node_c
                                                )
                                            )
                                        {
                                            edge_cur_DNTUnfolded_edge__edge1.isMatched = edge_cur_DNTUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_DNTUnfolded_node_c3_prevIsMatched = node_cur_DNTUnfolded_node_c3.isMatched;
                                        node_cur_DNTUnfolded_node_c3.isMatched = true;
                                        LGSPEdge edge_head_DNTUnfolded_edge__edge13 = node_cur_DNTUnfolded_node_c2.outhead;
                                        if(edge_head_DNTUnfolded_edge__edge13 != null)
                                        {
                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge13 = edge_head_DNTUnfolded_edge__edge13;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge13.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_DNTUnfolded_edge__edge13.isMatched
                                                    && (edge_cur_DNTUnfolded_edge__edge13==edge_cur_DNTUnfolded_edge__edge0
                                                        || edge_cur_DNTUnfolded_edge__edge13==edge_cur_DNTUnfolded_edge__edge6
                                                        || edge_cur_DNTUnfolded_edge__edge13==edge_cur_DNTUnfolded_edge__edge9
                                                        || edge_cur_DNTUnfolded_edge__edge13==edge_cur_DNTUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_DNTUnfolded_edge__edge13_prevIsMatched = edge_cur_DNTUnfolded_edge__edge13.isMatched;
                                                edge_cur_DNTUnfolded_edge__edge13.isMatched = true;
                                                LGSPNode node_cur_DNTUnfolded_node_n2 = edge_cur_DNTUnfolded_edge__edge13.target;
                                                if(!NodeType_N.isMyType[node_cur_DNTUnfolded_node_n2.type.TypeID]) {
                                                    edge_cur_DNTUnfolded_edge__edge13.isMatched = edge_cur_DNTUnfolded_edge__edge13_prevIsMatched;
                                                    continue;
                                                }
                                                bool node_cur_DNTUnfolded_node_n2_prevIsMatched = node_cur_DNTUnfolded_node_n2.isMatched;
                                                node_cur_DNTUnfolded_node_n2.isMatched = true;
                                                LGSPEdge edge_head_DNTUnfolded_edge__edge10 = node_cur_DNTUnfolded_node_c.outhead;
                                                if(edge_head_DNTUnfolded_edge__edge10 != null)
                                                {
                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge10 = edge_head_DNTUnfolded_edge__edge10;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge10.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_DNTUnfolded_edge__edge10.isMatched
                                                            && (edge_cur_DNTUnfolded_edge__edge10==edge_cur_DNTUnfolded_edge__edge0
                                                                || edge_cur_DNTUnfolded_edge__edge10==edge_cur_DNTUnfolded_edge__edge6
                                                                || edge_cur_DNTUnfolded_edge__edge10==edge_cur_DNTUnfolded_edge__edge9
                                                                || edge_cur_DNTUnfolded_edge__edge10==edge_cur_DNTUnfolded_edge__edge1
                                                                || edge_cur_DNTUnfolded_edge__edge10==edge_cur_DNTUnfolded_edge__edge13
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_DNTUnfolded_edge__edge10_prevIsMatched = edge_cur_DNTUnfolded_edge__edge10.isMatched;
                                                        edge_cur_DNTUnfolded_edge__edge10.isMatched = true;
                                                        LGSPNode node_cur_DNTUnfolded_node__node0 = edge_cur_DNTUnfolded_edge__edge10.target;
                                                        if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node0.type.TypeID]) {
                                                            edge_cur_DNTUnfolded_edge__edge10.isMatched = edge_cur_DNTUnfolded_edge__edge10_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_DNTUnfolded_node__node0_prevIsMatched = node_cur_DNTUnfolded_node__node0.isMatched;
                                                        node_cur_DNTUnfolded_node__node0.isMatched = true;
                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge11 = node_cur_DNTUnfolded_node_c.outhead;
                                                        if(edge_head_DNTUnfolded_edge__edge11 != null)
                                                        {
                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge11 = edge_head_DNTUnfolded_edge__edge11;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge11.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_DNTUnfolded_edge__edge11.isMatched
                                                                    && (edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge0
                                                                        || edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge6
                                                                        || edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge9
                                                                        || edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge1
                                                                        || edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge13
                                                                        || edge_cur_DNTUnfolded_edge__edge11==edge_cur_DNTUnfolded_edge__edge10
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_DNTUnfolded_edge__edge11_prevIsMatched = edge_cur_DNTUnfolded_edge__edge11.isMatched;
                                                                edge_cur_DNTUnfolded_edge__edge11.isMatched = true;
                                                                LGSPNode node_cur_DNTUnfolded_node__node1 = edge_cur_DNTUnfolded_edge__edge11.target;
                                                                if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node1.type.TypeID]) {
                                                                    edge_cur_DNTUnfolded_edge__edge11.isMatched = edge_cur_DNTUnfolded_edge__edge11_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_DNTUnfolded_node__node1.isMatched
                                                                    && node_cur_DNTUnfolded_node__node1==node_cur_DNTUnfolded_node__node0
                                                                    )
                                                                {
                                                                    edge_cur_DNTUnfolded_edge__edge11.isMatched = edge_cur_DNTUnfolded_edge__edge11_prevIsMatched;
                                                                    continue;
                                                                }
                                                                bool node_cur_DNTUnfolded_node__node1_prevIsMatched = node_cur_DNTUnfolded_node__node1.isMatched;
                                                                node_cur_DNTUnfolded_node__node1.isMatched = true;
                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge12 = node_cur_DNTUnfolded_node_c.outhead;
                                                                if(edge_head_DNTUnfolded_edge__edge12 != null)
                                                                {
                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge12 = edge_head_DNTUnfolded_edge__edge12;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge12.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_DNTUnfolded_edge__edge12.isMatched
                                                                            && (edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge0
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge6
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge9
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge1
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge13
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge10
                                                                                || edge_cur_DNTUnfolded_edge__edge12==edge_cur_DNTUnfolded_edge__edge11
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_DNTUnfolded_edge__edge12_prevIsMatched = edge_cur_DNTUnfolded_edge__edge12.isMatched;
                                                                        edge_cur_DNTUnfolded_edge__edge12.isMatched = true;
                                                                        LGSPNode node_cur_DNTUnfolded_node__node2 = edge_cur_DNTUnfolded_edge__edge12.target;
                                                                        if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node2.type.TypeID]) {
                                                                            edge_cur_DNTUnfolded_edge__edge12.isMatched = edge_cur_DNTUnfolded_edge__edge12_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        if(node_cur_DNTUnfolded_node__node2.isMatched
                                                                            && (node_cur_DNTUnfolded_node__node2==node_cur_DNTUnfolded_node__node0
                                                                                || node_cur_DNTUnfolded_node__node2==node_cur_DNTUnfolded_node__node1
                                                                                )
                                                                            )
                                                                        {
                                                                            edge_cur_DNTUnfolded_edge__edge12.isMatched = edge_cur_DNTUnfolded_edge__edge12_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        bool node_cur_DNTUnfolded_node__node2_prevIsMatched = node_cur_DNTUnfolded_node__node2.isMatched;
                                                                        node_cur_DNTUnfolded_node__node2.isMatched = true;
                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge2 = node_cur_DNTUnfolded_node_c3.outhead;
                                                                        if(edge_head_DNTUnfolded_edge__edge2 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge2 = edge_head_DNTUnfolded_edge__edge2;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge2.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_DNTUnfolded_edge__edge2.isMatched
                                                                                    && (edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge0
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge6
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge9
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge1
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge13
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge10
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge11
                                                                                        || edge_cur_DNTUnfolded_edge__edge2==edge_cur_DNTUnfolded_edge__edge12
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                bool edge_cur_DNTUnfolded_edge__edge2_prevIsMatched = edge_cur_DNTUnfolded_edge__edge2.isMatched;
                                                                                edge_cur_DNTUnfolded_edge__edge2.isMatched = true;
                                                                                LGSPNode node_cur_DNTUnfolded_node_c4 = edge_cur_DNTUnfolded_edge__edge2.target;
                                                                                if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c4.type.TypeID]) {
                                                                                    edge_cur_DNTUnfolded_edge__edge2.isMatched = edge_cur_DNTUnfolded_edge__edge2_prevIsMatched;
                                                                                    continue;
                                                                                }
                                                                                if(node_cur_DNTUnfolded_node_c4.isMatched
                                                                                    && (node_cur_DNTUnfolded_node_c4==node_cur_DNTUnfolded_node_c1
                                                                                        || node_cur_DNTUnfolded_node_c4==node_cur_DNTUnfolded_node_c2
                                                                                        || node_cur_DNTUnfolded_node_c4==node_cur_DNTUnfolded_node_c
                                                                                        || node_cur_DNTUnfolded_node_c4==node_cur_DNTUnfolded_node_c3
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    edge_cur_DNTUnfolded_edge__edge2.isMatched = edge_cur_DNTUnfolded_edge__edge2_prevIsMatched;
                                                                                    continue;
                                                                                }
                                                                                bool node_cur_DNTUnfolded_node_c4_prevIsMatched = node_cur_DNTUnfolded_node_c4.isMatched;
                                                                                node_cur_DNTUnfolded_node_c4.isMatched = true;
                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge7 = node_cur_DNTUnfolded_node_c3.outhead;
                                                                                if(edge_head_DNTUnfolded_edge__edge7 != null)
                                                                                {
                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge7 = edge_head_DNTUnfolded_edge__edge7;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge7.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if(edge_cur_DNTUnfolded_edge__edge7.target != node_cur_DNTUnfolded_node_c4) {
                                                                                            continue;
                                                                                        }
                                                                                        if(edge_cur_DNTUnfolded_edge__edge7.isMatched
                                                                                            && (edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge0
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge6
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge9
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge1
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge13
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge10
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge11
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge12
                                                                                                || edge_cur_DNTUnfolded_edge__edge7==edge_cur_DNTUnfolded_edge__edge2
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        bool edge_cur_DNTUnfolded_edge__edge7_prevIsMatched = edge_cur_DNTUnfolded_edge__edge7.isMatched;
                                                                                        edge_cur_DNTUnfolded_edge__edge7.isMatched = true;
                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge16 = node_cur_DNTUnfolded_node_c3.outhead;
                                                                                        if(edge_head_DNTUnfolded_edge__edge16 != null)
                                                                                        {
                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge16 = edge_head_DNTUnfolded_edge__edge16;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge16.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if(edge_cur_DNTUnfolded_edge__edge16.isMatched
                                                                                                    && (edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge0
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge6
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge9
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge1
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge13
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge10
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge11
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge12
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge2
                                                                                                        || edge_cur_DNTUnfolded_edge__edge16==edge_cur_DNTUnfolded_edge__edge7
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                bool edge_cur_DNTUnfolded_edge__edge16_prevIsMatched = edge_cur_DNTUnfolded_edge__edge16.isMatched;
                                                                                                edge_cur_DNTUnfolded_edge__edge16.isMatched = true;
                                                                                                LGSPNode node_cur_DNTUnfolded_node__node5 = edge_cur_DNTUnfolded_edge__edge16.target;
                                                                                                if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node5.type.TypeID]) {
                                                                                                    edge_cur_DNTUnfolded_edge__edge16.isMatched = edge_cur_DNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                if(node_cur_DNTUnfolded_node__node5.isMatched
                                                                                                    && (node_cur_DNTUnfolded_node__node5==node_cur_DNTUnfolded_node__node0
                                                                                                        || node_cur_DNTUnfolded_node__node5==node_cur_DNTUnfolded_node__node1
                                                                                                        || node_cur_DNTUnfolded_node__node5==node_cur_DNTUnfolded_node__node2
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    edge_cur_DNTUnfolded_edge__edge16.isMatched = edge_cur_DNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                bool node_cur_DNTUnfolded_node__node5_prevIsMatched = node_cur_DNTUnfolded_node__node5.isMatched;
                                                                                                node_cur_DNTUnfolded_node__node5.isMatched = true;
                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge14 = node_cur_DNTUnfolded_node_n2.outhead;
                                                                                                if(edge_head_DNTUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge14 = edge_head_DNTUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if(edge_cur_DNTUnfolded_edge__edge14.isMatched
                                                                                                            && (edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                || edge_cur_DNTUnfolded_edge__edge14==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool edge_cur_DNTUnfolded_edge__edge14_prevIsMatched = edge_cur_DNTUnfolded_edge__edge14.isMatched;
                                                                                                        edge_cur_DNTUnfolded_edge__edge14.isMatched = true;
                                                                                                        LGSPNode node_cur_DNTUnfolded_node__node3 = edge_cur_DNTUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_O.isMyType[node_cur_DNTUnfolded_node__node3.type.TypeID]) {
                                                                                                            edge_cur_DNTUnfolded_edge__edge14.isMatched = edge_cur_DNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool node_cur_DNTUnfolded_node__node3_prevIsMatched = node_cur_DNTUnfolded_node__node3.isMatched;
                                                                                                        node_cur_DNTUnfolded_node__node3.isMatched = true;
                                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge15 = node_cur_DNTUnfolded_node_n2.outhead;
                                                                                                        if(edge_head_DNTUnfolded_edge__edge15 != null)
                                                                                                        {
                                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge15 = edge_head_DNTUnfolded_edge__edge15;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(edge_cur_DNTUnfolded_edge__edge15.isMatched
                                                                                                                    && (edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                        || edge_cur_DNTUnfolded_edge__edge15==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                bool edge_cur_DNTUnfolded_edge__edge15_prevIsMatched = edge_cur_DNTUnfolded_edge__edge15.isMatched;
                                                                                                                edge_cur_DNTUnfolded_edge__edge15.isMatched = true;
                                                                                                                LGSPNode node_cur_DNTUnfolded_node__node4 = edge_cur_DNTUnfolded_edge__edge15.target;
                                                                                                                if(!NodeType_O.isMyType[node_cur_DNTUnfolded_node__node4.type.TypeID]) {
                                                                                                                    edge_cur_DNTUnfolded_edge__edge15.isMatched = edge_cur_DNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(node_cur_DNTUnfolded_node__node4.isMatched
                                                                                                                    && node_cur_DNTUnfolded_node__node4==node_cur_DNTUnfolded_node__node3
                                                                                                                    )
                                                                                                                {
                                                                                                                    edge_cur_DNTUnfolded_edge__edge15.isMatched = edge_cur_DNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                bool node_cur_DNTUnfolded_node__node4_prevIsMatched = node_cur_DNTUnfolded_node__node4.isMatched;
                                                                                                                node_cur_DNTUnfolded_node__node4.isMatched = true;
                                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge3 = node_cur_DNTUnfolded_node_c4.outhead;
                                                                                                                if(edge_head_DNTUnfolded_edge__edge3 != null)
                                                                                                                {
                                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge3 = edge_head_DNTUnfolded_edge__edge3;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge3.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(edge_cur_DNTUnfolded_edge__edge3.isMatched
                                                                                                                            && (edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                || edge_cur_DNTUnfolded_edge__edge3==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        bool edge_cur_DNTUnfolded_edge__edge3_prevIsMatched = edge_cur_DNTUnfolded_edge__edge3.isMatched;
                                                                                                                        edge_cur_DNTUnfolded_edge__edge3.isMatched = true;
                                                                                                                        LGSPNode node_cur_DNTUnfolded_node_c5 = edge_cur_DNTUnfolded_edge__edge3.target;
                                                                                                                        if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c5.type.TypeID]) {
                                                                                                                            edge_cur_DNTUnfolded_edge__edge3.isMatched = edge_cur_DNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(node_cur_DNTUnfolded_node_c5.isMatched
                                                                                                                            && (node_cur_DNTUnfolded_node_c5==node_cur_DNTUnfolded_node_c1
                                                                                                                                || node_cur_DNTUnfolded_node_c5==node_cur_DNTUnfolded_node_c2
                                                                                                                                || node_cur_DNTUnfolded_node_c5==node_cur_DNTUnfolded_node_c
                                                                                                                                || node_cur_DNTUnfolded_node_c5==node_cur_DNTUnfolded_node_c3
                                                                                                                                || node_cur_DNTUnfolded_node_c5==node_cur_DNTUnfolded_node_c4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            edge_cur_DNTUnfolded_edge__edge3.isMatched = edge_cur_DNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        bool node_cur_DNTUnfolded_node_c5_prevIsMatched = node_cur_DNTUnfolded_node_c5.isMatched;
                                                                                                                        node_cur_DNTUnfolded_node_c5.isMatched = true;
                                                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge17 = node_cur_DNTUnfolded_node_c4.outhead;
                                                                                                                        if(edge_head_DNTUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge17 = edge_head_DNTUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge17.isMatched
                                                                                                                                    && (edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge17==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                bool edge_cur_DNTUnfolded_edge__edge17_prevIsMatched = edge_cur_DNTUnfolded_edge__edge17.isMatched;
                                                                                                                                edge_cur_DNTUnfolded_edge__edge17.isMatched = true;
                                                                                                                                LGSPNode node_cur_DNTUnfolded_node_n4 = edge_cur_DNTUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_N.isMyType[node_cur_DNTUnfolded_node_n4.type.TypeID]) {
                                                                                                                                    edge_cur_DNTUnfolded_edge__edge17.isMatched = edge_cur_DNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(node_cur_DNTUnfolded_node_n4.isMatched
                                                                                                                                    && node_cur_DNTUnfolded_node_n4==node_cur_DNTUnfolded_node_n2
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    edge_cur_DNTUnfolded_edge__edge17.isMatched = edge_cur_DNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge4 = node_cur_DNTUnfolded_node_c5.outhead;
                                                                                                                                if(edge_head_DNTUnfolded_edge__edge4 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge4 = edge_head_DNTUnfolded_edge__edge4;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(edge_cur_DNTUnfolded_edge__edge4.isMatched
                                                                                                                                            && (edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge4==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        bool edge_cur_DNTUnfolded_edge__edge4_prevIsMatched = edge_cur_DNTUnfolded_edge__edge4.isMatched;
                                                                                                                                        edge_cur_DNTUnfolded_edge__edge4.isMatched = true;
                                                                                                                                        LGSPNode node_cur_DNTUnfolded_node_c6 = edge_cur_DNTUnfolded_edge__edge4.target;
                                                                                                                                        if(!NodeType_C.isMyType[node_cur_DNTUnfolded_node_c6.type.TypeID]) {
                                                                                                                                            edge_cur_DNTUnfolded_edge__edge4.isMatched = edge_cur_DNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(node_cur_DNTUnfolded_node_c6.isMatched
                                                                                                                                            && (node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c1
                                                                                                                                                || node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c2
                                                                                                                                                || node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c
                                                                                                                                                || node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c3
                                                                                                                                                || node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c4
                                                                                                                                                || node_cur_DNTUnfolded_node_c6==node_cur_DNTUnfolded_node_c5
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            edge_cur_DNTUnfolded_edge__edge4.isMatched = edge_cur_DNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge8 = node_cur_DNTUnfolded_node_c5.outhead;
                                                                                                                                        if(edge_head_DNTUnfolded_edge__edge8 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge8 = edge_head_DNTUnfolded_edge__edge8;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge8.target != node_cur_DNTUnfolded_node_c6) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge8.isMatched
                                                                                                                                                    && (edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge8==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                bool edge_cur_DNTUnfolded_edge__edge8_prevIsMatched = edge_cur_DNTUnfolded_edge__edge8.isMatched;
                                                                                                                                                edge_cur_DNTUnfolded_edge__edge8.isMatched = true;
                                                                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge20 = node_cur_DNTUnfolded_node_c5.outhead;
                                                                                                                                                if(edge_head_DNTUnfolded_edge__edge20 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge20 = edge_head_DNTUnfolded_edge__edge20;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(edge_cur_DNTUnfolded_edge__edge20.isMatched
                                                                                                                                                            && (edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge20==edge_cur_DNTUnfolded_edge__edge8
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        bool edge_cur_DNTUnfolded_edge__edge20_prevIsMatched = edge_cur_DNTUnfolded_edge__edge20.isMatched;
                                                                                                                                                        edge_cur_DNTUnfolded_edge__edge20.isMatched = true;
                                                                                                                                                        LGSPNode node_cur_DNTUnfolded_node__node8 = edge_cur_DNTUnfolded_edge__edge20.target;
                                                                                                                                                        if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge20.isMatched = edge_cur_DNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(node_cur_DNTUnfolded_node__node8.isMatched
                                                                                                                                                            && (node_cur_DNTUnfolded_node__node8==node_cur_DNTUnfolded_node__node0
                                                                                                                                                                || node_cur_DNTUnfolded_node__node8==node_cur_DNTUnfolded_node__node1
                                                                                                                                                                || node_cur_DNTUnfolded_node__node8==node_cur_DNTUnfolded_node__node2
                                                                                                                                                                || node_cur_DNTUnfolded_node__node8==node_cur_DNTUnfolded_node__node5
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge20.isMatched = edge_cur_DNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        bool node_cur_DNTUnfolded_node__node8_prevIsMatched = node_cur_DNTUnfolded_node__node8.isMatched;
                                                                                                                                                        node_cur_DNTUnfolded_node__node8.isMatched = true;
                                                                                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge18 = node_cur_DNTUnfolded_node_n4.outhead;
                                                                                                                                                        if(edge_head_DNTUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge18 = edge_head_DNTUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge18.isMatched
                                                                                                                                                                    && (edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge8
                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge18==edge_cur_DNTUnfolded_edge__edge20
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                bool edge_cur_DNTUnfolded_edge__edge18_prevIsMatched = edge_cur_DNTUnfolded_edge__edge18.isMatched;
                                                                                                                                                                edge_cur_DNTUnfolded_edge__edge18.isMatched = true;
                                                                                                                                                                LGSPNode node_cur_DNTUnfolded_node__node6 = edge_cur_DNTUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_O.isMyType[node_cur_DNTUnfolded_node__node6.type.TypeID]) {
                                                                                                                                                                    edge_cur_DNTUnfolded_edge__edge18.isMatched = edge_cur_DNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(node_cur_DNTUnfolded_node__node6.isMatched
                                                                                                                                                                    && (node_cur_DNTUnfolded_node__node6==node_cur_DNTUnfolded_node__node3
                                                                                                                                                                        || node_cur_DNTUnfolded_node__node6==node_cur_DNTUnfolded_node__node4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    edge_cur_DNTUnfolded_edge__edge18.isMatched = edge_cur_DNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                bool node_cur_DNTUnfolded_node__node6_prevIsMatched = node_cur_DNTUnfolded_node__node6.isMatched;
                                                                                                                                                                node_cur_DNTUnfolded_node__node6.isMatched = true;
                                                                                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge19 = node_cur_DNTUnfolded_node_n4.outhead;
                                                                                                                                                                if(edge_head_DNTUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge19 = edge_head_DNTUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(edge_cur_DNTUnfolded_edge__edge19.isMatched
                                                                                                                                                                            && (edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge8
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge20
                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge19==edge_cur_DNTUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        bool edge_cur_DNTUnfolded_edge__edge19_prevIsMatched = edge_cur_DNTUnfolded_edge__edge19.isMatched;
                                                                                                                                                                        edge_cur_DNTUnfolded_edge__edge19.isMatched = true;
                                                                                                                                                                        LGSPNode node_cur_DNTUnfolded_node__node7 = edge_cur_DNTUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[node_cur_DNTUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge19.isMatched = edge_cur_DNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(node_cur_DNTUnfolded_node__node7.isMatched
                                                                                                                                                                            && (node_cur_DNTUnfolded_node__node7==node_cur_DNTUnfolded_node__node3
                                                                                                                                                                                || node_cur_DNTUnfolded_node__node7==node_cur_DNTUnfolded_node__node4
                                                                                                                                                                                || node_cur_DNTUnfolded_node__node7==node_cur_DNTUnfolded_node__node6
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge19.isMatched = edge_cur_DNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        LGSPEdge edge_head_DNTUnfolded_edge__edge5 = node_cur_DNTUnfolded_node_c6.outhead;
                                                                                                                                                                        if(edge_head_DNTUnfolded_edge__edge5 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge edge_cur_DNTUnfolded_edge__edge5 = edge_head_DNTUnfolded_edge__edge5;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge5.target != node_cur_DNTUnfolded_node_c1) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(edge_cur_DNTUnfolded_edge__edge5.isMatched
                                                                                                                                                                                    && (edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge8
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge20
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge18
                                                                                                                                                                                        || edge_cur_DNTUnfolded_edge__edge5==edge_cur_DNTUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                bool edge_cur_DNTUnfolded_edge__edge5_prevIsMatched = edge_cur_DNTUnfolded_edge__edge5.isMatched;
                                                                                                                                                                                edge_cur_DNTUnfolded_edge__edge5.isMatched = true;
                                                                                                                                                                                LGSPEdge edge_head_DNTUnfolded_edge__edge21 = node_cur_DNTUnfolded_node_c6.outhead;
                                                                                                                                                                                if(edge_head_DNTUnfolded_edge__edge21 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    LGSPEdge edge_cur_DNTUnfolded_edge__edge21 = edge_head_DNTUnfolded_edge__edge21;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_DNTUnfolded_edge__edge21.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if(edge_cur_DNTUnfolded_edge__edge21.isMatched
                                                                                                                                                                                            && (edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge0
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge6
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge9
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge1
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge13
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge10
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge11
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge12
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge2
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge7
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge16
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge14
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge15
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge3
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge17
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge4
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge8
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge20
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge18
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge19
                                                                                                                                                                                                || edge_cur_DNTUnfolded_edge__edge21==edge_cur_DNTUnfolded_edge__edge5
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        LGSPNode node_cur_DNTUnfolded_node__node9 = edge_cur_DNTUnfolded_edge__edge21.target;
                                                                                                                                                                                        if(!NodeType_H.isMyType[node_cur_DNTUnfolded_node__node9.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if(node_cur_DNTUnfolded_node__node9.isMatched
                                                                                                                                                                                            && (node_cur_DNTUnfolded_node__node9==node_cur_DNTUnfolded_node__node0
                                                                                                                                                                                                || node_cur_DNTUnfolded_node__node9==node_cur_DNTUnfolded_node__node1
                                                                                                                                                                                                || node_cur_DNTUnfolded_node__node9==node_cur_DNTUnfolded_node__node2
                                                                                                                                                                                                || node_cur_DNTUnfolded_node__node9==node_cur_DNTUnfolded_node__node5
                                                                                                                                                                                                || node_cur_DNTUnfolded_node__node9==node_cur_DNTUnfolded_node__node8
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c1] = node_cur_DNTUnfolded_node_c1;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c2] = node_cur_DNTUnfolded_node_c2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c3] = node_cur_DNTUnfolded_node_c3;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c4] = node_cur_DNTUnfolded_node_c4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c5] = node_cur_DNTUnfolded_node_c5;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c6] = node_cur_DNTUnfolded_node_c6;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@c] = node_cur_DNTUnfolded_node_c;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node0] = node_cur_DNTUnfolded_node__node0;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node1] = node_cur_DNTUnfolded_node__node1;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node2] = node_cur_DNTUnfolded_node__node2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@n2] = node_cur_DNTUnfolded_node_n2;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node3] = node_cur_DNTUnfolded_node__node3;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node4] = node_cur_DNTUnfolded_node__node4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node5] = node_cur_DNTUnfolded_node__node5;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@n4] = node_cur_DNTUnfolded_node_n4;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node6] = node_cur_DNTUnfolded_node__node6;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node7] = node_cur_DNTUnfolded_node__node7;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node8] = node_cur_DNTUnfolded_node__node8;
                                                                                                                                                                                        match.Nodes[(int)Rule_DNTUnfolded.DNTUnfolded_NodeNums.@_node9] = node_cur_DNTUnfolded_node__node9;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge0] = edge_cur_DNTUnfolded_edge__edge0;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge1] = edge_cur_DNTUnfolded_edge__edge1;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge2] = edge_cur_DNTUnfolded_edge__edge2;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge3] = edge_cur_DNTUnfolded_edge__edge3;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge4] = edge_cur_DNTUnfolded_edge__edge4;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge5] = edge_cur_DNTUnfolded_edge__edge5;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge6] = edge_cur_DNTUnfolded_edge__edge6;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge7] = edge_cur_DNTUnfolded_edge__edge7;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge8] = edge_cur_DNTUnfolded_edge__edge8;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge9] = edge_cur_DNTUnfolded_edge__edge9;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge10] = edge_cur_DNTUnfolded_edge__edge10;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge11] = edge_cur_DNTUnfolded_edge__edge11;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge12] = edge_cur_DNTUnfolded_edge__edge12;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge13] = edge_cur_DNTUnfolded_edge__edge13;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge14] = edge_cur_DNTUnfolded_edge__edge14;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge15] = edge_cur_DNTUnfolded_edge__edge15;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge16] = edge_cur_DNTUnfolded_edge__edge16;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge17] = edge_cur_DNTUnfolded_edge__edge17;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge18] = edge_cur_DNTUnfolded_edge__edge18;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge19] = edge_cur_DNTUnfolded_edge__edge19;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge20] = edge_cur_DNTUnfolded_edge__edge20;
                                                                                                                                                                                        match.Edges[(int)Rule_DNTUnfolded.DNTUnfolded_EdgeNums.@_edge21] = edge_cur_DNTUnfolded_edge__edge21;
                                                                                                                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                        {
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c6.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge21);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c6.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge5);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_n4.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge19);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_n4.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge18);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge20);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge8);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge4);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c4.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge17);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c4.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge3);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_n2.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge15);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_n2.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge14);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge16);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge7);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge2);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge12);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge11);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge10);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c2.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge13);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c2.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge1);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c1.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge9);
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c1.MoveOutHeadAfter(edge_cur_DNTUnfolded_edge__edge6);
                                                                                                                                                                                            graph.MoveHeadAfter(edge_cur_DNTUnfolded_edge__edge0);
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge5.isMatched = edge_cur_DNTUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge19.isMatched = edge_cur_DNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node6.isMatched = node_cur_DNTUnfolded_node__node6_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge18.isMatched = edge_cur_DNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node8.isMatched = node_cur_DNTUnfolded_node__node8_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge20.isMatched = edge_cur_DNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge8.isMatched = edge_cur_DNTUnfolded_edge__edge8_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge4.isMatched = edge_cur_DNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge17.isMatched = edge_cur_DNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c5.isMatched = node_cur_DNTUnfolded_node_c5_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge3.isMatched = edge_cur_DNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node4.isMatched = node_cur_DNTUnfolded_node__node4_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge15.isMatched = edge_cur_DNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node3.isMatched = node_cur_DNTUnfolded_node__node3_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge14.isMatched = edge_cur_DNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node5.isMatched = node_cur_DNTUnfolded_node__node5_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge16.isMatched = edge_cur_DNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge7.isMatched = edge_cur_DNTUnfolded_edge__edge7_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c4.isMatched = node_cur_DNTUnfolded_node_c4_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge2.isMatched = edge_cur_DNTUnfolded_edge__edge2_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node2.isMatched = node_cur_DNTUnfolded_node__node2_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge12.isMatched = edge_cur_DNTUnfolded_edge__edge12_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node1.isMatched = node_cur_DNTUnfolded_node__node1_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge11.isMatched = edge_cur_DNTUnfolded_edge__edge11_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node__node0.isMatched = node_cur_DNTUnfolded_node__node0_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge10.isMatched = edge_cur_DNTUnfolded_edge__edge10_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_n2.isMatched = node_cur_DNTUnfolded_node_n2_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge13.isMatched = edge_cur_DNTUnfolded_edge__edge13_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c3.isMatched = node_cur_DNTUnfolded_node_c3_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge1.isMatched = edge_cur_DNTUnfolded_edge__edge1_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c.isMatched = node_cur_DNTUnfolded_node_c_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge9.isMatched = edge_cur_DNTUnfolded_edge__edge9_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge6.isMatched = edge_cur_DNTUnfolded_edge__edge6_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c2.isMatched = node_cur_DNTUnfolded_node_c2_prevIsMatched;
                                                                                                                                                                                            node_cur_DNTUnfolded_node_c1.isMatched = node_cur_DNTUnfolded_node_c1_prevIsMatched;
                                                                                                                                                                                            edge_cur_DNTUnfolded_edge__edge0.isMatched = edge_cur_DNTUnfolded_edge__edge0_prevIsMatched;
                                                                                                                                                                                            return matches;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge21 = edge_cur_DNTUnfolded_edge__edge21.outNext) != edge_head_DNTUnfolded_edge__edge21 );
                                                                                                                                                                                }
                                                                                                                                                                                edge_cur_DNTUnfolded_edge__edge5.isMatched = edge_cur_DNTUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                                            }
                                                                                                                                                                            while( (edge_cur_DNTUnfolded_edge__edge5 = edge_cur_DNTUnfolded_edge__edge5.outNext) != edge_head_DNTUnfolded_edge__edge5 );
                                                                                                                                                                        }
                                                                                                                                                                        edge_cur_DNTUnfolded_edge__edge19.isMatched = edge_cur_DNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                    }
                                                                                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge19 = edge_cur_DNTUnfolded_edge__edge19.outNext) != edge_head_DNTUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                node_cur_DNTUnfolded_node__node6.isMatched = node_cur_DNTUnfolded_node__node6_prevIsMatched;
                                                                                                                                                                edge_cur_DNTUnfolded_edge__edge18.isMatched = edge_cur_DNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                            }
                                                                                                                                                            while( (edge_cur_DNTUnfolded_edge__edge18 = edge_cur_DNTUnfolded_edge__edge18.outNext) != edge_head_DNTUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        node_cur_DNTUnfolded_node__node8.isMatched = node_cur_DNTUnfolded_node__node8_prevIsMatched;
                                                                                                                                                        edge_cur_DNTUnfolded_edge__edge20.isMatched = edge_cur_DNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                    }
                                                                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge20 = edge_cur_DNTUnfolded_edge__edge20.outNext) != edge_head_DNTUnfolded_edge__edge20 );
                                                                                                                                                }
                                                                                                                                                edge_cur_DNTUnfolded_edge__edge8.isMatched = edge_cur_DNTUnfolded_edge__edge8_prevIsMatched;
                                                                                                                                            }
                                                                                                                                            while( (edge_cur_DNTUnfolded_edge__edge8 = edge_cur_DNTUnfolded_edge__edge8.outNext) != edge_head_DNTUnfolded_edge__edge8 );
                                                                                                                                        }
                                                                                                                                        edge_cur_DNTUnfolded_edge__edge4.isMatched = edge_cur_DNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                    }
                                                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge4 = edge_cur_DNTUnfolded_edge__edge4.outNext) != edge_head_DNTUnfolded_edge__edge4 );
                                                                                                                                }
                                                                                                                                edge_cur_DNTUnfolded_edge__edge17.isMatched = edge_cur_DNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                            }
                                                                                                                            while( (edge_cur_DNTUnfolded_edge__edge17 = edge_cur_DNTUnfolded_edge__edge17.outNext) != edge_head_DNTUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        node_cur_DNTUnfolded_node_c5.isMatched = node_cur_DNTUnfolded_node_c5_prevIsMatched;
                                                                                                                        edge_cur_DNTUnfolded_edge__edge3.isMatched = edge_cur_DNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                    }
                                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge3 = edge_cur_DNTUnfolded_edge__edge3.outNext) != edge_head_DNTUnfolded_edge__edge3 );
                                                                                                                }
                                                                                                                node_cur_DNTUnfolded_node__node4.isMatched = node_cur_DNTUnfolded_node__node4_prevIsMatched;
                                                                                                                edge_cur_DNTUnfolded_edge__edge15.isMatched = edge_cur_DNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                            }
                                                                                                            while( (edge_cur_DNTUnfolded_edge__edge15 = edge_cur_DNTUnfolded_edge__edge15.outNext) != edge_head_DNTUnfolded_edge__edge15 );
                                                                                                        }
                                                                                                        node_cur_DNTUnfolded_node__node3.isMatched = node_cur_DNTUnfolded_node__node3_prevIsMatched;
                                                                                                        edge_cur_DNTUnfolded_edge__edge14.isMatched = edge_cur_DNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                    }
                                                                                                    while( (edge_cur_DNTUnfolded_edge__edge14 = edge_cur_DNTUnfolded_edge__edge14.outNext) != edge_head_DNTUnfolded_edge__edge14 );
                                                                                                }
                                                                                                node_cur_DNTUnfolded_node__node5.isMatched = node_cur_DNTUnfolded_node__node5_prevIsMatched;
                                                                                                edge_cur_DNTUnfolded_edge__edge16.isMatched = edge_cur_DNTUnfolded_edge__edge16_prevIsMatched;
                                                                                            }
                                                                                            while( (edge_cur_DNTUnfolded_edge__edge16 = edge_cur_DNTUnfolded_edge__edge16.outNext) != edge_head_DNTUnfolded_edge__edge16 );
                                                                                        }
                                                                                        edge_cur_DNTUnfolded_edge__edge7.isMatched = edge_cur_DNTUnfolded_edge__edge7_prevIsMatched;
                                                                                    }
                                                                                    while( (edge_cur_DNTUnfolded_edge__edge7 = edge_cur_DNTUnfolded_edge__edge7.outNext) != edge_head_DNTUnfolded_edge__edge7 );
                                                                                }
                                                                                node_cur_DNTUnfolded_node_c4.isMatched = node_cur_DNTUnfolded_node_c4_prevIsMatched;
                                                                                edge_cur_DNTUnfolded_edge__edge2.isMatched = edge_cur_DNTUnfolded_edge__edge2_prevIsMatched;
                                                                            }
                                                                            while( (edge_cur_DNTUnfolded_edge__edge2 = edge_cur_DNTUnfolded_edge__edge2.outNext) != edge_head_DNTUnfolded_edge__edge2 );
                                                                        }
                                                                        node_cur_DNTUnfolded_node__node2.isMatched = node_cur_DNTUnfolded_node__node2_prevIsMatched;
                                                                        edge_cur_DNTUnfolded_edge__edge12.isMatched = edge_cur_DNTUnfolded_edge__edge12_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_DNTUnfolded_edge__edge12 = edge_cur_DNTUnfolded_edge__edge12.outNext) != edge_head_DNTUnfolded_edge__edge12 );
                                                                }
                                                                node_cur_DNTUnfolded_node__node1.isMatched = node_cur_DNTUnfolded_node__node1_prevIsMatched;
                                                                edge_cur_DNTUnfolded_edge__edge11.isMatched = edge_cur_DNTUnfolded_edge__edge11_prevIsMatched;
                                                            }
                                                            while( (edge_cur_DNTUnfolded_edge__edge11 = edge_cur_DNTUnfolded_edge__edge11.outNext) != edge_head_DNTUnfolded_edge__edge11 );
                                                        }
                                                        node_cur_DNTUnfolded_node__node0.isMatched = node_cur_DNTUnfolded_node__node0_prevIsMatched;
                                                        edge_cur_DNTUnfolded_edge__edge10.isMatched = edge_cur_DNTUnfolded_edge__edge10_prevIsMatched;
                                                    }
                                                    while( (edge_cur_DNTUnfolded_edge__edge10 = edge_cur_DNTUnfolded_edge__edge10.outNext) != edge_head_DNTUnfolded_edge__edge10 );
                                                }
                                                node_cur_DNTUnfolded_node_n2.isMatched = node_cur_DNTUnfolded_node_n2_prevIsMatched;
                                                edge_cur_DNTUnfolded_edge__edge13.isMatched = edge_cur_DNTUnfolded_edge__edge13_prevIsMatched;
                                            }
                                            while( (edge_cur_DNTUnfolded_edge__edge13 = edge_cur_DNTUnfolded_edge__edge13.outNext) != edge_head_DNTUnfolded_edge__edge13 );
                                        }
                                        node_cur_DNTUnfolded_node_c3.isMatched = node_cur_DNTUnfolded_node_c3_prevIsMatched;
                                        edge_cur_DNTUnfolded_edge__edge1.isMatched = edge_cur_DNTUnfolded_edge__edge1_prevIsMatched;
                                    }
                                    while( (edge_cur_DNTUnfolded_edge__edge1 = edge_cur_DNTUnfolded_edge__edge1.outNext) != edge_head_DNTUnfolded_edge__edge1 );
                                }
                                node_cur_DNTUnfolded_node_c.isMatched = node_cur_DNTUnfolded_node_c_prevIsMatched;
                                edge_cur_DNTUnfolded_edge__edge9.isMatched = edge_cur_DNTUnfolded_edge__edge9_prevIsMatched;
                            }
                            while( (edge_cur_DNTUnfolded_edge__edge9 = edge_cur_DNTUnfolded_edge__edge9.outNext) != edge_head_DNTUnfolded_edge__edge9 );
                        }
                        edge_cur_DNTUnfolded_edge__edge6.isMatched = edge_cur_DNTUnfolded_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_DNTUnfolded_edge__edge6 = edge_cur_DNTUnfolded_edge__edge6.outNext) != edge_head_DNTUnfolded_edge__edge6 );
                }
                node_cur_DNTUnfolded_node_c2.isMatched = node_cur_DNTUnfolded_node_c2_prevIsMatched;
                node_cur_DNTUnfolded_node_c1.isMatched = node_cur_DNTUnfolded_node_c1_prevIsMatched;
                edge_cur_DNTUnfolded_edge__edge0.isMatched = edge_cur_DNTUnfolded_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNB : LGSPAction
    {
        public Action_TNB() {
            rulePattern = Rule_TNB.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 9, 6);
        }

        public override string Name { get { return "TNB"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNB instance = new Action_TNB();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int edge_type_id_TNB_edge__edge0 = 1;
            for(LGSPEdge edge_head_TNB_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_TNB_edge__edge0], edge_cur_TNB_edge__edge0 = edge_head_TNB_edge__edge0.typeNext; edge_cur_TNB_edge__edge0 != edge_head_TNB_edge__edge0; edge_cur_TNB_edge__edge0 = edge_cur_TNB_edge__edge0.typeNext)
            {
                bool edge_cur_TNB_edge__edge0_prevIsMatched = edge_cur_TNB_edge__edge0.isMatched;
                edge_cur_TNB_edge__edge0.isMatched = true;
                LGSPNode node_cur_TNB_node_c1 = edge_cur_TNB_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_TNB_node_c1.type.TypeID]) {
                    edge_cur_TNB_edge__edge0.isMatched = edge_cur_TNB_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNB_node_c1_prevIsMatched = node_cur_TNB_node_c1.isMatched;
                node_cur_TNB_node_c1.isMatched = true;
                LGSPNode node_cur_TNB_node_c2 = edge_cur_TNB_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_TNB_node_c2.type.TypeID]) {
                    node_cur_TNB_node_c1.isMatched = node_cur_TNB_node_c1_prevIsMatched;
                    edge_cur_TNB_edge__edge0.isMatched = edge_cur_TNB_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_TNB_node_c2.isMatched
                    && node_cur_TNB_node_c2==node_cur_TNB_node_c1
                    )
                {
                    node_cur_TNB_node_c1.isMatched = node_cur_TNB_node_c1_prevIsMatched;
                    edge_cur_TNB_edge__edge0.isMatched = edge_cur_TNB_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNB_node_c2_prevIsMatched = node_cur_TNB_node_c2.isMatched;
                node_cur_TNB_node_c2.isMatched = true;
                LGSPEdge edge_head_TNB_edge__edge6 = node_cur_TNB_node_c1.outhead;
                if(edge_head_TNB_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_TNB_edge__edge6 = edge_head_TNB_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_TNB_edge__edge6.target != node_cur_TNB_node_c2) {
                            continue;
                        }
                        if(edge_cur_TNB_edge__edge6.isMatched
                            && edge_cur_TNB_edge__edge6==edge_cur_TNB_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_TNB_edge__edge6_prevIsMatched = edge_cur_TNB_edge__edge6.isMatched;
                        edge_cur_TNB_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_TNB_edge__edge1 = node_cur_TNB_node_c2.outhead;
                        if(edge_head_TNB_edge__edge1 != null)
                        {
                            LGSPEdge edge_cur_TNB_edge__edge1 = edge_head_TNB_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_TNB_edge__edge1.isMatched
                                    && (edge_cur_TNB_edge__edge1==edge_cur_TNB_edge__edge0
                                        || edge_cur_TNB_edge__edge1==edge_cur_TNB_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_TNB_edge__edge1_prevIsMatched = edge_cur_TNB_edge__edge1.isMatched;
                                edge_cur_TNB_edge__edge1.isMatched = true;
                                LGSPNode node_cur_TNB_node_c3 = edge_cur_TNB_edge__edge1.target;
                                if(!NodeType_C.isMyType[node_cur_TNB_node_c3.type.TypeID]) {
                                    edge_cur_TNB_edge__edge1.isMatched = edge_cur_TNB_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_TNB_node_c3.isMatched
                                    && (node_cur_TNB_node_c3==node_cur_TNB_node_c1
                                        || node_cur_TNB_node_c3==node_cur_TNB_node_c2
                                        )
                                    )
                                {
                                    edge_cur_TNB_edge__edge1.isMatched = edge_cur_TNB_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_TNB_node_c3_prevIsMatched = node_cur_TNB_node_c3.isMatched;
                                node_cur_TNB_node_c3.isMatched = true;
                                LGSPEdge edge_head_TNB_edge__edge2 = node_cur_TNB_node_c3.outhead;
                                if(edge_head_TNB_edge__edge2 != null)
                                {
                                    LGSPEdge edge_cur_TNB_edge__edge2 = edge_head_TNB_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_TNB_edge__edge2.isMatched
                                            && (edge_cur_TNB_edge__edge2==edge_cur_TNB_edge__edge0
                                                || edge_cur_TNB_edge__edge2==edge_cur_TNB_edge__edge6
                                                || edge_cur_TNB_edge__edge2==edge_cur_TNB_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_TNB_edge__edge2_prevIsMatched = edge_cur_TNB_edge__edge2.isMatched;
                                        edge_cur_TNB_edge__edge2.isMatched = true;
                                        LGSPNode node_cur_TNB_node_c4 = edge_cur_TNB_edge__edge2.target;
                                        if(!NodeType_C.isMyType[node_cur_TNB_node_c4.type.TypeID]) {
                                            edge_cur_TNB_edge__edge2.isMatched = edge_cur_TNB_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_TNB_node_c4.isMatched
                                            && (node_cur_TNB_node_c4==node_cur_TNB_node_c1
                                                || node_cur_TNB_node_c4==node_cur_TNB_node_c2
                                                || node_cur_TNB_node_c4==node_cur_TNB_node_c3
                                                )
                                            )
                                        {
                                            edge_cur_TNB_edge__edge2.isMatched = edge_cur_TNB_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_TNB_node_c4_prevIsMatched = node_cur_TNB_node_c4.isMatched;
                                        node_cur_TNB_node_c4.isMatched = true;
                                        LGSPEdge edge_head_TNB_edge__edge7 = node_cur_TNB_node_c3.outhead;
                                        if(edge_head_TNB_edge__edge7 != null)
                                        {
                                            LGSPEdge edge_cur_TNB_edge__edge7 = edge_head_TNB_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_TNB_edge__edge7.target != node_cur_TNB_node_c4) {
                                                    continue;
                                                }
                                                if(edge_cur_TNB_edge__edge7.isMatched
                                                    && (edge_cur_TNB_edge__edge7==edge_cur_TNB_edge__edge0
                                                        || edge_cur_TNB_edge__edge7==edge_cur_TNB_edge__edge6
                                                        || edge_cur_TNB_edge__edge7==edge_cur_TNB_edge__edge1
                                                        || edge_cur_TNB_edge__edge7==edge_cur_TNB_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_TNB_edge__edge7_prevIsMatched = edge_cur_TNB_edge__edge7.isMatched;
                                                edge_cur_TNB_edge__edge7.isMatched = true;
                                                LGSPEdge edge_head_TNB_edge__edge3 = node_cur_TNB_node_c4.outhead;
                                                if(edge_head_TNB_edge__edge3 != null)
                                                {
                                                    LGSPEdge edge_cur_TNB_edge__edge3 = edge_head_TNB_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_TNB_edge__edge3.isMatched
                                                            && (edge_cur_TNB_edge__edge3==edge_cur_TNB_edge__edge0
                                                                || edge_cur_TNB_edge__edge3==edge_cur_TNB_edge__edge6
                                                                || edge_cur_TNB_edge__edge3==edge_cur_TNB_edge__edge1
                                                                || edge_cur_TNB_edge__edge3==edge_cur_TNB_edge__edge2
                                                                || edge_cur_TNB_edge__edge3==edge_cur_TNB_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_TNB_edge__edge3_prevIsMatched = edge_cur_TNB_edge__edge3.isMatched;
                                                        edge_cur_TNB_edge__edge3.isMatched = true;
                                                        LGSPNode node_cur_TNB_node_c5 = edge_cur_TNB_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[node_cur_TNB_node_c5.type.TypeID]) {
                                                            edge_cur_TNB_edge__edge3.isMatched = edge_cur_TNB_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_TNB_node_c5.isMatched
                                                            && (node_cur_TNB_node_c5==node_cur_TNB_node_c1
                                                                || node_cur_TNB_node_c5==node_cur_TNB_node_c2
                                                                || node_cur_TNB_node_c5==node_cur_TNB_node_c3
                                                                || node_cur_TNB_node_c5==node_cur_TNB_node_c4
                                                                )
                                                            )
                                                        {
                                                            edge_cur_TNB_edge__edge3.isMatched = edge_cur_TNB_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_TNB_node_c5_prevIsMatched = node_cur_TNB_node_c5.isMatched;
                                                        node_cur_TNB_node_c5.isMatched = true;
                                                        LGSPEdge edge_head_TNB_edge__edge4 = node_cur_TNB_node_c5.outhead;
                                                        if(edge_head_TNB_edge__edge4 != null)
                                                        {
                                                            LGSPEdge edge_cur_TNB_edge__edge4 = edge_head_TNB_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_TNB_edge__edge4.isMatched
                                                                    && (edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge0
                                                                        || edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge6
                                                                        || edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge1
                                                                        || edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge2
                                                                        || edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge7
                                                                        || edge_cur_TNB_edge__edge4==edge_cur_TNB_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_TNB_edge__edge4_prevIsMatched = edge_cur_TNB_edge__edge4.isMatched;
                                                                edge_cur_TNB_edge__edge4.isMatched = true;
                                                                LGSPNode node_cur_TNB_node_c6 = edge_cur_TNB_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[node_cur_TNB_node_c6.type.TypeID]) {
                                                                    edge_cur_TNB_edge__edge4.isMatched = edge_cur_TNB_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_TNB_node_c6.isMatched
                                                                    && (node_cur_TNB_node_c6==node_cur_TNB_node_c1
                                                                        || node_cur_TNB_node_c6==node_cur_TNB_node_c2
                                                                        || node_cur_TNB_node_c6==node_cur_TNB_node_c3
                                                                        || node_cur_TNB_node_c6==node_cur_TNB_node_c4
                                                                        || node_cur_TNB_node_c6==node_cur_TNB_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    edge_cur_TNB_edge__edge4.isMatched = edge_cur_TNB_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                LGSPEdge edge_head_TNB_edge__edge8 = node_cur_TNB_node_c5.outhead;
                                                                if(edge_head_TNB_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge edge_cur_TNB_edge__edge8 = edge_head_TNB_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNB_edge__edge8.target != node_cur_TNB_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNB_edge__edge8.isMatched
                                                                            && (edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge0
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge6
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge1
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge2
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge7
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge3
                                                                                || edge_cur_TNB_edge__edge8==edge_cur_TNB_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_TNB_edge__edge8_prevIsMatched = edge_cur_TNB_edge__edge8.isMatched;
                                                                        edge_cur_TNB_edge__edge8.isMatched = true;
                                                                        LGSPEdge edge_head_TNB_edge__edge5 = node_cur_TNB_node_c6.outhead;
                                                                        if(edge_head_TNB_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_TNB_edge__edge5 = edge_head_TNB_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNB_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNB_edge__edge5.target != node_cur_TNB_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNB_edge__edge5.isMatched
                                                                                    && (edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge0
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge6
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge1
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge2
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge7
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge3
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge4
                                                                                        || edge_cur_TNB_edge__edge5==edge_cur_TNB_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                PatternAction_Nitro taskFor__subpattern5 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern5.Nitro_node_anchor = node_cur_TNB_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = node_cur_TNB_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                PatternAction_Nitro taskFor__subpattern3 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = node_cur_TNB_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = node_cur_TNB_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                PatternAction_Nitro taskFor__subpattern1 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = node_cur_TNB_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                PatternAction_Hydrogen taskFor__subpattern0 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern0.Hydrogen_node_anchor = node_cur_TNB_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                node_cur_TNB_node_c1.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNB_node_c2.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNB_node_c3.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNB_node_c4.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNB_node_c5.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNB_node_c6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNB_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                if(matchesList.Count>0) {
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c1] = node_cur_TNB_node_c1;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c2] = node_cur_TNB_node_c2;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c3] = node_cur_TNB_node_c3;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c4] = node_cur_TNB_node_c4;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c5] = node_cur_TNB_node_c5;
                                                                                        match.Nodes[(int)Rule_TNB.TNB_NodeNums.@c6] = node_cur_TNB_node_c6;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge0] = edge_cur_TNB_edge__edge0;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge1] = edge_cur_TNB_edge__edge1;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge2] = edge_cur_TNB_edge__edge2;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge3] = edge_cur_TNB_edge__edge3;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge4] = edge_cur_TNB_edge__edge4;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge5] = edge_cur_TNB_edge__edge5;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge6] = edge_cur_TNB_edge__edge6;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge7] = edge_cur_TNB_edge__edge7;
                                                                                        match.Edges[(int)Rule_TNB.TNB_EdgeNums.@_edge8] = edge_cur_TNB_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNB.TNB_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        edge_cur_TNB_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNB_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNB_edge__edge8.isMatched = edge_cur_TNB_edge__edge8_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge4.isMatched = edge_cur_TNB_edge__edge4_prevIsMatched;
                                                                                        node_cur_TNB_node_c5.isMatched = node_cur_TNB_node_c5_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge3.isMatched = edge_cur_TNB_edge__edge3_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge7.isMatched = edge_cur_TNB_edge__edge7_prevIsMatched;
                                                                                        node_cur_TNB_node_c4.isMatched = node_cur_TNB_node_c4_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge2.isMatched = edge_cur_TNB_edge__edge2_prevIsMatched;
                                                                                        node_cur_TNB_node_c3.isMatched = node_cur_TNB_node_c3_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge1.isMatched = edge_cur_TNB_edge__edge1_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge6.isMatched = edge_cur_TNB_edge__edge6_prevIsMatched;
                                                                                        node_cur_TNB_node_c2.isMatched = node_cur_TNB_node_c2_prevIsMatched;
                                                                                        node_cur_TNB_node_c1.isMatched = node_cur_TNB_node_c1_prevIsMatched;
                                                                                        edge_cur_TNB_edge__edge0.isMatched = edge_cur_TNB_edge__edge0_prevIsMatched;
                                                                                        return matches;
                                                                                    }
                                                                                    edge_cur_TNB_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNB_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNB_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    continue;
                                                                                }
                                                                                node_cur_TNB_node_c1.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNB_node_c2.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNB_node_c3.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNB_node_c4.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNB_node_c5.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNB_node_c6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNB_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                            }
                                                                            while( (edge_cur_TNB_edge__edge5 = edge_cur_TNB_edge__edge5.outNext) != edge_head_TNB_edge__edge5 );
                                                                        }
                                                                        edge_cur_TNB_edge__edge8.isMatched = edge_cur_TNB_edge__edge8_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_TNB_edge__edge8 = edge_cur_TNB_edge__edge8.outNext) != edge_head_TNB_edge__edge8 );
                                                                }
                                                                edge_cur_TNB_edge__edge4.isMatched = edge_cur_TNB_edge__edge4_prevIsMatched;
                                                            }
                                                            while( (edge_cur_TNB_edge__edge4 = edge_cur_TNB_edge__edge4.outNext) != edge_head_TNB_edge__edge4 );
                                                        }
                                                        node_cur_TNB_node_c5.isMatched = node_cur_TNB_node_c5_prevIsMatched;
                                                        edge_cur_TNB_edge__edge3.isMatched = edge_cur_TNB_edge__edge3_prevIsMatched;
                                                    }
                                                    while( (edge_cur_TNB_edge__edge3 = edge_cur_TNB_edge__edge3.outNext) != edge_head_TNB_edge__edge3 );
                                                }
                                                edge_cur_TNB_edge__edge7.isMatched = edge_cur_TNB_edge__edge7_prevIsMatched;
                                            }
                                            while( (edge_cur_TNB_edge__edge7 = edge_cur_TNB_edge__edge7.outNext) != edge_head_TNB_edge__edge7 );
                                        }
                                        node_cur_TNB_node_c4.isMatched = node_cur_TNB_node_c4_prevIsMatched;
                                        edge_cur_TNB_edge__edge2.isMatched = edge_cur_TNB_edge__edge2_prevIsMatched;
                                    }
                                    while( (edge_cur_TNB_edge__edge2 = edge_cur_TNB_edge__edge2.outNext) != edge_head_TNB_edge__edge2 );
                                }
                                node_cur_TNB_node_c3.isMatched = node_cur_TNB_node_c3_prevIsMatched;
                                edge_cur_TNB_edge__edge1.isMatched = edge_cur_TNB_edge__edge1_prevIsMatched;
                            }
                            while( (edge_cur_TNB_edge__edge1 = edge_cur_TNB_edge__edge1.outNext) != edge_head_TNB_edge__edge1 );
                        }
                        edge_cur_TNB_edge__edge6.isMatched = edge_cur_TNB_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_TNB_edge__edge6 = edge_cur_TNB_edge__edge6.outNext) != edge_head_TNB_edge__edge6 );
                }
                node_cur_TNB_node_c2.isMatched = node_cur_TNB_node_c2_prevIsMatched;
                node_cur_TNB_node_c1.isMatched = node_cur_TNB_node_c1_prevIsMatched;
                edge_cur_TNB_edge__edge0.isMatched = edge_cur_TNB_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNBUnfolded : LGSPAction
    {
        public Action_TNBUnfolded() {
            rulePattern = Rule_TNBUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 18, 21, 0);
        }

        public override string Name { get { return "TNBUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNBUnfolded instance = new Action_TNBUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            int edge_type_id_TNBUnfolded_edge__edge0 = 1;
            for(LGSPEdge edge_head_TNBUnfolded_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_TNBUnfolded_edge__edge0], edge_cur_TNBUnfolded_edge__edge0 = edge_head_TNBUnfolded_edge__edge0.typeNext; edge_cur_TNBUnfolded_edge__edge0 != edge_head_TNBUnfolded_edge__edge0; edge_cur_TNBUnfolded_edge__edge0 = edge_cur_TNBUnfolded_edge__edge0.typeNext)
            {
                bool edge_cur_TNBUnfolded_edge__edge0_prevIsMatched = edge_cur_TNBUnfolded_edge__edge0.isMatched;
                edge_cur_TNBUnfolded_edge__edge0.isMatched = true;
                LGSPNode node_cur_TNBUnfolded_node_c1 = edge_cur_TNBUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c1.type.TypeID]) {
                    edge_cur_TNBUnfolded_edge__edge0.isMatched = edge_cur_TNBUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNBUnfolded_node_c1_prevIsMatched = node_cur_TNBUnfolded_node_c1.isMatched;
                node_cur_TNBUnfolded_node_c1.isMatched = true;
                LGSPNode node_cur_TNBUnfolded_node_c2 = edge_cur_TNBUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c2.type.TypeID]) {
                    node_cur_TNBUnfolded_node_c1.isMatched = node_cur_TNBUnfolded_node_c1_prevIsMatched;
                    edge_cur_TNBUnfolded_edge__edge0.isMatched = edge_cur_TNBUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_TNBUnfolded_node_c2.isMatched
                    && node_cur_TNBUnfolded_node_c2==node_cur_TNBUnfolded_node_c1
                    )
                {
                    node_cur_TNBUnfolded_node_c1.isMatched = node_cur_TNBUnfolded_node_c1_prevIsMatched;
                    edge_cur_TNBUnfolded_edge__edge0.isMatched = edge_cur_TNBUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNBUnfolded_node_c2_prevIsMatched = node_cur_TNBUnfolded_node_c2.isMatched;
                node_cur_TNBUnfolded_node_c2.isMatched = true;
                LGSPEdge edge_head_TNBUnfolded_edge__edge6 = node_cur_TNBUnfolded_node_c1.outhead;
                if(edge_head_TNBUnfolded_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_TNBUnfolded_edge__edge6 = edge_head_TNBUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_TNBUnfolded_edge__edge6.target != node_cur_TNBUnfolded_node_c2) {
                            continue;
                        }
                        if(edge_cur_TNBUnfolded_edge__edge6.isMatched
                            && edge_cur_TNBUnfolded_edge__edge6==edge_cur_TNBUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_TNBUnfolded_edge__edge6_prevIsMatched = edge_cur_TNBUnfolded_edge__edge6.isMatched;
                        edge_cur_TNBUnfolded_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_TNBUnfolded_edge__edge9 = node_cur_TNBUnfolded_node_c1.outhead;
                        if(edge_head_TNBUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge edge_cur_TNBUnfolded_edge__edge9 = edge_head_TNBUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_TNBUnfolded_edge__edge9.isMatched
                                    && (edge_cur_TNBUnfolded_edge__edge9==edge_cur_TNBUnfolded_edge__edge0
                                        || edge_cur_TNBUnfolded_edge__edge9==edge_cur_TNBUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_TNBUnfolded_edge__edge9_prevIsMatched = edge_cur_TNBUnfolded_edge__edge9.isMatched;
                                edge_cur_TNBUnfolded_edge__edge9.isMatched = true;
                                LGSPNode node_cur_TNBUnfolded_node__node0 = edge_cur_TNBUnfolded_edge__edge9.target;
                                if(!NodeType_H.isMyType[node_cur_TNBUnfolded_node__node0.type.TypeID]) {
                                    edge_cur_TNBUnfolded_edge__edge9.isMatched = edge_cur_TNBUnfolded_edge__edge9_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_TNBUnfolded_node__node0_prevIsMatched = node_cur_TNBUnfolded_node__node0.isMatched;
                                node_cur_TNBUnfolded_node__node0.isMatched = true;
                                LGSPEdge edge_head_TNBUnfolded_edge__edge1 = node_cur_TNBUnfolded_node_c2.outhead;
                                if(edge_head_TNBUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge1 = edge_head_TNBUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_TNBUnfolded_edge__edge1.isMatched
                                            && (edge_cur_TNBUnfolded_edge__edge1==edge_cur_TNBUnfolded_edge__edge0
                                                || edge_cur_TNBUnfolded_edge__edge1==edge_cur_TNBUnfolded_edge__edge6
                                                || edge_cur_TNBUnfolded_edge__edge1==edge_cur_TNBUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_TNBUnfolded_edge__edge1_prevIsMatched = edge_cur_TNBUnfolded_edge__edge1.isMatched;
                                        edge_cur_TNBUnfolded_edge__edge1.isMatched = true;
                                        LGSPNode node_cur_TNBUnfolded_node_c3 = edge_cur_TNBUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c3.type.TypeID]) {
                                            edge_cur_TNBUnfolded_edge__edge1.isMatched = edge_cur_TNBUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_TNBUnfolded_node_c3.isMatched
                                            && (node_cur_TNBUnfolded_node_c3==node_cur_TNBUnfolded_node_c1
                                                || node_cur_TNBUnfolded_node_c3==node_cur_TNBUnfolded_node_c2
                                                )
                                            )
                                        {
                                            edge_cur_TNBUnfolded_edge__edge1.isMatched = edge_cur_TNBUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_TNBUnfolded_node_c3_prevIsMatched = node_cur_TNBUnfolded_node_c3.isMatched;
                                        node_cur_TNBUnfolded_node_c3.isMatched = true;
                                        LGSPEdge edge_head_TNBUnfolded_edge__edge10 = node_cur_TNBUnfolded_node_c2.outhead;
                                        if(edge_head_TNBUnfolded_edge__edge10 != null)
                                        {
                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge10 = edge_head_TNBUnfolded_edge__edge10;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge10.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_TNBUnfolded_edge__edge10.isMatched
                                                    && (edge_cur_TNBUnfolded_edge__edge10==edge_cur_TNBUnfolded_edge__edge0
                                                        || edge_cur_TNBUnfolded_edge__edge10==edge_cur_TNBUnfolded_edge__edge6
                                                        || edge_cur_TNBUnfolded_edge__edge10==edge_cur_TNBUnfolded_edge__edge9
                                                        || edge_cur_TNBUnfolded_edge__edge10==edge_cur_TNBUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_TNBUnfolded_edge__edge10_prevIsMatched = edge_cur_TNBUnfolded_edge__edge10.isMatched;
                                                edge_cur_TNBUnfolded_edge__edge10.isMatched = true;
                                                LGSPNode node_cur_TNBUnfolded_node_n2 = edge_cur_TNBUnfolded_edge__edge10.target;
                                                if(!NodeType_N.isMyType[node_cur_TNBUnfolded_node_n2.type.TypeID]) {
                                                    edge_cur_TNBUnfolded_edge__edge10.isMatched = edge_cur_TNBUnfolded_edge__edge10_prevIsMatched;
                                                    continue;
                                                }
                                                bool node_cur_TNBUnfolded_node_n2_prevIsMatched = node_cur_TNBUnfolded_node_n2.isMatched;
                                                node_cur_TNBUnfolded_node_n2.isMatched = true;
                                                LGSPEdge edge_head_TNBUnfolded_edge__edge2 = node_cur_TNBUnfolded_node_c3.outhead;
                                                if(edge_head_TNBUnfolded_edge__edge2 != null)
                                                {
                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge2 = edge_head_TNBUnfolded_edge__edge2;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge2.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_TNBUnfolded_edge__edge2.isMatched
                                                            && (edge_cur_TNBUnfolded_edge__edge2==edge_cur_TNBUnfolded_edge__edge0
                                                                || edge_cur_TNBUnfolded_edge__edge2==edge_cur_TNBUnfolded_edge__edge6
                                                                || edge_cur_TNBUnfolded_edge__edge2==edge_cur_TNBUnfolded_edge__edge9
                                                                || edge_cur_TNBUnfolded_edge__edge2==edge_cur_TNBUnfolded_edge__edge1
                                                                || edge_cur_TNBUnfolded_edge__edge2==edge_cur_TNBUnfolded_edge__edge10
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_TNBUnfolded_edge__edge2_prevIsMatched = edge_cur_TNBUnfolded_edge__edge2.isMatched;
                                                        edge_cur_TNBUnfolded_edge__edge2.isMatched = true;
                                                        LGSPNode node_cur_TNBUnfolded_node_c4 = edge_cur_TNBUnfolded_edge__edge2.target;
                                                        if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c4.type.TypeID]) {
                                                            edge_cur_TNBUnfolded_edge__edge2.isMatched = edge_cur_TNBUnfolded_edge__edge2_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_TNBUnfolded_node_c4.isMatched
                                                            && (node_cur_TNBUnfolded_node_c4==node_cur_TNBUnfolded_node_c1
                                                                || node_cur_TNBUnfolded_node_c4==node_cur_TNBUnfolded_node_c2
                                                                || node_cur_TNBUnfolded_node_c4==node_cur_TNBUnfolded_node_c3
                                                                )
                                                            )
                                                        {
                                                            edge_cur_TNBUnfolded_edge__edge2.isMatched = edge_cur_TNBUnfolded_edge__edge2_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_TNBUnfolded_node_c4_prevIsMatched = node_cur_TNBUnfolded_node_c4.isMatched;
                                                        node_cur_TNBUnfolded_node_c4.isMatched = true;
                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge7 = node_cur_TNBUnfolded_node_c3.outhead;
                                                        if(edge_head_TNBUnfolded_edge__edge7 != null)
                                                        {
                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge7 = edge_head_TNBUnfolded_edge__edge7;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge7.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_TNBUnfolded_edge__edge7.target != node_cur_TNBUnfolded_node_c4) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_TNBUnfolded_edge__edge7.isMatched
                                                                    && (edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge0
                                                                        || edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge6
                                                                        || edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge9
                                                                        || edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge1
                                                                        || edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge10
                                                                        || edge_cur_TNBUnfolded_edge__edge7==edge_cur_TNBUnfolded_edge__edge2
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_TNBUnfolded_edge__edge7_prevIsMatched = edge_cur_TNBUnfolded_edge__edge7.isMatched;
                                                                edge_cur_TNBUnfolded_edge__edge7.isMatched = true;
                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge13 = node_cur_TNBUnfolded_node_c3.outhead;
                                                                if(edge_head_TNBUnfolded_edge__edge13 != null)
                                                                {
                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge13 = edge_head_TNBUnfolded_edge__edge13;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge13.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNBUnfolded_edge__edge13.isMatched
                                                                            && (edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge0
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge6
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge9
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge1
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge10
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge2
                                                                                || edge_cur_TNBUnfolded_edge__edge13==edge_cur_TNBUnfolded_edge__edge7
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_TNBUnfolded_edge__edge13_prevIsMatched = edge_cur_TNBUnfolded_edge__edge13.isMatched;
                                                                        edge_cur_TNBUnfolded_edge__edge13.isMatched = true;
                                                                        LGSPNode node_cur_TNBUnfolded_node__node3 = edge_cur_TNBUnfolded_edge__edge13.target;
                                                                        if(!NodeType_H.isMyType[node_cur_TNBUnfolded_node__node3.type.TypeID]) {
                                                                            edge_cur_TNBUnfolded_edge__edge13.isMatched = edge_cur_TNBUnfolded_edge__edge13_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        if(node_cur_TNBUnfolded_node__node3.isMatched
                                                                            && node_cur_TNBUnfolded_node__node3==node_cur_TNBUnfolded_node__node0
                                                                            )
                                                                        {
                                                                            edge_cur_TNBUnfolded_edge__edge13.isMatched = edge_cur_TNBUnfolded_edge__edge13_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        bool node_cur_TNBUnfolded_node__node3_prevIsMatched = node_cur_TNBUnfolded_node__node3.isMatched;
                                                                        node_cur_TNBUnfolded_node__node3.isMatched = true;
                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge11 = node_cur_TNBUnfolded_node_n2.outhead;
                                                                        if(edge_head_TNBUnfolded_edge__edge11 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge11 = edge_head_TNBUnfolded_edge__edge11;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge11.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNBUnfolded_edge__edge11.isMatched
                                                                                    && (edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge0
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge6
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge9
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge1
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge10
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge2
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge7
                                                                                        || edge_cur_TNBUnfolded_edge__edge11==edge_cur_TNBUnfolded_edge__edge13
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                bool edge_cur_TNBUnfolded_edge__edge11_prevIsMatched = edge_cur_TNBUnfolded_edge__edge11.isMatched;
                                                                                edge_cur_TNBUnfolded_edge__edge11.isMatched = true;
                                                                                LGSPNode node_cur_TNBUnfolded_node__node1 = edge_cur_TNBUnfolded_edge__edge11.target;
                                                                                if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node1.type.TypeID]) {
                                                                                    edge_cur_TNBUnfolded_edge__edge11.isMatched = edge_cur_TNBUnfolded_edge__edge11_prevIsMatched;
                                                                                    continue;
                                                                                }
                                                                                bool node_cur_TNBUnfolded_node__node1_prevIsMatched = node_cur_TNBUnfolded_node__node1.isMatched;
                                                                                node_cur_TNBUnfolded_node__node1.isMatched = true;
                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge12 = node_cur_TNBUnfolded_node_n2.outhead;
                                                                                if(edge_head_TNBUnfolded_edge__edge12 != null)
                                                                                {
                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge12 = edge_head_TNBUnfolded_edge__edge12;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge12.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if(edge_cur_TNBUnfolded_edge__edge12.isMatched
                                                                                            && (edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge0
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge6
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge9
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge1
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge10
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge2
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge7
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge13
                                                                                                || edge_cur_TNBUnfolded_edge__edge12==edge_cur_TNBUnfolded_edge__edge11
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        bool edge_cur_TNBUnfolded_edge__edge12_prevIsMatched = edge_cur_TNBUnfolded_edge__edge12.isMatched;
                                                                                        edge_cur_TNBUnfolded_edge__edge12.isMatched = true;
                                                                                        LGSPNode node_cur_TNBUnfolded_node__node2 = edge_cur_TNBUnfolded_edge__edge12.target;
                                                                                        if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node2.type.TypeID]) {
                                                                                            edge_cur_TNBUnfolded_edge__edge12.isMatched = edge_cur_TNBUnfolded_edge__edge12_prevIsMatched;
                                                                                            continue;
                                                                                        }
                                                                                        if(node_cur_TNBUnfolded_node__node2.isMatched
                                                                                            && node_cur_TNBUnfolded_node__node2==node_cur_TNBUnfolded_node__node1
                                                                                            )
                                                                                        {
                                                                                            edge_cur_TNBUnfolded_edge__edge12.isMatched = edge_cur_TNBUnfolded_edge__edge12_prevIsMatched;
                                                                                            continue;
                                                                                        }
                                                                                        bool node_cur_TNBUnfolded_node__node2_prevIsMatched = node_cur_TNBUnfolded_node__node2.isMatched;
                                                                                        node_cur_TNBUnfolded_node__node2.isMatched = true;
                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge3 = node_cur_TNBUnfolded_node_c4.outhead;
                                                                                        if(edge_head_TNBUnfolded_edge__edge3 != null)
                                                                                        {
                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge3 = edge_head_TNBUnfolded_edge__edge3;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge3.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if(edge_cur_TNBUnfolded_edge__edge3.isMatched
                                                                                                    && (edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge0
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge6
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge9
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge1
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge10
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge2
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge7
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge13
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge11
                                                                                                        || edge_cur_TNBUnfolded_edge__edge3==edge_cur_TNBUnfolded_edge__edge12
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                bool edge_cur_TNBUnfolded_edge__edge3_prevIsMatched = edge_cur_TNBUnfolded_edge__edge3.isMatched;
                                                                                                edge_cur_TNBUnfolded_edge__edge3.isMatched = true;
                                                                                                LGSPNode node_cur_TNBUnfolded_node_c5 = edge_cur_TNBUnfolded_edge__edge3.target;
                                                                                                if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c5.type.TypeID]) {
                                                                                                    edge_cur_TNBUnfolded_edge__edge3.isMatched = edge_cur_TNBUnfolded_edge__edge3_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                if(node_cur_TNBUnfolded_node_c5.isMatched
                                                                                                    && (node_cur_TNBUnfolded_node_c5==node_cur_TNBUnfolded_node_c1
                                                                                                        || node_cur_TNBUnfolded_node_c5==node_cur_TNBUnfolded_node_c2
                                                                                                        || node_cur_TNBUnfolded_node_c5==node_cur_TNBUnfolded_node_c3
                                                                                                        || node_cur_TNBUnfolded_node_c5==node_cur_TNBUnfolded_node_c4
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    edge_cur_TNBUnfolded_edge__edge3.isMatched = edge_cur_TNBUnfolded_edge__edge3_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                bool node_cur_TNBUnfolded_node_c5_prevIsMatched = node_cur_TNBUnfolded_node_c5.isMatched;
                                                                                                node_cur_TNBUnfolded_node_c5.isMatched = true;
                                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge14 = node_cur_TNBUnfolded_node_c4.outhead;
                                                                                                if(edge_head_TNBUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge14 = edge_head_TNBUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if(edge_cur_TNBUnfolded_edge__edge14.isMatched
                                                                                                            && (edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                || edge_cur_TNBUnfolded_edge__edge14==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool edge_cur_TNBUnfolded_edge__edge14_prevIsMatched = edge_cur_TNBUnfolded_edge__edge14.isMatched;
                                                                                                        edge_cur_TNBUnfolded_edge__edge14.isMatched = true;
                                                                                                        LGSPNode node_cur_TNBUnfolded_node_n4 = edge_cur_TNBUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_N.isMyType[node_cur_TNBUnfolded_node_n4.type.TypeID]) {
                                                                                                            edge_cur_TNBUnfolded_edge__edge14.isMatched = edge_cur_TNBUnfolded_edge__edge14_prevIsMatched;
                                                                                                            continue;
                                                                                                        }
                                                                                                        if(node_cur_TNBUnfolded_node_n4.isMatched
                                                                                                            && node_cur_TNBUnfolded_node_n4==node_cur_TNBUnfolded_node_n2
                                                                                                            )
                                                                                                        {
                                                                                                            edge_cur_TNBUnfolded_edge__edge14.isMatched = edge_cur_TNBUnfolded_edge__edge14_prevIsMatched;
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool node_cur_TNBUnfolded_node_n4_prevIsMatched = node_cur_TNBUnfolded_node_n4.isMatched;
                                                                                                        node_cur_TNBUnfolded_node_n4.isMatched = true;
                                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge4 = node_cur_TNBUnfolded_node_c5.outhead;
                                                                                                        if(edge_head_TNBUnfolded_edge__edge4 != null)
                                                                                                        {
                                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge4 = edge_head_TNBUnfolded_edge__edge4;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(edge_cur_TNBUnfolded_edge__edge4.isMatched
                                                                                                                    && (edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                        || edge_cur_TNBUnfolded_edge__edge4==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                bool edge_cur_TNBUnfolded_edge__edge4_prevIsMatched = edge_cur_TNBUnfolded_edge__edge4.isMatched;
                                                                                                                edge_cur_TNBUnfolded_edge__edge4.isMatched = true;
                                                                                                                LGSPNode node_cur_TNBUnfolded_node_c6 = edge_cur_TNBUnfolded_edge__edge4.target;
                                                                                                                if(!NodeType_C.isMyType[node_cur_TNBUnfolded_node_c6.type.TypeID]) {
                                                                                                                    edge_cur_TNBUnfolded_edge__edge4.isMatched = edge_cur_TNBUnfolded_edge__edge4_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(node_cur_TNBUnfolded_node_c6.isMatched
                                                                                                                    && (node_cur_TNBUnfolded_node_c6==node_cur_TNBUnfolded_node_c1
                                                                                                                        || node_cur_TNBUnfolded_node_c6==node_cur_TNBUnfolded_node_c2
                                                                                                                        || node_cur_TNBUnfolded_node_c6==node_cur_TNBUnfolded_node_c3
                                                                                                                        || node_cur_TNBUnfolded_node_c6==node_cur_TNBUnfolded_node_c4
                                                                                                                        || node_cur_TNBUnfolded_node_c6==node_cur_TNBUnfolded_node_c5
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    edge_cur_TNBUnfolded_edge__edge4.isMatched = edge_cur_TNBUnfolded_edge__edge4_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge8 = node_cur_TNBUnfolded_node_c5.outhead;
                                                                                                                if(edge_head_TNBUnfolded_edge__edge8 != null)
                                                                                                                {
                                                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge8 = edge_head_TNBUnfolded_edge__edge8;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge8.target != node_cur_TNBUnfolded_node_c6) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge8.isMatched
                                                                                                                            && (edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                || edge_cur_TNBUnfolded_edge__edge8==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        bool edge_cur_TNBUnfolded_edge__edge8_prevIsMatched = edge_cur_TNBUnfolded_edge__edge8.isMatched;
                                                                                                                        edge_cur_TNBUnfolded_edge__edge8.isMatched = true;
                                                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge17 = node_cur_TNBUnfolded_node_c5.outhead;
                                                                                                                        if(edge_head_TNBUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge17 = edge_head_TNBUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(edge_cur_TNBUnfolded_edge__edge17.isMatched
                                                                                                                                    && (edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge17==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                bool edge_cur_TNBUnfolded_edge__edge17_prevIsMatched = edge_cur_TNBUnfolded_edge__edge17.isMatched;
                                                                                                                                edge_cur_TNBUnfolded_edge__edge17.isMatched = true;
                                                                                                                                LGSPNode node_cur_TNBUnfolded_node__node6 = edge_cur_TNBUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_H.isMyType[node_cur_TNBUnfolded_node__node6.type.TypeID]) {
                                                                                                                                    edge_cur_TNBUnfolded_edge__edge17.isMatched = edge_cur_TNBUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(node_cur_TNBUnfolded_node__node6.isMatched
                                                                                                                                    && (node_cur_TNBUnfolded_node__node6==node_cur_TNBUnfolded_node__node0
                                                                                                                                        || node_cur_TNBUnfolded_node__node6==node_cur_TNBUnfolded_node__node3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    edge_cur_TNBUnfolded_edge__edge17.isMatched = edge_cur_TNBUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge15 = node_cur_TNBUnfolded_node_n4.outhead;
                                                                                                                                if(edge_head_TNBUnfolded_edge__edge15 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge15 = edge_head_TNBUnfolded_edge__edge15;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge15.isMatched
                                                                                                                                            && (edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge15==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        bool edge_cur_TNBUnfolded_edge__edge15_prevIsMatched = edge_cur_TNBUnfolded_edge__edge15.isMatched;
                                                                                                                                        edge_cur_TNBUnfolded_edge__edge15.isMatched = true;
                                                                                                                                        LGSPNode node_cur_TNBUnfolded_node__node4 = edge_cur_TNBUnfolded_edge__edge15.target;
                                                                                                                                        if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node4.type.TypeID]) {
                                                                                                                                            edge_cur_TNBUnfolded_edge__edge15.isMatched = edge_cur_TNBUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(node_cur_TNBUnfolded_node__node4.isMatched
                                                                                                                                            && (node_cur_TNBUnfolded_node__node4==node_cur_TNBUnfolded_node__node1
                                                                                                                                                || node_cur_TNBUnfolded_node__node4==node_cur_TNBUnfolded_node__node2
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            edge_cur_TNBUnfolded_edge__edge15.isMatched = edge_cur_TNBUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        bool node_cur_TNBUnfolded_node__node4_prevIsMatched = node_cur_TNBUnfolded_node__node4.isMatched;
                                                                                                                                        node_cur_TNBUnfolded_node__node4.isMatched = true;
                                                                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge16 = node_cur_TNBUnfolded_node_n4.outhead;
                                                                                                                                        if(edge_head_TNBUnfolded_edge__edge16 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge16 = edge_head_TNBUnfolded_edge__edge16;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge16.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(edge_cur_TNBUnfolded_edge__edge16.isMatched
                                                                                                                                                    && (edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge16==edge_cur_TNBUnfolded_edge__edge15
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                bool edge_cur_TNBUnfolded_edge__edge16_prevIsMatched = edge_cur_TNBUnfolded_edge__edge16.isMatched;
                                                                                                                                                edge_cur_TNBUnfolded_edge__edge16.isMatched = true;
                                                                                                                                                LGSPNode node_cur_TNBUnfolded_node__node5 = edge_cur_TNBUnfolded_edge__edge16.target;
                                                                                                                                                if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node5.type.TypeID]) {
                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge16.isMatched = edge_cur_TNBUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(node_cur_TNBUnfolded_node__node5.isMatched
                                                                                                                                                    && (node_cur_TNBUnfolded_node__node5==node_cur_TNBUnfolded_node__node1
                                                                                                                                                        || node_cur_TNBUnfolded_node__node5==node_cur_TNBUnfolded_node__node2
                                                                                                                                                        || node_cur_TNBUnfolded_node__node5==node_cur_TNBUnfolded_node__node4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge16.isMatched = edge_cur_TNBUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                bool node_cur_TNBUnfolded_node__node5_prevIsMatched = node_cur_TNBUnfolded_node__node5.isMatched;
                                                                                                                                                node_cur_TNBUnfolded_node__node5.isMatched = true;
                                                                                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge5 = node_cur_TNBUnfolded_node_c6.outhead;
                                                                                                                                                if(edge_head_TNBUnfolded_edge__edge5 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge5 = edge_head_TNBUnfolded_edge__edge5;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge5.target != node_cur_TNBUnfolded_node_c1) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge5.isMatched
                                                                                                                                                            && (edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge15
                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge5==edge_cur_TNBUnfolded_edge__edge16
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        bool edge_cur_TNBUnfolded_edge__edge5_prevIsMatched = edge_cur_TNBUnfolded_edge__edge5.isMatched;
                                                                                                                                                        edge_cur_TNBUnfolded_edge__edge5.isMatched = true;
                                                                                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge18 = node_cur_TNBUnfolded_node_c6.outhead;
                                                                                                                                                        if(edge_head_TNBUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge18 = edge_head_TNBUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(edge_cur_TNBUnfolded_edge__edge18.isMatched
                                                                                                                                                                    && (edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge15
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge16
                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge18==edge_cur_TNBUnfolded_edge__edge5
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                bool edge_cur_TNBUnfolded_edge__edge18_prevIsMatched = edge_cur_TNBUnfolded_edge__edge18.isMatched;
                                                                                                                                                                edge_cur_TNBUnfolded_edge__edge18.isMatched = true;
                                                                                                                                                                LGSPNode node_cur_TNBUnfolded_node_n6 = edge_cur_TNBUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_N.isMyType[node_cur_TNBUnfolded_node_n6.type.TypeID]) {
                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge18.isMatched = edge_cur_TNBUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(node_cur_TNBUnfolded_node_n6.isMatched
                                                                                                                                                                    && (node_cur_TNBUnfolded_node_n6==node_cur_TNBUnfolded_node_n2
                                                                                                                                                                        || node_cur_TNBUnfolded_node_n6==node_cur_TNBUnfolded_node_n4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge18.isMatched = edge_cur_TNBUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                LGSPEdge edge_head_TNBUnfolded_edge__edge19 = node_cur_TNBUnfolded_node_n6.outhead;
                                                                                                                                                                if(edge_head_TNBUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge edge_cur_TNBUnfolded_edge__edge19 = edge_head_TNBUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(edge_cur_TNBUnfolded_edge__edge19.isMatched
                                                                                                                                                                            && (edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge15
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge16
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge5
                                                                                                                                                                                || edge_cur_TNBUnfolded_edge__edge19==edge_cur_TNBUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        bool edge_cur_TNBUnfolded_edge__edge19_prevIsMatched = edge_cur_TNBUnfolded_edge__edge19.isMatched;
                                                                                                                                                                        edge_cur_TNBUnfolded_edge__edge19.isMatched = true;
                                                                                                                                                                        LGSPNode node_cur_TNBUnfolded_node__node7 = edge_cur_TNBUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            edge_cur_TNBUnfolded_edge__edge19.isMatched = edge_cur_TNBUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(node_cur_TNBUnfolded_node__node7.isMatched
                                                                                                                                                                            && (node_cur_TNBUnfolded_node__node7==node_cur_TNBUnfolded_node__node1
                                                                                                                                                                                || node_cur_TNBUnfolded_node__node7==node_cur_TNBUnfolded_node__node2
                                                                                                                                                                                || node_cur_TNBUnfolded_node__node7==node_cur_TNBUnfolded_node__node4
                                                                                                                                                                                || node_cur_TNBUnfolded_node__node7==node_cur_TNBUnfolded_node__node5
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            edge_cur_TNBUnfolded_edge__edge19.isMatched = edge_cur_TNBUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        bool node_cur_TNBUnfolded_node__node7_prevIsMatched = node_cur_TNBUnfolded_node__node7.isMatched;
                                                                                                                                                                        node_cur_TNBUnfolded_node__node7.isMatched = true;
                                                                                                                                                                        LGSPEdge edge_head_TNBUnfolded_edge__edge20 = node_cur_TNBUnfolded_node_n6.outhead;
                                                                                                                                                                        if(edge_head_TNBUnfolded_edge__edge20 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge edge_cur_TNBUnfolded_edge__edge20 = edge_head_TNBUnfolded_edge__edge20;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNBUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(edge_cur_TNBUnfolded_edge__edge20.isMatched
                                                                                                                                                                                    && (edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge0
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge6
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge9
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge1
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge10
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge2
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge7
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge13
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge11
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge12
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge3
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge14
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge4
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge8
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge17
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge15
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge16
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge5
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge18
                                                                                                                                                                                        || edge_cur_TNBUnfolded_edge__edge20==edge_cur_TNBUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                LGSPNode node_cur_TNBUnfolded_node__node8 = edge_cur_TNBUnfolded_edge__edge20.target;
                                                                                                                                                                                if(!NodeType_O.isMyType[node_cur_TNBUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(node_cur_TNBUnfolded_node__node8.isMatched
                                                                                                                                                                                    && (node_cur_TNBUnfolded_node__node8==node_cur_TNBUnfolded_node__node1
                                                                                                                                                                                        || node_cur_TNBUnfolded_node__node8==node_cur_TNBUnfolded_node__node2
                                                                                                                                                                                        || node_cur_TNBUnfolded_node__node8==node_cur_TNBUnfolded_node__node4
                                                                                                                                                                                        || node_cur_TNBUnfolded_node__node8==node_cur_TNBUnfolded_node__node5
                                                                                                                                                                                        || node_cur_TNBUnfolded_node__node8==node_cur_TNBUnfolded_node__node7
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c1] = node_cur_TNBUnfolded_node_c1;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c2] = node_cur_TNBUnfolded_node_c2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c3] = node_cur_TNBUnfolded_node_c3;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c4] = node_cur_TNBUnfolded_node_c4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c5] = node_cur_TNBUnfolded_node_c5;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@c6] = node_cur_TNBUnfolded_node_c6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node0] = node_cur_TNBUnfolded_node__node0;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n2] = node_cur_TNBUnfolded_node_n2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node1] = node_cur_TNBUnfolded_node__node1;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node2] = node_cur_TNBUnfolded_node__node2;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node3] = node_cur_TNBUnfolded_node__node3;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n4] = node_cur_TNBUnfolded_node_n4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node4] = node_cur_TNBUnfolded_node__node4;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node5] = node_cur_TNBUnfolded_node__node5;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node6] = node_cur_TNBUnfolded_node__node6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@n6] = node_cur_TNBUnfolded_node_n6;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node7] = node_cur_TNBUnfolded_node__node7;
                                                                                                                                                                                match.Nodes[(int)Rule_TNBUnfolded.TNBUnfolded_NodeNums.@_node8] = node_cur_TNBUnfolded_node__node8;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge0] = edge_cur_TNBUnfolded_edge__edge0;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge1] = edge_cur_TNBUnfolded_edge__edge1;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge2] = edge_cur_TNBUnfolded_edge__edge2;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge3] = edge_cur_TNBUnfolded_edge__edge3;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge4] = edge_cur_TNBUnfolded_edge__edge4;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge5] = edge_cur_TNBUnfolded_edge__edge5;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge6] = edge_cur_TNBUnfolded_edge__edge6;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge7] = edge_cur_TNBUnfolded_edge__edge7;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge8] = edge_cur_TNBUnfolded_edge__edge8;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge9] = edge_cur_TNBUnfolded_edge__edge9;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge10] = edge_cur_TNBUnfolded_edge__edge10;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge11] = edge_cur_TNBUnfolded_edge__edge11;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge12] = edge_cur_TNBUnfolded_edge__edge12;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge13] = edge_cur_TNBUnfolded_edge__edge13;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge14] = edge_cur_TNBUnfolded_edge__edge14;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge15] = edge_cur_TNBUnfolded_edge__edge15;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge16] = edge_cur_TNBUnfolded_edge__edge16;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge17] = edge_cur_TNBUnfolded_edge__edge17;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge18] = edge_cur_TNBUnfolded_edge__edge18;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge19] = edge_cur_TNBUnfolded_edge__edge19;
                                                                                                                                                                                match.Edges[(int)Rule_TNBUnfolded.TNBUnfolded_EdgeNums.@_edge20] = edge_cur_TNBUnfolded_edge__edge20;
                                                                                                                                                                                matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                {
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n6.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge20);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n6.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge19);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c6.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge18);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c6.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge5);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n4.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge16);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n4.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge15);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge17);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge8);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge4);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c4.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge14);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c4.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge3);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n2.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge12);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n2.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge11);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge13);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge7);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge2);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c2.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge10);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c2.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge1);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c1.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge9);
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c1.MoveOutHeadAfter(edge_cur_TNBUnfolded_edge__edge6);
                                                                                                                                                                                    graph.MoveHeadAfter(edge_cur_TNBUnfolded_edge__edge0);
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node7.isMatched = node_cur_TNBUnfolded_node__node7_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge19.isMatched = edge_cur_TNBUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge18.isMatched = edge_cur_TNBUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge5.isMatched = edge_cur_TNBUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node5.isMatched = node_cur_TNBUnfolded_node__node5_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge16.isMatched = edge_cur_TNBUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node4.isMatched = node_cur_TNBUnfolded_node__node4_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge15.isMatched = edge_cur_TNBUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge17.isMatched = edge_cur_TNBUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge8.isMatched = edge_cur_TNBUnfolded_edge__edge8_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge4.isMatched = edge_cur_TNBUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n4.isMatched = node_cur_TNBUnfolded_node_n4_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge14.isMatched = edge_cur_TNBUnfolded_edge__edge14_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c5.isMatched = node_cur_TNBUnfolded_node_c5_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge3.isMatched = edge_cur_TNBUnfolded_edge__edge3_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node2.isMatched = node_cur_TNBUnfolded_node__node2_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge12.isMatched = edge_cur_TNBUnfolded_edge__edge12_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node1.isMatched = node_cur_TNBUnfolded_node__node1_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge11.isMatched = edge_cur_TNBUnfolded_edge__edge11_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node3.isMatched = node_cur_TNBUnfolded_node__node3_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge13.isMatched = edge_cur_TNBUnfolded_edge__edge13_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge7.isMatched = edge_cur_TNBUnfolded_edge__edge7_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c4.isMatched = node_cur_TNBUnfolded_node_c4_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge2.isMatched = edge_cur_TNBUnfolded_edge__edge2_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_n2.isMatched = node_cur_TNBUnfolded_node_n2_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge10.isMatched = edge_cur_TNBUnfolded_edge__edge10_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c3.isMatched = node_cur_TNBUnfolded_node_c3_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge1.isMatched = edge_cur_TNBUnfolded_edge__edge1_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node__node0.isMatched = node_cur_TNBUnfolded_node__node0_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge9.isMatched = edge_cur_TNBUnfolded_edge__edge9_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge6.isMatched = edge_cur_TNBUnfolded_edge__edge6_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c2.isMatched = node_cur_TNBUnfolded_node_c2_prevIsMatched;
                                                                                                                                                                                    node_cur_TNBUnfolded_node_c1.isMatched = node_cur_TNBUnfolded_node_c1_prevIsMatched;
                                                                                                                                                                                    edge_cur_TNBUnfolded_edge__edge0.isMatched = edge_cur_TNBUnfolded_edge__edge0_prevIsMatched;
                                                                                                                                                                                    return matches;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            while( (edge_cur_TNBUnfolded_edge__edge20 = edge_cur_TNBUnfolded_edge__edge20.outNext) != edge_head_TNBUnfolded_edge__edge20 );
                                                                                                                                                                        }
                                                                                                                                                                        node_cur_TNBUnfolded_node__node7.isMatched = node_cur_TNBUnfolded_node__node7_prevIsMatched;
                                                                                                                                                                        edge_cur_TNBUnfolded_edge__edge19.isMatched = edge_cur_TNBUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                    }
                                                                                                                                                                    while( (edge_cur_TNBUnfolded_edge__edge19 = edge_cur_TNBUnfolded_edge__edge19.outNext) != edge_head_TNBUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                edge_cur_TNBUnfolded_edge__edge18.isMatched = edge_cur_TNBUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                            }
                                                                                                                                                            while( (edge_cur_TNBUnfolded_edge__edge18 = edge_cur_TNBUnfolded_edge__edge18.outNext) != edge_head_TNBUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        edge_cur_TNBUnfolded_edge__edge5.isMatched = edge_cur_TNBUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                    }
                                                                                                                                                    while( (edge_cur_TNBUnfolded_edge__edge5 = edge_cur_TNBUnfolded_edge__edge5.outNext) != edge_head_TNBUnfolded_edge__edge5 );
                                                                                                                                                }
                                                                                                                                                node_cur_TNBUnfolded_node__node5.isMatched = node_cur_TNBUnfolded_node__node5_prevIsMatched;
                                                                                                                                                edge_cur_TNBUnfolded_edge__edge16.isMatched = edge_cur_TNBUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                            }
                                                                                                                                            while( (edge_cur_TNBUnfolded_edge__edge16 = edge_cur_TNBUnfolded_edge__edge16.outNext) != edge_head_TNBUnfolded_edge__edge16 );
                                                                                                                                        }
                                                                                                                                        node_cur_TNBUnfolded_node__node4.isMatched = node_cur_TNBUnfolded_node__node4_prevIsMatched;
                                                                                                                                        edge_cur_TNBUnfolded_edge__edge15.isMatched = edge_cur_TNBUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                    }
                                                                                                                                    while( (edge_cur_TNBUnfolded_edge__edge15 = edge_cur_TNBUnfolded_edge__edge15.outNext) != edge_head_TNBUnfolded_edge__edge15 );
                                                                                                                                }
                                                                                                                                edge_cur_TNBUnfolded_edge__edge17.isMatched = edge_cur_TNBUnfolded_edge__edge17_prevIsMatched;
                                                                                                                            }
                                                                                                                            while( (edge_cur_TNBUnfolded_edge__edge17 = edge_cur_TNBUnfolded_edge__edge17.outNext) != edge_head_TNBUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        edge_cur_TNBUnfolded_edge__edge8.isMatched = edge_cur_TNBUnfolded_edge__edge8_prevIsMatched;
                                                                                                                    }
                                                                                                                    while( (edge_cur_TNBUnfolded_edge__edge8 = edge_cur_TNBUnfolded_edge__edge8.outNext) != edge_head_TNBUnfolded_edge__edge8 );
                                                                                                                }
                                                                                                                edge_cur_TNBUnfolded_edge__edge4.isMatched = edge_cur_TNBUnfolded_edge__edge4_prevIsMatched;
                                                                                                            }
                                                                                                            while( (edge_cur_TNBUnfolded_edge__edge4 = edge_cur_TNBUnfolded_edge__edge4.outNext) != edge_head_TNBUnfolded_edge__edge4 );
                                                                                                        }
                                                                                                        node_cur_TNBUnfolded_node_n4.isMatched = node_cur_TNBUnfolded_node_n4_prevIsMatched;
                                                                                                        edge_cur_TNBUnfolded_edge__edge14.isMatched = edge_cur_TNBUnfolded_edge__edge14_prevIsMatched;
                                                                                                    }
                                                                                                    while( (edge_cur_TNBUnfolded_edge__edge14 = edge_cur_TNBUnfolded_edge__edge14.outNext) != edge_head_TNBUnfolded_edge__edge14 );
                                                                                                }
                                                                                                node_cur_TNBUnfolded_node_c5.isMatched = node_cur_TNBUnfolded_node_c5_prevIsMatched;
                                                                                                edge_cur_TNBUnfolded_edge__edge3.isMatched = edge_cur_TNBUnfolded_edge__edge3_prevIsMatched;
                                                                                            }
                                                                                            while( (edge_cur_TNBUnfolded_edge__edge3 = edge_cur_TNBUnfolded_edge__edge3.outNext) != edge_head_TNBUnfolded_edge__edge3 );
                                                                                        }
                                                                                        node_cur_TNBUnfolded_node__node2.isMatched = node_cur_TNBUnfolded_node__node2_prevIsMatched;
                                                                                        edge_cur_TNBUnfolded_edge__edge12.isMatched = edge_cur_TNBUnfolded_edge__edge12_prevIsMatched;
                                                                                    }
                                                                                    while( (edge_cur_TNBUnfolded_edge__edge12 = edge_cur_TNBUnfolded_edge__edge12.outNext) != edge_head_TNBUnfolded_edge__edge12 );
                                                                                }
                                                                                node_cur_TNBUnfolded_node__node1.isMatched = node_cur_TNBUnfolded_node__node1_prevIsMatched;
                                                                                edge_cur_TNBUnfolded_edge__edge11.isMatched = edge_cur_TNBUnfolded_edge__edge11_prevIsMatched;
                                                                            }
                                                                            while( (edge_cur_TNBUnfolded_edge__edge11 = edge_cur_TNBUnfolded_edge__edge11.outNext) != edge_head_TNBUnfolded_edge__edge11 );
                                                                        }
                                                                        node_cur_TNBUnfolded_node__node3.isMatched = node_cur_TNBUnfolded_node__node3_prevIsMatched;
                                                                        edge_cur_TNBUnfolded_edge__edge13.isMatched = edge_cur_TNBUnfolded_edge__edge13_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_TNBUnfolded_edge__edge13 = edge_cur_TNBUnfolded_edge__edge13.outNext) != edge_head_TNBUnfolded_edge__edge13 );
                                                                }
                                                                edge_cur_TNBUnfolded_edge__edge7.isMatched = edge_cur_TNBUnfolded_edge__edge7_prevIsMatched;
                                                            }
                                                            while( (edge_cur_TNBUnfolded_edge__edge7 = edge_cur_TNBUnfolded_edge__edge7.outNext) != edge_head_TNBUnfolded_edge__edge7 );
                                                        }
                                                        node_cur_TNBUnfolded_node_c4.isMatched = node_cur_TNBUnfolded_node_c4_prevIsMatched;
                                                        edge_cur_TNBUnfolded_edge__edge2.isMatched = edge_cur_TNBUnfolded_edge__edge2_prevIsMatched;
                                                    }
                                                    while( (edge_cur_TNBUnfolded_edge__edge2 = edge_cur_TNBUnfolded_edge__edge2.outNext) != edge_head_TNBUnfolded_edge__edge2 );
                                                }
                                                node_cur_TNBUnfolded_node_n2.isMatched = node_cur_TNBUnfolded_node_n2_prevIsMatched;
                                                edge_cur_TNBUnfolded_edge__edge10.isMatched = edge_cur_TNBUnfolded_edge__edge10_prevIsMatched;
                                            }
                                            while( (edge_cur_TNBUnfolded_edge__edge10 = edge_cur_TNBUnfolded_edge__edge10.outNext) != edge_head_TNBUnfolded_edge__edge10 );
                                        }
                                        node_cur_TNBUnfolded_node_c3.isMatched = node_cur_TNBUnfolded_node_c3_prevIsMatched;
                                        edge_cur_TNBUnfolded_edge__edge1.isMatched = edge_cur_TNBUnfolded_edge__edge1_prevIsMatched;
                                    }
                                    while( (edge_cur_TNBUnfolded_edge__edge1 = edge_cur_TNBUnfolded_edge__edge1.outNext) != edge_head_TNBUnfolded_edge__edge1 );
                                }
                                node_cur_TNBUnfolded_node__node0.isMatched = node_cur_TNBUnfolded_node__node0_prevIsMatched;
                                edge_cur_TNBUnfolded_edge__edge9.isMatched = edge_cur_TNBUnfolded_edge__edge9_prevIsMatched;
                            }
                            while( (edge_cur_TNBUnfolded_edge__edge9 = edge_cur_TNBUnfolded_edge__edge9.outNext) != edge_head_TNBUnfolded_edge__edge9 );
                        }
                        edge_cur_TNBUnfolded_edge__edge6.isMatched = edge_cur_TNBUnfolded_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_TNBUnfolded_edge__edge6 = edge_cur_TNBUnfolded_edge__edge6.outNext) != edge_head_TNBUnfolded_edge__edge6 );
                }
                node_cur_TNBUnfolded_node_c2.isMatched = node_cur_TNBUnfolded_node_c2_prevIsMatched;
                node_cur_TNBUnfolded_node_c1.isMatched = node_cur_TNBUnfolded_node_c1_prevIsMatched;
                edge_cur_TNBUnfolded_edge__edge0.isMatched = edge_cur_TNBUnfolded_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNT : LGSPAction
    {
        public Action_TNT() {
            rulePattern = Rule_TNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 9, 6);
        }

        public override string Name { get { return "TNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNT instance = new Action_TNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int edge_type_id_TNT_edge__edge0 = 1;
            for(LGSPEdge edge_head_TNT_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_TNT_edge__edge0], edge_cur_TNT_edge__edge0 = edge_head_TNT_edge__edge0.typeNext; edge_cur_TNT_edge__edge0 != edge_head_TNT_edge__edge0; edge_cur_TNT_edge__edge0 = edge_cur_TNT_edge__edge0.typeNext)
            {
                bool edge_cur_TNT_edge__edge0_prevIsMatched = edge_cur_TNT_edge__edge0.isMatched;
                edge_cur_TNT_edge__edge0.isMatched = true;
                LGSPNode node_cur_TNT_node_c1 = edge_cur_TNT_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_TNT_node_c1.type.TypeID]) {
                    edge_cur_TNT_edge__edge0.isMatched = edge_cur_TNT_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNT_node_c1_prevIsMatched = node_cur_TNT_node_c1.isMatched;
                node_cur_TNT_node_c1.isMatched = true;
                LGSPNode node_cur_TNT_node_c2 = edge_cur_TNT_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_TNT_node_c2.type.TypeID]) {
                    node_cur_TNT_node_c1.isMatched = node_cur_TNT_node_c1_prevIsMatched;
                    edge_cur_TNT_edge__edge0.isMatched = edge_cur_TNT_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_TNT_node_c2.isMatched
                    && node_cur_TNT_node_c2==node_cur_TNT_node_c1
                    )
                {
                    node_cur_TNT_node_c1.isMatched = node_cur_TNT_node_c1_prevIsMatched;
                    edge_cur_TNT_edge__edge0.isMatched = edge_cur_TNT_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNT_node_c2_prevIsMatched = node_cur_TNT_node_c2.isMatched;
                node_cur_TNT_node_c2.isMatched = true;
                LGSPEdge edge_head_TNT_edge__edge6 = node_cur_TNT_node_c1.outhead;
                if(edge_head_TNT_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_TNT_edge__edge6 = edge_head_TNT_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_TNT_edge__edge6.target != node_cur_TNT_node_c2) {
                            continue;
                        }
                        if(edge_cur_TNT_edge__edge6.isMatched
                            && edge_cur_TNT_edge__edge6==edge_cur_TNT_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_TNT_edge__edge6_prevIsMatched = edge_cur_TNT_edge__edge6.isMatched;
                        edge_cur_TNT_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_TNT_edge__edge1 = node_cur_TNT_node_c2.outhead;
                        if(edge_head_TNT_edge__edge1 != null)
                        {
                            LGSPEdge edge_cur_TNT_edge__edge1 = edge_head_TNT_edge__edge1;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge1.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_TNT_edge__edge1.isMatched
                                    && (edge_cur_TNT_edge__edge1==edge_cur_TNT_edge__edge0
                                        || edge_cur_TNT_edge__edge1==edge_cur_TNT_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_TNT_edge__edge1_prevIsMatched = edge_cur_TNT_edge__edge1.isMatched;
                                edge_cur_TNT_edge__edge1.isMatched = true;
                                LGSPNode node_cur_TNT_node_c3 = edge_cur_TNT_edge__edge1.target;
                                if(!NodeType_C.isMyType[node_cur_TNT_node_c3.type.TypeID]) {
                                    edge_cur_TNT_edge__edge1.isMatched = edge_cur_TNT_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_TNT_node_c3.isMatched
                                    && (node_cur_TNT_node_c3==node_cur_TNT_node_c1
                                        || node_cur_TNT_node_c3==node_cur_TNT_node_c2
                                        )
                                    )
                                {
                                    edge_cur_TNT_edge__edge1.isMatched = edge_cur_TNT_edge__edge1_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_TNT_node_c3_prevIsMatched = node_cur_TNT_node_c3.isMatched;
                                node_cur_TNT_node_c3.isMatched = true;
                                LGSPEdge edge_head_TNT_edge__edge2 = node_cur_TNT_node_c3.outhead;
                                if(edge_head_TNT_edge__edge2 != null)
                                {
                                    LGSPEdge edge_cur_TNT_edge__edge2 = edge_head_TNT_edge__edge2;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge2.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_TNT_edge__edge2.isMatched
                                            && (edge_cur_TNT_edge__edge2==edge_cur_TNT_edge__edge0
                                                || edge_cur_TNT_edge__edge2==edge_cur_TNT_edge__edge6
                                                || edge_cur_TNT_edge__edge2==edge_cur_TNT_edge__edge1
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_TNT_edge__edge2_prevIsMatched = edge_cur_TNT_edge__edge2.isMatched;
                                        edge_cur_TNT_edge__edge2.isMatched = true;
                                        LGSPNode node_cur_TNT_node_c4 = edge_cur_TNT_edge__edge2.target;
                                        if(!NodeType_C.isMyType[node_cur_TNT_node_c4.type.TypeID]) {
                                            edge_cur_TNT_edge__edge2.isMatched = edge_cur_TNT_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_TNT_node_c4.isMatched
                                            && (node_cur_TNT_node_c4==node_cur_TNT_node_c1
                                                || node_cur_TNT_node_c4==node_cur_TNT_node_c2
                                                || node_cur_TNT_node_c4==node_cur_TNT_node_c3
                                                )
                                            )
                                        {
                                            edge_cur_TNT_edge__edge2.isMatched = edge_cur_TNT_edge__edge2_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_TNT_node_c4_prevIsMatched = node_cur_TNT_node_c4.isMatched;
                                        node_cur_TNT_node_c4.isMatched = true;
                                        LGSPEdge edge_head_TNT_edge__edge7 = node_cur_TNT_node_c3.outhead;
                                        if(edge_head_TNT_edge__edge7 != null)
                                        {
                                            LGSPEdge edge_cur_TNT_edge__edge7 = edge_head_TNT_edge__edge7;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge7.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_TNT_edge__edge7.target != node_cur_TNT_node_c4) {
                                                    continue;
                                                }
                                                if(edge_cur_TNT_edge__edge7.isMatched
                                                    && (edge_cur_TNT_edge__edge7==edge_cur_TNT_edge__edge0
                                                        || edge_cur_TNT_edge__edge7==edge_cur_TNT_edge__edge6
                                                        || edge_cur_TNT_edge__edge7==edge_cur_TNT_edge__edge1
                                                        || edge_cur_TNT_edge__edge7==edge_cur_TNT_edge__edge2
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_TNT_edge__edge7_prevIsMatched = edge_cur_TNT_edge__edge7.isMatched;
                                                edge_cur_TNT_edge__edge7.isMatched = true;
                                                LGSPEdge edge_head_TNT_edge__edge3 = node_cur_TNT_node_c4.outhead;
                                                if(edge_head_TNT_edge__edge3 != null)
                                                {
                                                    LGSPEdge edge_cur_TNT_edge__edge3 = edge_head_TNT_edge__edge3;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge3.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_TNT_edge__edge3.isMatched
                                                            && (edge_cur_TNT_edge__edge3==edge_cur_TNT_edge__edge0
                                                                || edge_cur_TNT_edge__edge3==edge_cur_TNT_edge__edge6
                                                                || edge_cur_TNT_edge__edge3==edge_cur_TNT_edge__edge1
                                                                || edge_cur_TNT_edge__edge3==edge_cur_TNT_edge__edge2
                                                                || edge_cur_TNT_edge__edge3==edge_cur_TNT_edge__edge7
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_TNT_edge__edge3_prevIsMatched = edge_cur_TNT_edge__edge3.isMatched;
                                                        edge_cur_TNT_edge__edge3.isMatched = true;
                                                        LGSPNode node_cur_TNT_node_c5 = edge_cur_TNT_edge__edge3.target;
                                                        if(!NodeType_C.isMyType[node_cur_TNT_node_c5.type.TypeID]) {
                                                            edge_cur_TNT_edge__edge3.isMatched = edge_cur_TNT_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        if(node_cur_TNT_node_c5.isMatched
                                                            && (node_cur_TNT_node_c5==node_cur_TNT_node_c1
                                                                || node_cur_TNT_node_c5==node_cur_TNT_node_c2
                                                                || node_cur_TNT_node_c5==node_cur_TNT_node_c3
                                                                || node_cur_TNT_node_c5==node_cur_TNT_node_c4
                                                                )
                                                            )
                                                        {
                                                            edge_cur_TNT_edge__edge3.isMatched = edge_cur_TNT_edge__edge3_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_TNT_node_c5_prevIsMatched = node_cur_TNT_node_c5.isMatched;
                                                        node_cur_TNT_node_c5.isMatched = true;
                                                        LGSPEdge edge_head_TNT_edge__edge4 = node_cur_TNT_node_c5.outhead;
                                                        if(edge_head_TNT_edge__edge4 != null)
                                                        {
                                                            LGSPEdge edge_cur_TNT_edge__edge4 = edge_head_TNT_edge__edge4;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge4.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_TNT_edge__edge4.isMatched
                                                                    && (edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge0
                                                                        || edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge6
                                                                        || edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge1
                                                                        || edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge2
                                                                        || edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge7
                                                                        || edge_cur_TNT_edge__edge4==edge_cur_TNT_edge__edge3
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_TNT_edge__edge4_prevIsMatched = edge_cur_TNT_edge__edge4.isMatched;
                                                                edge_cur_TNT_edge__edge4.isMatched = true;
                                                                LGSPNode node_cur_TNT_node_c6 = edge_cur_TNT_edge__edge4.target;
                                                                if(!NodeType_C.isMyType[node_cur_TNT_node_c6.type.TypeID]) {
                                                                    edge_cur_TNT_edge__edge4.isMatched = edge_cur_TNT_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_TNT_node_c6.isMatched
                                                                    && (node_cur_TNT_node_c6==node_cur_TNT_node_c1
                                                                        || node_cur_TNT_node_c6==node_cur_TNT_node_c2
                                                                        || node_cur_TNT_node_c6==node_cur_TNT_node_c3
                                                                        || node_cur_TNT_node_c6==node_cur_TNT_node_c4
                                                                        || node_cur_TNT_node_c6==node_cur_TNT_node_c5
                                                                        )
                                                                    )
                                                                {
                                                                    edge_cur_TNT_edge__edge4.isMatched = edge_cur_TNT_edge__edge4_prevIsMatched;
                                                                    continue;
                                                                }
                                                                LGSPEdge edge_head_TNT_edge__edge8 = node_cur_TNT_node_c5.outhead;
                                                                if(edge_head_TNT_edge__edge8 != null)
                                                                {
                                                                    LGSPEdge edge_cur_TNT_edge__edge8 = edge_head_TNT_edge__edge8;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge8.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNT_edge__edge8.target != node_cur_TNT_node_c6) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNT_edge__edge8.isMatched
                                                                            && (edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge0
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge6
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge1
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge2
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge7
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge3
                                                                                || edge_cur_TNT_edge__edge8==edge_cur_TNT_edge__edge4
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_TNT_edge__edge8_prevIsMatched = edge_cur_TNT_edge__edge8.isMatched;
                                                                        edge_cur_TNT_edge__edge8.isMatched = true;
                                                                        LGSPEdge edge_head_TNT_edge__edge5 = node_cur_TNT_node_c6.outhead;
                                                                        if(edge_head_TNT_edge__edge5 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_TNT_edge__edge5 = edge_head_TNT_edge__edge5;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNT_edge__edge5.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNT_edge__edge5.target != node_cur_TNT_node_c1) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNT_edge__edge5.isMatched
                                                                                    && (edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge0
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge6
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge1
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge2
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge7
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge3
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge4
                                                                                        || edge_cur_TNT_edge__edge5==edge_cur_TNT_edge__edge8
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                PatternAction_Nitro taskFor__subpattern5 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern5.Nitro_node_anchor = node_cur_TNT_node_c6;
                                                                                openTasks.Push(taskFor__subpattern5);
                                                                                PatternAction_Hydrogen taskFor__subpattern4 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern4.Hydrogen_node_anchor = node_cur_TNT_node_c5;
                                                                                openTasks.Push(taskFor__subpattern4);
                                                                                PatternAction_Nitro taskFor__subpattern3 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern3.Nitro_node_anchor = node_cur_TNT_node_c4;
                                                                                openTasks.Push(taskFor__subpattern3);
                                                                                PatternAction_Hydrogen taskFor__subpattern2 = new PatternAction_Hydrogen(graph, openTasks);
                                                                                taskFor__subpattern2.Hydrogen_node_anchor = node_cur_TNT_node_c3;
                                                                                openTasks.Push(taskFor__subpattern2);
                                                                                PatternAction_Nitro taskFor__subpattern1 = new PatternAction_Nitro(graph, openTasks);
                                                                                taskFor__subpattern1.Nitro_node_anchor = node_cur_TNT_node_c2;
                                                                                openTasks.Push(taskFor__subpattern1);
                                                                                PatternAction_Methyl taskFor__subpattern0 = new PatternAction_Methyl(graph, openTasks);
                                                                                taskFor__subpattern0.Methyl_node_anchor = node_cur_TNT_node_c1;
                                                                                openTasks.Push(taskFor__subpattern0);
                                                                                node_cur_TNT_node_c1.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNT_node_c2.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNT_node_c3.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNT_node_c4.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNT_node_c5.isMatchedByEnclosingPattern = true;
                                                                                node_cur_TNT_node_c6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge0.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge1.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge2.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge3.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge4.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge5.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge6.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge7.isMatchedByEnclosingPattern = true;
                                                                                edge_cur_TNT_edge__edge8.isMatchedByEnclosingPattern = true;
                                                                                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                openTasks.Pop();
                                                                                if(matchesList.Count>0) {
                                                                                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                                                                    {
                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c1] = node_cur_TNT_node_c1;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c2] = node_cur_TNT_node_c2;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c3] = node_cur_TNT_node_c3;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c4] = node_cur_TNT_node_c4;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c5] = node_cur_TNT_node_c5;
                                                                                        match.Nodes[(int)Rule_TNT.TNT_NodeNums.@c6] = node_cur_TNT_node_c6;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge0] = edge_cur_TNT_edge__edge0;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge1] = edge_cur_TNT_edge__edge1;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge2] = edge_cur_TNT_edge__edge2;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge3] = edge_cur_TNT_edge__edge3;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge4] = edge_cur_TNT_edge__edge4;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge5] = edge_cur_TNT_edge__edge5;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge6] = edge_cur_TNT_edge__edge6;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge7] = edge_cur_TNT_edge__edge7;
                                                                                        match.Edges[(int)Rule_TNT.TNT_EdgeNums.@_edge8] = edge_cur_TNT_edge__edge8;
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                                                                        match.EmbeddedGraphs[(int)Rule_TNT.TNT_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                    }
                                                                                    matchesList.Clear();
                                                                                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                    {
                                                                                        edge_cur_TNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                        node_cur_TNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                        edge_cur_TNT_edge__edge8.isMatched = edge_cur_TNT_edge__edge8_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge4.isMatched = edge_cur_TNT_edge__edge4_prevIsMatched;
                                                                                        node_cur_TNT_node_c5.isMatched = node_cur_TNT_node_c5_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge3.isMatched = edge_cur_TNT_edge__edge3_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge7.isMatched = edge_cur_TNT_edge__edge7_prevIsMatched;
                                                                                        node_cur_TNT_node_c4.isMatched = node_cur_TNT_node_c4_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge2.isMatched = edge_cur_TNT_edge__edge2_prevIsMatched;
                                                                                        node_cur_TNT_node_c3.isMatched = node_cur_TNT_node_c3_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge1.isMatched = edge_cur_TNT_edge__edge1_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge6.isMatched = edge_cur_TNT_edge__edge6_prevIsMatched;
                                                                                        node_cur_TNT_node_c2.isMatched = node_cur_TNT_node_c2_prevIsMatched;
                                                                                        node_cur_TNT_node_c1.isMatched = node_cur_TNT_node_c1_prevIsMatched;
                                                                                        edge_cur_TNT_edge__edge0.isMatched = edge_cur_TNT_edge__edge0_prevIsMatched;
                                                                                        return matches;
                                                                                    }
                                                                                    edge_cur_TNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                    edge_cur_TNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                    node_cur_TNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                    continue;
                                                                                }
                                                                                node_cur_TNT_node_c1.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNT_node_c2.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNT_node_c3.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNT_node_c4.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNT_node_c5.isMatchedByEnclosingPattern = false;
                                                                                node_cur_TNT_node_c6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge0.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge1.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge2.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge3.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge4.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge5.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge6.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge7.isMatchedByEnclosingPattern = false;
                                                                                edge_cur_TNT_edge__edge8.isMatchedByEnclosingPattern = false;
                                                                            }
                                                                            while( (edge_cur_TNT_edge__edge5 = edge_cur_TNT_edge__edge5.outNext) != edge_head_TNT_edge__edge5 );
                                                                        }
                                                                        edge_cur_TNT_edge__edge8.isMatched = edge_cur_TNT_edge__edge8_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_TNT_edge__edge8 = edge_cur_TNT_edge__edge8.outNext) != edge_head_TNT_edge__edge8 );
                                                                }
                                                                edge_cur_TNT_edge__edge4.isMatched = edge_cur_TNT_edge__edge4_prevIsMatched;
                                                            }
                                                            while( (edge_cur_TNT_edge__edge4 = edge_cur_TNT_edge__edge4.outNext) != edge_head_TNT_edge__edge4 );
                                                        }
                                                        node_cur_TNT_node_c5.isMatched = node_cur_TNT_node_c5_prevIsMatched;
                                                        edge_cur_TNT_edge__edge3.isMatched = edge_cur_TNT_edge__edge3_prevIsMatched;
                                                    }
                                                    while( (edge_cur_TNT_edge__edge3 = edge_cur_TNT_edge__edge3.outNext) != edge_head_TNT_edge__edge3 );
                                                }
                                                edge_cur_TNT_edge__edge7.isMatched = edge_cur_TNT_edge__edge7_prevIsMatched;
                                            }
                                            while( (edge_cur_TNT_edge__edge7 = edge_cur_TNT_edge__edge7.outNext) != edge_head_TNT_edge__edge7 );
                                        }
                                        node_cur_TNT_node_c4.isMatched = node_cur_TNT_node_c4_prevIsMatched;
                                        edge_cur_TNT_edge__edge2.isMatched = edge_cur_TNT_edge__edge2_prevIsMatched;
                                    }
                                    while( (edge_cur_TNT_edge__edge2 = edge_cur_TNT_edge__edge2.outNext) != edge_head_TNT_edge__edge2 );
                                }
                                node_cur_TNT_node_c3.isMatched = node_cur_TNT_node_c3_prevIsMatched;
                                edge_cur_TNT_edge__edge1.isMatched = edge_cur_TNT_edge__edge1_prevIsMatched;
                            }
                            while( (edge_cur_TNT_edge__edge1 = edge_cur_TNT_edge__edge1.outNext) != edge_head_TNT_edge__edge1 );
                        }
                        edge_cur_TNT_edge__edge6.isMatched = edge_cur_TNT_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_TNT_edge__edge6 = edge_cur_TNT_edge__edge6.outNext) != edge_head_TNT_edge__edge6 );
                }
                node_cur_TNT_node_c2.isMatched = node_cur_TNT_node_c2_prevIsMatched;
                node_cur_TNT_node_c1.isMatched = node_cur_TNT_node_c1_prevIsMatched;
                edge_cur_TNT_edge__edge0.isMatched = edge_cur_TNT_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNTChain : LGSPAction
    {
        public Action_TNTChain() {
            rulePattern = Rule_TNTChain.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 0, 2);
        }

        public override string Name { get { return "TNTChain"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTChain instance = new Action_TNTChain();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int node_type_id_TNTChain_node_c3 = 1;
            for(LGSPNode node_head_TNTChain_node_c3 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c3], node_cur_TNTChain_node_c3 = node_head_TNTChain_node_c3.typeNext; node_cur_TNTChain_node_c3 != node_head_TNTChain_node_c3; node_cur_TNTChain_node_c3 = node_cur_TNTChain_node_c3.typeNext)
            {
                bool node_cur_TNTChain_node_c3_prevIsMatched = node_cur_TNTChain_node_c3.isMatched;
                node_cur_TNTChain_node_c3.isMatched = true;
                int node_type_id_TNTChain_node_c5 = 1;
                for(LGSPNode node_head_TNTChain_node_c5 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c5], node_cur_TNTChain_node_c5 = node_head_TNTChain_node_c5.typeNext; node_cur_TNTChain_node_c5 != node_head_TNTChain_node_c5; node_cur_TNTChain_node_c5 = node_cur_TNTChain_node_c5.typeNext)
                {
                    if(node_cur_TNTChain_node_c5.isMatched
                        && node_cur_TNTChain_node_c5==node_cur_TNTChain_node_c3
                        )
                    {
                        continue;
                    }
                    bool node_cur_TNTChain_node_c5_prevIsMatched = node_cur_TNTChain_node_c5.isMatched;
                    node_cur_TNTChain_node_c5.isMatched = true;
                    int node_type_id_TNTChain_node_c6 = 1;
                    for(LGSPNode node_head_TNTChain_node_c6 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c6], node_cur_TNTChain_node_c6 = node_head_TNTChain_node_c6.typeNext; node_cur_TNTChain_node_c6 != node_head_TNTChain_node_c6; node_cur_TNTChain_node_c6 = node_cur_TNTChain_node_c6.typeNext)
                    {
                        if(node_cur_TNTChain_node_c6.isMatched
                            && (node_cur_TNTChain_node_c6==node_cur_TNTChain_node_c3
                                || node_cur_TNTChain_node_c6==node_cur_TNTChain_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        bool node_cur_TNTChain_node_c6_prevIsMatched = node_cur_TNTChain_node_c6.isMatched;
                        node_cur_TNTChain_node_c6.isMatched = true;
                        int node_type_id_TNTChain_node_c4 = 1;
                        for(LGSPNode node_head_TNTChain_node_c4 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c4], node_cur_TNTChain_node_c4 = node_head_TNTChain_node_c4.typeNext; node_cur_TNTChain_node_c4 != node_head_TNTChain_node_c4; node_cur_TNTChain_node_c4 = node_cur_TNTChain_node_c4.typeNext)
                        {
                            if(node_cur_TNTChain_node_c4.isMatched
                                && (node_cur_TNTChain_node_c4==node_cur_TNTChain_node_c3
                                    || node_cur_TNTChain_node_c4==node_cur_TNTChain_node_c5
                                    || node_cur_TNTChain_node_c4==node_cur_TNTChain_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            bool node_cur_TNTChain_node_c4_prevIsMatched = node_cur_TNTChain_node_c4.isMatched;
                            node_cur_TNTChain_node_c4.isMatched = true;
                            int node_type_id_TNTChain_node_c2 = 1;
                            for(LGSPNode node_head_TNTChain_node_c2 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c2], node_cur_TNTChain_node_c2 = node_head_TNTChain_node_c2.typeNext; node_cur_TNTChain_node_c2 != node_head_TNTChain_node_c2; node_cur_TNTChain_node_c2 = node_cur_TNTChain_node_c2.typeNext)
                            {
                                if(node_cur_TNTChain_node_c2.isMatched
                                    && (node_cur_TNTChain_node_c2==node_cur_TNTChain_node_c3
                                        || node_cur_TNTChain_node_c2==node_cur_TNTChain_node_c5
                                        || node_cur_TNTChain_node_c2==node_cur_TNTChain_node_c6
                                        || node_cur_TNTChain_node_c2==node_cur_TNTChain_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool node_cur_TNTChain_node_c2_prevIsMatched = node_cur_TNTChain_node_c2.isMatched;
                                node_cur_TNTChain_node_c2.isMatched = true;
                                int node_type_id_TNTChain_node_c1 = 1;
                                for(LGSPNode node_head_TNTChain_node_c1 = graph.nodesByTypeHeads[node_type_id_TNTChain_node_c1], node_cur_TNTChain_node_c1 = node_head_TNTChain_node_c1.typeNext; node_cur_TNTChain_node_c1 != node_head_TNTChain_node_c1; node_cur_TNTChain_node_c1 = node_cur_TNTChain_node_c1.typeNext)
                                {
                                    if(node_cur_TNTChain_node_c1.isMatched
                                        && (node_cur_TNTChain_node_c1==node_cur_TNTChain_node_c3
                                            || node_cur_TNTChain_node_c1==node_cur_TNTChain_node_c5
                                            || node_cur_TNTChain_node_c1==node_cur_TNTChain_node_c6
                                            || node_cur_TNTChain_node_c1==node_cur_TNTChain_node_c4
                                            || node_cur_TNTChain_node_c1==node_cur_TNTChain_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    PatternAction_ToluolCoreThenTriNitro taskFor__subpattern1 = new PatternAction_ToluolCoreThenTriNitro(graph, openTasks);
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c1 = node_cur_TNTChain_node_c1;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c2 = node_cur_TNTChain_node_c2;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c3 = node_cur_TNTChain_node_c3;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c4 = node_cur_TNTChain_node_c4;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c5 = node_cur_TNTChain_node_c5;
                                    taskFor__subpattern1.ToluolCoreThenTriNitro_node_c6 = node_cur_TNTChain_node_c6;
                                    openTasks.Push(taskFor__subpattern1);
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = new PatternAction_BenzolRingC123456Exposed(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = node_cur_TNTChain_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = node_cur_TNTChain_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = node_cur_TNTChain_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = node_cur_TNTChain_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = node_cur_TNTChain_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = node_cur_TNTChain_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    node_cur_TNTChain_node_c1.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTChain_node_c2.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTChain_node_c3.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTChain_node_c4.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTChain_node_c5.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTChain_node_c6.isMatchedByEnclosingPattern = true;
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    if(matchesList.Count>0) {
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c1] = node_cur_TNTChain_node_c1;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c2] = node_cur_TNTChain_node_c2;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c3] = node_cur_TNTChain_node_c3;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c4] = node_cur_TNTChain_node_c4;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c5] = node_cur_TNTChain_node_c5;
                                            match.Nodes[(int)Rule_TNTChain.TNTChain_NodeNums.@c6] = node_cur_TNTChain_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_TNTChain.TNTChain_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTChain.TNTChain_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            node_cur_TNTChain_node_c6.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c5.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c4.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c3.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c2.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c1.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTChain_node_c2.isMatched = node_cur_TNTChain_node_c2_prevIsMatched;
                                            node_cur_TNTChain_node_c4.isMatched = node_cur_TNTChain_node_c4_prevIsMatched;
                                            node_cur_TNTChain_node_c6.isMatched = node_cur_TNTChain_node_c6_prevIsMatched;
                                            node_cur_TNTChain_node_c5.isMatched = node_cur_TNTChain_node_c5_prevIsMatched;
                                            node_cur_TNTChain_node_c3.isMatched = node_cur_TNTChain_node_c3_prevIsMatched;
                                            return matches;
                                        }
                                        node_cur_TNTChain_node_c6.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTChain_node_c5.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTChain_node_c4.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTChain_node_c3.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTChain_node_c2.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTChain_node_c1.isMatchedByEnclosingPattern = false;
                                        continue;
                                    }
                                    node_cur_TNTChain_node_c1.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTChain_node_c2.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTChain_node_c3.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTChain_node_c4.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTChain_node_c5.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTChain_node_c6.isMatchedByEnclosingPattern = false;
                                }
                                node_cur_TNTChain_node_c2.isMatched = node_cur_TNTChain_node_c2_prevIsMatched;
                            }
                            node_cur_TNTChain_node_c4.isMatched = node_cur_TNTChain_node_c4_prevIsMatched;
                        }
                        node_cur_TNTChain_node_c6.isMatched = node_cur_TNTChain_node_c6_prevIsMatched;
                    }
                    node_cur_TNTChain_node_c5.isMatched = node_cur_TNTChain_node_c5_prevIsMatched;
                }
                node_cur_TNTChain_node_c3.isMatched = node_cur_TNTChain_node_c3_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNTTotallyFolded : LGSPAction
    {
        public Action_TNTTotallyFolded() {
            rulePattern = Rule_TNTTotallyFolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 0, 7);
        }

        public override string Name { get { return "TNTTotallyFolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTTotallyFolded instance = new Action_TNTTotallyFolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int node_type_id_TNTTotallyFolded_node_c3 = 1;
            for(LGSPNode node_head_TNTTotallyFolded_node_c3 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c3], node_cur_TNTTotallyFolded_node_c3 = node_head_TNTTotallyFolded_node_c3.typeNext; node_cur_TNTTotallyFolded_node_c3 != node_head_TNTTotallyFolded_node_c3; node_cur_TNTTotallyFolded_node_c3 = node_cur_TNTTotallyFolded_node_c3.typeNext)
            {
                bool node_cur_TNTTotallyFolded_node_c3_prevIsMatched = node_cur_TNTTotallyFolded_node_c3.isMatched;
                node_cur_TNTTotallyFolded_node_c3.isMatched = true;
                int node_type_id_TNTTotallyFolded_node_c5 = 1;
                for(LGSPNode node_head_TNTTotallyFolded_node_c5 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c5], node_cur_TNTTotallyFolded_node_c5 = node_head_TNTTotallyFolded_node_c5.typeNext; node_cur_TNTTotallyFolded_node_c5 != node_head_TNTTotallyFolded_node_c5; node_cur_TNTTotallyFolded_node_c5 = node_cur_TNTTotallyFolded_node_c5.typeNext)
                {
                    if(node_cur_TNTTotallyFolded_node_c5.isMatched
                        && node_cur_TNTTotallyFolded_node_c5==node_cur_TNTTotallyFolded_node_c3
                        )
                    {
                        continue;
                    }
                    bool node_cur_TNTTotallyFolded_node_c5_prevIsMatched = node_cur_TNTTotallyFolded_node_c5.isMatched;
                    node_cur_TNTTotallyFolded_node_c5.isMatched = true;
                    int node_type_id_TNTTotallyFolded_node_c6 = 1;
                    for(LGSPNode node_head_TNTTotallyFolded_node_c6 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c6], node_cur_TNTTotallyFolded_node_c6 = node_head_TNTTotallyFolded_node_c6.typeNext; node_cur_TNTTotallyFolded_node_c6 != node_head_TNTTotallyFolded_node_c6; node_cur_TNTTotallyFolded_node_c6 = node_cur_TNTTotallyFolded_node_c6.typeNext)
                    {
                        if(node_cur_TNTTotallyFolded_node_c6.isMatched
                            && (node_cur_TNTTotallyFolded_node_c6==node_cur_TNTTotallyFolded_node_c3
                                || node_cur_TNTTotallyFolded_node_c6==node_cur_TNTTotallyFolded_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        bool node_cur_TNTTotallyFolded_node_c6_prevIsMatched = node_cur_TNTTotallyFolded_node_c6.isMatched;
                        node_cur_TNTTotallyFolded_node_c6.isMatched = true;
                        int node_type_id_TNTTotallyFolded_node_c4 = 1;
                        for(LGSPNode node_head_TNTTotallyFolded_node_c4 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c4], node_cur_TNTTotallyFolded_node_c4 = node_head_TNTTotallyFolded_node_c4.typeNext; node_cur_TNTTotallyFolded_node_c4 != node_head_TNTTotallyFolded_node_c4; node_cur_TNTTotallyFolded_node_c4 = node_cur_TNTTotallyFolded_node_c4.typeNext)
                        {
                            if(node_cur_TNTTotallyFolded_node_c4.isMatched
                                && (node_cur_TNTTotallyFolded_node_c4==node_cur_TNTTotallyFolded_node_c3
                                    || node_cur_TNTTotallyFolded_node_c4==node_cur_TNTTotallyFolded_node_c5
                                    || node_cur_TNTTotallyFolded_node_c4==node_cur_TNTTotallyFolded_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            bool node_cur_TNTTotallyFolded_node_c4_prevIsMatched = node_cur_TNTTotallyFolded_node_c4.isMatched;
                            node_cur_TNTTotallyFolded_node_c4.isMatched = true;
                            int node_type_id_TNTTotallyFolded_node_c2 = 1;
                            for(LGSPNode node_head_TNTTotallyFolded_node_c2 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c2], node_cur_TNTTotallyFolded_node_c2 = node_head_TNTTotallyFolded_node_c2.typeNext; node_cur_TNTTotallyFolded_node_c2 != node_head_TNTTotallyFolded_node_c2; node_cur_TNTTotallyFolded_node_c2 = node_cur_TNTTotallyFolded_node_c2.typeNext)
                            {
                                if(node_cur_TNTTotallyFolded_node_c2.isMatched
                                    && (node_cur_TNTTotallyFolded_node_c2==node_cur_TNTTotallyFolded_node_c3
                                        || node_cur_TNTTotallyFolded_node_c2==node_cur_TNTTotallyFolded_node_c5
                                        || node_cur_TNTTotallyFolded_node_c2==node_cur_TNTTotallyFolded_node_c6
                                        || node_cur_TNTTotallyFolded_node_c2==node_cur_TNTTotallyFolded_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool node_cur_TNTTotallyFolded_node_c2_prevIsMatched = node_cur_TNTTotallyFolded_node_c2.isMatched;
                                node_cur_TNTTotallyFolded_node_c2.isMatched = true;
                                int node_type_id_TNTTotallyFolded_node_c1 = 1;
                                for(LGSPNode node_head_TNTTotallyFolded_node_c1 = graph.nodesByTypeHeads[node_type_id_TNTTotallyFolded_node_c1], node_cur_TNTTotallyFolded_node_c1 = node_head_TNTTotallyFolded_node_c1.typeNext; node_cur_TNTTotallyFolded_node_c1 != node_head_TNTTotallyFolded_node_c1; node_cur_TNTTotallyFolded_node_c1 = node_cur_TNTTotallyFolded_node_c1.typeNext)
                                {
                                    if(node_cur_TNTTotallyFolded_node_c1.isMatched
                                        && (node_cur_TNTTotallyFolded_node_c1==node_cur_TNTTotallyFolded_node_c3
                                            || node_cur_TNTTotallyFolded_node_c1==node_cur_TNTTotallyFolded_node_c5
                                            || node_cur_TNTTotallyFolded_node_c1==node_cur_TNTTotallyFolded_node_c6
                                            || node_cur_TNTTotallyFolded_node_c1==node_cur_TNTTotallyFolded_node_c4
                                            || node_cur_TNTTotallyFolded_node_c1==node_cur_TNTTotallyFolded_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    PatternAction_Nitro taskFor__subpattern6 = new PatternAction_Nitro(graph, openTasks);
                                    taskFor__subpattern6.Nitro_node_anchor = node_cur_TNTTotallyFolded_node_c6;
                                    openTasks.Push(taskFor__subpattern6);
                                    PatternAction_Hydrogen taskFor__subpattern5 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern5.Hydrogen_node_anchor = node_cur_TNTTotallyFolded_node_c5;
                                    openTasks.Push(taskFor__subpattern5);
                                    PatternAction_Nitro taskFor__subpattern4 = new PatternAction_Nitro(graph, openTasks);
                                    taskFor__subpattern4.Nitro_node_anchor = node_cur_TNTTotallyFolded_node_c4;
                                    openTasks.Push(taskFor__subpattern4);
                                    PatternAction_Hydrogen taskFor__subpattern3 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern3.Hydrogen_node_anchor = node_cur_TNTTotallyFolded_node_c3;
                                    openTasks.Push(taskFor__subpattern3);
                                    PatternAction_Nitro taskFor__subpattern2 = new PatternAction_Nitro(graph, openTasks);
                                    taskFor__subpattern2.Nitro_node_anchor = node_cur_TNTTotallyFolded_node_c2;
                                    openTasks.Push(taskFor__subpattern2);
                                    PatternAction_Methyl taskFor__subpattern1 = new PatternAction_Methyl(graph, openTasks);
                                    taskFor__subpattern1.Methyl_node_anchor = node_cur_TNTTotallyFolded_node_c1;
                                    openTasks.Push(taskFor__subpattern1);
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = new PatternAction_BenzolRingC123456Exposed(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = node_cur_TNTTotallyFolded_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = node_cur_TNTTotallyFolded_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = node_cur_TNTTotallyFolded_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = node_cur_TNTTotallyFolded_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = node_cur_TNTTotallyFolded_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = node_cur_TNTTotallyFolded_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    node_cur_TNTTotallyFolded_node_c1.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTTotallyFolded_node_c2.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTTotallyFolded_node_c3.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTTotallyFolded_node_c4.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTTotallyFolded_node_c5.isMatchedByEnclosingPattern = true;
                                    node_cur_TNTTotallyFolded_node_c6.isMatchedByEnclosingPattern = true;
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    if(matchesList.Count>0) {
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c1] = node_cur_TNTTotallyFolded_node_c1;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c2] = node_cur_TNTTotallyFolded_node_c2;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c3] = node_cur_TNTTotallyFolded_node_c3;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c4] = node_cur_TNTTotallyFolded_node_c4;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c5] = node_cur_TNTTotallyFolded_node_c5;
                                            match.Nodes[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_NodeNums.@c6] = node_cur_TNTTotallyFolded_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_TNTTotallyFolded.TNTTotallyFolded_SubNums.@_subpattern6] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            node_cur_TNTTotallyFolded_node_c6.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c5.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c4.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c3.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c2.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c1.isMatchedByEnclosingPattern = false;
                                            node_cur_TNTTotallyFolded_node_c2.isMatched = node_cur_TNTTotallyFolded_node_c2_prevIsMatched;
                                            node_cur_TNTTotallyFolded_node_c4.isMatched = node_cur_TNTTotallyFolded_node_c4_prevIsMatched;
                                            node_cur_TNTTotallyFolded_node_c6.isMatched = node_cur_TNTTotallyFolded_node_c6_prevIsMatched;
                                            node_cur_TNTTotallyFolded_node_c5.isMatched = node_cur_TNTTotallyFolded_node_c5_prevIsMatched;
                                            node_cur_TNTTotallyFolded_node_c3.isMatched = node_cur_TNTTotallyFolded_node_c3_prevIsMatched;
                                            return matches;
                                        }
                                        node_cur_TNTTotallyFolded_node_c6.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTTotallyFolded_node_c5.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTTotallyFolded_node_c4.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTTotallyFolded_node_c3.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTTotallyFolded_node_c2.isMatchedByEnclosingPattern = false;
                                        node_cur_TNTTotallyFolded_node_c1.isMatchedByEnclosingPattern = false;
                                        continue;
                                    }
                                    node_cur_TNTTotallyFolded_node_c1.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTTotallyFolded_node_c2.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTTotallyFolded_node_c3.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTTotallyFolded_node_c4.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTTotallyFolded_node_c5.isMatchedByEnclosingPattern = false;
                                    node_cur_TNTTotallyFolded_node_c6.isMatchedByEnclosingPattern = false;
                                }
                                node_cur_TNTTotallyFolded_node_c2.isMatched = node_cur_TNTTotallyFolded_node_c2_prevIsMatched;
                            }
                            node_cur_TNTTotallyFolded_node_c4.isMatched = node_cur_TNTTotallyFolded_node_c4_prevIsMatched;
                        }
                        node_cur_TNTTotallyFolded_node_c6.isMatched = node_cur_TNTTotallyFolded_node_c6_prevIsMatched;
                    }
                    node_cur_TNTTotallyFolded_node_c5.isMatched = node_cur_TNTTotallyFolded_node_c5_prevIsMatched;
                }
                node_cur_TNTTotallyFolded_node_c3.isMatched = node_cur_TNTTotallyFolded_node_c3_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_TNTUnfolded : LGSPAction
    {
        public Action_TNTUnfolded() {
            rulePattern = Rule_TNTUnfolded.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 21, 24, 0);
        }

        public override string Name { get { return "TNTUnfolded"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_TNTUnfolded instance = new Action_TNTUnfolded();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            int edge_type_id_TNTUnfolded_edge__edge0 = 1;
            for(LGSPEdge edge_head_TNTUnfolded_edge__edge0 = graph.edgesByTypeHeads[edge_type_id_TNTUnfolded_edge__edge0], edge_cur_TNTUnfolded_edge__edge0 = edge_head_TNTUnfolded_edge__edge0.typeNext; edge_cur_TNTUnfolded_edge__edge0 != edge_head_TNTUnfolded_edge__edge0; edge_cur_TNTUnfolded_edge__edge0 = edge_cur_TNTUnfolded_edge__edge0.typeNext)
            {
                bool edge_cur_TNTUnfolded_edge__edge0_prevIsMatched = edge_cur_TNTUnfolded_edge__edge0.isMatched;
                edge_cur_TNTUnfolded_edge__edge0.isMatched = true;
                LGSPNode node_cur_TNTUnfolded_node_c1 = edge_cur_TNTUnfolded_edge__edge0.source;
                if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c1.type.TypeID]) {
                    edge_cur_TNTUnfolded_edge__edge0.isMatched = edge_cur_TNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNTUnfolded_node_c1_prevIsMatched = node_cur_TNTUnfolded_node_c1.isMatched;
                node_cur_TNTUnfolded_node_c1.isMatched = true;
                LGSPNode node_cur_TNTUnfolded_node_c2 = edge_cur_TNTUnfolded_edge__edge0.target;
                if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c2.type.TypeID]) {
                    node_cur_TNTUnfolded_node_c1.isMatched = node_cur_TNTUnfolded_node_c1_prevIsMatched;
                    edge_cur_TNTUnfolded_edge__edge0.isMatched = edge_cur_TNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                if(node_cur_TNTUnfolded_node_c2.isMatched
                    && node_cur_TNTUnfolded_node_c2==node_cur_TNTUnfolded_node_c1
                    )
                {
                    node_cur_TNTUnfolded_node_c1.isMatched = node_cur_TNTUnfolded_node_c1_prevIsMatched;
                    edge_cur_TNTUnfolded_edge__edge0.isMatched = edge_cur_TNTUnfolded_edge__edge0_prevIsMatched;
                    continue;
                }
                bool node_cur_TNTUnfolded_node_c2_prevIsMatched = node_cur_TNTUnfolded_node_c2.isMatched;
                node_cur_TNTUnfolded_node_c2.isMatched = true;
                LGSPEdge edge_head_TNTUnfolded_edge__edge6 = node_cur_TNTUnfolded_node_c1.outhead;
                if(edge_head_TNTUnfolded_edge__edge6 != null)
                {
                    LGSPEdge edge_cur_TNTUnfolded_edge__edge6 = edge_head_TNTUnfolded_edge__edge6;
                    do
                    {
                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge6.type.TypeID]) {
                            continue;
                        }
                        if(edge_cur_TNTUnfolded_edge__edge6.target != node_cur_TNTUnfolded_node_c2) {
                            continue;
                        }
                        if(edge_cur_TNTUnfolded_edge__edge6.isMatched
                            && edge_cur_TNTUnfolded_edge__edge6==edge_cur_TNTUnfolded_edge__edge0
                            )
                        {
                            continue;
                        }
                        bool edge_cur_TNTUnfolded_edge__edge6_prevIsMatched = edge_cur_TNTUnfolded_edge__edge6.isMatched;
                        edge_cur_TNTUnfolded_edge__edge6.isMatched = true;
                        LGSPEdge edge_head_TNTUnfolded_edge__edge9 = node_cur_TNTUnfolded_node_c1.outhead;
                        if(edge_head_TNTUnfolded_edge__edge9 != null)
                        {
                            LGSPEdge edge_cur_TNTUnfolded_edge__edge9 = edge_head_TNTUnfolded_edge__edge9;
                            do
                            {
                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge9.type.TypeID]) {
                                    continue;
                                }
                                if(edge_cur_TNTUnfolded_edge__edge9.isMatched
                                    && (edge_cur_TNTUnfolded_edge__edge9==edge_cur_TNTUnfolded_edge__edge0
                                        || edge_cur_TNTUnfolded_edge__edge9==edge_cur_TNTUnfolded_edge__edge6
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool edge_cur_TNTUnfolded_edge__edge9_prevIsMatched = edge_cur_TNTUnfolded_edge__edge9.isMatched;
                                edge_cur_TNTUnfolded_edge__edge9.isMatched = true;
                                LGSPNode node_cur_TNTUnfolded_node_c = edge_cur_TNTUnfolded_edge__edge9.target;
                                if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c.type.TypeID]) {
                                    edge_cur_TNTUnfolded_edge__edge9.isMatched = edge_cur_TNTUnfolded_edge__edge9_prevIsMatched;
                                    continue;
                                }
                                if(node_cur_TNTUnfolded_node_c.isMatched
                                    && (node_cur_TNTUnfolded_node_c==node_cur_TNTUnfolded_node_c1
                                        || node_cur_TNTUnfolded_node_c==node_cur_TNTUnfolded_node_c2
                                        )
                                    )
                                {
                                    edge_cur_TNTUnfolded_edge__edge9.isMatched = edge_cur_TNTUnfolded_edge__edge9_prevIsMatched;
                                    continue;
                                }
                                bool node_cur_TNTUnfolded_node_c_prevIsMatched = node_cur_TNTUnfolded_node_c.isMatched;
                                node_cur_TNTUnfolded_node_c.isMatched = true;
                                LGSPEdge edge_head_TNTUnfolded_edge__edge1 = node_cur_TNTUnfolded_node_c2.outhead;
                                if(edge_head_TNTUnfolded_edge__edge1 != null)
                                {
                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge1 = edge_head_TNTUnfolded_edge__edge1;
                                    do
                                    {
                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge1.type.TypeID]) {
                                            continue;
                                        }
                                        if(edge_cur_TNTUnfolded_edge__edge1.isMatched
                                            && (edge_cur_TNTUnfolded_edge__edge1==edge_cur_TNTUnfolded_edge__edge0
                                                || edge_cur_TNTUnfolded_edge__edge1==edge_cur_TNTUnfolded_edge__edge6
                                                || edge_cur_TNTUnfolded_edge__edge1==edge_cur_TNTUnfolded_edge__edge9
                                                )
                                            )
                                        {
                                            continue;
                                        }
                                        bool edge_cur_TNTUnfolded_edge__edge1_prevIsMatched = edge_cur_TNTUnfolded_edge__edge1.isMatched;
                                        edge_cur_TNTUnfolded_edge__edge1.isMatched = true;
                                        LGSPNode node_cur_TNTUnfolded_node_c3 = edge_cur_TNTUnfolded_edge__edge1.target;
                                        if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c3.type.TypeID]) {
                                            edge_cur_TNTUnfolded_edge__edge1.isMatched = edge_cur_TNTUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        if(node_cur_TNTUnfolded_node_c3.isMatched
                                            && (node_cur_TNTUnfolded_node_c3==node_cur_TNTUnfolded_node_c1
                                                || node_cur_TNTUnfolded_node_c3==node_cur_TNTUnfolded_node_c2
                                                || node_cur_TNTUnfolded_node_c3==node_cur_TNTUnfolded_node_c
                                                )
                                            )
                                        {
                                            edge_cur_TNTUnfolded_edge__edge1.isMatched = edge_cur_TNTUnfolded_edge__edge1_prevIsMatched;
                                            continue;
                                        }
                                        bool node_cur_TNTUnfolded_node_c3_prevIsMatched = node_cur_TNTUnfolded_node_c3.isMatched;
                                        node_cur_TNTUnfolded_node_c3.isMatched = true;
                                        LGSPEdge edge_head_TNTUnfolded_edge__edge13 = node_cur_TNTUnfolded_node_c2.outhead;
                                        if(edge_head_TNTUnfolded_edge__edge13 != null)
                                        {
                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge13 = edge_head_TNTUnfolded_edge__edge13;
                                            do
                                            {
                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge13.type.TypeID]) {
                                                    continue;
                                                }
                                                if(edge_cur_TNTUnfolded_edge__edge13.isMatched
                                                    && (edge_cur_TNTUnfolded_edge__edge13==edge_cur_TNTUnfolded_edge__edge0
                                                        || edge_cur_TNTUnfolded_edge__edge13==edge_cur_TNTUnfolded_edge__edge6
                                                        || edge_cur_TNTUnfolded_edge__edge13==edge_cur_TNTUnfolded_edge__edge9
                                                        || edge_cur_TNTUnfolded_edge__edge13==edge_cur_TNTUnfolded_edge__edge1
                                                        )
                                                    )
                                                {
                                                    continue;
                                                }
                                                bool edge_cur_TNTUnfolded_edge__edge13_prevIsMatched = edge_cur_TNTUnfolded_edge__edge13.isMatched;
                                                edge_cur_TNTUnfolded_edge__edge13.isMatched = true;
                                                LGSPNode node_cur_TNTUnfolded_node_n2 = edge_cur_TNTUnfolded_edge__edge13.target;
                                                if(!NodeType_N.isMyType[node_cur_TNTUnfolded_node_n2.type.TypeID]) {
                                                    edge_cur_TNTUnfolded_edge__edge13.isMatched = edge_cur_TNTUnfolded_edge__edge13_prevIsMatched;
                                                    continue;
                                                }
                                                bool node_cur_TNTUnfolded_node_n2_prevIsMatched = node_cur_TNTUnfolded_node_n2.isMatched;
                                                node_cur_TNTUnfolded_node_n2.isMatched = true;
                                                LGSPEdge edge_head_TNTUnfolded_edge__edge10 = node_cur_TNTUnfolded_node_c.outhead;
                                                if(edge_head_TNTUnfolded_edge__edge10 != null)
                                                {
                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge10 = edge_head_TNTUnfolded_edge__edge10;
                                                    do
                                                    {
                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge10.type.TypeID]) {
                                                            continue;
                                                        }
                                                        if(edge_cur_TNTUnfolded_edge__edge10.isMatched
                                                            && (edge_cur_TNTUnfolded_edge__edge10==edge_cur_TNTUnfolded_edge__edge0
                                                                || edge_cur_TNTUnfolded_edge__edge10==edge_cur_TNTUnfolded_edge__edge6
                                                                || edge_cur_TNTUnfolded_edge__edge10==edge_cur_TNTUnfolded_edge__edge9
                                                                || edge_cur_TNTUnfolded_edge__edge10==edge_cur_TNTUnfolded_edge__edge1
                                                                || edge_cur_TNTUnfolded_edge__edge10==edge_cur_TNTUnfolded_edge__edge13
                                                                )
                                                            )
                                                        {
                                                            continue;
                                                        }
                                                        bool edge_cur_TNTUnfolded_edge__edge10_prevIsMatched = edge_cur_TNTUnfolded_edge__edge10.isMatched;
                                                        edge_cur_TNTUnfolded_edge__edge10.isMatched = true;
                                                        LGSPNode node_cur_TNTUnfolded_node__node0 = edge_cur_TNTUnfolded_edge__edge10.target;
                                                        if(!NodeType_H.isMyType[node_cur_TNTUnfolded_node__node0.type.TypeID]) {
                                                            edge_cur_TNTUnfolded_edge__edge10.isMatched = edge_cur_TNTUnfolded_edge__edge10_prevIsMatched;
                                                            continue;
                                                        }
                                                        bool node_cur_TNTUnfolded_node__node0_prevIsMatched = node_cur_TNTUnfolded_node__node0.isMatched;
                                                        node_cur_TNTUnfolded_node__node0.isMatched = true;
                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge11 = node_cur_TNTUnfolded_node_c.outhead;
                                                        if(edge_head_TNTUnfolded_edge__edge11 != null)
                                                        {
                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge11 = edge_head_TNTUnfolded_edge__edge11;
                                                            do
                                                            {
                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge11.type.TypeID]) {
                                                                    continue;
                                                                }
                                                                if(edge_cur_TNTUnfolded_edge__edge11.isMatched
                                                                    && (edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge0
                                                                        || edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge6
                                                                        || edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge9
                                                                        || edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge1
                                                                        || edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge13
                                                                        || edge_cur_TNTUnfolded_edge__edge11==edge_cur_TNTUnfolded_edge__edge10
                                                                        )
                                                                    )
                                                                {
                                                                    continue;
                                                                }
                                                                bool edge_cur_TNTUnfolded_edge__edge11_prevIsMatched = edge_cur_TNTUnfolded_edge__edge11.isMatched;
                                                                edge_cur_TNTUnfolded_edge__edge11.isMatched = true;
                                                                LGSPNode node_cur_TNTUnfolded_node__node1 = edge_cur_TNTUnfolded_edge__edge11.target;
                                                                if(!NodeType_H.isMyType[node_cur_TNTUnfolded_node__node1.type.TypeID]) {
                                                                    edge_cur_TNTUnfolded_edge__edge11.isMatched = edge_cur_TNTUnfolded_edge__edge11_prevIsMatched;
                                                                    continue;
                                                                }
                                                                if(node_cur_TNTUnfolded_node__node1.isMatched
                                                                    && node_cur_TNTUnfolded_node__node1==node_cur_TNTUnfolded_node__node0
                                                                    )
                                                                {
                                                                    edge_cur_TNTUnfolded_edge__edge11.isMatched = edge_cur_TNTUnfolded_edge__edge11_prevIsMatched;
                                                                    continue;
                                                                }
                                                                bool node_cur_TNTUnfolded_node__node1_prevIsMatched = node_cur_TNTUnfolded_node__node1.isMatched;
                                                                node_cur_TNTUnfolded_node__node1.isMatched = true;
                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge12 = node_cur_TNTUnfolded_node_c.outhead;
                                                                if(edge_head_TNTUnfolded_edge__edge12 != null)
                                                                {
                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge12 = edge_head_TNTUnfolded_edge__edge12;
                                                                    do
                                                                    {
                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge12.type.TypeID]) {
                                                                            continue;
                                                                        }
                                                                        if(edge_cur_TNTUnfolded_edge__edge12.isMatched
                                                                            && (edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge0
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge6
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge9
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge1
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge13
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge10
                                                                                || edge_cur_TNTUnfolded_edge__edge12==edge_cur_TNTUnfolded_edge__edge11
                                                                                )
                                                                            )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        bool edge_cur_TNTUnfolded_edge__edge12_prevIsMatched = edge_cur_TNTUnfolded_edge__edge12.isMatched;
                                                                        edge_cur_TNTUnfolded_edge__edge12.isMatched = true;
                                                                        LGSPNode node_cur_TNTUnfolded_node__node2 = edge_cur_TNTUnfolded_edge__edge12.target;
                                                                        if(!NodeType_H.isMyType[node_cur_TNTUnfolded_node__node2.type.TypeID]) {
                                                                            edge_cur_TNTUnfolded_edge__edge12.isMatched = edge_cur_TNTUnfolded_edge__edge12_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        if(node_cur_TNTUnfolded_node__node2.isMatched
                                                                            && (node_cur_TNTUnfolded_node__node2==node_cur_TNTUnfolded_node__node0
                                                                                || node_cur_TNTUnfolded_node__node2==node_cur_TNTUnfolded_node__node1
                                                                                )
                                                                            )
                                                                        {
                                                                            edge_cur_TNTUnfolded_edge__edge12.isMatched = edge_cur_TNTUnfolded_edge__edge12_prevIsMatched;
                                                                            continue;
                                                                        }
                                                                        bool node_cur_TNTUnfolded_node__node2_prevIsMatched = node_cur_TNTUnfolded_node__node2.isMatched;
                                                                        node_cur_TNTUnfolded_node__node2.isMatched = true;
                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge2 = node_cur_TNTUnfolded_node_c3.outhead;
                                                                        if(edge_head_TNTUnfolded_edge__edge2 != null)
                                                                        {
                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge2 = edge_head_TNTUnfolded_edge__edge2;
                                                                            do
                                                                            {
                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge2.type.TypeID]) {
                                                                                    continue;
                                                                                }
                                                                                if(edge_cur_TNTUnfolded_edge__edge2.isMatched
                                                                                    && (edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge0
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge6
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge9
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge1
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge13
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge10
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge11
                                                                                        || edge_cur_TNTUnfolded_edge__edge2==edge_cur_TNTUnfolded_edge__edge12
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                bool edge_cur_TNTUnfolded_edge__edge2_prevIsMatched = edge_cur_TNTUnfolded_edge__edge2.isMatched;
                                                                                edge_cur_TNTUnfolded_edge__edge2.isMatched = true;
                                                                                LGSPNode node_cur_TNTUnfolded_node_c4 = edge_cur_TNTUnfolded_edge__edge2.target;
                                                                                if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c4.type.TypeID]) {
                                                                                    edge_cur_TNTUnfolded_edge__edge2.isMatched = edge_cur_TNTUnfolded_edge__edge2_prevIsMatched;
                                                                                    continue;
                                                                                }
                                                                                if(node_cur_TNTUnfolded_node_c4.isMatched
                                                                                    && (node_cur_TNTUnfolded_node_c4==node_cur_TNTUnfolded_node_c1
                                                                                        || node_cur_TNTUnfolded_node_c4==node_cur_TNTUnfolded_node_c2
                                                                                        || node_cur_TNTUnfolded_node_c4==node_cur_TNTUnfolded_node_c
                                                                                        || node_cur_TNTUnfolded_node_c4==node_cur_TNTUnfolded_node_c3
                                                                                        )
                                                                                    )
                                                                                {
                                                                                    edge_cur_TNTUnfolded_edge__edge2.isMatched = edge_cur_TNTUnfolded_edge__edge2_prevIsMatched;
                                                                                    continue;
                                                                                }
                                                                                bool node_cur_TNTUnfolded_node_c4_prevIsMatched = node_cur_TNTUnfolded_node_c4.isMatched;
                                                                                node_cur_TNTUnfolded_node_c4.isMatched = true;
                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge7 = node_cur_TNTUnfolded_node_c3.outhead;
                                                                                if(edge_head_TNTUnfolded_edge__edge7 != null)
                                                                                {
                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge7 = edge_head_TNTUnfolded_edge__edge7;
                                                                                    do
                                                                                    {
                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge7.type.TypeID]) {
                                                                                            continue;
                                                                                        }
                                                                                        if(edge_cur_TNTUnfolded_edge__edge7.target != node_cur_TNTUnfolded_node_c4) {
                                                                                            continue;
                                                                                        }
                                                                                        if(edge_cur_TNTUnfolded_edge__edge7.isMatched
                                                                                            && (edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge0
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge6
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge9
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge1
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge13
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge10
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge11
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge12
                                                                                                || edge_cur_TNTUnfolded_edge__edge7==edge_cur_TNTUnfolded_edge__edge2
                                                                                                )
                                                                                            )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        bool edge_cur_TNTUnfolded_edge__edge7_prevIsMatched = edge_cur_TNTUnfolded_edge__edge7.isMatched;
                                                                                        edge_cur_TNTUnfolded_edge__edge7.isMatched = true;
                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge16 = node_cur_TNTUnfolded_node_c3.outhead;
                                                                                        if(edge_head_TNTUnfolded_edge__edge16 != null)
                                                                                        {
                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge16 = edge_head_TNTUnfolded_edge__edge16;
                                                                                            do
                                                                                            {
                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge16.type.TypeID]) {
                                                                                                    continue;
                                                                                                }
                                                                                                if(edge_cur_TNTUnfolded_edge__edge16.isMatched
                                                                                                    && (edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge0
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge6
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge9
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge1
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge13
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge10
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge11
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge12
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge2
                                                                                                        || edge_cur_TNTUnfolded_edge__edge16==edge_cur_TNTUnfolded_edge__edge7
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                bool edge_cur_TNTUnfolded_edge__edge16_prevIsMatched = edge_cur_TNTUnfolded_edge__edge16.isMatched;
                                                                                                edge_cur_TNTUnfolded_edge__edge16.isMatched = true;
                                                                                                LGSPNode node_cur_TNTUnfolded_node__node5 = edge_cur_TNTUnfolded_edge__edge16.target;
                                                                                                if(!NodeType_H.isMyType[node_cur_TNTUnfolded_node__node5.type.TypeID]) {
                                                                                                    edge_cur_TNTUnfolded_edge__edge16.isMatched = edge_cur_TNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                if(node_cur_TNTUnfolded_node__node5.isMatched
                                                                                                    && (node_cur_TNTUnfolded_node__node5==node_cur_TNTUnfolded_node__node0
                                                                                                        || node_cur_TNTUnfolded_node__node5==node_cur_TNTUnfolded_node__node1
                                                                                                        || node_cur_TNTUnfolded_node__node5==node_cur_TNTUnfolded_node__node2
                                                                                                        )
                                                                                                    )
                                                                                                {
                                                                                                    edge_cur_TNTUnfolded_edge__edge16.isMatched = edge_cur_TNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                    continue;
                                                                                                }
                                                                                                bool node_cur_TNTUnfolded_node__node5_prevIsMatched = node_cur_TNTUnfolded_node__node5.isMatched;
                                                                                                node_cur_TNTUnfolded_node__node5.isMatched = true;
                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge14 = node_cur_TNTUnfolded_node_n2.outhead;
                                                                                                if(edge_head_TNTUnfolded_edge__edge14 != null)
                                                                                                {
                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge14 = edge_head_TNTUnfolded_edge__edge14;
                                                                                                    do
                                                                                                    {
                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge14.type.TypeID]) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if(edge_cur_TNTUnfolded_edge__edge14.isMatched
                                                                                                            && (edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                || edge_cur_TNTUnfolded_edge__edge14==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                )
                                                                                                            )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool edge_cur_TNTUnfolded_edge__edge14_prevIsMatched = edge_cur_TNTUnfolded_edge__edge14.isMatched;
                                                                                                        edge_cur_TNTUnfolded_edge__edge14.isMatched = true;
                                                                                                        LGSPNode node_cur_TNTUnfolded_node__node3 = edge_cur_TNTUnfolded_edge__edge14.target;
                                                                                                        if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node3.type.TypeID]) {
                                                                                                            edge_cur_TNTUnfolded_edge__edge14.isMatched = edge_cur_TNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                            continue;
                                                                                                        }
                                                                                                        bool node_cur_TNTUnfolded_node__node3_prevIsMatched = node_cur_TNTUnfolded_node__node3.isMatched;
                                                                                                        node_cur_TNTUnfolded_node__node3.isMatched = true;
                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge15 = node_cur_TNTUnfolded_node_n2.outhead;
                                                                                                        if(edge_head_TNTUnfolded_edge__edge15 != null)
                                                                                                        {
                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge15 = edge_head_TNTUnfolded_edge__edge15;
                                                                                                            do
                                                                                                            {
                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge15.type.TypeID]) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(edge_cur_TNTUnfolded_edge__edge15.isMatched
                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                        || edge_cur_TNTUnfolded_edge__edge15==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                        )
                                                                                                                    )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                bool edge_cur_TNTUnfolded_edge__edge15_prevIsMatched = edge_cur_TNTUnfolded_edge__edge15.isMatched;
                                                                                                                edge_cur_TNTUnfolded_edge__edge15.isMatched = true;
                                                                                                                LGSPNode node_cur_TNTUnfolded_node__node4 = edge_cur_TNTUnfolded_edge__edge15.target;
                                                                                                                if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node4.type.TypeID]) {
                                                                                                                    edge_cur_TNTUnfolded_edge__edge15.isMatched = edge_cur_TNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if(node_cur_TNTUnfolded_node__node4.isMatched
                                                                                                                    && node_cur_TNTUnfolded_node__node4==node_cur_TNTUnfolded_node__node3
                                                                                                                    )
                                                                                                                {
                                                                                                                    edge_cur_TNTUnfolded_edge__edge15.isMatched = edge_cur_TNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                bool node_cur_TNTUnfolded_node__node4_prevIsMatched = node_cur_TNTUnfolded_node__node4.isMatched;
                                                                                                                node_cur_TNTUnfolded_node__node4.isMatched = true;
                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge3 = node_cur_TNTUnfolded_node_c4.outhead;
                                                                                                                if(edge_head_TNTUnfolded_edge__edge3 != null)
                                                                                                                {
                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge3 = edge_head_TNTUnfolded_edge__edge3;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge3.type.TypeID]) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge3.isMatched
                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                || edge_cur_TNTUnfolded_edge__edge3==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        bool edge_cur_TNTUnfolded_edge__edge3_prevIsMatched = edge_cur_TNTUnfolded_edge__edge3.isMatched;
                                                                                                                        edge_cur_TNTUnfolded_edge__edge3.isMatched = true;
                                                                                                                        LGSPNode node_cur_TNTUnfolded_node_c5 = edge_cur_TNTUnfolded_edge__edge3.target;
                                                                                                                        if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c5.type.TypeID]) {
                                                                                                                            edge_cur_TNTUnfolded_edge__edge3.isMatched = edge_cur_TNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if(node_cur_TNTUnfolded_node_c5.isMatched
                                                                                                                            && (node_cur_TNTUnfolded_node_c5==node_cur_TNTUnfolded_node_c1
                                                                                                                                || node_cur_TNTUnfolded_node_c5==node_cur_TNTUnfolded_node_c2
                                                                                                                                || node_cur_TNTUnfolded_node_c5==node_cur_TNTUnfolded_node_c
                                                                                                                                || node_cur_TNTUnfolded_node_c5==node_cur_TNTUnfolded_node_c3
                                                                                                                                || node_cur_TNTUnfolded_node_c5==node_cur_TNTUnfolded_node_c4
                                                                                                                                )
                                                                                                                            )
                                                                                                                        {
                                                                                                                            edge_cur_TNTUnfolded_edge__edge3.isMatched = edge_cur_TNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        bool node_cur_TNTUnfolded_node_c5_prevIsMatched = node_cur_TNTUnfolded_node_c5.isMatched;
                                                                                                                        node_cur_TNTUnfolded_node_c5.isMatched = true;
                                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge17 = node_cur_TNTUnfolded_node_c4.outhead;
                                                                                                                        if(edge_head_TNTUnfolded_edge__edge17 != null)
                                                                                                                        {
                                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge17 = edge_head_TNTUnfolded_edge__edge17;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge17.type.TypeID]) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge17.isMatched
                                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge17==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                bool edge_cur_TNTUnfolded_edge__edge17_prevIsMatched = edge_cur_TNTUnfolded_edge__edge17.isMatched;
                                                                                                                                edge_cur_TNTUnfolded_edge__edge17.isMatched = true;
                                                                                                                                LGSPNode node_cur_TNTUnfolded_node_n4 = edge_cur_TNTUnfolded_edge__edge17.target;
                                                                                                                                if(!NodeType_N.isMyType[node_cur_TNTUnfolded_node_n4.type.TypeID]) {
                                                                                                                                    edge_cur_TNTUnfolded_edge__edge17.isMatched = edge_cur_TNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if(node_cur_TNTUnfolded_node_n4.isMatched
                                                                                                                                    && node_cur_TNTUnfolded_node_n4==node_cur_TNTUnfolded_node_n2
                                                                                                                                    )
                                                                                                                                {
                                                                                                                                    edge_cur_TNTUnfolded_edge__edge17.isMatched = edge_cur_TNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                bool node_cur_TNTUnfolded_node_n4_prevIsMatched = node_cur_TNTUnfolded_node_n4.isMatched;
                                                                                                                                node_cur_TNTUnfolded_node_n4.isMatched = true;
                                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge4 = node_cur_TNTUnfolded_node_c5.outhead;
                                                                                                                                if(edge_head_TNTUnfolded_edge__edge4 != null)
                                                                                                                                {
                                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge4 = edge_head_TNTUnfolded_edge__edge4;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge4.type.TypeID]) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge4.isMatched
                                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge4==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        bool edge_cur_TNTUnfolded_edge__edge4_prevIsMatched = edge_cur_TNTUnfolded_edge__edge4.isMatched;
                                                                                                                                        edge_cur_TNTUnfolded_edge__edge4.isMatched = true;
                                                                                                                                        LGSPNode node_cur_TNTUnfolded_node_c6 = edge_cur_TNTUnfolded_edge__edge4.target;
                                                                                                                                        if(!NodeType_C.isMyType[node_cur_TNTUnfolded_node_c6.type.TypeID]) {
                                                                                                                                            edge_cur_TNTUnfolded_edge__edge4.isMatched = edge_cur_TNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(node_cur_TNTUnfolded_node_c6.isMatched
                                                                                                                                            && (node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c1
                                                                                                                                                || node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c2
                                                                                                                                                || node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c
                                                                                                                                                || node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c3
                                                                                                                                                || node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c4
                                                                                                                                                || node_cur_TNTUnfolded_node_c6==node_cur_TNTUnfolded_node_c5
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        {
                                                                                                                                            edge_cur_TNTUnfolded_edge__edge4.isMatched = edge_cur_TNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge8 = node_cur_TNTUnfolded_node_c5.outhead;
                                                                                                                                        if(edge_head_TNTUnfolded_edge__edge8 != null)
                                                                                                                                        {
                                                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge8 = edge_head_TNTUnfolded_edge__edge8;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge8.type.TypeID]) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge8.target != node_cur_TNTUnfolded_node_c6) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge8.isMatched
                                                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge8==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                bool edge_cur_TNTUnfolded_edge__edge8_prevIsMatched = edge_cur_TNTUnfolded_edge__edge8.isMatched;
                                                                                                                                                edge_cur_TNTUnfolded_edge__edge8.isMatched = true;
                                                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge20 = node_cur_TNTUnfolded_node_c5.outhead;
                                                                                                                                                if(edge_head_TNTUnfolded_edge__edge20 != null)
                                                                                                                                                {
                                                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge20 = edge_head_TNTUnfolded_edge__edge20;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge20.type.TypeID]) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge20.isMatched
                                                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge20==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        bool edge_cur_TNTUnfolded_edge__edge20_prevIsMatched = edge_cur_TNTUnfolded_edge__edge20.isMatched;
                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge20.isMatched = true;
                                                                                                                                                        LGSPNode node_cur_TNTUnfolded_node__node8 = edge_cur_TNTUnfolded_edge__edge20.target;
                                                                                                                                                        if(!NodeType_H.isMyType[node_cur_TNTUnfolded_node__node8.type.TypeID]) {
                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge20.isMatched = edge_cur_TNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if(node_cur_TNTUnfolded_node__node8.isMatched
                                                                                                                                                            && (node_cur_TNTUnfolded_node__node8==node_cur_TNTUnfolded_node__node0
                                                                                                                                                                || node_cur_TNTUnfolded_node__node8==node_cur_TNTUnfolded_node__node1
                                                                                                                                                                || node_cur_TNTUnfolded_node__node8==node_cur_TNTUnfolded_node__node2
                                                                                                                                                                || node_cur_TNTUnfolded_node__node8==node_cur_TNTUnfolded_node__node5
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        {
                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge20.isMatched = edge_cur_TNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge18 = node_cur_TNTUnfolded_node_n4.outhead;
                                                                                                                                                        if(edge_head_TNTUnfolded_edge__edge18 != null)
                                                                                                                                                        {
                                                                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge18 = edge_head_TNTUnfolded_edge__edge18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge18.type.TypeID]) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge18.isMatched
                                                                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge18==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                bool edge_cur_TNTUnfolded_edge__edge18_prevIsMatched = edge_cur_TNTUnfolded_edge__edge18.isMatched;
                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge18.isMatched = true;
                                                                                                                                                                LGSPNode node_cur_TNTUnfolded_node__node6 = edge_cur_TNTUnfolded_edge__edge18.target;
                                                                                                                                                                if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node6.type.TypeID]) {
                                                                                                                                                                    edge_cur_TNTUnfolded_edge__edge18.isMatched = edge_cur_TNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(node_cur_TNTUnfolded_node__node6.isMatched
                                                                                                                                                                    && (node_cur_TNTUnfolded_node__node6==node_cur_TNTUnfolded_node__node3
                                                                                                                                                                        || node_cur_TNTUnfolded_node__node6==node_cur_TNTUnfolded_node__node4
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                {
                                                                                                                                                                    edge_cur_TNTUnfolded_edge__edge18.isMatched = edge_cur_TNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                bool node_cur_TNTUnfolded_node__node6_prevIsMatched = node_cur_TNTUnfolded_node__node6.isMatched;
                                                                                                                                                                node_cur_TNTUnfolded_node__node6.isMatched = true;
                                                                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge19 = node_cur_TNTUnfolded_node_n4.outhead;
                                                                                                                                                                if(edge_head_TNTUnfolded_edge__edge19 != null)
                                                                                                                                                                {
                                                                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge19 = edge_head_TNTUnfolded_edge__edge19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge19.type.TypeID]) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge19.isMatched
                                                                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge19==edge_cur_TNTUnfolded_edge__edge18
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        bool edge_cur_TNTUnfolded_edge__edge19_prevIsMatched = edge_cur_TNTUnfolded_edge__edge19.isMatched;
                                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge19.isMatched = true;
                                                                                                                                                                        LGSPNode node_cur_TNTUnfolded_node__node7 = edge_cur_TNTUnfolded_edge__edge19.target;
                                                                                                                                                                        if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node7.type.TypeID]) {
                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge19.isMatched = edge_cur_TNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if(node_cur_TNTUnfolded_node__node7.isMatched
                                                                                                                                                                            && (node_cur_TNTUnfolded_node__node7==node_cur_TNTUnfolded_node__node3
                                                                                                                                                                                || node_cur_TNTUnfolded_node__node7==node_cur_TNTUnfolded_node__node4
                                                                                                                                                                                || node_cur_TNTUnfolded_node__node7==node_cur_TNTUnfolded_node__node6
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        {
                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge19.isMatched = edge_cur_TNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        bool node_cur_TNTUnfolded_node__node7_prevIsMatched = node_cur_TNTUnfolded_node__node7.isMatched;
                                                                                                                                                                        node_cur_TNTUnfolded_node__node7.isMatched = true;
                                                                                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge5 = node_cur_TNTUnfolded_node_c6.outhead;
                                                                                                                                                                        if(edge_head_TNTUnfolded_edge__edge5 != null)
                                                                                                                                                                        {
                                                                                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge5 = edge_head_TNTUnfolded_edge__edge5;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge5.type.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge5.target != node_cur_TNTUnfolded_node_c1) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge5.isMatched
                                                                                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge18
                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge5==edge_cur_TNTUnfolded_edge__edge19
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                bool edge_cur_TNTUnfolded_edge__edge5_prevIsMatched = edge_cur_TNTUnfolded_edge__edge5.isMatched;
                                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge5.isMatched = true;
                                                                                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge21 = node_cur_TNTUnfolded_node_c6.outhead;
                                                                                                                                                                                if(edge_head_TNTUnfolded_edge__edge21 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge21 = edge_head_TNTUnfolded_edge__edge21;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge21.type.TypeID]) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge21.isMatched
                                                                                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge18
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge19
                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge21==edge_cur_TNTUnfolded_edge__edge5
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        bool edge_cur_TNTUnfolded_edge__edge21_prevIsMatched = edge_cur_TNTUnfolded_edge__edge21.isMatched;
                                                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge21.isMatched = true;
                                                                                                                                                                                        LGSPNode node_cur_TNTUnfolded_node_n6 = edge_cur_TNTUnfolded_edge__edge21.target;
                                                                                                                                                                                        if(!NodeType_N.isMyType[node_cur_TNTUnfolded_node_n6.type.TypeID]) {
                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge21.isMatched = edge_cur_TNTUnfolded_edge__edge21_prevIsMatched;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if(node_cur_TNTUnfolded_node_n6.isMatched
                                                                                                                                                                                            && (node_cur_TNTUnfolded_node_n6==node_cur_TNTUnfolded_node_n2
                                                                                                                                                                                                || node_cur_TNTUnfolded_node_n6==node_cur_TNTUnfolded_node_n4
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        {
                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge21.isMatched = edge_cur_TNTUnfolded_edge__edge21_prevIsMatched;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        LGSPEdge edge_head_TNTUnfolded_edge__edge22 = node_cur_TNTUnfolded_node_n6.outhead;
                                                                                                                                                                                        if(edge_head_TNTUnfolded_edge__edge22 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            LGSPEdge edge_cur_TNTUnfolded_edge__edge22 = edge_head_TNTUnfolded_edge__edge22;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge22.type.TypeID]) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if(edge_cur_TNTUnfolded_edge__edge22.isMatched
                                                                                                                                                                                                    && (edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge18
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge19
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge5
                                                                                                                                                                                                        || edge_cur_TNTUnfolded_edge__edge22==edge_cur_TNTUnfolded_edge__edge21
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                bool edge_cur_TNTUnfolded_edge__edge22_prevIsMatched = edge_cur_TNTUnfolded_edge__edge22.isMatched;
                                                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge22.isMatched = true;
                                                                                                                                                                                                LGSPNode node_cur_TNTUnfolded_node__node9 = edge_cur_TNTUnfolded_edge__edge22.target;
                                                                                                                                                                                                if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node9.type.TypeID]) {
                                                                                                                                                                                                    edge_cur_TNTUnfolded_edge__edge22.isMatched = edge_cur_TNTUnfolded_edge__edge22_prevIsMatched;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if(node_cur_TNTUnfolded_node__node9.isMatched
                                                                                                                                                                                                    && (node_cur_TNTUnfolded_node__node9==node_cur_TNTUnfolded_node__node3
                                                                                                                                                                                                        || node_cur_TNTUnfolded_node__node9==node_cur_TNTUnfolded_node__node4
                                                                                                                                                                                                        || node_cur_TNTUnfolded_node__node9==node_cur_TNTUnfolded_node__node6
                                                                                                                                                                                                        || node_cur_TNTUnfolded_node__node9==node_cur_TNTUnfolded_node__node7
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                {
                                                                                                                                                                                                    edge_cur_TNTUnfolded_edge__edge22.isMatched = edge_cur_TNTUnfolded_edge__edge22_prevIsMatched;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                bool node_cur_TNTUnfolded_node__node9_prevIsMatched = node_cur_TNTUnfolded_node__node9.isMatched;
                                                                                                                                                                                                node_cur_TNTUnfolded_node__node9.isMatched = true;
                                                                                                                                                                                                LGSPEdge edge_head_TNTUnfolded_edge__edge23 = node_cur_TNTUnfolded_node_n6.outhead;
                                                                                                                                                                                                if(edge_head_TNTUnfolded_edge__edge23 != null)
                                                                                                                                                                                                {
                                                                                                                                                                                                    LGSPEdge edge_cur_TNTUnfolded_edge__edge23 = edge_head_TNTUnfolded_edge__edge23;
                                                                                                                                                                                                    do
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if(!EdgeType_Edge.isMyType[edge_cur_TNTUnfolded_edge__edge23.type.TypeID]) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if(edge_cur_TNTUnfolded_edge__edge23.isMatched
                                                                                                                                                                                                            && (edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge0
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge6
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge9
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge1
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge13
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge10
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge11
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge12
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge2
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge7
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge16
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge14
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge15
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge3
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge17
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge4
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge8
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge20
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge18
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge19
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge5
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge21
                                                                                                                                                                                                                || edge_cur_TNTUnfolded_edge__edge23==edge_cur_TNTUnfolded_edge__edge22
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        LGSPNode node_cur_TNTUnfolded_node__node10 = edge_cur_TNTUnfolded_edge__edge23.target;
                                                                                                                                                                                                        if(!NodeType_O.isMyType[node_cur_TNTUnfolded_node__node10.type.TypeID]) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if(node_cur_TNTUnfolded_node__node10.isMatched
                                                                                                                                                                                                            && (node_cur_TNTUnfolded_node__node10==node_cur_TNTUnfolded_node__node3
                                                                                                                                                                                                                || node_cur_TNTUnfolded_node__node10==node_cur_TNTUnfolded_node__node4
                                                                                                                                                                                                                || node_cur_TNTUnfolded_node__node10==node_cur_TNTUnfolded_node__node6
                                                                                                                                                                                                                || node_cur_TNTUnfolded_node__node10==node_cur_TNTUnfolded_node__node7
                                                                                                                                                                                                                || node_cur_TNTUnfolded_node__node10==node_cur_TNTUnfolded_node__node9
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                                                                                                                                                                                        match.patternGraph = rulePattern.patternGraph;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c1] = node_cur_TNTUnfolded_node_c1;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c2] = node_cur_TNTUnfolded_node_c2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c3] = node_cur_TNTUnfolded_node_c3;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c4] = node_cur_TNTUnfolded_node_c4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c5] = node_cur_TNTUnfolded_node_c5;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c6] = node_cur_TNTUnfolded_node_c6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@c] = node_cur_TNTUnfolded_node_c;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node0] = node_cur_TNTUnfolded_node__node0;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node1] = node_cur_TNTUnfolded_node__node1;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node2] = node_cur_TNTUnfolded_node__node2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n2] = node_cur_TNTUnfolded_node_n2;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node3] = node_cur_TNTUnfolded_node__node3;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node4] = node_cur_TNTUnfolded_node__node4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node5] = node_cur_TNTUnfolded_node__node5;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n4] = node_cur_TNTUnfolded_node_n4;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node6] = node_cur_TNTUnfolded_node__node6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node7] = node_cur_TNTUnfolded_node__node7;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node8] = node_cur_TNTUnfolded_node__node8;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@n6] = node_cur_TNTUnfolded_node_n6;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node9] = node_cur_TNTUnfolded_node__node9;
                                                                                                                                                                                                        match.Nodes[(int)Rule_TNTUnfolded.TNTUnfolded_NodeNums.@_node10] = node_cur_TNTUnfolded_node__node10;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge0] = edge_cur_TNTUnfolded_edge__edge0;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge1] = edge_cur_TNTUnfolded_edge__edge1;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge2] = edge_cur_TNTUnfolded_edge__edge2;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge3] = edge_cur_TNTUnfolded_edge__edge3;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge4] = edge_cur_TNTUnfolded_edge__edge4;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge5] = edge_cur_TNTUnfolded_edge__edge5;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge6] = edge_cur_TNTUnfolded_edge__edge6;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge7] = edge_cur_TNTUnfolded_edge__edge7;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge8] = edge_cur_TNTUnfolded_edge__edge8;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge9] = edge_cur_TNTUnfolded_edge__edge9;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge10] = edge_cur_TNTUnfolded_edge__edge10;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge11] = edge_cur_TNTUnfolded_edge__edge11;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge12] = edge_cur_TNTUnfolded_edge__edge12;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge13] = edge_cur_TNTUnfolded_edge__edge13;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge14] = edge_cur_TNTUnfolded_edge__edge14;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge15] = edge_cur_TNTUnfolded_edge__edge15;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge16] = edge_cur_TNTUnfolded_edge__edge16;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge17] = edge_cur_TNTUnfolded_edge__edge17;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge18] = edge_cur_TNTUnfolded_edge__edge18;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge19] = edge_cur_TNTUnfolded_edge__edge19;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge20] = edge_cur_TNTUnfolded_edge__edge20;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge21] = edge_cur_TNTUnfolded_edge__edge21;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge22] = edge_cur_TNTUnfolded_edge__edge22;
                                                                                                                                                                                                        match.Edges[(int)Rule_TNTUnfolded.TNTUnfolded_EdgeNums.@_edge23] = edge_cur_TNTUnfolded_edge__edge23;
                                                                                                                                                                                                        matches.matchesList.PositionWasFilledFixIt();
                                                                                                                                                                                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n6.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge23);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n6.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge22);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c6.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge21);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c6.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge5);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n4.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge19);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n4.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge18);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge20);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge8);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c5.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge4);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c4.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge17);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c4.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge3);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n2.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge15);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n2.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge14);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge16);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge7);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c3.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge2);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge12);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge11);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge10);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c2.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge13);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c2.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge1);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c1.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge9);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c1.MoveOutHeadAfter(edge_cur_TNTUnfolded_edge__edge6);
                                                                                                                                                                                                            graph.MoveHeadAfter(edge_cur_TNTUnfolded_edge__edge0);
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node9.isMatched = node_cur_TNTUnfolded_node__node9_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge22.isMatched = edge_cur_TNTUnfolded_edge__edge22_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge21.isMatched = edge_cur_TNTUnfolded_edge__edge21_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge5.isMatched = edge_cur_TNTUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node7.isMatched = node_cur_TNTUnfolded_node__node7_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge19.isMatched = edge_cur_TNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node6.isMatched = node_cur_TNTUnfolded_node__node6_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge18.isMatched = edge_cur_TNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge20.isMatched = edge_cur_TNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge8.isMatched = edge_cur_TNTUnfolded_edge__edge8_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge4.isMatched = edge_cur_TNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n4.isMatched = node_cur_TNTUnfolded_node_n4_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge17.isMatched = edge_cur_TNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c5.isMatched = node_cur_TNTUnfolded_node_c5_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge3.isMatched = edge_cur_TNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node4.isMatched = node_cur_TNTUnfolded_node__node4_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge15.isMatched = edge_cur_TNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node3.isMatched = node_cur_TNTUnfolded_node__node3_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge14.isMatched = edge_cur_TNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node5.isMatched = node_cur_TNTUnfolded_node__node5_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge16.isMatched = edge_cur_TNTUnfolded_edge__edge16_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge7.isMatched = edge_cur_TNTUnfolded_edge__edge7_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c4.isMatched = node_cur_TNTUnfolded_node_c4_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge2.isMatched = edge_cur_TNTUnfolded_edge__edge2_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node2.isMatched = node_cur_TNTUnfolded_node__node2_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge12.isMatched = edge_cur_TNTUnfolded_edge__edge12_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node1.isMatched = node_cur_TNTUnfolded_node__node1_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge11.isMatched = edge_cur_TNTUnfolded_edge__edge11_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node__node0.isMatched = node_cur_TNTUnfolded_node__node0_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge10.isMatched = edge_cur_TNTUnfolded_edge__edge10_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_n2.isMatched = node_cur_TNTUnfolded_node_n2_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge13.isMatched = edge_cur_TNTUnfolded_edge__edge13_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c3.isMatched = node_cur_TNTUnfolded_node_c3_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge1.isMatched = edge_cur_TNTUnfolded_edge__edge1_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c.isMatched = node_cur_TNTUnfolded_node_c_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge9.isMatched = edge_cur_TNTUnfolded_edge__edge9_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge6.isMatched = edge_cur_TNTUnfolded_edge__edge6_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c2.isMatched = node_cur_TNTUnfolded_node_c2_prevIsMatched;
                                                                                                                                                                                                            node_cur_TNTUnfolded_node_c1.isMatched = node_cur_TNTUnfolded_node_c1_prevIsMatched;
                                                                                                                                                                                                            edge_cur_TNTUnfolded_edge__edge0.isMatched = edge_cur_TNTUnfolded_edge__edge0_prevIsMatched;
                                                                                                                                                                                                            return matches;
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge23 = edge_cur_TNTUnfolded_edge__edge23.outNext) != edge_head_TNTUnfolded_edge__edge23 );
                                                                                                                                                                                                }
                                                                                                                                                                                                node_cur_TNTUnfolded_node__node9.isMatched = node_cur_TNTUnfolded_node__node9_prevIsMatched;
                                                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge22.isMatched = edge_cur_TNTUnfolded_edge__edge22_prevIsMatched;
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge22 = edge_cur_TNTUnfolded_edge__edge22.outNext) != edge_head_TNTUnfolded_edge__edge22 );
                                                                                                                                                                                        }
                                                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge21.isMatched = edge_cur_TNTUnfolded_edge__edge21_prevIsMatched;
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge21 = edge_cur_TNTUnfolded_edge__edge21.outNext) != edge_head_TNTUnfolded_edge__edge21 );
                                                                                                                                                                                }
                                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge5.isMatched = edge_cur_TNTUnfolded_edge__edge5_prevIsMatched;
                                                                                                                                                                            }
                                                                                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge5 = edge_cur_TNTUnfolded_edge__edge5.outNext) != edge_head_TNTUnfolded_edge__edge5 );
                                                                                                                                                                        }
                                                                                                                                                                        node_cur_TNTUnfolded_node__node7.isMatched = node_cur_TNTUnfolded_node__node7_prevIsMatched;
                                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge19.isMatched = edge_cur_TNTUnfolded_edge__edge19_prevIsMatched;
                                                                                                                                                                    }
                                                                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge19 = edge_cur_TNTUnfolded_edge__edge19.outNext) != edge_head_TNTUnfolded_edge__edge19 );
                                                                                                                                                                }
                                                                                                                                                                node_cur_TNTUnfolded_node__node6.isMatched = node_cur_TNTUnfolded_node__node6_prevIsMatched;
                                                                                                                                                                edge_cur_TNTUnfolded_edge__edge18.isMatched = edge_cur_TNTUnfolded_edge__edge18_prevIsMatched;
                                                                                                                                                            }
                                                                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge18 = edge_cur_TNTUnfolded_edge__edge18.outNext) != edge_head_TNTUnfolded_edge__edge18 );
                                                                                                                                                        }
                                                                                                                                                        edge_cur_TNTUnfolded_edge__edge20.isMatched = edge_cur_TNTUnfolded_edge__edge20_prevIsMatched;
                                                                                                                                                    }
                                                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge20 = edge_cur_TNTUnfolded_edge__edge20.outNext) != edge_head_TNTUnfolded_edge__edge20 );
                                                                                                                                                }
                                                                                                                                                edge_cur_TNTUnfolded_edge__edge8.isMatched = edge_cur_TNTUnfolded_edge__edge8_prevIsMatched;
                                                                                                                                            }
                                                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge8 = edge_cur_TNTUnfolded_edge__edge8.outNext) != edge_head_TNTUnfolded_edge__edge8 );
                                                                                                                                        }
                                                                                                                                        edge_cur_TNTUnfolded_edge__edge4.isMatched = edge_cur_TNTUnfolded_edge__edge4_prevIsMatched;
                                                                                                                                    }
                                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge4 = edge_cur_TNTUnfolded_edge__edge4.outNext) != edge_head_TNTUnfolded_edge__edge4 );
                                                                                                                                }
                                                                                                                                node_cur_TNTUnfolded_node_n4.isMatched = node_cur_TNTUnfolded_node_n4_prevIsMatched;
                                                                                                                                edge_cur_TNTUnfolded_edge__edge17.isMatched = edge_cur_TNTUnfolded_edge__edge17_prevIsMatched;
                                                                                                                            }
                                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge17 = edge_cur_TNTUnfolded_edge__edge17.outNext) != edge_head_TNTUnfolded_edge__edge17 );
                                                                                                                        }
                                                                                                                        node_cur_TNTUnfolded_node_c5.isMatched = node_cur_TNTUnfolded_node_c5_prevIsMatched;
                                                                                                                        edge_cur_TNTUnfolded_edge__edge3.isMatched = edge_cur_TNTUnfolded_edge__edge3_prevIsMatched;
                                                                                                                    }
                                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge3 = edge_cur_TNTUnfolded_edge__edge3.outNext) != edge_head_TNTUnfolded_edge__edge3 );
                                                                                                                }
                                                                                                                node_cur_TNTUnfolded_node__node4.isMatched = node_cur_TNTUnfolded_node__node4_prevIsMatched;
                                                                                                                edge_cur_TNTUnfolded_edge__edge15.isMatched = edge_cur_TNTUnfolded_edge__edge15_prevIsMatched;
                                                                                                            }
                                                                                                            while( (edge_cur_TNTUnfolded_edge__edge15 = edge_cur_TNTUnfolded_edge__edge15.outNext) != edge_head_TNTUnfolded_edge__edge15 );
                                                                                                        }
                                                                                                        node_cur_TNTUnfolded_node__node3.isMatched = node_cur_TNTUnfolded_node__node3_prevIsMatched;
                                                                                                        edge_cur_TNTUnfolded_edge__edge14.isMatched = edge_cur_TNTUnfolded_edge__edge14_prevIsMatched;
                                                                                                    }
                                                                                                    while( (edge_cur_TNTUnfolded_edge__edge14 = edge_cur_TNTUnfolded_edge__edge14.outNext) != edge_head_TNTUnfolded_edge__edge14 );
                                                                                                }
                                                                                                node_cur_TNTUnfolded_node__node5.isMatched = node_cur_TNTUnfolded_node__node5_prevIsMatched;
                                                                                                edge_cur_TNTUnfolded_edge__edge16.isMatched = edge_cur_TNTUnfolded_edge__edge16_prevIsMatched;
                                                                                            }
                                                                                            while( (edge_cur_TNTUnfolded_edge__edge16 = edge_cur_TNTUnfolded_edge__edge16.outNext) != edge_head_TNTUnfolded_edge__edge16 );
                                                                                        }
                                                                                        edge_cur_TNTUnfolded_edge__edge7.isMatched = edge_cur_TNTUnfolded_edge__edge7_prevIsMatched;
                                                                                    }
                                                                                    while( (edge_cur_TNTUnfolded_edge__edge7 = edge_cur_TNTUnfolded_edge__edge7.outNext) != edge_head_TNTUnfolded_edge__edge7 );
                                                                                }
                                                                                node_cur_TNTUnfolded_node_c4.isMatched = node_cur_TNTUnfolded_node_c4_prevIsMatched;
                                                                                edge_cur_TNTUnfolded_edge__edge2.isMatched = edge_cur_TNTUnfolded_edge__edge2_prevIsMatched;
                                                                            }
                                                                            while( (edge_cur_TNTUnfolded_edge__edge2 = edge_cur_TNTUnfolded_edge__edge2.outNext) != edge_head_TNTUnfolded_edge__edge2 );
                                                                        }
                                                                        node_cur_TNTUnfolded_node__node2.isMatched = node_cur_TNTUnfolded_node__node2_prevIsMatched;
                                                                        edge_cur_TNTUnfolded_edge__edge12.isMatched = edge_cur_TNTUnfolded_edge__edge12_prevIsMatched;
                                                                    }
                                                                    while( (edge_cur_TNTUnfolded_edge__edge12 = edge_cur_TNTUnfolded_edge__edge12.outNext) != edge_head_TNTUnfolded_edge__edge12 );
                                                                }
                                                                node_cur_TNTUnfolded_node__node1.isMatched = node_cur_TNTUnfolded_node__node1_prevIsMatched;
                                                                edge_cur_TNTUnfolded_edge__edge11.isMatched = edge_cur_TNTUnfolded_edge__edge11_prevIsMatched;
                                                            }
                                                            while( (edge_cur_TNTUnfolded_edge__edge11 = edge_cur_TNTUnfolded_edge__edge11.outNext) != edge_head_TNTUnfolded_edge__edge11 );
                                                        }
                                                        node_cur_TNTUnfolded_node__node0.isMatched = node_cur_TNTUnfolded_node__node0_prevIsMatched;
                                                        edge_cur_TNTUnfolded_edge__edge10.isMatched = edge_cur_TNTUnfolded_edge__edge10_prevIsMatched;
                                                    }
                                                    while( (edge_cur_TNTUnfolded_edge__edge10 = edge_cur_TNTUnfolded_edge__edge10.outNext) != edge_head_TNTUnfolded_edge__edge10 );
                                                }
                                                node_cur_TNTUnfolded_node_n2.isMatched = node_cur_TNTUnfolded_node_n2_prevIsMatched;
                                                edge_cur_TNTUnfolded_edge__edge13.isMatched = edge_cur_TNTUnfolded_edge__edge13_prevIsMatched;
                                            }
                                            while( (edge_cur_TNTUnfolded_edge__edge13 = edge_cur_TNTUnfolded_edge__edge13.outNext) != edge_head_TNTUnfolded_edge__edge13 );
                                        }
                                        node_cur_TNTUnfolded_node_c3.isMatched = node_cur_TNTUnfolded_node_c3_prevIsMatched;
                                        edge_cur_TNTUnfolded_edge__edge1.isMatched = edge_cur_TNTUnfolded_edge__edge1_prevIsMatched;
                                    }
                                    while( (edge_cur_TNTUnfolded_edge__edge1 = edge_cur_TNTUnfolded_edge__edge1.outNext) != edge_head_TNTUnfolded_edge__edge1 );
                                }
                                node_cur_TNTUnfolded_node_c.isMatched = node_cur_TNTUnfolded_node_c_prevIsMatched;
                                edge_cur_TNTUnfolded_edge__edge9.isMatched = edge_cur_TNTUnfolded_edge__edge9_prevIsMatched;
                            }
                            while( (edge_cur_TNTUnfolded_edge__edge9 = edge_cur_TNTUnfolded_edge__edge9.outNext) != edge_head_TNTUnfolded_edge__edge9 );
                        }
                        edge_cur_TNTUnfolded_edge__edge6.isMatched = edge_cur_TNTUnfolded_edge__edge6_prevIsMatched;
                    }
                    while( (edge_cur_TNTUnfolded_edge__edge6 = edge_cur_TNTUnfolded_edge__edge6.outNext) != edge_head_TNTUnfolded_edge__edge6 );
                }
                node_cur_TNTUnfolded_node_c2.isMatched = node_cur_TNTUnfolded_node_c2_prevIsMatched;
                node_cur_TNTUnfolded_node_c1.isMatched = node_cur_TNTUnfolded_node_c1_prevIsMatched;
                edge_cur_TNTUnfolded_edge__edge0.isMatched = edge_cur_TNTUnfolded_edge__edge0_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_Toluol : LGSPAction
    {
        public Action_Toluol() {
            rulePattern = Rule_Toluol.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 6, 0, 7);
        }

        public override string Name { get { return "Toluol"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_Toluol instance = new Action_Toluol();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int node_type_id_Toluol_node_c3 = 1;
            for(LGSPNode node_head_Toluol_node_c3 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c3], node_cur_Toluol_node_c3 = node_head_Toluol_node_c3.typeNext; node_cur_Toluol_node_c3 != node_head_Toluol_node_c3; node_cur_Toluol_node_c3 = node_cur_Toluol_node_c3.typeNext)
            {
                bool node_cur_Toluol_node_c3_prevIsMatched = node_cur_Toluol_node_c3.isMatched;
                node_cur_Toluol_node_c3.isMatched = true;
                int node_type_id_Toluol_node_c5 = 1;
                for(LGSPNode node_head_Toluol_node_c5 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c5], node_cur_Toluol_node_c5 = node_head_Toluol_node_c5.typeNext; node_cur_Toluol_node_c5 != node_head_Toluol_node_c5; node_cur_Toluol_node_c5 = node_cur_Toluol_node_c5.typeNext)
                {
                    if(node_cur_Toluol_node_c5.isMatched
                        && node_cur_Toluol_node_c5==node_cur_Toluol_node_c3
                        )
                    {
                        continue;
                    }
                    bool node_cur_Toluol_node_c5_prevIsMatched = node_cur_Toluol_node_c5.isMatched;
                    node_cur_Toluol_node_c5.isMatched = true;
                    int node_type_id_Toluol_node_c6 = 1;
                    for(LGSPNode node_head_Toluol_node_c6 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c6], node_cur_Toluol_node_c6 = node_head_Toluol_node_c6.typeNext; node_cur_Toluol_node_c6 != node_head_Toluol_node_c6; node_cur_Toluol_node_c6 = node_cur_Toluol_node_c6.typeNext)
                    {
                        if(node_cur_Toluol_node_c6.isMatched
                            && (node_cur_Toluol_node_c6==node_cur_Toluol_node_c3
                                || node_cur_Toluol_node_c6==node_cur_Toluol_node_c5
                                )
                            )
                        {
                            continue;
                        }
                        bool node_cur_Toluol_node_c6_prevIsMatched = node_cur_Toluol_node_c6.isMatched;
                        node_cur_Toluol_node_c6.isMatched = true;
                        int node_type_id_Toluol_node_c4 = 1;
                        for(LGSPNode node_head_Toluol_node_c4 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c4], node_cur_Toluol_node_c4 = node_head_Toluol_node_c4.typeNext; node_cur_Toluol_node_c4 != node_head_Toluol_node_c4; node_cur_Toluol_node_c4 = node_cur_Toluol_node_c4.typeNext)
                        {
                            if(node_cur_Toluol_node_c4.isMatched
                                && (node_cur_Toluol_node_c4==node_cur_Toluol_node_c3
                                    || node_cur_Toluol_node_c4==node_cur_Toluol_node_c5
                                    || node_cur_Toluol_node_c4==node_cur_Toluol_node_c6
                                    )
                                )
                            {
                                continue;
                            }
                            bool node_cur_Toluol_node_c4_prevIsMatched = node_cur_Toluol_node_c4.isMatched;
                            node_cur_Toluol_node_c4.isMatched = true;
                            int node_type_id_Toluol_node_c2 = 1;
                            for(LGSPNode node_head_Toluol_node_c2 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c2], node_cur_Toluol_node_c2 = node_head_Toluol_node_c2.typeNext; node_cur_Toluol_node_c2 != node_head_Toluol_node_c2; node_cur_Toluol_node_c2 = node_cur_Toluol_node_c2.typeNext)
                            {
                                if(node_cur_Toluol_node_c2.isMatched
                                    && (node_cur_Toluol_node_c2==node_cur_Toluol_node_c3
                                        || node_cur_Toluol_node_c2==node_cur_Toluol_node_c5
                                        || node_cur_Toluol_node_c2==node_cur_Toluol_node_c6
                                        || node_cur_Toluol_node_c2==node_cur_Toluol_node_c4
                                        )
                                    )
                                {
                                    continue;
                                }
                                bool node_cur_Toluol_node_c2_prevIsMatched = node_cur_Toluol_node_c2.isMatched;
                                node_cur_Toluol_node_c2.isMatched = true;
                                int node_type_id_Toluol_node_c1 = 1;
                                for(LGSPNode node_head_Toluol_node_c1 = graph.nodesByTypeHeads[node_type_id_Toluol_node_c1], node_cur_Toluol_node_c1 = node_head_Toluol_node_c1.typeNext; node_cur_Toluol_node_c1 != node_head_Toluol_node_c1; node_cur_Toluol_node_c1 = node_cur_Toluol_node_c1.typeNext)
                                {
                                    if(node_cur_Toluol_node_c1.isMatched
                                        && (node_cur_Toluol_node_c1==node_cur_Toluol_node_c3
                                            || node_cur_Toluol_node_c1==node_cur_Toluol_node_c5
                                            || node_cur_Toluol_node_c1==node_cur_Toluol_node_c6
                                            || node_cur_Toluol_node_c1==node_cur_Toluol_node_c4
                                            || node_cur_Toluol_node_c1==node_cur_Toluol_node_c2
                                            )
                                        )
                                    {
                                        continue;
                                    }
                                    PatternAction_Hydrogen taskFor__subpattern6 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern6.Hydrogen_node_anchor = node_cur_Toluol_node_c6;
                                    openTasks.Push(taskFor__subpattern6);
                                    PatternAction_Hydrogen taskFor__subpattern5 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern5.Hydrogen_node_anchor = node_cur_Toluol_node_c5;
                                    openTasks.Push(taskFor__subpattern5);
                                    PatternAction_Hydrogen taskFor__subpattern4 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern4.Hydrogen_node_anchor = node_cur_Toluol_node_c4;
                                    openTasks.Push(taskFor__subpattern4);
                                    PatternAction_Hydrogen taskFor__subpattern3 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern3.Hydrogen_node_anchor = node_cur_Toluol_node_c3;
                                    openTasks.Push(taskFor__subpattern3);
                                    PatternAction_Hydrogen taskFor__subpattern2 = new PatternAction_Hydrogen(graph, openTasks);
                                    taskFor__subpattern2.Hydrogen_node_anchor = node_cur_Toluol_node_c2;
                                    openTasks.Push(taskFor__subpattern2);
                                    PatternAction_Methyl taskFor__subpattern1 = new PatternAction_Methyl(graph, openTasks);
                                    taskFor__subpattern1.Methyl_node_anchor = node_cur_Toluol_node_c1;
                                    openTasks.Push(taskFor__subpattern1);
                                    PatternAction_BenzolRingC123456Exposed taskFor__subpattern0 = new PatternAction_BenzolRingC123456Exposed(graph, openTasks);
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c1 = node_cur_Toluol_node_c1;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c2 = node_cur_Toluol_node_c2;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c3 = node_cur_Toluol_node_c3;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c4 = node_cur_Toluol_node_c4;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c5 = node_cur_Toluol_node_c5;
                                    taskFor__subpattern0.BenzolRingC123456Exposed_node_c6 = node_cur_Toluol_node_c6;
                                    openTasks.Push(taskFor__subpattern0);
                                    node_cur_Toluol_node_c1.isMatchedByEnclosingPattern = true;
                                    node_cur_Toluol_node_c2.isMatchedByEnclosingPattern = true;
                                    node_cur_Toluol_node_c3.isMatchedByEnclosingPattern = true;
                                    node_cur_Toluol_node_c4.isMatchedByEnclosingPattern = true;
                                    node_cur_Toluol_node_c5.isMatchedByEnclosingPattern = true;
                                    node_cur_Toluol_node_c6.isMatchedByEnclosingPattern = true;
                                    openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    openTasks.Pop();
                                    if(matchesList.Count>0) {
                                        foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                                        {
                                            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                                            match.patternGraph = rulePattern.patternGraph;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c1] = node_cur_Toluol_node_c1;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c2] = node_cur_Toluol_node_c2;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c3] = node_cur_Toluol_node_c3;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c4] = node_cur_Toluol_node_c4;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c5] = node_cur_Toluol_node_c5;
                                            match.Nodes[(int)Rule_Toluol.Toluol_NodeNums.@c6] = node_cur_Toluol_node_c6;
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern2] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern3] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern4] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern5] = currentFoundPartialMatch.Pop();
                                            match.EmbeddedGraphs[(int)Rule_Toluol.Toluol_SubNums.@_subpattern6] = currentFoundPartialMatch.Pop();
                                            matches.matchesList.PositionWasFilledFixIt();
                                        }
                                        matchesList.Clear();
                                        if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                                        {
                                            node_cur_Toluol_node_c6.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c5.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c4.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c3.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c2.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c1.isMatchedByEnclosingPattern = false;
                                            node_cur_Toluol_node_c2.isMatched = node_cur_Toluol_node_c2_prevIsMatched;
                                            node_cur_Toluol_node_c4.isMatched = node_cur_Toluol_node_c4_prevIsMatched;
                                            node_cur_Toluol_node_c6.isMatched = node_cur_Toluol_node_c6_prevIsMatched;
                                            node_cur_Toluol_node_c5.isMatched = node_cur_Toluol_node_c5_prevIsMatched;
                                            node_cur_Toluol_node_c3.isMatched = node_cur_Toluol_node_c3_prevIsMatched;
                                            return matches;
                                        }
                                        node_cur_Toluol_node_c6.isMatchedByEnclosingPattern = false;
                                        node_cur_Toluol_node_c5.isMatchedByEnclosingPattern = false;
                                        node_cur_Toluol_node_c4.isMatchedByEnclosingPattern = false;
                                        node_cur_Toluol_node_c3.isMatchedByEnclosingPattern = false;
                                        node_cur_Toluol_node_c2.isMatchedByEnclosingPattern = false;
                                        node_cur_Toluol_node_c1.isMatchedByEnclosingPattern = false;
                                        continue;
                                    }
                                    node_cur_Toluol_node_c1.isMatchedByEnclosingPattern = false;
                                    node_cur_Toluol_node_c2.isMatchedByEnclosingPattern = false;
                                    node_cur_Toluol_node_c3.isMatchedByEnclosingPattern = false;
                                    node_cur_Toluol_node_c4.isMatchedByEnclosingPattern = false;
                                    node_cur_Toluol_node_c5.isMatchedByEnclosingPattern = false;
                                    node_cur_Toluol_node_c6.isMatchedByEnclosingPattern = false;
                                }
                                node_cur_Toluol_node_c2.isMatched = node_cur_Toluol_node_c2_prevIsMatched;
                            }
                            node_cur_Toluol_node_c4.isMatched = node_cur_Toluol_node_c4_prevIsMatched;
                        }
                        node_cur_Toluol_node_c6.isMatched = node_cur_Toluol_node_c6_prevIsMatched;
                    }
                    node_cur_Toluol_node_c5.isMatched = node_cur_Toluol_node_c5_prevIsMatched;
                }
                node_cur_Toluol_node_c3.isMatched = node_cur_Toluol_node_c3_prevIsMatched;
            }
            return matches;
        }
    }

    public class Action_ToluolCore : LGSPAction
    {
        public Action_ToluolCore() {
            rulePattern = Rule_ToluolCore.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 1, 0, 2);
        }

        public override string Name { get { return "ToluolCore"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_ToluolCore instance = new Action_ToluolCore();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            Stack<LGSPSubpatternAction> openTasks = new Stack<LGSPSubpatternAction>();
            List<Stack<LGSPMatch>> foundPartialMatches = new List<Stack<LGSPMatch>>();
            List<Stack<LGSPMatch>> matchesList = foundPartialMatches;
            int node_type_id_ToluolCore_node_c1 = 1;
            for(LGSPNode node_head_ToluolCore_node_c1 = graph.nodesByTypeHeads[node_type_id_ToluolCore_node_c1], node_cur_ToluolCore_node_c1 = node_head_ToluolCore_node_c1.typeNext; node_cur_ToluolCore_node_c1 != node_head_ToluolCore_node_c1; node_cur_ToluolCore_node_c1 = node_cur_ToluolCore_node_c1.typeNext)
            {
                PatternAction_Methyl taskFor__subpattern1 = new PatternAction_Methyl(graph, openTasks);
                taskFor__subpattern1.Methyl_node_anchor = node_cur_ToluolCore_node_c1;
                openTasks.Push(taskFor__subpattern1);
                PatternAction_BenzolRingC1Exposed taskFor__subpattern0 = new PatternAction_BenzolRingC1Exposed(graph, openTasks);
                taskFor__subpattern0.BenzolRingC1Exposed_node_c1 = node_cur_ToluolCore_node_c1;
                openTasks.Push(taskFor__subpattern0);
                node_cur_ToluolCore_node_c1.isMatchedByEnclosingPattern = true;
                openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count);
                openTasks.Pop();
                openTasks.Pop();
                if(matchesList.Count>0) {
                    foreach(Stack<LGSPMatch> currentFoundPartialMatch in matchesList)
                    {
                        LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
                        match.patternGraph = rulePattern.patternGraph;
                        match.Nodes[(int)Rule_ToluolCore.ToluolCore_NodeNums.@c1] = node_cur_ToluolCore_node_c1;
                        match.EmbeddedGraphs[(int)Rule_ToluolCore.ToluolCore_SubNums.@_subpattern0] = currentFoundPartialMatch.Pop();
                        match.EmbeddedGraphs[(int)Rule_ToluolCore.ToluolCore_SubNums.@_subpattern1] = currentFoundPartialMatch.Pop();
                        matches.matchesList.PositionWasFilledFixIt();
                    }
                    matchesList.Clear();
                    if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
                    {
                        node_cur_ToluolCore_node_c1.isMatchedByEnclosingPattern = false;
                        return matches;
                    }
                    node_cur_ToluolCore_node_c1.isMatchedByEnclosingPattern = false;
                    continue;
                }
                node_cur_ToluolCore_node_c1.isMatchedByEnclosingPattern = false;
            }
            return matches;
        }
    }

    public class Action_createDNT : LGSPAction
    {
        public Action_createDNT() {
            rulePattern = Rule_createDNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 0, 0, 0);
        }

        public override string Name { get { return "createDNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createDNT instance = new Action_createDNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_createTNB : LGSPAction
    {
        public Action_createTNB() {
            rulePattern = Rule_createTNB.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 0, 0, 0);
        }

        public override string Name { get { return "createTNB"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createTNB instance = new Action_createTNB();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }

    public class Action_createTNT : LGSPAction
    {
        public Action_createTNT() {
            rulePattern = Rule_createTNT.Instance;
            patternGraph = rulePattern.patternGraph;
            DynamicMatch = myMatch; matches = new LGSPMatches(this, 0, 0, 0);
        }

        public override string Name { get { return "createTNT"; } }
        private LGSPMatches matches;

        public static LGSPAction Instance { get { return instance; } }
        private static Action_createTNT instance = new Action_createTNT();

        public LGSPMatches myMatch(LGSPGraph graph, int maxMatches, IGraphElement[] parameters)
        {
            matches.matchesList.Clear();
            LGSPMatch match = matches.matchesList.GetNextUnfilledPosition();
            match.patternGraph = rulePattern.patternGraph;
            matches.matchesList.PositionWasFilledFixIt();
            if(maxMatches > 0 && matches.matchesList.Count >= maxMatches)
            {
                return matches;
            }
            return matches;
        }
    }


    public class TNTActions : LGSPActions
    {
        public TNTActions(LGSPGraph lgspgraph, IDumperFactory dumperfactory, String modelAsmName, String actionsAsmName)
            : base(lgspgraph, dumperfactory, modelAsmName, actionsAsmName)
        {
            InitActions();
        }

        public TNTActions(LGSPGraph lgspgraph)
            : base(lgspgraph)
        {
            InitActions();
        }

        private void InitActions()
        {
            actions.Add("BenzolRing", (LGSPAction) Action_BenzolRing.Instance);
            actions.Add("DNT", (LGSPAction) Action_DNT.Instance);
            actions.Add("DNTUnfolded", (LGSPAction) Action_DNTUnfolded.Instance);
            actions.Add("TNB", (LGSPAction) Action_TNB.Instance);
            actions.Add("TNBUnfolded", (LGSPAction) Action_TNBUnfolded.Instance);
            actions.Add("TNT", (LGSPAction) Action_TNT.Instance);
            actions.Add("TNTChain", (LGSPAction) Action_TNTChain.Instance);
            actions.Add("TNTTotallyFolded", (LGSPAction) Action_TNTTotallyFolded.Instance);
            actions.Add("TNTUnfolded", (LGSPAction) Action_TNTUnfolded.Instance);
            actions.Add("Toluol", (LGSPAction) Action_Toluol.Instance);
            actions.Add("ToluolCore", (LGSPAction) Action_ToluolCore.Instance);
            actions.Add("createDNT", (LGSPAction) Action_createDNT.Instance);
            actions.Add("createTNB", (LGSPAction) Action_createTNB.Instance);
            actions.Add("createTNT", (LGSPAction) Action_createTNT.Instance);
        }

        public override String Name { get { return "TNTActions"; } }
        public override String ModelMD5Hash { get { return "b3154fd7520f415d5f335e9dae2cdf16"; } }
    }
}