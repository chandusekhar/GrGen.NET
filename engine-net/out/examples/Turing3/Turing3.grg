actions Turing3 using Turing3Model;

rule readZeroRule(s:State, bp:BandPosition) : (WriteValue) {
	pattern {
		bp;
		s -rv:readZero-> wv:WriteValue;
		if{bp.value == 0;}
	}
	modify {
		eval {
			bp.value = wv.value;
		}
		return(wv);
	}
}

rule readOneRule(s:State, bp:BandPosition) : (WriteValue) {
	pattern {
		s -rv:readOne-> wv:WriteValue;
		if{bp.value == 1;}
	}
	modify {
		eval {
			bp.value = wv.value;
		}
		return (wv);
	}
}

rule ensureMoveLeftValidRule(wv:WriteValue, bp:BandPosition) {
	pattern {
		wv -:moveLeft-> :State;
		negative {
			bp <-:right- :BandPosition;
		}
	}
	modify {
		bp <-:right- :BandPosition;
	}
}

rule ensureMoveRightValidRule(wv:WriteValue, bp:BandPosition) {
	pattern {
		wv -:moveRight-> :State;
		negative {
			bp -:right-> :BandPosition;
		}
	}
	modify {
		bp -:right-> :BandPosition;
	}
}

rule moveLeftRule(wv:WriteValue, bp:BandPosition) : (State, BandPosition) {
	pattern {
		wv -:moveLeft-> s:State;
		bp <-:right- lbp:BandPosition;
	}
	modify {
		return (s, lbp);
	}
}

rule moveRightRule(wv:WriteValue, bp:BandPosition) : (State, BandPosition) {
	pattern {
		wv -:moveRight-> s:State;
		bp -:right-> rbp:BandPosition;
	}
	modify {
		return (s, rbp);
	}
}
